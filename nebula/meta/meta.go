// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package meta

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/vesoft-inc/nebula-go/v3/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = nebula.GoUnusedProtection__
type AlterSchemaOp int64
const (
  AlterSchemaOp_ADD AlterSchemaOp = 1
  AlterSchemaOp_CHANGE AlterSchemaOp = 2
  AlterSchemaOp_DROP AlterSchemaOp = 3
  AlterSchemaOp_UNKNOWN AlterSchemaOp = 4
)

func (p AlterSchemaOp) String() string {
  switch p {
  case AlterSchemaOp_ADD: return "ADD"
  case AlterSchemaOp_CHANGE: return "CHANGE"
  case AlterSchemaOp_DROP: return "DROP"
  case AlterSchemaOp_UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func AlterSchemaOpFromString(s string) (AlterSchemaOp, error) {
  switch s {
  case "ADD": return AlterSchemaOp_ADD, nil 
  case "CHANGE": return AlterSchemaOp_CHANGE, nil 
  case "DROP": return AlterSchemaOp_DROP, nil 
  case "UNKNOWN": return AlterSchemaOp_UNKNOWN, nil 
  }
  return AlterSchemaOp(0), fmt.Errorf("not a valid AlterSchemaOp string")
}


func AlterSchemaOpPtr(v AlterSchemaOp) *AlterSchemaOp { return &v }

func (p AlterSchemaOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AlterSchemaOp) UnmarshalText(text []byte) error {
q, err := AlterSchemaOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AlterSchemaOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AlterSchemaOp(v)
return nil
}

func (p * AlterSchemaOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RoleType int64
const (
  RoleType_GOD RoleType = 1
  RoleType_ADMIN RoleType = 2
  RoleType_DBA RoleType = 3
  RoleType_USER RoleType = 4
  RoleType_GUEST RoleType = 5
)

func (p RoleType) String() string {
  switch p {
  case RoleType_GOD: return "GOD"
  case RoleType_ADMIN: return "ADMIN"
  case RoleType_DBA: return "DBA"
  case RoleType_USER: return "USER"
  case RoleType_GUEST: return "GUEST"
  }
  return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
  switch s {
  case "GOD": return RoleType_GOD, nil 
  case "ADMIN": return RoleType_ADMIN, nil 
  case "DBA": return RoleType_DBA, nil 
  case "USER": return RoleType_USER, nil 
  case "GUEST": return RoleType_GUEST, nil 
  }
  return RoleType(0), fmt.Errorf("not a valid RoleType string")
}


func RoleTypePtr(v RoleType) *RoleType { return &v }

func (p RoleType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RoleType) UnmarshalText(text []byte) error {
q, err := RoleTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RoleType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RoleType(v)
return nil
}

func (p * RoleType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GeoShape int64
const (
  GeoShape_ANY GeoShape = 0
  GeoShape_POINT GeoShape = 1
  GeoShape_LINESTRING GeoShape = 2
  GeoShape_POLYGON GeoShape = 3
)

func (p GeoShape) String() string {
  switch p {
  case GeoShape_ANY: return "ANY"
  case GeoShape_POINT: return "POINT"
  case GeoShape_LINESTRING: return "LINESTRING"
  case GeoShape_POLYGON: return "POLYGON"
  }
  return "<UNSET>"
}

func GeoShapeFromString(s string) (GeoShape, error) {
  switch s {
  case "ANY": return GeoShape_ANY, nil 
  case "POINT": return GeoShape_POINT, nil 
  case "LINESTRING": return GeoShape_LINESTRING, nil 
  case "POLYGON": return GeoShape_POLYGON, nil 
  }
  return GeoShape(0), fmt.Errorf("not a valid GeoShape string")
}


func GeoShapePtr(v GeoShape) *GeoShape { return &v }

func (p GeoShape) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GeoShape) UnmarshalText(text []byte) error {
q, err := GeoShapeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GeoShape) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GeoShape(v)
return nil
}

func (p * GeoShape) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IsolationLevel int64
const (
  IsolationLevel_DEFAULT IsolationLevel = 0
  IsolationLevel_TOSS IsolationLevel = 1
)

func (p IsolationLevel) String() string {
  switch p {
  case IsolationLevel_DEFAULT: return "DEFAULT"
  case IsolationLevel_TOSS: return "TOSS"
  }
  return "<UNSET>"
}

func IsolationLevelFromString(s string) (IsolationLevel, error) {
  switch s {
  case "DEFAULT": return IsolationLevel_DEFAULT, nil 
  case "TOSS": return IsolationLevel_TOSS, nil 
  }
  return IsolationLevel(0), fmt.Errorf("not a valid IsolationLevel string")
}


func IsolationLevelPtr(v IsolationLevel) *IsolationLevel { return &v }

func (p IsolationLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IsolationLevel) UnmarshalText(text []byte) error {
q, err := IsolationLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IsolationLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IsolationLevel(v)
return nil
}

func (p * IsolationLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type HostStatus int64
const (
  HostStatus_ONLINE HostStatus = 0
  HostStatus_OFFLINE HostStatus = 1
  HostStatus_UNKNOWN HostStatus = 2
)

func (p HostStatus) String() string {
  switch p {
  case HostStatus_ONLINE: return "ONLINE"
  case HostStatus_OFFLINE: return "OFFLINE"
  case HostStatus_UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func HostStatusFromString(s string) (HostStatus, error) {
  switch s {
  case "ONLINE": return HostStatus_ONLINE, nil 
  case "OFFLINE": return HostStatus_OFFLINE, nil 
  case "UNKNOWN": return HostStatus_UNKNOWN, nil 
  }
  return HostStatus(0), fmt.Errorf("not a valid HostStatus string")
}


func HostStatusPtr(v HostStatus) *HostStatus { return &v }

func (p HostStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HostStatus) UnmarshalText(text []byte) error {
q, err := HostStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HostStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HostStatus(v)
return nil
}

func (p * HostStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SnapshotStatus int64
const (
  SnapshotStatus_VALID SnapshotStatus = 0
  SnapshotStatus_INVALID SnapshotStatus = 1
)

func (p SnapshotStatus) String() string {
  switch p {
  case SnapshotStatus_VALID: return "VALID"
  case SnapshotStatus_INVALID: return "INVALID"
  }
  return "<UNSET>"
}

func SnapshotStatusFromString(s string) (SnapshotStatus, error) {
  switch s {
  case "VALID": return SnapshotStatus_VALID, nil 
  case "INVALID": return SnapshotStatus_INVALID, nil 
  }
  return SnapshotStatus(0), fmt.Errorf("not a valid SnapshotStatus string")
}


func SnapshotStatusPtr(v SnapshotStatus) *SnapshotStatus { return &v }

func (p SnapshotStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SnapshotStatus) UnmarshalText(text []byte) error {
q, err := SnapshotStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SnapshotStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SnapshotStatus(v)
return nil
}

func (p * SnapshotStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AlterSpaceOp int64
const (
  AlterSpaceOp_ADD_ZONE AlterSpaceOp = 1
)

func (p AlterSpaceOp) String() string {
  switch p {
  case AlterSpaceOp_ADD_ZONE: return "ADD_ZONE"
  }
  return "<UNSET>"
}

func AlterSpaceOpFromString(s string) (AlterSpaceOp, error) {
  switch s {
  case "ADD_ZONE": return AlterSpaceOp_ADD_ZONE, nil 
  }
  return AlterSpaceOp(0), fmt.Errorf("not a valid AlterSpaceOp string")
}


func AlterSpaceOpPtr(v AlterSpaceOp) *AlterSpaceOp { return &v }

func (p AlterSpaceOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AlterSpaceOp) UnmarshalText(text []byte) error {
q, err := AlterSpaceOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AlterSpaceOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AlterSpaceOp(v)
return nil
}

func (p * AlterSpaceOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type JobOp int64
const (
  JobOp_ADD JobOp = 1
  JobOp_SHOW_All JobOp = 2
  JobOp_SHOW JobOp = 3
  JobOp_STOP JobOp = 4
  JobOp_RECOVER JobOp = 5
)

func (p JobOp) String() string {
  switch p {
  case JobOp_ADD: return "ADD"
  case JobOp_SHOW_All: return "SHOW_All"
  case JobOp_SHOW: return "SHOW"
  case JobOp_STOP: return "STOP"
  case JobOp_RECOVER: return "RECOVER"
  }
  return "<UNSET>"
}

func JobOpFromString(s string) (JobOp, error) {
  switch s {
  case "ADD": return JobOp_ADD, nil 
  case "SHOW_All": return JobOp_SHOW_All, nil 
  case "SHOW": return JobOp_SHOW, nil 
  case "STOP": return JobOp_STOP, nil 
  case "RECOVER": return JobOp_RECOVER, nil 
  }
  return JobOp(0), fmt.Errorf("not a valid JobOp string")
}


func JobOpPtr(v JobOp) *JobOp { return &v }

func (p JobOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobOp) UnmarshalText(text []byte) error {
q, err := JobOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobOp(v)
return nil
}

func (p * JobOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type JobType int64
const (
  JobType_COMPACT JobType = 0
  JobType_FLUSH JobType = 1
  JobType_REBUILD_TAG_INDEX JobType = 2
  JobType_REBUILD_EDGE_INDEX JobType = 3
  JobType_REBUILD_FULLTEXT_INDEX JobType = 4
  JobType_STATS JobType = 5
  JobType_DATA_BALANCE JobType = 6
  JobType_DOWNLOAD JobType = 7
  JobType_INGEST JobType = 8
  JobType_LEADER_BALANCE JobType = 9
  JobType_ZONE_BALANCE JobType = 10
  JobType_UNKNOWN JobType = 99
)

func (p JobType) String() string {
  switch p {
  case JobType_COMPACT: return "COMPACT"
  case JobType_FLUSH: return "FLUSH"
  case JobType_REBUILD_TAG_INDEX: return "REBUILD_TAG_INDEX"
  case JobType_REBUILD_EDGE_INDEX: return "REBUILD_EDGE_INDEX"
  case JobType_REBUILD_FULLTEXT_INDEX: return "REBUILD_FULLTEXT_INDEX"
  case JobType_STATS: return "STATS"
  case JobType_DATA_BALANCE: return "DATA_BALANCE"
  case JobType_DOWNLOAD: return "DOWNLOAD"
  case JobType_INGEST: return "INGEST"
  case JobType_LEADER_BALANCE: return "LEADER_BALANCE"
  case JobType_ZONE_BALANCE: return "ZONE_BALANCE"
  case JobType_UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
  switch s {
  case "COMPACT": return JobType_COMPACT, nil 
  case "FLUSH": return JobType_FLUSH, nil 
  case "REBUILD_TAG_INDEX": return JobType_REBUILD_TAG_INDEX, nil 
  case "REBUILD_EDGE_INDEX": return JobType_REBUILD_EDGE_INDEX, nil 
  case "REBUILD_FULLTEXT_INDEX": return JobType_REBUILD_FULLTEXT_INDEX, nil 
  case "STATS": return JobType_STATS, nil 
  case "DATA_BALANCE": return JobType_DATA_BALANCE, nil 
  case "DOWNLOAD": return JobType_DOWNLOAD, nil 
  case "INGEST": return JobType_INGEST, nil 
  case "LEADER_BALANCE": return JobType_LEADER_BALANCE, nil 
  case "ZONE_BALANCE": return JobType_ZONE_BALANCE, nil 
  case "UNKNOWN": return JobType_UNKNOWN, nil 
  }
  return JobType(0), fmt.Errorf("not a valid JobType string")
}


func JobTypePtr(v JobType) *JobType { return &v }

func (p JobType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobType) UnmarshalText(text []byte) error {
q, err := JobTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobType(v)
return nil
}

func (p * JobType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type JobStatus int64
const (
  JobStatus_QUEUE JobStatus = 1
  JobStatus_RUNNING JobStatus = 2
  JobStatus_FINISHED JobStatus = 3
  JobStatus_FAILED JobStatus = 4
  JobStatus_STOPPED JobStatus = 5
  JobStatus_INVALID JobStatus = 255
)

func (p JobStatus) String() string {
  switch p {
  case JobStatus_QUEUE: return "QUEUE"
  case JobStatus_RUNNING: return "RUNNING"
  case JobStatus_FINISHED: return "FINISHED"
  case JobStatus_FAILED: return "FAILED"
  case JobStatus_STOPPED: return "STOPPED"
  case JobStatus_INVALID: return "INVALID"
  }
  return "<UNSET>"
}

func JobStatusFromString(s string) (JobStatus, error) {
  switch s {
  case "QUEUE": return JobStatus_QUEUE, nil 
  case "RUNNING": return JobStatus_RUNNING, nil 
  case "FINISHED": return JobStatus_FINISHED, nil 
  case "FAILED": return JobStatus_FAILED, nil 
  case "STOPPED": return JobStatus_STOPPED, nil 
  case "INVALID": return JobStatus_INVALID, nil 
  }
  return JobStatus(0), fmt.Errorf("not a valid JobStatus string")
}


func JobStatusPtr(v JobStatus) *JobStatus { return &v }

func (p JobStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobStatus) UnmarshalText(text []byte) error {
q, err := JobStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobStatus(v)
return nil
}

func (p * JobStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ListHostType int64
const (
  ListHostType_ALLOC ListHostType = 0
  ListHostType_GRAPH ListHostType = 1
  ListHostType_META ListHostType = 2
  ListHostType_STORAGE ListHostType = 3
  ListHostType_AGENT ListHostType = 4
  ListHostType_STORAGE_LISTENER ListHostType = 5
)

func (p ListHostType) String() string {
  switch p {
  case ListHostType_ALLOC: return "ALLOC"
  case ListHostType_GRAPH: return "GRAPH"
  case ListHostType_META: return "META"
  case ListHostType_STORAGE: return "STORAGE"
  case ListHostType_AGENT: return "AGENT"
  case ListHostType_STORAGE_LISTENER: return "STORAGE_LISTENER"
  }
  return "<UNSET>"
}

func ListHostTypeFromString(s string) (ListHostType, error) {
  switch s {
  case "ALLOC": return ListHostType_ALLOC, nil 
  case "GRAPH": return ListHostType_GRAPH, nil 
  case "META": return ListHostType_META, nil 
  case "STORAGE": return ListHostType_STORAGE, nil 
  case "AGENT": return ListHostType_AGENT, nil 
  case "STORAGE_LISTENER": return ListHostType_STORAGE_LISTENER, nil 
  }
  return ListHostType(0), fmt.Errorf("not a valid ListHostType string")
}


func ListHostTypePtr(v ListHostType) *ListHostType { return &v }

func (p ListHostType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ListHostType) UnmarshalText(text []byte) error {
q, err := ListHostTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ListHostType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ListHostType(v)
return nil
}

func (p * ListHostType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type HostRole int64
const (
  HostRole_GRAPH HostRole = 0
  HostRole_META HostRole = 1
  HostRole_STORAGE HostRole = 2
  HostRole_STORAGE_LISTENER HostRole = 3
  HostRole_AGENT HostRole = 4
  HostRole_UNKNOWN HostRole = 5
)

func (p HostRole) String() string {
  switch p {
  case HostRole_GRAPH: return "GRAPH"
  case HostRole_META: return "META"
  case HostRole_STORAGE: return "STORAGE"
  case HostRole_STORAGE_LISTENER: return "STORAGE_LISTENER"
  case HostRole_AGENT: return "AGENT"
  case HostRole_UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func HostRoleFromString(s string) (HostRole, error) {
  switch s {
  case "GRAPH": return HostRole_GRAPH, nil 
  case "META": return HostRole_META, nil 
  case "STORAGE": return HostRole_STORAGE, nil 
  case "STORAGE_LISTENER": return HostRole_STORAGE_LISTENER, nil 
  case "AGENT": return HostRole_AGENT, nil 
  case "UNKNOWN": return HostRole_UNKNOWN, nil 
  }
  return HostRole(0), fmt.Errorf("not a valid HostRole string")
}


func HostRolePtr(v HostRole) *HostRole { return &v }

func (p HostRole) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HostRole) UnmarshalText(text []byte) error {
q, err := HostRoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HostRole) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HostRole(v)
return nil
}

func (p * HostRole) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TaskResult_ int64
const (
  TaskResult__SUCCEEDED TaskResult_ = 0
  TaskResult__FAILED TaskResult_ = 1
  TaskResult__IN_PROGRESS TaskResult_ = 2
  TaskResult__INVALID TaskResult_ = 3
)

func (p TaskResult_) String() string {
  switch p {
  case TaskResult__SUCCEEDED: return "SUCCEEDED"
  case TaskResult__FAILED: return "FAILED"
  case TaskResult__IN_PROGRESS: return "IN_PROGRESS"
  case TaskResult__INVALID: return "INVALID"
  }
  return "<UNSET>"
}

func TaskResult_FromString(s string) (TaskResult_, error) {
  switch s {
  case "SUCCEEDED": return TaskResult__SUCCEEDED, nil 
  case "FAILED": return TaskResult__FAILED, nil 
  case "IN_PROGRESS": return TaskResult__IN_PROGRESS, nil 
  case "INVALID": return TaskResult__INVALID, nil 
  }
  return TaskResult_(0), fmt.Errorf("not a valid TaskResult_ string")
}


func TaskResult_Ptr(v TaskResult_) *TaskResult_ { return &v }

func (p TaskResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TaskResult_) UnmarshalText(text []byte) error {
q, err := TaskResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TaskResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TaskResult_(v)
return nil
}

func (p * TaskResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ConfigModule int64
const (
  ConfigModule_UNKNOWN ConfigModule = 0
  ConfigModule_ALL ConfigModule = 1
  ConfigModule_GRAPH ConfigModule = 2
  ConfigModule_META ConfigModule = 3
  ConfigModule_STORAGE ConfigModule = 4
)

func (p ConfigModule) String() string {
  switch p {
  case ConfigModule_UNKNOWN: return "UNKNOWN"
  case ConfigModule_ALL: return "ALL"
  case ConfigModule_GRAPH: return "GRAPH"
  case ConfigModule_META: return "META"
  case ConfigModule_STORAGE: return "STORAGE"
  }
  return "<UNSET>"
}

func ConfigModuleFromString(s string) (ConfigModule, error) {
  switch s {
  case "UNKNOWN": return ConfigModule_UNKNOWN, nil 
  case "ALL": return ConfigModule_ALL, nil 
  case "GRAPH": return ConfigModule_GRAPH, nil 
  case "META": return ConfigModule_META, nil 
  case "STORAGE": return ConfigModule_STORAGE, nil 
  }
  return ConfigModule(0), fmt.Errorf("not a valid ConfigModule string")
}


func ConfigModulePtr(v ConfigModule) *ConfigModule { return &v }

func (p ConfigModule) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConfigModule) UnmarshalText(text []byte) error {
q, err := ConfigModuleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConfigModule) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConfigModule(v)
return nil
}

func (p * ConfigModule) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ConfigMode int64
const (
  ConfigMode_IMMUTABLE ConfigMode = 0
  ConfigMode_REBOOT ConfigMode = 1
  ConfigMode_MUTABLE ConfigMode = 2
  ConfigMode_IGNORED ConfigMode = 3
)

func (p ConfigMode) String() string {
  switch p {
  case ConfigMode_IMMUTABLE: return "IMMUTABLE"
  case ConfigMode_REBOOT: return "REBOOT"
  case ConfigMode_MUTABLE: return "MUTABLE"
  case ConfigMode_IGNORED: return "IGNORED"
  }
  return "<UNSET>"
}

func ConfigModeFromString(s string) (ConfigMode, error) {
  switch s {
  case "IMMUTABLE": return ConfigMode_IMMUTABLE, nil 
  case "REBOOT": return ConfigMode_REBOOT, nil 
  case "MUTABLE": return ConfigMode_MUTABLE, nil 
  case "IGNORED": return ConfigMode_IGNORED, nil 
  }
  return ConfigMode(0), fmt.Errorf("not a valid ConfigMode string")
}


func ConfigModePtr(v ConfigMode) *ConfigMode { return &v }

func (p ConfigMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConfigMode) UnmarshalText(text []byte) error {
q, err := ConfigModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConfigMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConfigMode(v)
return nil
}

func (p * ConfigMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ListenerType int64
const (
  ListenerType_UNKNOWN ListenerType = 0
  ListenerType_ELASTICSEARCH ListenerType = 1
)

func (p ListenerType) String() string {
  switch p {
  case ListenerType_UNKNOWN: return "UNKNOWN"
  case ListenerType_ELASTICSEARCH: return "ELASTICSEARCH"
  }
  return "<UNSET>"
}

func ListenerTypeFromString(s string) (ListenerType, error) {
  switch s {
  case "UNKNOWN": return ListenerType_UNKNOWN, nil 
  case "ELASTICSEARCH": return ListenerType_ELASTICSEARCH, nil 
  }
  return ListenerType(0), fmt.Errorf("not a valid ListenerType string")
}


func ListenerTypePtr(v ListenerType) *ListenerType { return &v }

func (p ListenerType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ListenerType) UnmarshalText(text []byte) error {
q, err := ListenerTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ListenerType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ListenerType(v)
return nil
}

func (p * ListenerType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ExternalServiceType int64
const (
  ExternalServiceType_ELASTICSEARCH ExternalServiceType = 1
)

func (p ExternalServiceType) String() string {
  switch p {
  case ExternalServiceType_ELASTICSEARCH: return "ELASTICSEARCH"
  }
  return "<UNSET>"
}

func ExternalServiceTypeFromString(s string) (ExternalServiceType, error) {
  switch s {
  case "ELASTICSEARCH": return ExternalServiceType_ELASTICSEARCH, nil 
  }
  return ExternalServiceType(0), fmt.Errorf("not a valid ExternalServiceType string")
}


func ExternalServiceTypePtr(v ExternalServiceType) *ExternalServiceType { return &v }

func (p ExternalServiceType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ExternalServiceType) UnmarshalText(text []byte) error {
q, err := ExternalServiceTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ExternalServiceType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ExternalServiceType(v)
return nil
}

func (p * ExternalServiceType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type QueryStatus int64
const (
  QueryStatus_RUNNING QueryStatus = 1
  QueryStatus_KILLING QueryStatus = 2
)

func (p QueryStatus) String() string {
  switch p {
  case QueryStatus_RUNNING: return "RUNNING"
  case QueryStatus_KILLING: return "KILLING"
  }
  return "<UNSET>"
}

func QueryStatusFromString(s string) (QueryStatus, error) {
  switch s {
  case "RUNNING": return QueryStatus_RUNNING, nil 
  case "KILLING": return QueryStatus_KILLING, nil 
  }
  return QueryStatus(0), fmt.Errorf("not a valid QueryStatus string")
}


func QueryStatusPtr(v QueryStatus) *QueryStatus { return &v }

func (p QueryStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *QueryStatus) UnmarshalText(text []byte) error {
q, err := QueryStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *QueryStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = QueryStatus(v)
return nil
}

func (p * QueryStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SchemaVer int64

func SchemaVerPtr(v SchemaVer) *SchemaVer { return &v }

type ClusterID int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

// Attributes:
//  - SpaceID
//  - TagID
//  - EdgeType
//  - IndexID
//  - ClusterID
type ID struct {
  SpaceID *nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id,omitempty"`
  TagID *nebula.TagID `thrift:"tag_id,2" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula.EdgeType `thrift:"edge_type,3" db:"edge_type" json:"edge_type,omitempty"`
  IndexID *nebula.IndexID `thrift:"index_id,4" db:"index_id" json:"index_id,omitempty"`
  ClusterID *ClusterID `thrift:"cluster_id,5" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewID() *ID {
  return &ID{}
}

var ID_SpaceID_DEFAULT nebula.GraphSpaceID
func (p *ID) GetSpaceID() nebula.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return ID_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var ID_TagID_DEFAULT nebula.TagID
func (p *ID) GetTagID() nebula.TagID {
  if !p.IsSetTagID() {
    return ID_TagID_DEFAULT
  }
return *p.TagID
}
var ID_EdgeType_DEFAULT nebula.EdgeType
func (p *ID) GetEdgeType() nebula.EdgeType {
  if !p.IsSetEdgeType() {
    return ID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
var ID_IndexID_DEFAULT nebula.IndexID
func (p *ID) GetIndexID() nebula.IndexID {
  if !p.IsSetIndexID() {
    return ID_IndexID_DEFAULT
  }
return *p.IndexID
}
var ID_ClusterID_DEFAULT ClusterID
func (p *ID) GetClusterID() ClusterID {
  if !p.IsSetClusterID() {
    return ID_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *ID) CountSetFieldsID() int {
  count := 0
  if (p.IsSetSpaceID()) {
    count++
  }
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  if (p.IsSetIndexID()) {
    count++
  }
  if (p.IsSetClusterID()) {
    count++
  }
  return count

}

func (p *ID) IsSetSpaceID() bool {
  return p.SpaceID != nil
}

func (p *ID) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *ID) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *ID) IsSetIndexID() bool {
  return p.IndexID != nil
}

func (p *ID) IsSetClusterID() bool {
  return p.ClusterID != nil
}

func (p *ID) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ID)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = &temp
}
  return nil
}

func (p *ID)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *ID)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula.EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *ID)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula.IndexID(v)
  p.IndexID = &temp
}
  return nil
}

func (p *ID)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = &temp
}
  return nil
}

func (p *ID) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsID(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "ID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ID) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin(ctx, "tag_id", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin(ctx, "edge_type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err) }
  }
  return err
}

func (p *ID) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexID() {
    if err := oprot.WriteFieldBegin(ctx, "index_id", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.IndexID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index_id (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin(ctx, "cluster_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cluster_id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cluster_id: ", p), err) }
  }
  return err
}

func (p *ID) Equals(other *ID) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID {
    if p.SpaceID == nil || other.SpaceID == nil {
      return false
    }
    if (*p.SpaceID) != (*other.SpaceID) { return false }
  }
  if p.TagID != other.TagID {
    if p.TagID == nil || other.TagID == nil {
      return false
    }
    if (*p.TagID) != (*other.TagID) { return false }
  }
  if p.EdgeType != other.EdgeType {
    if p.EdgeType == nil || other.EdgeType == nil {
      return false
    }
    if (*p.EdgeType) != (*other.EdgeType) { return false }
  }
  if p.IndexID != other.IndexID {
    if p.IndexID == nil || other.IndexID == nil {
      return false
    }
    if (*p.IndexID) != (*other.IndexID) { return false }
  }
  if p.ClusterID != other.ClusterID {
    if p.ClusterID == nil || other.ClusterID == nil {
      return false
    }
    if (*p.ClusterID) != (*other.ClusterID) { return false }
  }
  return true
}

func (p *ID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ID(%+v)", *p)
}

func (p *ID) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - TypeLength
//  - GeoShape
type ColumnTypeDef struct {
  Type nebula.PropertyType `thrift:"type,1,required" db:"type" json:"type"`
  TypeLength int16 `thrift:"type_length,2" db:"type_length" json:"type_length"`
  GeoShape *GeoShape `thrift:"geo_shape,3" db:"geo_shape" json:"geo_shape,omitempty"`
}

func NewColumnTypeDef() *ColumnTypeDef {
  return &ColumnTypeDef{}
}


func (p *ColumnTypeDef) GetType() nebula.PropertyType {
  return p.Type
}
var ColumnTypeDef_TypeLength_DEFAULT int16 = 0

func (p *ColumnTypeDef) GetTypeLength() int16 {
  return p.TypeLength
}
var ColumnTypeDef_GeoShape_DEFAULT GeoShape
func (p *ColumnTypeDef) GetGeoShape() GeoShape {
  if !p.IsSetGeoShape() {
    return ColumnTypeDef_GeoShape_DEFAULT
  }
return *p.GeoShape
}
func (p *ColumnTypeDef) IsSetTypeLength() bool {
  return p.TypeLength != ColumnTypeDef_TypeLength_DEFAULT
}

func (p *ColumnTypeDef) IsSetGeoShape() bool {
  return p.GeoShape != nil
}

func (p *ColumnTypeDef) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnTypeDef)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.PropertyType(v)
  p.Type = temp
}
  return nil
}

func (p *ColumnTypeDef)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TypeLength = v
}
  return nil
}

func (p *ColumnTypeDef)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GeoShape(v)
  p.GeoShape = &temp
}
  return nil
}

func (p *ColumnTypeDef) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ColumnTypeDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnTypeDef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ColumnTypeDef) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin(ctx, "type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *ColumnTypeDef) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGeoShape() {
    if err := oprot.WriteFieldBegin(ctx, "geo_shape", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:geo_shape: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.GeoShape)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.geo_shape (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:geo_shape: ", p), err) }
  }
  return err
}

func (p *ColumnTypeDef) Equals(other *ColumnTypeDef) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.TypeLength != other.TypeLength { return false }
  if p.GeoShape != other.GeoShape {
    if p.GeoShape == nil || other.GeoShape == nil {
      return false
    }
    if (*p.GeoShape) != (*other.GeoShape) { return false }
  }
  return true
}

func (p *ColumnTypeDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnTypeDef(%+v)", *p)
}

func (p *ColumnTypeDef) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Type
//  - DefaultValue
//  - Nullable
//  - Comment
type ColumnDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Type *ColumnTypeDef `thrift:"type,2,required" db:"type" json:"type"`
  DefaultValue []byte `thrift:"default_value,3" db:"default_value" json:"default_value,omitempty"`
  Nullable bool `thrift:"nullable,4" db:"nullable" json:"nullable"`
  Comment []byte `thrift:"comment,5" db:"comment" json:"comment,omitempty"`
}

func NewColumnDef() *ColumnDef {
  return &ColumnDef{}
}


func (p *ColumnDef) GetName() []byte {
  return p.Name
}
var ColumnDef_Type_DEFAULT *ColumnTypeDef
func (p *ColumnDef) GetType() *ColumnTypeDef {
  if !p.IsSetType() {
    return ColumnDef_Type_DEFAULT
  }
return p.Type
}
var ColumnDef_DefaultValue_DEFAULT []byte

func (p *ColumnDef) GetDefaultValue() []byte {
  return p.DefaultValue
}
var ColumnDef_Nullable_DEFAULT bool = false

func (p *ColumnDef) GetNullable() bool {
  return p.Nullable
}
var ColumnDef_Comment_DEFAULT []byte

func (p *ColumnDef) GetComment() []byte {
  return p.Comment
}
func (p *ColumnDef) IsSetType() bool {
  return p.Type != nil
}

func (p *ColumnDef) IsSetDefaultValue() bool {
  return p.DefaultValue != nil
}

func (p *ColumnDef) IsSetNullable() bool {
  return p.Nullable != ColumnDef_Nullable_DEFAULT
}

func (p *ColumnDef) IsSetComment() bool {
  return p.Comment != nil
}

func (p *ColumnDef) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnDef)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ColumnDef)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Type = &ColumnTypeDef{}
  if err := p.Type.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ColumnDef)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DefaultValue = v
}
  return nil
}

func (p *ColumnDef)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nullable = v
}
  return nil
}

func (p *ColumnDef)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *ColumnDef) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ColumnDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnDef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ColumnDef) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := p.Type.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ColumnDef) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDefaultValue() {
    if err := oprot.WriteFieldBegin(ctx, "default_value", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:default_value: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.DefaultValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.default_value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:default_value: ", p), err) }
  }
  return err
}

func (p *ColumnDef) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNullable() {
    if err := oprot.WriteFieldBegin(ctx, "nullable", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nullable: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Nullable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nullable (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nullable: ", p), err) }
  }
  return err
}

func (p *ColumnDef) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:comment: ", p), err) }
  }
  return err
}

func (p *ColumnDef) Equals(other *ColumnDef) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if !p.Type.Equals(other.Type) { return false }
  if bytes.Compare(p.DefaultValue, other.DefaultValue) != 0 { return false }
  if p.Nullable != other.Nullable { return false }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  return true
}

func (p *ColumnDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnDef(%+v)", *p)
}

func (p *ColumnDef) Validate() error {
  return nil
}
// Attributes:
//  - TTLDuration
//  - TTLCol
//  - Comment
type SchemaProp struct {
  TTLDuration *int64 `thrift:"ttl_duration,1" db:"ttl_duration" json:"ttl_duration,omitempty"`
  TTLCol []byte `thrift:"ttl_col,2" db:"ttl_col" json:"ttl_col,omitempty"`
  Comment []byte `thrift:"comment,3" db:"comment" json:"comment,omitempty"`
}

func NewSchemaProp() *SchemaProp {
  return &SchemaProp{}
}

var SchemaProp_TTLDuration_DEFAULT int64
func (p *SchemaProp) GetTTLDuration() int64 {
  if !p.IsSetTTLDuration() {
    return SchemaProp_TTLDuration_DEFAULT
  }
return *p.TTLDuration
}
var SchemaProp_TTLCol_DEFAULT []byte

func (p *SchemaProp) GetTTLCol() []byte {
  return p.TTLCol
}
var SchemaProp_Comment_DEFAULT []byte

func (p *SchemaProp) GetComment() []byte {
  return p.Comment
}
func (p *SchemaProp) IsSetTTLDuration() bool {
  return p.TTLDuration != nil
}

func (p *SchemaProp) IsSetTTLCol() bool {
  return p.TTLCol != nil
}

func (p *SchemaProp) IsSetComment() bool {
  return p.Comment != nil
}

func (p *SchemaProp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaProp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TTLDuration = &v
}
  return nil
}

func (p *SchemaProp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TTLCol = v
}
  return nil
}

func (p *SchemaProp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *SchemaProp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SchemaProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaProp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLDuration() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_duration", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ttl_duration: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TTLDuration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_duration (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ttl_duration: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTTLCol() {
    if err := oprot.WriteFieldBegin(ctx, "ttl_col", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_col: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.TTLCol); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_col (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_col: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  }
  return err
}

func (p *SchemaProp) Equals(other *SchemaProp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TTLDuration != other.TTLDuration {
    if p.TTLDuration == nil || other.TTLDuration == nil {
      return false
    }
    if (*p.TTLDuration) != (*other.TTLDuration) { return false }
  }
  if bytes.Compare(p.TTLCol, other.TTLCol) != 0 { return false }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  return true
}

func (p *SchemaProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaProp(%+v)", *p)
}

func (p *SchemaProp) Validate() error {
  return nil
}
// Attributes:
//  - Columns
//  - SchemaProp
type Schema struct {
  Columns []*ColumnDef `thrift:"columns,1" db:"columns" json:"columns"`
  SchemaProp *SchemaProp `thrift:"schema_prop,2" db:"schema_prop" json:"schema_prop"`
}

func NewSchema() *Schema {
  return &Schema{}
}


func (p *Schema) GetColumns() []*ColumnDef {
  return p.Columns
}
var Schema_SchemaProp_DEFAULT *SchemaProp
func (p *Schema) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return Schema_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *Schema) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *Schema) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ColumnDef{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Columns = append(p.Columns, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SchemaProp = &SchemaProp{}
  if err := p.SchemaProp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *Schema) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "columns", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  return err
}

func (p *Schema) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_prop", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_prop: ", p), err) }
  return err
}

func (p *Schema) Equals(other *Schema) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Columns) != len(other.Columns) { return false }
  for i, _tgt := range p.Columns {
    _src1 := other.Columns[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.SchemaProp.Equals(other.SchemaProp) { return false }
  return true
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

func (p *Schema) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Name
type IdName struct {
  ID *ID `thrift:"id,1" db:"id" json:"id"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewIdName() *IdName {
  return &IdName{}
}

var IdName_ID_DEFAULT *ID
func (p *IdName) GetID() *ID {
  if !p.IsSetID() {
    return IdName_ID_DEFAULT
  }
return p.ID
}

func (p *IdName) GetName() []byte {
  return p.Name
}
func (p *IdName) IsSetID() bool {
  return p.ID != nil
}

func (p *IdName) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdName)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &ID{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *IdName)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IdName) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdName) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IdName) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IdName) Equals(other *IdName) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ID.Equals(other.ID) { return false }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  return true
}

func (p *IdName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdName(%+v)", *p)
}

func (p *IdName) Validate() error {
  return nil
}
// Attributes:
//  - SpaceName
//  - PartitionNum
//  - ReplicaFactor
//  - CharsetName
//  - CollateName
//  - VidType
//  - ZoneNames
//  - IsolationLevel
//  - Comment
type SpaceDesc struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  PartitionNum int32 `thrift:"partition_num,2" db:"partition_num" json:"partition_num"`
  ReplicaFactor int32 `thrift:"replica_factor,3" db:"replica_factor" json:"replica_factor"`
  CharsetName []byte `thrift:"charset_name,4" db:"charset_name" json:"charset_name"`
  CollateName []byte `thrift:"collate_name,5" db:"collate_name" json:"collate_name"`
  VidType *ColumnTypeDef `thrift:"vid_type,6" db:"vid_type" json:"vid_type"`
  ZoneNames [][]byte `thrift:"zone_names,7" db:"zone_names" json:"zone_names"`
  IsolationLevel *IsolationLevel `thrift:"isolation_level,8" db:"isolation_level" json:"isolation_level,omitempty"`
  Comment []byte `thrift:"comment,9" db:"comment" json:"comment,omitempty"`
}

func NewSpaceDesc() *SpaceDesc {
  return &SpaceDesc{}
}


func (p *SpaceDesc) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *SpaceDesc) GetPartitionNum() int32 {
  return p.PartitionNum
}

func (p *SpaceDesc) GetReplicaFactor() int32 {
  return p.ReplicaFactor
}

func (p *SpaceDesc) GetCharsetName() []byte {
  return p.CharsetName
}

func (p *SpaceDesc) GetCollateName() []byte {
  return p.CollateName
}
var SpaceDesc_VidType_DEFAULT *ColumnTypeDef = &ColumnTypeDef{
  Type: 7,

  TypeLength: 8,
}
func (p *SpaceDesc) GetVidType() *ColumnTypeDef {
  if !p.IsSetVidType() {
    return SpaceDesc_VidType_DEFAULT
  }
return p.VidType
}

func (p *SpaceDesc) GetZoneNames() [][]byte {
  return p.ZoneNames
}
var SpaceDesc_IsolationLevel_DEFAULT IsolationLevel
func (p *SpaceDesc) GetIsolationLevel() IsolationLevel {
  if !p.IsSetIsolationLevel() {
    return SpaceDesc_IsolationLevel_DEFAULT
  }
return *p.IsolationLevel
}
var SpaceDesc_Comment_DEFAULT []byte

func (p *SpaceDesc) GetComment() []byte {
  return p.Comment
}
func (p *SpaceDesc) IsSetVidType() bool {
  return p.VidType != nil
}

func (p *SpaceDesc) IsSetIsolationLevel() bool {
  return p.IsolationLevel != nil
}

func (p *SpaceDesc) IsSetComment() bool {
  return p.Comment != nil
}

func (p *SpaceDesc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartitionNum = v
}
  return nil
}

func (p *SpaceDesc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReplicaFactor = v
}
  return nil
}

func (p *SpaceDesc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CharsetName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CollateName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.VidType = &ColumnTypeDef{}
  if err := p.VidType.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VidType), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ZoneNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.ZoneNames = append(p.ZoneNames, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := IsolationLevel(v)
  p.IsolationLevel = &temp
}
  return nil
}

func (p *SpaceDesc)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *SpaceDesc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SpaceDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceDesc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_num", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_num: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_num: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "replica_factor", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replica_factor: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReplicaFactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_factor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replica_factor: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "charset_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:charset_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.CharsetName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.charset_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:charset_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "collate_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:collate_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.CollateName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.collate_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:collate_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vid_type", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vid_type: ", p), err) }
  if err := p.VidType.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VidType), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vid_type: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_names", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:zone_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ZoneNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ZoneNames {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:zone_names: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsolationLevel() {
    if err := oprot.WriteFieldBegin(ctx, "isolation_level", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isolation_level: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.IsolationLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isolation_level (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isolation_level: ", p), err) }
  }
  return err
}

func (p *SpaceDesc) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:comment: ", p), err) }
  }
  return err
}

func (p *SpaceDesc) Equals(other *SpaceDesc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if p.PartitionNum != other.PartitionNum { return false }
  if p.ReplicaFactor != other.ReplicaFactor { return false }
  if bytes.Compare(p.CharsetName, other.CharsetName) != 0 { return false }
  if bytes.Compare(p.CollateName, other.CollateName) != 0 { return false }
  if !p.VidType.Equals(other.VidType) { return false }
  if len(p.ZoneNames) != len(other.ZoneNames) { return false }
  for i, _tgt := range p.ZoneNames {
    _src3 := other.ZoneNames[i]
    if bytes.Compare(_tgt, _src3) != 0 { return false }
  }
  if p.IsolationLevel != other.IsolationLevel {
    if p.IsolationLevel == nil || other.IsolationLevel == nil {
      return false
    }
    if (*p.IsolationLevel) != (*other.IsolationLevel) { return false }
  }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  return true
}

func (p *SpaceDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceDesc(%+v)", *p)
}

func (p *SpaceDesc) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Properties
type SpaceItem struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Properties *SpaceDesc `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSpaceItem() *SpaceItem {
  return &SpaceItem{}
}


func (p *SpaceItem) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
var SpaceItem_Properties_DEFAULT *SpaceDesc
func (p *SpaceItem) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return SpaceItem_Properties_DEFAULT
  }
return p.Properties
}
func (p *SpaceItem) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *SpaceItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *SpaceItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Properties = &SpaceDesc{}
  if err := p.Properties.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *SpaceItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SpaceItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *SpaceItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "properties", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := p.Properties.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *SpaceItem) Equals(other *SpaceItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if !p.Properties.Equals(other.Properties) { return false }
  return true
}

func (p *SpaceItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceItem(%+v)", *p)
}

func (p *SpaceItem) Validate() error {
  return nil
}
// Attributes:
//  - TagID
//  - TagName
//  - Version
//  - Schema
type TagItem struct {
  TagID nebula.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewTagItem() *TagItem {
  return &TagItem{}
}


func (p *TagItem) GetTagID() nebula.TagID {
  return p.TagID
}

func (p *TagItem) GetTagName() []byte {
  return p.TagName
}

func (p *TagItem) GetVersion() SchemaVer {
  return p.Version
}
var TagItem_Schema_DEFAULT *Schema
func (p *TagItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return TagItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *TagItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *TagItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *TagItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *TagItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *TagItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *TagItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TagItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *TagItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *TagItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *TagItem) Equals(other *TagItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TagID != other.TagID { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if p.Version != other.Version { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  return true
}

func (p *TagItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagItem(%+v)", *p)
}

func (p *TagItem) Validate() error {
  return nil
}
// Attributes:
//  - Op
//  - Schema
type AlterSchemaItem struct {
  Op AlterSchemaOp `thrift:"op,1" db:"op" json:"op"`
  Schema *Schema `thrift:"schema,2" db:"schema" json:"schema"`
}

func NewAlterSchemaItem() *AlterSchemaItem {
  return &AlterSchemaItem{}
}


func (p *AlterSchemaItem) GetOp() AlterSchemaOp {
  return p.Op
}
var AlterSchemaItem_Schema_DEFAULT *Schema
func (p *AlterSchemaItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return AlterSchemaItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *AlterSchemaItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *AlterSchemaItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSchemaItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AlterSchemaOp(v)
  p.Op = temp
}
  return nil
}

func (p *AlterSchemaItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *AlterSchemaItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlterSchemaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSchemaItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err) }
  return err
}

func (p *AlterSchemaItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  return err
}

func (p *AlterSchemaItem) Equals(other *AlterSchemaItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Op != other.Op { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  return true
}

func (p *AlterSchemaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterSchemaItem(%+v)", *p)
}

func (p *AlterSchemaItem) Validate() error {
  return nil
}
// Attributes:
//  - EdgeType
//  - EdgeName
//  - Version
//  - Schema
type EdgeItem struct {
  EdgeType nebula.EdgeType `thrift:"edge_type,1" db:"edge_type" json:"edge_type"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewEdgeItem() *EdgeItem {
  return &EdgeItem{}
}


func (p *EdgeItem) GetEdgeType() nebula.EdgeType {
  return p.EdgeType
}

func (p *EdgeItem) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *EdgeItem) GetVersion() SchemaVer {
  return p.Version
}
var EdgeItem_Schema_DEFAULT *Schema
func (p *EdgeItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return EdgeItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *EdgeItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *EdgeItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgeItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *EdgeItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *EdgeItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *EdgeItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EdgeItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_type: ", p), err) }
  return err
}

func (p *EdgeItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *EdgeItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *EdgeItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *EdgeItem) Equals(other *EdgeItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EdgeType != other.EdgeType { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if p.Version != other.Version { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  return true
}

func (p *EdgeItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeItem(%+v)", *p)
}

func (p *EdgeItem) Validate() error {
  return nil
}
// Attributes:
//  - S2MaxLevel
//  - S2MaxCells
type IndexParams struct {
  S2MaxLevel *int32 `thrift:"s2_max_level,1" db:"s2_max_level" json:"s2_max_level,omitempty"`
  S2MaxCells *int32 `thrift:"s2_max_cells,2" db:"s2_max_cells" json:"s2_max_cells,omitempty"`
}

func NewIndexParams() *IndexParams {
  return &IndexParams{}
}

var IndexParams_S2MaxLevel_DEFAULT int32
func (p *IndexParams) GetS2MaxLevel() int32 {
  if !p.IsSetS2MaxLevel() {
    return IndexParams_S2MaxLevel_DEFAULT
  }
return *p.S2MaxLevel
}
var IndexParams_S2MaxCells_DEFAULT int32
func (p *IndexParams) GetS2MaxCells() int32 {
  if !p.IsSetS2MaxCells() {
    return IndexParams_S2MaxCells_DEFAULT
  }
return *p.S2MaxCells
}
func (p *IndexParams) IsSetS2MaxLevel() bool {
  return p.S2MaxLevel != nil
}

func (p *IndexParams) IsSetS2MaxCells() bool {
  return p.S2MaxCells != nil
}

func (p *IndexParams) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexParams)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.S2MaxLevel = &v
}
  return nil
}

func (p *IndexParams)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.S2MaxCells = &v
}
  return nil
}

func (p *IndexParams) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexParams) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetS2MaxLevel() {
    if err := oprot.WriteFieldBegin(ctx, "s2_max_level", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s2_max_level: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.S2MaxLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.s2_max_level (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s2_max_level: ", p), err) }
  }
  return err
}

func (p *IndexParams) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetS2MaxCells() {
    if err := oprot.WriteFieldBegin(ctx, "s2_max_cells", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s2_max_cells: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.S2MaxCells)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.s2_max_cells (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s2_max_cells: ", p), err) }
  }
  return err
}

func (p *IndexParams) Equals(other *IndexParams) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.S2MaxLevel != other.S2MaxLevel {
    if p.S2MaxLevel == nil || other.S2MaxLevel == nil {
      return false
    }
    if (*p.S2MaxLevel) != (*other.S2MaxLevel) { return false }
  }
  if p.S2MaxCells != other.S2MaxCells {
    if p.S2MaxCells == nil || other.S2MaxCells == nil {
      return false
    }
    if (*p.S2MaxCells) != (*other.S2MaxCells) { return false }
  }
  return true
}

func (p *IndexParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexParams(%+v)", *p)
}

func (p *IndexParams) Validate() error {
  return nil
}
// Attributes:
//  - IndexID
//  - IndexName
//  - SchemaID
//  - SchemaName
//  - Fields
//  - Comment
//  - IndexParams
type IndexItem struct {
  IndexID nebula.IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  SchemaID *nebula.SchemaID `thrift:"schema_id,3" db:"schema_id" json:"schema_id"`
  SchemaName []byte `thrift:"schema_name,4" db:"schema_name" json:"schema_name"`
  Fields []*ColumnDef `thrift:"fields,5" db:"fields" json:"fields"`
  Comment []byte `thrift:"comment,6" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7" db:"index_params" json:"index_params,omitempty"`
}

func NewIndexItem() *IndexItem {
  return &IndexItem{}
}


func (p *IndexItem) GetIndexID() nebula.IndexID {
  return p.IndexID
}

func (p *IndexItem) GetIndexName() []byte {
  return p.IndexName
}
var IndexItem_SchemaID_DEFAULT *nebula.SchemaID
func (p *IndexItem) GetSchemaID() *nebula.SchemaID {
  if !p.IsSetSchemaID() {
    return IndexItem_SchemaID_DEFAULT
  }
return p.SchemaID
}

func (p *IndexItem) GetSchemaName() []byte {
  return p.SchemaName
}

func (p *IndexItem) GetFields() []*ColumnDef {
  return p.Fields
}
var IndexItem_Comment_DEFAULT []byte

func (p *IndexItem) GetComment() []byte {
  return p.Comment
}
var IndexItem_IndexParams_DEFAULT *IndexParams
func (p *IndexItem) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return IndexItem_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *IndexItem) IsSetSchemaID() bool {
  return p.SchemaID != nil
}

func (p *IndexItem) IsSetComment() bool {
  return p.Comment != nil
}

func (p *IndexItem) IsSetIndexParams() bool {
  return p.IndexParams != nil
}

func (p *IndexItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *IndexItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *IndexItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SchemaID = &nebula.SchemaID{}
  if err := p.SchemaID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SchemaName = v
}
  return nil
}

func (p *IndexItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &ColumnDef{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Fields = append(p.Fields, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexItem)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *IndexItem)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexParams = &IndexParams{}
  if err := p.IndexParams.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *IndexItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema_id: ", p), err) }
  if err := p.SchemaID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SchemaName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schema_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fields: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fields: ", p), err) }
  return err
}

func (p *IndexItem) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *IndexItem) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin(ctx, "index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *IndexItem) Equals(other *IndexItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IndexID != other.IndexID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  if !p.SchemaID.Equals(other.SchemaID) { return false }
  if bytes.Compare(p.SchemaName, other.SchemaName) != 0 { return false }
  if len(p.Fields) != len(other.Fields) { return false }
  for i, _tgt := range p.Fields {
    _src5 := other.Fields[i]
    if !_tgt.Equals(_src5) { return false }
  }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  if !p.IndexParams.Equals(other.IndexParams) { return false }
  return true
}

func (p *IndexItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexItem(%+v)", *p)
}

func (p *IndexItem) Validate() error {
  return nil
}
// Attributes:
//  - HostAddr
//  - Status
//  - LeaderParts
//  - AllParts
//  - Role
//  - GitInfoSha
//  - ZoneName
//  - Version
type HostItem struct {
  HostAddr *nebula.HostAddr `thrift:"hostAddr,1" db:"hostAddr" json:"hostAddr"`
  Status HostStatus `thrift:"status,2" db:"status" json:"status"`
  LeaderParts map[string][]nebula.PartitionID `thrift:"leader_parts,3" db:"leader_parts" json:"leader_parts"`
  AllParts map[string][]nebula.PartitionID `thrift:"all_parts,4" db:"all_parts" json:"all_parts"`
  Role HostRole `thrift:"role,5" db:"role" json:"role"`
  GitInfoSha []byte `thrift:"git_info_sha,6" db:"git_info_sha" json:"git_info_sha"`
  ZoneName []byte `thrift:"zone_name,7" db:"zone_name" json:"zone_name,omitempty"`
  Version []byte `thrift:"version,8" db:"version" json:"version,omitempty"`
}

func NewHostItem() *HostItem {
  return &HostItem{}
}

var HostItem_HostAddr_DEFAULT *nebula.HostAddr
func (p *HostItem) GetHostAddr() *nebula.HostAddr {
  if !p.IsSetHostAddr() {
    return HostItem_HostAddr_DEFAULT
  }
return p.HostAddr
}

func (p *HostItem) GetStatus() HostStatus {
  return p.Status
}

func (p *HostItem) GetLeaderParts() map[string][]nebula.PartitionID {
  return p.LeaderParts
}

func (p *HostItem) GetAllParts() map[string][]nebula.PartitionID {
  return p.AllParts
}

func (p *HostItem) GetRole() HostRole {
  return p.Role
}

func (p *HostItem) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var HostItem_ZoneName_DEFAULT []byte

func (p *HostItem) GetZoneName() []byte {
  return p.ZoneName
}
var HostItem_Version_DEFAULT []byte

func (p *HostItem) GetVersion() []byte {
  return p.Version
}
func (p *HostItem) IsSetHostAddr() bool {
  return p.HostAddr != nil
}

func (p *HostItem) IsSetZoneName() bool {
  return p.ZoneName != nil
}

func (p *HostItem) IsSetVersion() bool {
  return p.Version != nil
}

func (p *HostItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.HostAddr = &nebula.HostAddr{}
  if err := p.HostAddr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostAddr), err)
  }
  return nil
}

func (p *HostItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := HostStatus(v)
  p.Status = temp
}
  return nil
}

func (p *HostItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula.PartitionID, 0, size)
    _val7 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem8 nebula.PartitionID
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula.PartitionID(v)
      _elem8 = temp
}
      _val7 = append(_val7, _elem8)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula.PartitionID, size)
  p.AllParts =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula.PartitionID, 0, size)
    _val10 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem11 nebula.PartitionID
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula.PartitionID(v)
      _elem11 = temp
}
      _val10 = append(_val10, _elem11)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.AllParts[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := HostRole(v)
  p.Role = temp
}
  return nil
}

func (p *HostItem)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GitInfoSha = v
}
  return nil
}

func (p *HostItem)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *HostItem)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *HostItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HostItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostAddr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err) }
  if err := p.HostAddr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostAddr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err) }
  return err
}

func (p *HostItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *HostItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader_parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "all_parts", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:all_parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.AllParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AllParts {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:all_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:role: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:role: ", p), err) }
  return err
}

func (p *HostItem) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "git_info_sha", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:git_info_sha: ", p), err) }
  return err
}

func (p *HostItem) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetZoneName() {
    if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:zone_name: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.zone_name (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:zone_name: ", p), err) }
  }
  return err
}

func (p *HostItem) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err) }
  }
  return err
}

func (p *HostItem) Equals(other *HostItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.HostAddr.Equals(other.HostAddr) { return false }
  if p.Status != other.Status { return false }
  if len(p.LeaderParts) != len(other.LeaderParts) { return false }
  for k, _tgt := range p.LeaderParts {
    _src12 := other.LeaderParts[k]
    if len(_tgt) != len(_src12) { return false }
    for i, _tgt := range _tgt {
      _src13 := _src12[i]
      if _tgt != _src13 { return false }
    }
  }
  if len(p.AllParts) != len(other.AllParts) { return false }
  for k, _tgt := range p.AllParts {
    _src14 := other.AllParts[k]
    if len(_tgt) != len(_src14) { return false }
    for i, _tgt := range _tgt {
      _src15 := _src14[i]
      if _tgt != _src15 { return false }
    }
  }
  if p.Role != other.Role { return false }
  if bytes.Compare(p.GitInfoSha, other.GitInfoSha) != 0 { return false }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  if bytes.Compare(p.Version, other.Version) != 0 { return false }
  return true
}

func (p *HostItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostItem(%+v)", *p)
}

func (p *HostItem) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - IsLock
//  - MaxQueriesPerHour
//  - MaxUpdatesPerHour
//  - MaxConnectionsPerHour
//  - MaxUserConnections
type UserItem struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IsLock bool `thrift:"is_lock,2" db:"is_lock" json:"is_lock"`
  MaxQueriesPerHour int32 `thrift:"max_queries_per_hour,3" db:"max_queries_per_hour" json:"max_queries_per_hour"`
  MaxUpdatesPerHour int32 `thrift:"max_updates_per_hour,4" db:"max_updates_per_hour" json:"max_updates_per_hour"`
  MaxConnectionsPerHour int32 `thrift:"max_connections_per_hour,5" db:"max_connections_per_hour" json:"max_connections_per_hour"`
  MaxUserConnections int32 `thrift:"max_user_connections,6" db:"max_user_connections" json:"max_user_connections"`
}

func NewUserItem() *UserItem {
  return &UserItem{}
}


func (p *UserItem) GetAccount() []byte {
  return p.Account
}

func (p *UserItem) GetIsLock() bool {
  return p.IsLock
}

func (p *UserItem) GetMaxQueriesPerHour() int32 {
  return p.MaxQueriesPerHour
}

func (p *UserItem) GetMaxUpdatesPerHour() int32 {
  return p.MaxUpdatesPerHour
}

func (p *UserItem) GetMaxConnectionsPerHour() int32 {
  return p.MaxConnectionsPerHour
}

func (p *UserItem) GetMaxUserConnections() int32 {
  return p.MaxUserConnections
}
func (p *UserItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *UserItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsLock = v
}
  return nil
}

func (p *UserItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxQueriesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUpdatesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxConnectionsPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxUserConnections = v
}
  return nil
}

func (p *UserItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UserItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *UserItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_lock", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_lock: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsLock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_lock (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_lock: ", p), err) }
  return err
}

func (p *UserItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_queries_per_hour", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_queries_per_hour: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxQueriesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_queries_per_hour (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_queries_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_updates_per_hour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_updates_per_hour: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUpdatesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_updates_per_hour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_updates_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_connections_per_hour", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_connections_per_hour: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxConnectionsPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_connections_per_hour (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_connections_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_user_connections", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_user_connections: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUserConnections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_user_connections (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_user_connections: ", p), err) }
  return err
}

func (p *UserItem) Equals(other *UserItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  if p.IsLock != other.IsLock { return false }
  if p.MaxQueriesPerHour != other.MaxQueriesPerHour { return false }
  if p.MaxUpdatesPerHour != other.MaxUpdatesPerHour { return false }
  if p.MaxConnectionsPerHour != other.MaxConnectionsPerHour { return false }
  if p.MaxUserConnections != other.MaxUserConnections { return false }
  return true
}

func (p *UserItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserItem(%+v)", *p)
}

func (p *UserItem) Validate() error {
  return nil
}
// Attributes:
//  - UserID
//  - SpaceID
//  - RoleType
type RoleItem struct {
  UserID []byte `thrift:"user_id,1" db:"user_id" json:"user_id"`
  SpaceID nebula.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  RoleType RoleType `thrift:"role_type,3" db:"role_type" json:"role_type"`
}

func NewRoleItem() *RoleItem {
  return &RoleItem{}
}


func (p *RoleItem) GetUserID() []byte {
  return p.UserID
}

func (p *RoleItem) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *RoleItem) GetRoleType() RoleType {
  return p.RoleType
}
func (p *RoleItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *RoleItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RoleItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := RoleType(v)
  p.RoleType = temp
}
  return nil
}

func (p *RoleItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RoleItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RoleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role_type: ", p), err) }
  return err
}

func (p *RoleItem) Equals(other *RoleItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.UserID, other.UserID) != 0 { return false }
  if p.SpaceID != other.SpaceID { return false }
  if p.RoleType != other.RoleType { return false }
  return true
}

func (p *RoleItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleItem(%+v)", *p)
}

func (p *RoleItem) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - ID
//  - Leader
type ExecResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  ID *ID `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
}

func NewExecResp() *ExecResp {
  return &ExecResp{}
}


func (p *ExecResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ExecResp_ID_DEFAULT *ID
func (p *ExecResp) GetID() *ID {
  if !p.IsSetID() {
    return ExecResp_ID_DEFAULT
  }
return p.ID
}
var ExecResp_Leader_DEFAULT *nebula.HostAddr
func (p *ExecResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ExecResp_Leader_DEFAULT
  }
return p.Leader
}
func (p *ExecResp) IsSetID() bool {
  return p.ID != nil
}

func (p *ExecResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ExecResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ExecResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &ID{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *ExecResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ExecResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ExecResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *ExecResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *ExecResp) Equals(other *ExecResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.ID.Equals(other.ID) { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  return true
}

func (p *ExecResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecResp(%+v)", *p)
}

func (p *ExecResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceName
//  - Op
//  - Paras
type AlterSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  Op AlterSpaceOp `thrift:"op,2" db:"op" json:"op"`
  Paras [][]byte `thrift:"paras,3" db:"paras" json:"paras"`
}

func NewAlterSpaceReq() *AlterSpaceReq {
  return &AlterSpaceReq{}
}


func (p *AlterSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *AlterSpaceReq) GetOp() AlterSpaceOp {
  return p.Op
}

func (p *AlterSpaceReq) GetParas() [][]byte {
  return p.Paras
}
func (p *AlterSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *AlterSpaceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AlterSpaceOp(v)
  p.Op = temp
}
  return nil
}

func (p *AlterSpaceReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Paras = append(p.Paras, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlterSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *AlterSpaceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *AlterSpaceReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "paras", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paras: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paras: ", p), err) }
  return err
}

func (p *AlterSpaceReq) Equals(other *AlterSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if p.Op != other.Op { return false }
  if len(p.Paras) != len(other.Paras) { return false }
  for i, _tgt := range p.Paras {
    _src17 := other.Paras[i]
    if bytes.Compare(_tgt, _src17) != 0 { return false }
  }
  return true
}

func (p *AlterSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterSpaceReq(%+v)", *p)
}

func (p *AlterSpaceReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Op
//  - Type
//  - Paras
type AdminJobReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Op JobOp `thrift:"op,2" db:"op" json:"op"`
  Type JobType `thrift:"type,3" db:"type" json:"type"`
  Paras [][]byte `thrift:"paras,4" db:"paras" json:"paras"`
}

func NewAdminJobReq() *AdminJobReq {
  return &AdminJobReq{}
}


func (p *AdminJobReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AdminJobReq) GetOp() JobOp {
  return p.Op
}

func (p *AdminJobReq) GetType() JobType {
  return p.Type
}

func (p *AdminJobReq) GetParas() [][]byte {
  return p.Paras
}
func (p *AdminJobReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AdminJobReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := JobOp(v)
  p.Op = temp
}
  return nil
}

func (p *AdminJobReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := JobType(v)
  p.Type = temp
}
  return nil
}

func (p *AdminJobReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Paras = append(p.Paras, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdminJobReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "paras", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paras: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paras: ", p), err) }
  return err
}

func (p *AdminJobReq) Equals(other *AdminJobReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.Op != other.Op { return false }
  if p.Type != other.Type { return false }
  if len(p.Paras) != len(other.Paras) { return false }
  for i, _tgt := range p.Paras {
    _src19 := other.Paras[i]
    if bytes.Compare(_tgt, _src19) != 0 { return false }
  }
  return true
}

func (p *AdminJobReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobReq(%+v)", *p)
}

func (p *AdminJobReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - JobID
//  - Type
//  - Paras
//  - Status
//  - StartTime
//  - StopTime
//  - Code
type JobDesc struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  Type JobType `thrift:"type,3" db:"type" json:"type"`
  Paras []string `thrift:"paras,4" db:"paras" json:"paras"`
  Status JobStatus `thrift:"status,5" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,6" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,7" db:"stop_time" json:"stop_time"`
  Code nebula.ErrorCode `thrift:"code,8" db:"code" json:"code"`
}

func NewJobDesc() *JobDesc {
  return &JobDesc{}
}


func (p *JobDesc) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *JobDesc) GetJobID() int32 {
  return p.JobID
}

func (p *JobDesc) GetType() JobType {
  return p.Type
}

func (p *JobDesc) GetParas() []string {
  return p.Paras
}

func (p *JobDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *JobDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *JobDesc) GetStopTime() int64 {
  return p.StopTime
}

func (p *JobDesc) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *JobDesc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobDesc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *JobDesc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *JobDesc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := JobType(v)
  p.Type = temp
}
  return nil
}

func (p *JobDesc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.Paras = append(p.Paras, _elem20)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobDesc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *JobDesc)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *JobDesc)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StopTime = v
}
  return nil
}

func (p *JobDesc)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *JobDesc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "JobDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobDesc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *JobDesc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *JobDesc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *JobDesc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "paras", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paras: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paras: ", p), err) }
  return err
}

func (p *JobDesc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *JobDesc) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_time: ", p), err) }
  return err
}

func (p *JobDesc) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stop_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stop_time: ", p), err) }
  return err
}

func (p *JobDesc) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:code: ", p), err) }
  return err
}

func (p *JobDesc) Equals(other *JobDesc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.JobID != other.JobID { return false }
  if p.Type != other.Type { return false }
  if len(p.Paras) != len(other.Paras) { return false }
  for i, _tgt := range p.Paras {
    _src21 := other.Paras[i]
    if _tgt != _src21 { return false }
  }
  if p.Status != other.Status { return false }
  if p.StartTime != other.StartTime { return false }
  if p.StopTime != other.StopTime { return false }
  if p.Code != other.Code { return false }
  return true
}

func (p *JobDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobDesc(%+v)", *p)
}

func (p *JobDesc) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - JobID
//  - TaskID
//  - Host
//  - Status
//  - StartTime
//  - StopTime
//  - Code
type TaskDesc struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,3" db:"task_id" json:"task_id"`
  Host *nebula.HostAddr `thrift:"host,4" db:"host" json:"host"`
  Status JobStatus `thrift:"status,5" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,6" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,7" db:"stop_time" json:"stop_time"`
  Code nebula.ErrorCode `thrift:"code,8" db:"code" json:"code"`
}

func NewTaskDesc() *TaskDesc {
  return &TaskDesc{}
}


func (p *TaskDesc) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *TaskDesc) GetJobID() int32 {
  return p.JobID
}

func (p *TaskDesc) GetTaskID() int32 {
  return p.TaskID
}
var TaskDesc_Host_DEFAULT *nebula.HostAddr
func (p *TaskDesc) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return TaskDesc_Host_DEFAULT
  }
return p.Host
}

func (p *TaskDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *TaskDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *TaskDesc) GetStopTime() int64 {
  return p.StopTime
}

func (p *TaskDesc) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *TaskDesc) IsSetHost() bool {
  return p.Host != nil
}

func (p *TaskDesc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *TaskDesc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *TaskDesc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TaskID = v
}
  return nil
}

func (p *TaskDesc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *TaskDesc)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TaskDesc)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StopTime = v
}
  return nil
}

func (p *TaskDesc)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TaskDesc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TaskDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskDesc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "task_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:host: ", p), err) }
  return err
}

func (p *TaskDesc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *TaskDesc) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stop_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stop_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:code: ", p), err) }
  return err
}

func (p *TaskDesc) Equals(other *TaskDesc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.JobID != other.JobID { return false }
  if p.TaskID != other.TaskID { return false }
  if !p.Host.Equals(other.Host) { return false }
  if p.Status != other.Status { return false }
  if p.StartTime != other.StartTime { return false }
  if p.StopTime != other.StopTime { return false }
  if p.Code != other.Code { return false }
  return true
}

func (p *TaskDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskDesc(%+v)", *p)
}

func (p *TaskDesc) Validate() error {
  return nil
}
// Attributes:
//  - JobID
//  - JobDesc
//  - TaskDesc
//  - RecoveredJobNum
type AdminJobResult_ struct {
  JobID *int32 `thrift:"job_id,1" db:"job_id" json:"job_id,omitempty"`
  JobDesc []*JobDesc `thrift:"job_desc,2" db:"job_desc" json:"job_desc,omitempty"`
  TaskDesc []*TaskDesc `thrift:"task_desc,3" db:"task_desc" json:"task_desc,omitempty"`
  RecoveredJobNum *int32 `thrift:"recovered_job_num,4" db:"recovered_job_num" json:"recovered_job_num,omitempty"`
}

func NewAdminJobResult_() *AdminJobResult_ {
  return &AdminJobResult_{}
}

var AdminJobResult__JobID_DEFAULT int32
func (p *AdminJobResult_) GetJobID() int32 {
  if !p.IsSetJobID() {
    return AdminJobResult__JobID_DEFAULT
  }
return *p.JobID
}
var AdminJobResult__JobDesc_DEFAULT []*JobDesc

func (p *AdminJobResult_) GetJobDesc() []*JobDesc {
  return p.JobDesc
}
var AdminJobResult__TaskDesc_DEFAULT []*TaskDesc

func (p *AdminJobResult_) GetTaskDesc() []*TaskDesc {
  return p.TaskDesc
}
var AdminJobResult__RecoveredJobNum_DEFAULT int32
func (p *AdminJobResult_) GetRecoveredJobNum() int32 {
  if !p.IsSetRecoveredJobNum() {
    return AdminJobResult__RecoveredJobNum_DEFAULT
  }
return *p.RecoveredJobNum
}
func (p *AdminJobResult_) IsSetJobID() bool {
  return p.JobID != nil
}

func (p *AdminJobResult_) IsSetJobDesc() bool {
  return p.JobDesc != nil
}

func (p *AdminJobResult_) IsSetTaskDesc() bool {
  return p.TaskDesc != nil
}

func (p *AdminJobResult_) IsSetRecoveredJobNum() bool {
  return p.RecoveredJobNum != nil
}

func (p *AdminJobResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = &v
}
  return nil
}

func (p *AdminJobResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JobDesc, 0, size)
  p.JobDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &JobDesc{}
    if err := _elem22.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.JobDesc = append(p.JobDesc, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TaskDesc, 0, size)
  p.TaskDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &TaskDesc{}
    if err := _elem23.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.TaskDesc = append(p.TaskDesc, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RecoveredJobNum = &v
}
  return nil
}

func (p *AdminJobResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdminJobResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJobID() {
    if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.JobID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJobDesc() {
    if err := oprot.WriteFieldBegin(ctx, "job_desc", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_desc: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.JobDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JobDesc {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskDesc() {
    if err := oprot.WriteFieldBegin(ctx, "task_desc", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_desc: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TaskDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskDesc {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRecoveredJobNum() {
    if err := oprot.WriteFieldBegin(ctx, "recovered_job_num", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recovered_job_num: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RecoveredJobNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recovered_job_num (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recovered_job_num: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) Equals(other *AdminJobResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobID != other.JobID {
    if p.JobID == nil || other.JobID == nil {
      return false
    }
    if (*p.JobID) != (*other.JobID) { return false }
  }
  if len(p.JobDesc) != len(other.JobDesc) { return false }
  for i, _tgt := range p.JobDesc {
    _src24 := other.JobDesc[i]
    if !_tgt.Equals(_src24) { return false }
  }
  if len(p.TaskDesc) != len(other.TaskDesc) { return false }
  for i, _tgt := range p.TaskDesc {
    _src25 := other.TaskDesc[i]
    if !_tgt.Equals(_src25) { return false }
  }
  if p.RecoveredJobNum != other.RecoveredJobNum {
    if p.RecoveredJobNum == nil || other.RecoveredJobNum == nil {
      return false
    }
    if (*p.RecoveredJobNum) != (*other.RecoveredJobNum) { return false }
  }
  return true
}

func (p *AdminJobResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobResult_(%+v)", *p)
}

func (p *AdminJobResult_) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Result_
type AdminJobResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Result_ *AdminJobResult_ `thrift:"result,3" db:"result" json:"result"`
}

func NewAdminJobResp() *AdminJobResp {
  return &AdminJobResp{}
}


func (p *AdminJobResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var AdminJobResp_Leader_DEFAULT *nebula.HostAddr
func (p *AdminJobResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return AdminJobResp_Leader_DEFAULT
  }
return p.Leader
}
var AdminJobResp_Result__DEFAULT *AdminJobResult_
func (p *AdminJobResp) GetResult_() *AdminJobResult_ {
  if !p.IsSetResult_() {
    return AdminJobResp_Result__DEFAULT
  }
return p.Result_
}
func (p *AdminJobResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *AdminJobResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AdminJobResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *AdminJobResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &AdminJobResult_{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminJobResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdminJobResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *AdminJobResp) Equals(other *AdminJobResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  return true
}

func (p *AdminJobResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobResp(%+v)", *p)
}

func (p *AdminJobResp) Validate() error {
  return nil
}
// Attributes:
//  - PartID
//  - Proportion
type Correlativity struct {
  PartID nebula.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Proportion float64 `thrift:"proportion,2" db:"proportion" json:"proportion"`
}

func NewCorrelativity() *Correlativity {
  return &Correlativity{}
}


func (p *Correlativity) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *Correlativity) GetProportion() float64 {
  return p.Proportion
}
func (p *Correlativity) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Correlativity)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *Correlativity)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Proportion = v
}
  return nil
}

func (p *Correlativity) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Correlativity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Correlativity) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *Correlativity) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "proportion", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:proportion: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Proportion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proportion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:proportion: ", p), err) }
  return err
}

func (p *Correlativity) Equals(other *Correlativity) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartID != other.PartID { return false }
  if p.Proportion != other.Proportion { return false }
  return true
}

func (p *Correlativity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Correlativity(%+v)", *p)
}

func (p *Correlativity) Validate() error {
  return nil
}
// Attributes:
//  - TagVertices
//  - Edges
//  - SpaceVertices
//  - SpaceEdges
//  - PositivePartCorrelativity
//  - NegativePartCorrelativity
//  - Status
type StatsItem struct {
  TagVertices map[string]int64 `thrift:"tag_vertices,1" db:"tag_vertices" json:"tag_vertices"`
  Edges map[string]int64 `thrift:"edges,2" db:"edges" json:"edges"`
  SpaceVertices int64 `thrift:"space_vertices,3" db:"space_vertices" json:"space_vertices"`
  SpaceEdges int64 `thrift:"space_edges,4" db:"space_edges" json:"space_edges"`
  PositivePartCorrelativity map[nebula.PartitionID][]*Correlativity `thrift:"positive_part_correlativity,5" db:"positive_part_correlativity" json:"positive_part_correlativity"`
  NegativePartCorrelativity map[nebula.PartitionID][]*Correlativity `thrift:"negative_part_correlativity,6" db:"negative_part_correlativity" json:"negative_part_correlativity"`
  Status JobStatus `thrift:"status,7" db:"status" json:"status"`
}

func NewStatsItem() *StatsItem {
  return &StatsItem{}
}


func (p *StatsItem) GetTagVertices() map[string]int64 {
  return p.TagVertices
}

func (p *StatsItem) GetEdges() map[string]int64 {
  return p.Edges
}

func (p *StatsItem) GetSpaceVertices() int64 {
  return p.SpaceVertices
}

func (p *StatsItem) GetSpaceEdges() int64 {
  return p.SpaceEdges
}

func (p *StatsItem) GetPositivePartCorrelativity() map[nebula.PartitionID][]*Correlativity {
  return p.PositivePartCorrelativity
}

func (p *StatsItem) GetNegativePartCorrelativity() map[nebula.PartitionID][]*Correlativity {
  return p.NegativePartCorrelativity
}

func (p *StatsItem) GetStatus() JobStatus {
  return p.Status
}
func (p *StatsItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatsItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.TagVertices =  tMap
  for i := 0; i < size; i ++ {
var _key26 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key26 = v
}
var _val27 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val27 = v
}
    p.TagVertices[_key26] = _val27
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Edges =  tMap
  for i := 0; i < size; i ++ {
var _key28 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key28 = v
}
var _val29 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val29 = v
}
    p.Edges[_key28] = _val29
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpaceVertices = v
}
  return nil
}

func (p *StatsItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SpaceEdges = v
}
  return nil
}

func (p *StatsItem)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*Correlativity, size)
  p.PositivePartCorrelativity =  tMap
  for i := 0; i < size; i ++ {
var _key30 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key30 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Correlativity, 0, size)
    _val31 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem32 := &Correlativity{}
      if err := _elem32.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
      }
      _val31 = append(_val31, _elem32)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PositivePartCorrelativity[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*Correlativity, size)
  p.NegativePartCorrelativity =  tMap
  for i := 0; i < size; i ++ {
var _key33 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key33 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Correlativity, 0, size)
    _val34 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem35 := &Correlativity{}
      if err := _elem35.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
      }
      _val34 = append(_val34, _elem35)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.NegativePartCorrelativity[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *StatsItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatsItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatsItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_vertices", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_vertices: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.TagVertices)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TagVertices {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_vertices: ", p), err) }
  return err
}

func (p *StatsItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edges: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Edges {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edges: ", p), err) }
  return err
}

func (p *StatsItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_vertices", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:space_vertices: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpaceVertices)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_vertices (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:space_vertices: ", p), err) }
  return err
}

func (p *StatsItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_edges", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_edges: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpaceEdges)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_edges (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_edges: ", p), err) }
  return err
}

func (p *StatsItem) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "positive_part_correlativity", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:positive_part_correlativity: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.PositivePartCorrelativity)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PositivePartCorrelativity {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:positive_part_correlativity: ", p), err) }
  return err
}

func (p *StatsItem) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "negative_part_correlativity", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:negative_part_correlativity: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.NegativePartCorrelativity)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NegativePartCorrelativity {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:negative_part_correlativity: ", p), err) }
  return err
}

func (p *StatsItem) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *StatsItem) Equals(other *StatsItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TagVertices) != len(other.TagVertices) { return false }
  for k, _tgt := range p.TagVertices {
    _src36 := other.TagVertices[k]
    if _tgt != _src36 { return false }
  }
  if len(p.Edges) != len(other.Edges) { return false }
  for k, _tgt := range p.Edges {
    _src37 := other.Edges[k]
    if _tgt != _src37 { return false }
  }
  if p.SpaceVertices != other.SpaceVertices { return false }
  if p.SpaceEdges != other.SpaceEdges { return false }
  if len(p.PositivePartCorrelativity) != len(other.PositivePartCorrelativity) { return false }
  for k, _tgt := range p.PositivePartCorrelativity {
    _src38 := other.PositivePartCorrelativity[k]
    if len(_tgt) != len(_src38) { return false }
    for i, _tgt := range _tgt {
      _src39 := _src38[i]
      if !_tgt.Equals(_src39) { return false }
    }
  }
  if len(p.NegativePartCorrelativity) != len(other.NegativePartCorrelativity) { return false }
  for k, _tgt := range p.NegativePartCorrelativity {
    _src40 := other.NegativePartCorrelativity[k]
    if len(_tgt) != len(_src40) { return false }
    for i, _tgt := range _tgt {
      _src41 := _src40[i]
      if !_tgt.Equals(_src41) { return false }
    }
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *StatsItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatsItem(%+v)", *p)
}

func (p *StatsItem) Validate() error {
  return nil
}
// Attributes:
//  - Properties
//  - IfNotExists
type CreateSpaceReq struct {
  Properties *SpaceDesc `thrift:"properties,1" db:"properties" json:"properties"`
  IfNotExists bool `thrift:"if_not_exists,2" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateSpaceReq() *CreateSpaceReq {
  return &CreateSpaceReq{}
}

var CreateSpaceReq_Properties_DEFAULT *SpaceDesc
func (p *CreateSpaceReq) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return CreateSpaceReq_Properties_DEFAULT
  }
return p.Properties
}

func (p *CreateSpaceReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateSpaceReq) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *CreateSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Properties = &SpaceDesc{}
  if err := p.Properties.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "properties", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := p.Properties.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *CreateSpaceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_not_exists: ", p), err) }
  return err
}

func (p *CreateSpaceReq) Equals(other *CreateSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Properties.Equals(other.Properties) { return false }
  if p.IfNotExists != other.IfNotExists { return false }
  return true
}

func (p *CreateSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSpaceReq(%+v)", *p)
}

func (p *CreateSpaceReq) Validate() error {
  return nil
}
// Attributes:
//  - OldSpaceName
//  - NewSpaceName_
//  - IfNotExists
type CreateSpaceAsReq struct {
  OldSpaceName []byte `thrift:"old_space_name,1" db:"old_space_name" json:"old_space_name"`
  NewSpaceName_ []byte `thrift:"new_space_name,2" db:"new_space_name" json:"new_space_name"`
  IfNotExists bool `thrift:"if_not_exists,3" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateSpaceAsReq() *CreateSpaceAsReq {
  return &CreateSpaceAsReq{}
}


func (p *CreateSpaceAsReq) GetOldSpaceName() []byte {
  return p.OldSpaceName
}

func (p *CreateSpaceAsReq) GetNewSpaceName_() []byte {
  return p.NewSpaceName_
}

func (p *CreateSpaceAsReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateSpaceAsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceAsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OldSpaceName = v
}
  return nil
}

func (p *CreateSpaceAsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewSpaceName_ = v
}
  return nil
}

func (p *CreateSpaceAsReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateSpaceAsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateSpaceAsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceAsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.OldSpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_space_name: ", p), err) }
  return err
}

func (p *CreateSpaceAsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_space_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.NewSpaceName_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_space_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_space_name: ", p), err) }
  return err
}

func (p *CreateSpaceAsReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_not_exists: ", p), err) }
  return err
}

func (p *CreateSpaceAsReq) Equals(other *CreateSpaceAsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.OldSpaceName, other.OldSpaceName) != 0 { return false }
  if bytes.Compare(p.NewSpaceName_, other.NewSpaceName_) != 0 { return false }
  if p.IfNotExists != other.IfNotExists { return false }
  return true
}

func (p *CreateSpaceAsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSpaceAsReq(%+v)", *p)
}

func (p *CreateSpaceAsReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceName
//  - IfExists
type DropSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropSpaceReq() *DropSpaceReq {
  return &DropSpaceReq{}
}


func (p *DropSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *DropSpaceReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *DropSpaceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *DropSpaceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropSpaceReq) Equals(other *DropSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropSpaceReq(%+v)", *p)
}

func (p *DropSpaceReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceName
//  - IfExists
type ClearSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewClearSpaceReq() *ClearSpaceReq {
  return &ClearSpaceReq{}
}


func (p *ClearSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *ClearSpaceReq) GetIfExists() bool {
  return p.IfExists
}
func (p *ClearSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *ClearSpaceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *ClearSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *ClearSpaceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *ClearSpaceReq) Equals(other *ClearSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *ClearSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSpaceReq(%+v)", *p)
}

func (p *ClearSpaceReq) Validate() error {
  return nil
}
type ListSpacesReq struct {
}

func NewListSpacesReq() *ListSpacesReq {
  return &ListSpacesReq{}
}

func (p *ListSpacesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSpacesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesReq) Equals(other *ListSpacesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListSpacesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesReq(%+v)", *p)
}

func (p *ListSpacesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Spaces
type ListSpacesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Spaces []*IdName `thrift:"spaces,3" db:"spaces" json:"spaces"`
}

func NewListSpacesResp() *ListSpacesResp {
  return &ListSpacesResp{}
}


func (p *ListSpacesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListSpacesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListSpacesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListSpacesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSpacesResp) GetSpaces() []*IdName {
  return p.Spaces
}
func (p *ListSpacesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSpacesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSpacesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IdName, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &IdName{}
    if err := _elem42.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Spaces = append(p.Spaces, _elem42)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSpacesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSpacesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaces", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaces: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Spaces)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spaces {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaces: ", p), err) }
  return err
}

func (p *ListSpacesResp) Equals(other *ListSpacesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Spaces) != len(other.Spaces) { return false }
  for i, _tgt := range p.Spaces {
    _src43 := other.Spaces[i]
    if !_tgt.Equals(_src43) { return false }
  }
  return true
}

func (p *ListSpacesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesResp(%+v)", *p)
}

func (p *ListSpacesResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceName
type GetSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
}

func NewGetSpaceReq() *GetSpaceReq {
  return &GetSpaceReq{}
}


func (p *GetSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}
func (p *GetSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *GetSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *GetSpaceReq) Equals(other *GetSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  return true
}

func (p *GetSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceReq(%+v)", *p)
}

func (p *GetSpaceReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Item
type GetSpaceResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *SpaceItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetSpaceResp() *GetSpaceResp {
  return &GetSpaceResp{}
}


func (p *GetSpaceResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetSpaceResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetSpaceResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetSpaceResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSpaceResp_Item_DEFAULT *SpaceItem
func (p *GetSpaceResp) GetItem() *SpaceItem {
  if !p.IsSetItem() {
    return GetSpaceResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetSpaceResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetSpaceResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetSpaceResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &SpaceItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetSpaceResp) Equals(other *GetSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *GetSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceResp(%+v)", *p)
}

func (p *GetSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - TagName
//  - Schema
//  - IfNotExists
type CreateTagReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateTagReq() *CreateTagReq {
  return &CreateTagReq{}
}


func (p *CreateTagReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagReq) GetTagName() []byte {
  return p.TagName
}
var CreateTagReq_Schema_DEFAULT *Schema
func (p *CreateTagReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateTagReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateTagReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateTagReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateTagReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateTagReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *CreateTagReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateTagReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagReq) Equals(other *CreateTagReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  if p.IfNotExists != other.IfNotExists { return false }
  return true
}

func (p *CreateTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTagReq(%+v)", *p)
}

func (p *CreateTagReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - TagName
//  - TagItems
//  - SchemaProp
type AlterTagReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  TagItems []*AlterSchemaItem `thrift:"tag_items,3" db:"tag_items" json:"tag_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterTagReq() *AlterTagReq {
  return &AlterTagReq{}
}


func (p *AlterTagReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *AlterTagReq) GetTagItems() []*AlterSchemaItem {
  return p.TagItems
}
var AlterTagReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterTagReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterTagReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterTagReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterTagReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterTagReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *AlterTagReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.TagItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &AlterSchemaItem{}
    if err := _elem44.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.TagItems = append(p.TagItems, _elem44)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.SchemaProp = &SchemaProp{}
  if err := p.SchemaProp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterTagReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlterTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterTagReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TagItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagItems {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_items: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterTagReq) Equals(other *AlterTagReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if len(p.TagItems) != len(other.TagItems) { return false }
  for i, _tgt := range p.TagItems {
    _src45 := other.TagItems[i]
    if !_tgt.Equals(_src45) { return false }
  }
  if !p.SchemaProp.Equals(other.SchemaProp) { return false }
  return true
}

func (p *AlterTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterTagReq(%+v)", *p)
}

func (p *AlterTagReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - TagName
//  - IfExists
type DropTagReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagReq() *DropTagReq {
  return &DropTagReq{}
}


func (p *DropTagReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *DropTagReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropTagReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropTagReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *DropTagReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropTagReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *DropTagReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagReq) Equals(other *DropTagReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTagReq(%+v)", *p)
}

func (p *DropTagReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListTagsReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagsReq() *ListTagsReq {
  return &ListTagsReq{}
}


func (p *ListTagsReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListTagsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListTagsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListTagsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagsReq) Equals(other *ListTagsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListTagsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsReq(%+v)", *p)
}

func (p *ListTagsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Tags
type ListTagsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Tags []*TagItem `thrift:"tags,3" db:"tags" json:"tags"`
}

func NewListTagsResp() *ListTagsResp {
  return &ListTagsResp{}
}


func (p *ListTagsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListTagsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListTagsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListTagsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagsResp) GetTags() []*TagItem {
  return p.Tags
}
func (p *ListTagsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListTagsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListTagsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagItem, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := &TagItem{}
    if err := _elem46.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.Tags = append(p.Tags, _elem46)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListTagsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tags", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err) }
  return err
}

func (p *ListTagsResp) Equals(other *ListTagsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Tags) != len(other.Tags) { return false }
  for i, _tgt := range p.Tags {
    _src47 := other.Tags[i]
    if !_tgt.Equals(_src47) { return false }
  }
  return true
}

func (p *ListTagsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsResp(%+v)", *p)
}

func (p *ListTagsResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - TagName
//  - Version
type GetTagReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetTagReq() *GetTagReq {
  return &GetTagReq{}
}


func (p *GetTagReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *GetTagReq) GetVersion() SchemaVer {
  return p.Version
}
func (p *GetTagReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetTagReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *GetTagReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetTagReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *GetTagReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetTagReq) Equals(other *GetTagReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if p.Version != other.Version { return false }
  return true
}

func (p *GetTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagReq(%+v)", *p)
}

func (p *GetTagReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetTagResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetTagResp() *GetTagResp {
  return &GetTagResp{}
}


func (p *GetTagResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetTagResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetTagResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetTagResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagResp_Schema_DEFAULT *Schema
func (p *GetTagResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetTagResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetTagResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetTagResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetTagResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetTagResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetTagResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTagResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetTagResp) Equals(other *GetTagResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  return true
}

func (p *GetTagResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagResp(%+v)", *p)
}

func (p *GetTagResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - EdgeName
//  - Schema
//  - IfNotExists
type CreateEdgeReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateEdgeReq() *CreateEdgeReq {
  return &CreateEdgeReq{}
}


func (p *CreateEdgeReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}
var CreateEdgeReq_Schema_DEFAULT *Schema
func (p *CreateEdgeReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateEdgeReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateEdgeReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateEdgeReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateEdgeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateEdgeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *CreateEdgeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateEdgeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeReq) Equals(other *CreateEdgeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  if p.IfNotExists != other.IfNotExists { return false }
  return true
}

func (p *CreateEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateEdgeReq(%+v)", *p)
}

func (p *CreateEdgeReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - EdgeName
//  - EdgeItems
//  - SchemaProp
type AlterEdgeReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  EdgeItems []*AlterSchemaItem `thrift:"edge_items,3" db:"edge_items" json:"edge_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterEdgeReq() *AlterEdgeReq {
  return &AlterEdgeReq{}
}


func (p *AlterEdgeReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *AlterEdgeReq) GetEdgeItems() []*AlterSchemaItem {
  return p.EdgeItems
}
var AlterEdgeReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterEdgeReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterEdgeReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterEdgeReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterEdgeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterEdgeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *AlterEdgeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.EdgeItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := &AlterSchemaItem{}
    if err := _elem48.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.EdgeItems = append(p.EdgeItems, _elem48)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.SchemaProp = &SchemaProp{}
  if err := p.SchemaProp.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterEdgeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlterEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterEdgeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.EdgeItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeItems {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_items: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterEdgeReq) Equals(other *AlterEdgeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if len(p.EdgeItems) != len(other.EdgeItems) { return false }
  for i, _tgt := range p.EdgeItems {
    _src49 := other.EdgeItems[i]
    if !_tgt.Equals(_src49) { return false }
  }
  if !p.SchemaProp.Equals(other.SchemaProp) { return false }
  return true
}

func (p *AlterEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterEdgeReq(%+v)", *p)
}

func (p *AlterEdgeReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - EdgeName
//  - Version
type GetEdgeReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetEdgeReq() *GetEdgeReq {
  return &GetEdgeReq{}
}


func (p *GetEdgeReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *GetEdgeReq) GetVersion() SchemaVer {
  return p.Version
}
func (p *GetEdgeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetEdgeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *GetEdgeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetEdgeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetEdgeReq) Equals(other *GetEdgeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if p.Version != other.Version { return false }
  return true
}

func (p *GetEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeReq(%+v)", *p)
}

func (p *GetEdgeReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetEdgeResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetEdgeResp() *GetEdgeResp {
  return &GetEdgeResp{}
}


func (p *GetEdgeResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetEdgeResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetEdgeResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeResp_Schema_DEFAULT *Schema
func (p *GetEdgeResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetEdgeResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetEdgeResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetEdgeResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetEdgeResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetEdgeResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetEdgeResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetEdgeResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetEdgeResp) Equals(other *GetEdgeResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Schema.Equals(other.Schema) { return false }
  return true
}

func (p *GetEdgeResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeResp(%+v)", *p)
}

func (p *GetEdgeResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - EdgeName
//  - IfExists
type DropEdgeReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeReq() *DropEdgeReq {
  return &DropEdgeReq{}
}


func (p *DropEdgeReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *DropEdgeReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropEdgeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropEdgeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *DropEdgeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropEdgeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeReq) Equals(other *DropEdgeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropEdgeReq(%+v)", *p)
}

func (p *DropEdgeReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListEdgesReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgesReq() *ListEdgesReq {
  return &ListEdgesReq{}
}


func (p *ListEdgesReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListEdgesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListEdgesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListEdgesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgesReq) Equals(other *ListEdgesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListEdgesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesReq(%+v)", *p)
}

func (p *ListEdgesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Edges
type ListEdgesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Edges []*EdgeItem `thrift:"edges,3" db:"edges" json:"edges"`
}

func NewListEdgesResp() *ListEdgesResp {
  return &ListEdgesResp{}
}


func (p *ListEdgesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListEdgesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListEdgesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgesResp) GetEdges() []*EdgeItem {
  return p.Edges
}
func (p *ListEdgesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListEdgesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListEdgesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeItem, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := &EdgeItem{}
    if err := _elem50.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.Edges = append(p.Edges, _elem50)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListEdgesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edges", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edges: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Edges {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edges: ", p), err) }
  return err
}

func (p *ListEdgesResp) Equals(other *ListEdgesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Edges) != len(other.Edges) { return false }
  for i, _tgt := range p.Edges {
    _src51 := other.Edges[i]
    if !_tgt.Equals(_src51) { return false }
  }
  return true
}

func (p *ListEdgesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesResp(%+v)", *p)
}

func (p *ListEdgesResp) Validate() error {
  return nil
}
// Attributes:
//  - Hosts
type AddHostsReq struct {
  Hosts []*nebula.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewAddHostsReq() *AddHostsReq {
  return &AddHostsReq{}
}


func (p *AddHostsReq) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}
func (p *AddHostsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem52 := &nebula.HostAddr{}
    if err := _elem52.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
    }
    p.Hosts = append(p.Hosts, _elem52)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddHostsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *AddHostsReq) Equals(other *AddHostsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src53 := other.Hosts[i]
    if !_tgt.Equals(_src53) { return false }
  }
  return true
}

func (p *AddHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddHostsReq(%+v)", *p)
}

func (p *AddHostsReq) Validate() error {
  return nil
}
// Attributes:
//  - Hosts
type DropHostsReq struct {
  Hosts []*nebula.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewDropHostsReq() *DropHostsReq {
  return &DropHostsReq{}
}


func (p *DropHostsReq) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}
func (p *DropHostsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropHostsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem54 := &nebula.HostAddr{}
    if err := _elem54.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
    }
    p.Hosts = append(p.Hosts, _elem54)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropHostsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropHostsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *DropHostsReq) Equals(other *DropHostsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src55 := other.Hosts[i]
    if !_tgt.Equals(_src55) { return false }
  }
  return true
}

func (p *DropHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropHostsReq(%+v)", *p)
}

func (p *DropHostsReq) Validate() error {
  return nil
}
// Attributes:
//  - Type
type ListHostsReq struct {
  Type ListHostType `thrift:"type,1" db:"type" json:"type"`
}

func NewListHostsReq() *ListHostsReq {
  return &ListHostsReq{}
}


func (p *ListHostsReq) GetType() ListHostType {
  return p.Type
}
func (p *ListHostsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ListHostType(v)
  p.Type = temp
}
  return nil
}

func (p *ListHostsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListHostsReq) Equals(other *ListHostsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  return true
}

func (p *ListHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsReq(%+v)", *p)
}

func (p *ListHostsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Hosts
type ListHostsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*HostItem `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewListHostsResp() *ListHostsResp {
  return &ListHostsResp{}
}


func (p *ListHostsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListHostsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListHostsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListHostsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListHostsResp) GetHosts() []*HostItem {
  return p.Hosts
}
func (p *ListHostsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListHostsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListHostsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostItem, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem56 := &HostItem{}
    if err := _elem56.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
    }
    p.Hosts = append(p.Hosts, _elem56)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListHostsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListHostsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *ListHostsResp) Equals(other *ListHostsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src57 := other.Hosts[i]
    if !_tgt.Equals(_src57) { return false }
  }
  return true
}

func (p *ListHostsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsResp(%+v)", *p)
}

func (p *ListHostsResp) Validate() error {
  return nil
}
// Attributes:
//  - PartID
//  - Leader
//  - Peers
//  - Losts
type PartItem struct {
  PartID nebula.PartitionID `thrift:"part_id,1,required" db:"part_id" json:"part_id"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader,omitempty"`
  Peers []*nebula.HostAddr `thrift:"peers,3,required" db:"peers" json:"peers"`
  Losts []*nebula.HostAddr `thrift:"losts,4,required" db:"losts" json:"losts"`
}

func NewPartItem() *PartItem {
  return &PartItem{}
}


func (p *PartItem) GetPartID() nebula.PartitionID {
  return p.PartID
}
var PartItem_Leader_DEFAULT *nebula.HostAddr
func (p *PartItem) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return PartItem_Leader_DEFAULT
  }
return p.Leader
}

func (p *PartItem) GetPeers() []*nebula.HostAddr {
  return p.Peers
}

func (p *PartItem) GetLosts() []*nebula.HostAddr {
  return p.Losts
}
func (p *PartItem) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *PartItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartID bool = false;
  var issetPeers bool = false;
  var issetLosts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPartID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetPeers = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetLosts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  if !issetPeers{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Peers is not set"));
  }
  if !issetLosts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Losts is not set"));
  }
  return nil
}

func (p *PartItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *PartItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *PartItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem58 := &nebula.HostAddr{}
    if err := _elem58.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
    }
    p.Peers = append(p.Peers, _elem58)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Losts =  tSlice
  for i := 0; i < size; i ++ {
    _elem59 := &nebula.HostAddr{}
    if err := _elem59.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
    }
    p.Losts = append(p.Losts, _elem59)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *PartItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
    if err := p.Leader.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  }
  return err
}

func (p *PartItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *PartItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "losts", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:losts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Losts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Losts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:losts: ", p), err) }
  return err
}

func (p *PartItem) Equals(other *PartItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartID != other.PartID { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Peers) != len(other.Peers) { return false }
  for i, _tgt := range p.Peers {
    _src60 := other.Peers[i]
    if !_tgt.Equals(_src60) { return false }
  }
  if len(p.Losts) != len(other.Losts) { return false }
  for i, _tgt := range p.Losts {
    _src61 := other.Losts[i]
    if !_tgt.Equals(_src61) { return false }
  }
  return true
}

func (p *PartItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartItem(%+v)", *p)
}

func (p *PartItem) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartIds
type ListPartsReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartIds []nebula.PartitionID `thrift:"part_ids,2" db:"part_ids" json:"part_ids"`
}

func NewListPartsReq() *ListPartsReq {
  return &ListPartsReq{}
}


func (p *ListPartsReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ListPartsReq) GetPartIds() []nebula.PartitionID {
  return p.PartIds
}
func (p *ListPartsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListPartsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.PartIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem62 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem62 = temp
}
    p.PartIds = append(p.PartIds, _elem62)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListPartsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListPartsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.PartIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_ids: ", p), err) }
  return err
}

func (p *ListPartsReq) Equals(other *ListPartsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.PartIds) != len(other.PartIds) { return false }
  for i, _tgt := range p.PartIds {
    _src63 := other.PartIds[i]
    if _tgt != _src63 { return false }
  }
  return true
}

func (p *ListPartsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPartsReq(%+v)", *p)
}

func (p *ListPartsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Parts
type ListPartsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts []*PartItem `thrift:"parts,3" db:"parts" json:"parts"`
}

func NewListPartsResp() *ListPartsResp {
  return &ListPartsResp{}
}


func (p *ListPartsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListPartsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListPartsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListPartsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListPartsResp) GetParts() []*PartItem {
  return p.Parts
}
func (p *ListPartsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListPartsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListPartsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartItem, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    _elem64 := &PartItem{}
    if err := _elem64.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem64), err)
    }
    p.Parts = append(p.Parts, _elem64)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListPartsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *ListPartsResp) Equals(other *ListPartsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src65 := other.Parts[i]
    if !_tgt.Equals(_src65) { return false }
  }
  return true
}

func (p *ListPartsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPartsResp(%+v)", *p)
}

func (p *ListPartsResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type GetPartsAllocReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetPartsAllocReq() *GetPartsAllocReq {
  return &GetPartsAllocReq{}
}


func (p *GetPartsAllocReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *GetPartsAllocReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetPartsAllocReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPartsAllocReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPartsAllocReq) Equals(other *GetPartsAllocReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *GetPartsAllocReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocReq(%+v)", *p)
}

func (p *GetPartsAllocReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Parts
//  - Terms
type GetPartsAllocResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts map[nebula.PartitionID][]*nebula.HostAddr `thrift:"parts,3" db:"parts" json:"parts"`
  Terms map[nebula.PartitionID]int64 `thrift:"terms,4" db:"terms" json:"terms,omitempty"`
}

func NewGetPartsAllocResp() *GetPartsAllocResp {
  return &GetPartsAllocResp{}
}


func (p *GetPartsAllocResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetPartsAllocResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetPartsAllocResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetPartsAllocResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetPartsAllocResp) GetParts() map[nebula.PartitionID][]*nebula.HostAddr {
  return p.Parts
}
var GetPartsAllocResp_Terms_DEFAULT map[nebula.PartitionID]int64

func (p *GetPartsAllocResp) GetTerms() map[nebula.PartitionID]int64 {
  return p.Terms
}
func (p *GetPartsAllocResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetPartsAllocResp) IsSetTerms() bool {
  return p.Terms != nil
}

func (p *GetPartsAllocResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetPartsAllocResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.HostAddr, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key66 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key66 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.HostAddr, 0, size)
    _val67 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem68 := &nebula.HostAddr{}
      if err := _elem68.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem68), err)
      }
      _val67 = append(_val67, _elem68)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key66] = _val67
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID]int64, size)
  p.Terms =  tMap
  for i := 0; i < size; i ++ {
var _key69 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key69 = temp
}
var _val70 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val70 = v
}
    p.Terms[_key69] = _val70
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPartsAllocResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTerms() {
    if err := oprot.WriteFieldBegin(ctx, "terms", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:terms: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.Terms)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Terms {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:terms: ", p), err) }
  }
  return err
}

func (p *GetPartsAllocResp) Equals(other *GetPartsAllocResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src71 := other.Parts[k]
    if len(_tgt) != len(_src71) { return false }
    for i, _tgt := range _tgt {
      _src72 := _src71[i]
      if !_tgt.Equals(_src72) { return false }
    }
  }
  if len(p.Terms) != len(other.Terms) { return false }
  for k, _tgt := range p.Terms {
    _src73 := other.Terms[k]
    if _tgt != _src73 { return false }
  }
  return true
}

func (p *GetPartsAllocResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocResp(%+v)", *p)
}

func (p *GetPartsAllocResp) Validate() error {
  return nil
}
// Attributes:
//  - Host
type GetWorkerIdReq struct {
  Host []byte `thrift:"host,1" db:"host" json:"host"`
}

func NewGetWorkerIdReq() *GetWorkerIdReq {
  return &GetWorkerIdReq{}
}


func (p *GetWorkerIdReq) GetHost() []byte {
  return p.Host
}
func (p *GetWorkerIdReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkerIdReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *GetWorkerIdReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetWorkerIdReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkerIdReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Host); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *GetWorkerIdReq) Equals(other *GetWorkerIdReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Host, other.Host) != 0 { return false }
  return true
}

func (p *GetWorkerIdReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWorkerIdReq(%+v)", *p)
}

func (p *GetWorkerIdReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Workerid
type GetWorkerIdResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Workerid int64 `thrift:"workerid,3" db:"workerid" json:"workerid"`
}

func NewGetWorkerIdResp() *GetWorkerIdResp {
  return &GetWorkerIdResp{}
}


func (p *GetWorkerIdResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetWorkerIdResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetWorkerIdResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetWorkerIdResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetWorkerIdResp) GetWorkerid() int64 {
  return p.Workerid
}
func (p *GetWorkerIdResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetWorkerIdResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkerIdResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetWorkerIdResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetWorkerIdResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Workerid = v
}
  return nil
}

func (p *GetWorkerIdResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetWorkerIdResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkerIdResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "workerid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:workerid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Workerid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workerid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:workerid: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) Equals(other *GetWorkerIdResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if p.Workerid != other.Workerid { return false }
  return true
}

func (p *GetWorkerIdResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetWorkerIdResp(%+v)", *p)
}

func (p *GetWorkerIdResp) Validate() error {
  return nil
}
// Attributes:
//  - Length
type GetSegmentIdReq struct {
  Length int64 `thrift:"length,1" db:"length" json:"length"`
}

func NewGetSegmentIdReq() *GetSegmentIdReq {
  return &GetSegmentIdReq{}
}


func (p *GetSegmentIdReq) GetLength() int64 {
  return p.Length
}
func (p *GetSegmentIdReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSegmentIdReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Length = v
}
  return nil
}

func (p *GetSegmentIdReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSegmentIdReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSegmentIdReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "length", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:length: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Length)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.length (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:length: ", p), err) }
  return err
}

func (p *GetSegmentIdReq) Equals(other *GetSegmentIdReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Length != other.Length { return false }
  return true
}

func (p *GetSegmentIdReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSegmentIdReq(%+v)", *p)
}

func (p *GetSegmentIdReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - SegmentID
type GetSegmentIdResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  SegmentID int64 `thrift:"segment_id,3" db:"segment_id" json:"segment_id"`
}

func NewGetSegmentIdResp() *GetSegmentIdResp {
  return &GetSegmentIdResp{}
}


func (p *GetSegmentIdResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetSegmentIdResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetSegmentIdResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetSegmentIdResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetSegmentIdResp) GetSegmentID() int64 {
  return p.SegmentID
}
func (p *GetSegmentIdResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetSegmentIdResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSegmentIdResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetSegmentIdResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSegmentIdResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SegmentID = v
}
  return nil
}

func (p *GetSegmentIdResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSegmentIdResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSegmentIdResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "segment_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:segment_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SegmentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:segment_id: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) Equals(other *GetSegmentIdResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if p.SegmentID != other.SegmentID { return false }
  return true
}

func (p *GetSegmentIdResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSegmentIdResp(%+v)", *p)
}

func (p *GetSegmentIdResp) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - ClusterID
//  - LastUpdateTimeInMs
//  - MetaVersion
type HBResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LastUpdateTimeInMs int64 `thrift:"last_update_time_in_ms,4" db:"last_update_time_in_ms" json:"last_update_time_in_ms"`
  MetaVersion int32 `thrift:"meta_version,5" db:"meta_version" json:"meta_version"`
}

func NewHBResp() *HBResp {
  return &HBResp{}
}


func (p *HBResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var HBResp_Leader_DEFAULT *nebula.HostAddr
func (p *HBResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return HBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *HBResp) GetClusterID() ClusterID {
  return p.ClusterID
}

func (p *HBResp) GetLastUpdateTimeInMs() int64 {
  return p.LastUpdateTimeInMs
}

func (p *HBResp) GetMetaVersion() int32 {
  return p.MetaVersion
}
func (p *HBResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *HBResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *HBResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *HBResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBResp)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastUpdateTimeInMs = v
}
  return nil
}

func (p *HBResp)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MetaVersion = v
}
  return nil
}

func (p *HBResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *HBResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *HBResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBResp) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_update_time_in_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_update_time_in_ms: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastUpdateTimeInMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_update_time_in_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_update_time_in_ms: ", p), err) }
  return err
}

func (p *HBResp) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta_version", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:meta_version: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MetaVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meta_version (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:meta_version: ", p), err) }
  return err
}

func (p *HBResp) Equals(other *HBResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if p.ClusterID != other.ClusterID { return false }
  if p.LastUpdateTimeInMs != other.LastUpdateTimeInMs { return false }
  if p.MetaVersion != other.MetaVersion { return false }
  return true
}

func (p *HBResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBResp(%+v)", *p)
}

func (p *HBResp) Validate() error {
  return nil
}
// Attributes:
//  - PartID
//  - Term
type LeaderInfo struct {
  PartID nebula.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Term int64 `thrift:"term,2" db:"term" json:"term"`
}

func NewLeaderInfo() *LeaderInfo {
  return &LeaderInfo{}
}


func (p *LeaderInfo) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *LeaderInfo) GetTerm() int64 {
  return p.Term
}
func (p *LeaderInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LeaderInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *LeaderInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *LeaderInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LeaderInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LeaderInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *LeaderInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term: ", p), err) }
  return err
}

func (p *LeaderInfo) Equals(other *LeaderInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartID != other.PartID { return false }
  if p.Term != other.Term { return false }
  return true
}

func (p *LeaderInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LeaderInfo(%+v)", *p)
}

func (p *LeaderInfo) Validate() error {
  return nil
}
// Attributes:
//  - PartList
type PartitionList struct {
  PartList []nebula.PartitionID `thrift:"part_list,1" db:"part_list" json:"part_list"`
}

func NewPartitionList() *PartitionList {
  return &PartitionList{}
}


func (p *PartitionList) GetPartList() []nebula.PartitionID {
  return p.PartList
}
func (p *PartitionList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.PartList =  tSlice
  for i := 0; i < size; i ++ {
var _elem74 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem74 = temp
}
    p.PartList = append(p.PartList, _elem74)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_list", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.PartList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartList {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_list: ", p), err) }
  return err
}

func (p *PartitionList) Equals(other *PartitionList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PartList) != len(other.PartList) { return false }
  for i, _tgt := range p.PartList {
    _src75 := other.PartList[i]
    if _tgt != _src75 { return false }
  }
  return true
}

func (p *PartitionList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionList(%+v)", *p)
}

func (p *PartitionList) Validate() error {
  return nil
}
// Attributes:
//  - Role
//  - Host
//  - ClusterID
//  - LeaderPartIds
//  - GitInfoSha
//  - DiskParts
//  - Dir
//  - Version
type HBReq struct {
  Role HostRole `thrift:"role,1" db:"role" json:"role"`
  Host *nebula.HostAddr `thrift:"host,2" db:"host" json:"host"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LeaderPartIds map[nebula.GraphSpaceID][]*LeaderInfo `thrift:"leader_partIds,4" db:"leader_partIds" json:"leader_partIds,omitempty"`
  GitInfoSha []byte `thrift:"git_info_sha,5" db:"git_info_sha" json:"git_info_sha"`
  DiskParts map[nebula.GraphSpaceID]map[string]*PartitionList `thrift:"disk_parts,6" db:"disk_parts" json:"disk_parts,omitempty"`
  Dir *nebula.DirInfo `thrift:"dir,7" db:"dir" json:"dir,omitempty"`
  Version []byte `thrift:"version,8" db:"version" json:"version,omitempty"`
}

func NewHBReq() *HBReq {
  return &HBReq{}
}


func (p *HBReq) GetRole() HostRole {
  return p.Role
}
var HBReq_Host_DEFAULT *nebula.HostAddr
func (p *HBReq) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return HBReq_Host_DEFAULT
  }
return p.Host
}

func (p *HBReq) GetClusterID() ClusterID {
  return p.ClusterID
}
var HBReq_LeaderPartIds_DEFAULT map[nebula.GraphSpaceID][]*LeaderInfo

func (p *HBReq) GetLeaderPartIds() map[nebula.GraphSpaceID][]*LeaderInfo {
  return p.LeaderPartIds
}

func (p *HBReq) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var HBReq_DiskParts_DEFAULT map[nebula.GraphSpaceID]map[string]*PartitionList

func (p *HBReq) GetDiskParts() map[nebula.GraphSpaceID]map[string]*PartitionList {
  return p.DiskParts
}
var HBReq_Dir_DEFAULT *nebula.DirInfo
func (p *HBReq) GetDir() *nebula.DirInfo {
  if !p.IsSetDir() {
    return HBReq_Dir_DEFAULT
  }
return p.Dir
}
var HBReq_Version_DEFAULT []byte

func (p *HBReq) GetVersion() []byte {
  return p.Version
}
func (p *HBReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *HBReq) IsSetLeaderPartIds() bool {
  return p.LeaderPartIds != nil
}

func (p *HBReq) IsSetDiskParts() bool {
  return p.DiskParts != nil
}

func (p *HBReq) IsSetDir() bool {
  return p.Dir != nil
}

func (p *HBReq) IsSetVersion() bool {
  return p.Version != nil
}

func (p *HBReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := HostRole(v)
  p.Role = temp
}
  return nil
}

func (p *HBReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HBReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.GraphSpaceID][]*LeaderInfo, size)
  p.LeaderPartIds =  tMap
  for i := 0; i < size; i ++ {
var _key76 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _key76 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*LeaderInfo, 0, size)
    _val77 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem78 := &LeaderInfo{}
      if err := _elem78.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem78), err)
      }
      _val77 = append(_val77, _elem78)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderPartIds[_key76] = _val77
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HBReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GitInfoSha = v
}
  return nil
}

func (p *HBReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.GraphSpaceID]map[string]*PartitionList, size)
  p.DiskParts =  tMap
  for i := 0; i < size; i ++ {
var _key79 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _key79 = temp
}
    _, _, size, err := iprot.ReadMapBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]*PartitionList, size)
    _val80 :=  tMap
    for i := 0; i < size; i ++ {
var _key81 string
      if v, err := iprot.ReadString(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key81 = v
}
      _val82 := &PartitionList{}
      if err := _val82.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val82), err)
      }
      _val80[_key81] = _val82
    }
    if err := iprot.ReadMapEnd(ctx); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.DiskParts[_key79] = _val80
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HBReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dir = &nebula.DirInfo{}
  if err := p.Dir.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *HBReq)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *HBReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  return err
}

func (p *HBReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *HBReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeaderPartIds() {
    if err := oprot.WriteFieldBegin(ctx, "leader_partIds", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_partIds: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.LeaderPartIds)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.LeaderPartIds {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(ctx, oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(ctx); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_partIds: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "git_info_sha", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:git_info_sha: ", p), err) }
  return err
}

func (p *HBReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDiskParts() {
    if err := oprot.WriteFieldBegin(ctx, "disk_parts", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:disk_parts: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.MAP, len(p.DiskParts)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.DiskParts {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(ctx, string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := v.Write(ctx, oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteMapEnd(ctx); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:disk_parts: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDir() {
    if err := oprot.WriteFieldBegin(ctx, "dir", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dir: ", p), err) }
    if err := p.Dir.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dir: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err) }
  }
  return err
}

func (p *HBReq) Equals(other *HBReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Role != other.Role { return false }
  if !p.Host.Equals(other.Host) { return false }
  if p.ClusterID != other.ClusterID { return false }
  if len(p.LeaderPartIds) != len(other.LeaderPartIds) { return false }
  for k, _tgt := range p.LeaderPartIds {
    _src83 := other.LeaderPartIds[k]
    if len(_tgt) != len(_src83) { return false }
    for i, _tgt := range _tgt {
      _src84 := _src83[i]
      if !_tgt.Equals(_src84) { return false }
    }
  }
  if bytes.Compare(p.GitInfoSha, other.GitInfoSha) != 0 { return false }
  if len(p.DiskParts) != len(other.DiskParts) { return false }
  for k, _tgt := range p.DiskParts {
    _src85 := other.DiskParts[k]
    if len(_tgt) != len(_src85) { return false }
    for k, _tgt := range _tgt {
      _src86 := _src85[k]
      if !_tgt.Equals(_src86) { return false }
    }
  }
  if !p.Dir.Equals(other.Dir) { return false }
  if bytes.Compare(p.Version, other.Version) != 0 { return false }
  return true
}

func (p *HBReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBReq(%+v)", *p)
}

func (p *HBReq) Validate() error {
  return nil
}
// Attributes:
//  - Dir
//  - Addr
//  - Role
type ServiceInfo struct {
  Dir *nebula.DirInfo `thrift:"dir,1" db:"dir" json:"dir"`
  Addr *nebula.HostAddr `thrift:"addr,2" db:"addr" json:"addr"`
  Role HostRole `thrift:"role,3" db:"role" json:"role"`
}

func NewServiceInfo() *ServiceInfo {
  return &ServiceInfo{}
}

var ServiceInfo_Dir_DEFAULT *nebula.DirInfo
func (p *ServiceInfo) GetDir() *nebula.DirInfo {
  if !p.IsSetDir() {
    return ServiceInfo_Dir_DEFAULT
  }
return p.Dir
}
var ServiceInfo_Addr_DEFAULT *nebula.HostAddr
func (p *ServiceInfo) GetAddr() *nebula.HostAddr {
  if !p.IsSetAddr() {
    return ServiceInfo_Addr_DEFAULT
  }
return p.Addr
}

func (p *ServiceInfo) GetRole() HostRole {
  return p.Role
}
func (p *ServiceInfo) IsSetDir() bool {
  return p.Dir != nil
}

func (p *ServiceInfo) IsSetAddr() bool {
  return p.Addr != nil
}

func (p *ServiceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dir = &nebula.DirInfo{}
  if err := p.Dir.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Addr = &nebula.HostAddr{}
  if err := p.Addr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Addr), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := HostRole(v)
  p.Role = temp
}
  return nil
}

func (p *ServiceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ServiceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dir", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dir: ", p), err) }
  if err := p.Dir.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dir: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addr", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addr: ", p), err) }
  if err := p.Addr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Addr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addr: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err) }
  return err
}

func (p *ServiceInfo) Equals(other *ServiceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Dir.Equals(other.Dir) { return false }
  if !p.Addr.Equals(other.Addr) { return false }
  if p.Role != other.Role { return false }
  return true
}

func (p *ServiceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceInfo(%+v)", *p)
}

func (p *ServiceInfo) Validate() error {
  return nil
}
// Attributes:
//  - Host
//  - GitInfoSha
//  - Version
type AgentHBReq struct {
  Host *nebula.HostAddr `thrift:"host,1" db:"host" json:"host"`
  GitInfoSha []byte `thrift:"git_info_sha,2" db:"git_info_sha" json:"git_info_sha"`
  Version []byte `thrift:"version,3" db:"version" json:"version,omitempty"`
}

func NewAgentHBReq() *AgentHBReq {
  return &AgentHBReq{}
}

var AgentHBReq_Host_DEFAULT *nebula.HostAddr
func (p *AgentHBReq) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return AgentHBReq_Host_DEFAULT
  }
return p.Host
}

func (p *AgentHBReq) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var AgentHBReq_Version_DEFAULT []byte

func (p *AgentHBReq) GetVersion() []byte {
  return p.Version
}
func (p *AgentHBReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *AgentHBReq) IsSetVersion() bool {
  return p.Version != nil
}

func (p *AgentHBReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgentHBReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *AgentHBReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GitInfoSha = v
}
  return nil
}

func (p *AgentHBReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *AgentHBReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AgentHBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgentHBReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *AgentHBReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "git_info_sha", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:git_info_sha: ", p), err) }
  return err
}

func (p *AgentHBReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  }
  return err
}

func (p *AgentHBReq) Equals(other *AgentHBReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Host.Equals(other.Host) { return false }
  if bytes.Compare(p.GitInfoSha, other.GitInfoSha) != 0 { return false }
  if bytes.Compare(p.Version, other.Version) != 0 { return false }
  return true
}

func (p *AgentHBReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AgentHBReq(%+v)", *p)
}

func (p *AgentHBReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - ServiceList
type AgentHBResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ServiceList []*ServiceInfo `thrift:"service_list,3" db:"service_list" json:"service_list"`
}

func NewAgentHBResp() *AgentHBResp {
  return &AgentHBResp{}
}


func (p *AgentHBResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var AgentHBResp_Leader_DEFAULT *nebula.HostAddr
func (p *AgentHBResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return AgentHBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *AgentHBResp) GetServiceList() []*ServiceInfo {
  return p.ServiceList
}
func (p *AgentHBResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *AgentHBResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgentHBResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *AgentHBResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AgentHBResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServiceInfo, 0, size)
  p.ServiceList =  tSlice
  for i := 0; i < size; i ++ {
    _elem87 := &ServiceInfo{}
    if err := _elem87.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem87), err)
    }
    p.ServiceList = append(p.ServiceList, _elem87)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AgentHBResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AgentHBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgentHBResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AgentHBResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AgentHBResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "service_list", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:service_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ServiceList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ServiceList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:service_list: ", p), err) }
  return err
}

func (p *AgentHBResp) Equals(other *AgentHBResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.ServiceList) != len(other.ServiceList) { return false }
  for i, _tgt := range p.ServiceList {
    _src88 := other.ServiceList[i]
    if !_tgt.Equals(_src88) { return false }
  }
  return true
}

func (p *AgentHBResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AgentHBResp(%+v)", *p)
}

func (p *AgentHBResp) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - TypeLength
type IndexFieldDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  TypeLength *int16 `thrift:"type_length,2" db:"type_length" json:"type_length,omitempty"`
}

func NewIndexFieldDef() *IndexFieldDef {
  return &IndexFieldDef{}
}


func (p *IndexFieldDef) GetName() []byte {
  return p.Name
}
var IndexFieldDef_TypeLength_DEFAULT int16
func (p *IndexFieldDef) GetTypeLength() int16 {
  if !p.IsSetTypeLength() {
    return IndexFieldDef_TypeLength_DEFAULT
  }
return *p.TypeLength
}
func (p *IndexFieldDef) IsSetTypeLength() bool {
  return p.TypeLength != nil
}

func (p *IndexFieldDef) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *IndexFieldDef)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IndexFieldDef)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TypeLength = &v
}
  return nil
}

func (p *IndexFieldDef) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexFieldDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexFieldDef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexFieldDef) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin(ctx, "type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *IndexFieldDef) Equals(other *IndexFieldDef) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if p.TypeLength != other.TypeLength {
    if p.TypeLength == nil || other.TypeLength == nil {
      return false
    }
    if (*p.TypeLength) != (*other.TypeLength) { return false }
  }
  return true
}

func (p *IndexFieldDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexFieldDef(%+v)", *p)
}

func (p *IndexFieldDef) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
//  - TagName
//  - Fields
//  - IfNotExists
//  - Comment
//  - IndexParams
type CreateTagIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  TagName []byte `thrift:"tag_name,3" db:"tag_name" json:"tag_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
  Comment []byte `thrift:"comment,6" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7" db:"index_params" json:"index_params,omitempty"`
}

func NewCreateTagIndexReq() *CreateTagIndexReq {
  return &CreateTagIndexReq{}
}


func (p *CreateTagIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateTagIndexReq) GetTagName() []byte {
  return p.TagName
}

func (p *CreateTagIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateTagIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
var CreateTagIndexReq_Comment_DEFAULT []byte

func (p *CreateTagIndexReq) GetComment() []byte {
  return p.Comment
}
var CreateTagIndexReq_IndexParams_DEFAULT *IndexParams
func (p *CreateTagIndexReq) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return CreateTagIndexReq_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *CreateTagIndexReq) IsSetComment() bool {
  return p.Comment != nil
}

func (p *CreateTagIndexReq) IsSetIndexParams() bool {
  return p.IndexParams != nil
}

func (p *CreateTagIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem89 := &IndexFieldDef{}
    if err := _elem89.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem89), err)
    }
    p.Fields = append(p.Fields, _elem89)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexParams = &IndexParams{}
  if err := p.IndexParams.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *CreateTagIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *CreateTagIndexReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin(ctx, "index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *CreateTagIndexReq) Equals(other *CreateTagIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  if bytes.Compare(p.TagName, other.TagName) != 0 { return false }
  if len(p.Fields) != len(other.Fields) { return false }
  for i, _tgt := range p.Fields {
    _src90 := other.Fields[i]
    if !_tgt.Equals(_src90) { return false }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  if !p.IndexParams.Equals(other.IndexParams) { return false }
  return true
}

func (p *CreateTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTagIndexReq(%+v)", *p)
}

func (p *CreateTagIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropTagIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagIndexReq() *DropTagIndexReq {
  return &DropTagIndexReq{}
}


func (p *DropTagIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropTagIndexReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropTagIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropTagIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *DropTagIndexReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropTagIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagIndexReq) Equals(other *DropTagIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTagIndexReq(%+v)", *p)
}

func (p *DropTagIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
type GetTagIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetTagIndexReq() *GetTagIndexReq {
  return &GetTagIndexReq{}
}


func (p *GetTagIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *GetTagIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetTagIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *GetTagIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetTagIndexReq) Equals(other *GetTagIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  return true
}

func (p *GetTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagIndexReq(%+v)", *p)
}

func (p *GetTagIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Item
type GetTagIndexResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetTagIndexResp() *GetTagIndexResp {
  return &GetTagIndexResp{}
}


func (p *GetTagIndexResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetTagIndexResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetTagIndexResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetTagIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagIndexResp_Item_DEFAULT *IndexItem
func (p *GetTagIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetTagIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetTagIndexResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetTagIndexResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetTagIndexResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetTagIndexResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &IndexItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetTagIndexResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetTagIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetTagIndexResp) Equals(other *GetTagIndexResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *GetTagIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagIndexResp(%+v)", *p)
}

func (p *GetTagIndexResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListTagIndexesReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagIndexesReq() *ListTagIndexesReq {
  return &ListTagIndexesReq{}
}


func (p *ListTagIndexesReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListTagIndexesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListTagIndexesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListTagIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagIndexesReq) Equals(other *ListTagIndexesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListTagIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagIndexesReq(%+v)", *p)
}

func (p *ListTagIndexesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Items
type ListTagIndexesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListTagIndexesResp() *ListTagIndexesResp {
  return &ListTagIndexesResp{}
}


func (p *ListTagIndexesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListTagIndexesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListTagIndexesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListTagIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListTagIndexesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListTagIndexesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListTagIndexesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem91 := &IndexItem{}
    if err := _elem91.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem91), err)
    }
    p.Items = append(p.Items, _elem91)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagIndexesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListTagIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) Equals(other *ListTagIndexesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src92 := other.Items[i]
    if !_tgt.Equals(_src92) { return false }
  }
  return true
}

func (p *ListTagIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagIndexesResp(%+v)", *p)
}

func (p *ListTagIndexesResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
//  - EdgeName
//  - Fields
//  - IfNotExists
//  - Comment
//  - IndexParams
type CreateEdgeIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  EdgeName []byte `thrift:"edge_name,3" db:"edge_name" json:"edge_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
  Comment []byte `thrift:"comment,6" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7" db:"index_params" json:"index_params,omitempty"`
}

func NewCreateEdgeIndexReq() *CreateEdgeIndexReq {
  return &CreateEdgeIndexReq{}
}


func (p *CreateEdgeIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateEdgeIndexReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *CreateEdgeIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateEdgeIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
var CreateEdgeIndexReq_Comment_DEFAULT []byte

func (p *CreateEdgeIndexReq) GetComment() []byte {
  return p.Comment
}
var CreateEdgeIndexReq_IndexParams_DEFAULT *IndexParams
func (p *CreateEdgeIndexReq) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return CreateEdgeIndexReq_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *CreateEdgeIndexReq) IsSetComment() bool {
  return p.Comment != nil
}

func (p *CreateEdgeIndexReq) IsSetIndexParams() bool {
  return p.IndexParams != nil
}

func (p *CreateEdgeIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem93 := &IndexFieldDef{}
    if err := _elem93.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem93), err)
    }
    p.Fields = append(p.Fields, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.IndexParams = &IndexParams{}
  if err := p.IndexParams.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *CreateEdgeIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *CreateEdgeIndexReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin(ctx, "index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *CreateEdgeIndexReq) Equals(other *CreateEdgeIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  if bytes.Compare(p.EdgeName, other.EdgeName) != 0 { return false }
  if len(p.Fields) != len(other.Fields) { return false }
  for i, _tgt := range p.Fields {
    _src94 := other.Fields[i]
    if !_tgt.Equals(_src94) { return false }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  if !p.IndexParams.Equals(other.IndexParams) { return false }
  return true
}

func (p *CreateEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateEdgeIndexReq(%+v)", *p)
}

func (p *CreateEdgeIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropEdgeIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeIndexReq() *DropEdgeIndexReq {
  return &DropEdgeIndexReq{}
}


func (p *DropEdgeIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropEdgeIndexReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropEdgeIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropEdgeIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *DropEdgeIndexReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropEdgeIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) Equals(other *DropEdgeIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropEdgeIndexReq(%+v)", *p)
}

func (p *DropEdgeIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
type GetEdgeIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetEdgeIndexReq() *GetEdgeIndexReq {
  return &GetEdgeIndexReq{}
}


func (p *GetEdgeIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *GetEdgeIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetEdgeIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *GetEdgeIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) Equals(other *GetEdgeIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  return true
}

func (p *GetEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeIndexReq(%+v)", *p)
}

func (p *GetEdgeIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Item
type GetEdgeIndexResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetEdgeIndexResp() *GetEdgeIndexResp {
  return &GetEdgeIndexResp{}
}


func (p *GetEdgeIndexResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetEdgeIndexResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetEdgeIndexResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeIndexResp_Item_DEFAULT *IndexItem
func (p *GetEdgeIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetEdgeIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetEdgeIndexResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetEdgeIndexResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetEdgeIndexResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetEdgeIndexResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &IndexItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetEdgeIndexResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetEdgeIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) Equals(other *GetEdgeIndexResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *GetEdgeIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeIndexResp(%+v)", *p)
}

func (p *GetEdgeIndexResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListEdgeIndexesReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgeIndexesReq() *ListEdgeIndexesReq {
  return &ListEdgeIndexesReq{}
}


func (p *ListEdgeIndexesReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListEdgeIndexesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListEdgeIndexesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListEdgeIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgeIndexesReq) Equals(other *ListEdgeIndexesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListEdgeIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgeIndexesReq(%+v)", *p)
}

func (p *ListEdgeIndexesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Items
type ListEdgeIndexesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListEdgeIndexesResp() *ListEdgeIndexesResp {
  return &ListEdgeIndexesResp{}
}


func (p *ListEdgeIndexesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListEdgeIndexesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListEdgeIndexesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgeIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgeIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListEdgeIndexesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListEdgeIndexesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem95 := &IndexItem{}
    if err := _elem95.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
    }
    p.Items = append(p.Items, _elem95)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgeIndexesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListEdgeIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) Equals(other *ListEdgeIndexesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src96 := other.Items[i]
    if !_tgt.Equals(_src96) { return false }
  }
  return true
}

func (p *ListEdgeIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgeIndexesResp(%+v)", *p)
}

func (p *ListEdgeIndexesResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - IndexName
type RebuildIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewRebuildIndexReq() *RebuildIndexReq {
  return &RebuildIndexReq{}
}


func (p *RebuildIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *RebuildIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RebuildIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *RebuildIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RebuildIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *RebuildIndexReq) Equals(other *RebuildIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.IndexName, other.IndexName) != 0 { return false }
  return true
}

func (p *RebuildIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RebuildIndexReq(%+v)", *p)
}

func (p *RebuildIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - EncodedPwd
//  - IfNotExists
type CreateUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
  IfNotExists bool `thrift:"if_not_exists,3" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateUserReq() *CreateUserReq {
  return &CreateUserReq{}
}


func (p *CreateUserReq) GetAccount() []byte {
  return p.Account
}

func (p *CreateUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}

func (p *CreateUserReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateUserReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *CreateUserReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *CreateUserReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateUserReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_not_exists: ", p), err) }
  return err
}

func (p *CreateUserReq) Equals(other *CreateUserReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  if bytes.Compare(p.EncodedPwd, other.EncodedPwd) != 0 { return false }
  if p.IfNotExists != other.IfNotExists { return false }
  return true
}

func (p *CreateUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

func (p *CreateUserReq) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - IfExists
type DropUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropUserReq() *DropUserReq {
  return &DropUserReq{}
}


func (p *DropUserReq) GetAccount() []byte {
  return p.Account
}

func (p *DropUserReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropUserReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropUserReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *DropUserReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropUserReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropUserReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *DropUserReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropUserReq) Equals(other *DropUserReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  if p.IfExists != other.IfExists { return false }
  return true
}

func (p *DropUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropUserReq(%+v)", *p)
}

func (p *DropUserReq) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - EncodedPwd
type AlterUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
}

func NewAlterUserReq() *AlterUserReq {
  return &AlterUserReq{}
}


func (p *AlterUserReq) GetAccount() []byte {
  return p.Account
}

func (p *AlterUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}
func (p *AlterUserReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterUserReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *AlterUserReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *AlterUserReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AlterUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterUserReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *AlterUserReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *AlterUserReq) Equals(other *AlterUserReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  if bytes.Compare(p.EncodedPwd, other.EncodedPwd) != 0 { return false }
  return true
}

func (p *AlterUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterUserReq(%+v)", *p)
}

func (p *AlterUserReq) Validate() error {
  return nil
}
// Attributes:
//  - RoleItem
type GrantRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewGrantRoleReq() *GrantRoleReq {
  return &GrantRoleReq{}
}

var GrantRoleReq_RoleItem_DEFAULT *RoleItem
func (p *GrantRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return GrantRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *GrantRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *GrantRoleReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRoleReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.RoleItem = &RoleItem{}
  if err := p.RoleItem.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *GrantRoleReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GrantRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRoleReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *GrantRoleReq) Equals(other *GrantRoleReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.RoleItem.Equals(other.RoleItem) { return false }
  return true
}

func (p *GrantRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRoleReq(%+v)", *p)
}

func (p *GrantRoleReq) Validate() error {
  return nil
}
// Attributes:
//  - RoleItem
type RevokeRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewRevokeRoleReq() *RevokeRoleReq {
  return &RevokeRoleReq{}
}

var RevokeRoleReq_RoleItem_DEFAULT *RoleItem
func (p *RevokeRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return RevokeRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *RevokeRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *RevokeRoleReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RevokeRoleReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.RoleItem = &RoleItem{}
  if err := p.RoleItem.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *RevokeRoleReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RevokeRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RevokeRoleReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *RevokeRoleReq) Equals(other *RevokeRoleReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.RoleItem.Equals(other.RoleItem) { return false }
  return true
}

func (p *RevokeRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokeRoleReq(%+v)", *p)
}

func (p *RevokeRoleReq) Validate() error {
  return nil
}
type ListUsersReq struct {
}

func NewListUsersReq() *ListUsersReq {
  return &ListUsersReq{}
}

func (p *ListUsersReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListUsersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersReq) Equals(other *ListUsersReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListUsersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersReq(%+v)", *p)
}

func (p *ListUsersReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Users
type ListUsersResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Users map[string][]byte `thrift:"users,3" db:"users" json:"users"`
}

func NewListUsersResp() *ListUsersResp {
  return &ListUsersResp{}
}


func (p *ListUsersResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListUsersResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListUsersResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListUsersResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListUsersResp) GetUsers() map[string][]byte {
  return p.Users
}
func (p *ListUsersResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListUsersResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListUsersResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Users =  tMap
  for i := 0; i < size; i ++ {
var _key97 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key97 = v
}
var _val98 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val98 = v
}
    p.Users[_key97] = _val98
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListUsersResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListUsersResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "users", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:users: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Users)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Users {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:users: ", p), err) }
  return err
}

func (p *ListUsersResp) Equals(other *ListUsersResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Users) != len(other.Users) { return false }
  for k, _tgt := range p.Users {
    _src99 := other.Users[k]
    if bytes.Compare(_tgt, _src99) != 0 { return false }
  }
  return true
}

func (p *ListUsersResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersResp(%+v)", *p)
}

func (p *ListUsersResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListRolesReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListRolesReq() *ListRolesReq {
  return &ListRolesReq{}
}


func (p *ListRolesReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListRolesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListRolesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListRolesReq) Equals(other *ListRolesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesReq(%+v)", *p)
}

func (p *ListRolesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Roles
type ListRolesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Roles []*RoleItem `thrift:"roles,3" db:"roles" json:"roles"`
}

func NewListRolesResp() *ListRolesResp {
  return &ListRolesResp{}
}


func (p *ListRolesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListRolesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListRolesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListRolesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListRolesResp) GetRoles() []*RoleItem {
  return p.Roles
}
func (p *ListRolesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListRolesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListRolesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoleItem, 0, size)
  p.Roles =  tSlice
  for i := 0; i < size; i ++ {
    _elem100 := &RoleItem{}
    if err := _elem100.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem100), err)
    }
    p.Roles = append(p.Roles, _elem100)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListRolesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListRolesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roles", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roles: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Roles {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roles: ", p), err) }
  return err
}

func (p *ListRolesResp) Equals(other *ListRolesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Roles) != len(other.Roles) { return false }
  for i, _tgt := range p.Roles {
    _src101 := other.Roles[i]
    if !_tgt.Equals(_src101) { return false }
  }
  return true
}

func (p *ListRolesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesResp(%+v)", *p)
}

func (p *ListRolesResp) Validate() error {
  return nil
}
// Attributes:
//  - Account
type GetUserRolesReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
}

func NewGetUserRolesReq() *GetUserRolesReq {
  return &GetUserRolesReq{}
}


func (p *GetUserRolesReq) GetAccount() []byte {
  return p.Account
}
func (p *GetUserRolesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserRolesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GetUserRolesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUserRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserRolesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GetUserRolesReq) Equals(other *GetUserRolesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  return true
}

func (p *GetUserRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserRolesReq(%+v)", *p)
}

func (p *GetUserRolesReq) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - NewEncodedPwd_
//  - OldEncodedPwd
type ChangePasswordReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  NewEncodedPwd_ []byte `thrift:"new_encoded_pwd,2" db:"new_encoded_pwd" json:"new_encoded_pwd"`
  OldEncodedPwd []byte `thrift:"old_encoded_pwd,3" db:"old_encoded_pwd" json:"old_encoded_pwd"`
}

func NewChangePasswordReq() *ChangePasswordReq {
  return &ChangePasswordReq{}
}


func (p *ChangePasswordReq) GetAccount() []byte {
  return p.Account
}

func (p *ChangePasswordReq) GetNewEncodedPwd_() []byte {
  return p.NewEncodedPwd_
}

func (p *ChangePasswordReq) GetOldEncodedPwd() []byte {
  return p.OldEncodedPwd
}
func (p *ChangePasswordReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewEncodedPwd_ = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OldEncodedPwd = v
}
  return nil
}

func (p *ChangePasswordReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChangePasswordReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChangePasswordReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.NewEncodedPwd_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_encoded_pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:old_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.OldEncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_encoded_pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:old_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) Equals(other *ChangePasswordReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Account, other.Account) != 0 { return false }
  if bytes.Compare(p.NewEncodedPwd_, other.NewEncodedPwd_) != 0 { return false }
  if bytes.Compare(p.OldEncodedPwd, other.OldEncodedPwd) != 0 { return false }
  return true
}

func (p *ChangePasswordReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChangePasswordReq(%+v)", *p)
}

func (p *ChangePasswordReq) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Command
//  - Result_
//  - StartTime
//  - StopTime
type BalanceTask struct {
  ID []byte `thrift:"id,1" db:"id" json:"id"`
  Command []byte `thrift:"command,2" db:"command" json:"command"`
  Result_ TaskResult_ `thrift:"result,3" db:"result" json:"result"`
  StartTime int64 `thrift:"start_time,4" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,5" db:"stop_time" json:"stop_time"`
}

func NewBalanceTask() *BalanceTask {
  return &BalanceTask{}
}


func (p *BalanceTask) GetID() []byte {
  return p.ID
}

func (p *BalanceTask) GetCommand() []byte {
  return p.Command
}

func (p *BalanceTask) GetResult_() TaskResult_ {
  return p.Result_
}

func (p *BalanceTask) GetStartTime() int64 {
  return p.StartTime
}

func (p *BalanceTask) GetStopTime() int64 {
  return p.StopTime
}
func (p *BalanceTask) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceTask)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BalanceTask)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Command = v
}
  return nil
}

func (p *BalanceTask)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TaskResult_(v)
  p.Result_ = temp
}
  return nil
}

func (p *BalanceTask)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *BalanceTask)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StopTime = v
}
  return nil
}

func (p *BalanceTask) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BalanceTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceTask) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BalanceTask) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "command", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:command: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Command); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:command: ", p), err) }
  return err
}

func (p *BalanceTask) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *BalanceTask) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  return err
}

func (p *BalanceTask) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stop_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stop_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stop_time: ", p), err) }
  return err
}

func (p *BalanceTask) Equals(other *BalanceTask) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ID, other.ID) != 0 { return false }
  if bytes.Compare(p.Command, other.Command) != 0 { return false }
  if p.Result_ != other.Result_ { return false }
  if p.StartTime != other.StartTime { return false }
  if p.StopTime != other.StopTime { return false }
  return true
}

func (p *BalanceTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceTask(%+v)", *p)
}

func (p *BalanceTask) Validate() error {
  return nil
}
// Attributes:
//  - Module
//  - Name
//  - Mode
//  - Value
type ConfigItem struct {
  Module ConfigModule `thrift:"module,1" db:"module" json:"module"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
  Mode ConfigMode `thrift:"mode,3" db:"mode" json:"mode"`
  Value *nebula.Value `thrift:"value,4" db:"value" json:"value"`
}

func NewConfigItem() *ConfigItem {
  return &ConfigItem{}
}


func (p *ConfigItem) GetModule() ConfigModule {
  return p.Module
}

func (p *ConfigItem) GetName() []byte {
  return p.Name
}

func (p *ConfigItem) GetMode() ConfigMode {
  return p.Mode
}
var ConfigItem_Value_DEFAULT *nebula.Value
func (p *ConfigItem) GetValue() *nebula.Value {
  if !p.IsSetValue() {
    return ConfigItem_Value_DEFAULT
  }
return p.Value
}
func (p *ConfigItem) IsSetValue() bool {
  return p.Value != nil
}

func (p *ConfigItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ConfigItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ConfigItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigMode(v)
  p.Mode = temp
}
  return nil
}

func (p *ConfigItem)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &nebula.Value{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *ConfigItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ConfigItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "module", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:module: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:module: ", p), err) }
  return err
}

func (p *ConfigItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ConfigItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *ConfigItem) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := p.Value.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *ConfigItem) Equals(other *ConfigItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Module != other.Module { return false }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if p.Mode != other.Mode { return false }
  if !p.Value.Equals(other.Value) { return false }
  return true
}

func (p *ConfigItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigItem(%+v)", *p)
}

func (p *ConfigItem) Validate() error {
  return nil
}
// Attributes:
//  - Items
type RegConfigReq struct {
  Items []*ConfigItem `thrift:"items,1" db:"items" json:"items"`
}

func NewRegConfigReq() *RegConfigReq {
  return &RegConfigReq{}
}


func (p *RegConfigReq) GetItems() []*ConfigItem {
  return p.Items
}
func (p *RegConfigReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegConfigReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem102 := &ConfigItem{}
    if err := _elem102.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem102), err)
    }
    p.Items = append(p.Items, _elem102)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RegConfigReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RegConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegConfigReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *RegConfigReq) Equals(other *RegConfigReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src103 := other.Items[i]
    if !_tgt.Equals(_src103) { return false }
  }
  return true
}

func (p *RegConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegConfigReq(%+v)", *p)
}

func (p *RegConfigReq) Validate() error {
  return nil
}
// Attributes:
//  - Item
type GetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewGetConfigReq() *GetConfigReq {
  return &GetConfigReq{}
}

var GetConfigReq_Item_DEFAULT *ConfigItem
func (p *GetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return GetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *GetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetConfigReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &ConfigItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetConfigReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *GetConfigReq) Equals(other *GetConfigReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *GetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigReq(%+v)", *p)
}

func (p *GetConfigReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Items
type GetConfigResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewGetConfigResp() *GetConfigResp {
  return &GetConfigResp{}
}


func (p *GetConfigResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetConfigResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetConfigResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetConfigResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetConfigResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *GetConfigResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetConfigResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetConfigResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem104 := &ConfigItem{}
    if err := _elem104.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem104), err)
    }
    p.Items = append(p.Items, _elem104)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetConfigResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetConfigResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *GetConfigResp) Equals(other *GetConfigResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src105 := other.Items[i]
    if !_tgt.Equals(_src105) { return false }
  }
  return true
}

func (p *GetConfigResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigResp(%+v)", *p)
}

func (p *GetConfigResp) Validate() error {
  return nil
}
// Attributes:
//  - Item
type SetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewSetConfigReq() *SetConfigReq {
  return &SetConfigReq{}
}

var SetConfigReq_Item_DEFAULT *ConfigItem
func (p *SetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return SetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *SetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *SetConfigReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetConfigReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &ConfigItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SetConfigReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetConfigReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SetConfigReq) Equals(other *SetConfigReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *SetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigReq(%+v)", *p)
}

func (p *SetConfigReq) Validate() error {
  return nil
}
// Attributes:
//  - Space
//  - Module
type ListConfigsReq struct {
  Space []byte `thrift:"space,1" db:"space" json:"space"`
  Module ConfigModule `thrift:"module,2" db:"module" json:"module"`
}

func NewListConfigsReq() *ListConfigsReq {
  return &ListConfigsReq{}
}


func (p *ListConfigsReq) GetSpace() []byte {
  return p.Space
}

func (p *ListConfigsReq) GetModule() ConfigModule {
  return p.Module
}
func (p *ListConfigsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Space = v
}
  return nil
}

func (p *ListConfigsReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ListConfigsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListConfigsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Space); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *ListConfigsReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "module", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:module: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:module: ", p), err) }
  return err
}

func (p *ListConfigsReq) Equals(other *ListConfigsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Space, other.Space) != 0 { return false }
  if p.Module != other.Module { return false }
  return true
}

func (p *ListConfigsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsReq(%+v)", *p)
}

func (p *ListConfigsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Items
type ListConfigsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListConfigsResp() *ListConfigsResp {
  return &ListConfigsResp{}
}


func (p *ListConfigsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListConfigsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListConfigsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListConfigsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListConfigsResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *ListConfigsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListConfigsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListConfigsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem106 := &ConfigItem{}
    if err := _elem106.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem106), err)
    }
    p.Items = append(p.Items, _elem106)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConfigsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListConfigsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListConfigsResp) Equals(other *ListConfigsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src107 := other.Items[i]
    if !_tgt.Equals(_src107) { return false }
  }
  return true
}

func (p *ListConfigsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsResp(%+v)", *p)
}

func (p *ListConfigsResp) Validate() error {
  return nil
}
type CreateSnapshotReq struct {
}

func NewCreateSnapshotReq() *CreateSnapshotReq {
  return &CreateSnapshotReq{}
}

func (p *CreateSnapshotReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSnapshotReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSnapshotReq) Equals(other *CreateSnapshotReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CreateSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSnapshotReq(%+v)", *p)
}

func (p *CreateSnapshotReq) Validate() error {
  return nil
}
// Attributes:
//  - Names
type DropSnapshotReq struct {
  Names [][]byte `thrift:"names,1" db:"names" json:"names"`
}

func NewDropSnapshotReq() *DropSnapshotReq {
  return &DropSnapshotReq{}
}


func (p *DropSnapshotReq) GetNames() [][]byte {
  return p.Names
}
func (p *DropSnapshotReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSnapshotReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Names =  tSlice
  for i := 0; i < size; i ++ {
var _elem108 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem108 = v
}
    p.Names = append(p.Names, _elem108)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropSnapshotReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSnapshotReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "names", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Names)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Names {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:names: ", p), err) }
  return err
}

func (p *DropSnapshotReq) Equals(other *DropSnapshotReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Names) != len(other.Names) { return false }
  for i, _tgt := range p.Names {
    _src109 := other.Names[i]
    if bytes.Compare(_tgt, _src109) != 0 { return false }
  }
  return true
}

func (p *DropSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropSnapshotReq(%+v)", *p)
}

func (p *DropSnapshotReq) Validate() error {
  return nil
}
type ListSnapshotsReq struct {
}

func NewListSnapshotsReq() *ListSnapshotsReq {
  return &ListSnapshotsReq{}
}

func (p *ListSnapshotsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSnapshotsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsReq) Equals(other *ListSnapshotsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListSnapshotsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSnapshotsReq(%+v)", *p)
}

func (p *ListSnapshotsReq) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Status
//  - Hosts
type Snapshot struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status SnapshotStatus `thrift:"status,2" db:"status" json:"status"`
  Hosts []byte `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewSnapshot() *Snapshot {
  return &Snapshot{}
}


func (p *Snapshot) GetName() []byte {
  return p.Name
}

func (p *Snapshot) GetStatus() SnapshotStatus {
  return p.Status
}

func (p *Snapshot) GetHosts() []byte {
  return p.Hosts
}
func (p *Snapshot) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Snapshot)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Snapshot)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SnapshotStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Snapshot)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hosts = v
}
  return nil
}

func (p *Snapshot) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Snapshot"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Snapshot) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Snapshot) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *Snapshot) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Hosts); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hosts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *Snapshot) Equals(other *Snapshot) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if p.Status != other.Status { return false }
  if bytes.Compare(p.Hosts, other.Hosts) != 0 { return false }
  return true
}

func (p *Snapshot) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Snapshot(%+v)", *p)
}

func (p *Snapshot) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Snapshots
type ListSnapshotsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Snapshots []*Snapshot `thrift:"snapshots,3" db:"snapshots" json:"snapshots"`
}

func NewListSnapshotsResp() *ListSnapshotsResp {
  return &ListSnapshotsResp{}
}


func (p *ListSnapshotsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListSnapshotsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListSnapshotsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListSnapshotsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSnapshotsResp) GetSnapshots() []*Snapshot {
  return p.Snapshots
}
func (p *ListSnapshotsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSnapshotsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSnapshotsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Snapshot, 0, size)
  p.Snapshots =  tSlice
  for i := 0; i < size; i ++ {
    _elem110 := &Snapshot{}
    if err := _elem110.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem110), err)
    }
    p.Snapshots = append(p.Snapshots, _elem110)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSnapshotsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSnapshotsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snapshots", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snapshots: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Snapshots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Snapshots {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snapshots: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) Equals(other *ListSnapshotsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Snapshots) != len(other.Snapshots) { return false }
  for i, _tgt := range p.Snapshots {
    _src111 := other.Snapshots[i]
    if !_tgt.Equals(_src111) { return false }
  }
  return true
}

func (p *ListSnapshotsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSnapshotsResp(%+v)", *p)
}

func (p *ListSnapshotsResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListIndexStatusReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListIndexStatusReq() *ListIndexStatusReq {
  return &ListIndexStatusReq{}
}


func (p *ListIndexStatusReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListIndexStatusReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListIndexStatusReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListIndexStatusReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListIndexStatusReq) Equals(other *ListIndexStatusReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListIndexStatusReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListIndexStatusReq(%+v)", *p)
}

func (p *ListIndexStatusReq) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Status
type IndexStatus struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status []byte `thrift:"status,2" db:"status" json:"status"`
}

func NewIndexStatus() *IndexStatus {
  return &IndexStatus{}
}


func (p *IndexStatus) GetName() []byte {
  return p.Name
}

func (p *IndexStatus) GetStatus() []byte {
  return p.Status
}
func (p *IndexStatus) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexStatus)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IndexStatus)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IndexStatus) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexStatus) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexStatus) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Status); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *IndexStatus) Equals(other *IndexStatus) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if bytes.Compare(p.Status, other.Status) != 0 { return false }
  return true
}

func (p *IndexStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexStatus(%+v)", *p)
}

func (p *IndexStatus) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Statuses
type ListIndexStatusResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Statuses []*IndexStatus `thrift:"statuses,3" db:"statuses" json:"statuses"`
}

func NewListIndexStatusResp() *ListIndexStatusResp {
  return &ListIndexStatusResp{}
}


func (p *ListIndexStatusResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListIndexStatusResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListIndexStatusResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListIndexStatusResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListIndexStatusResp) GetStatuses() []*IndexStatus {
  return p.Statuses
}
func (p *ListIndexStatusResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListIndexStatusResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListIndexStatusResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexStatus, 0, size)
  p.Statuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem112 := &IndexStatus{}
    if err := _elem112.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem112), err)
    }
    p.Statuses = append(p.Statuses, _elem112)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListIndexStatusResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListIndexStatusResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statuses", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statuses: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Statuses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Statuses {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statuses: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) Equals(other *ListIndexStatusResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Statuses) != len(other.Statuses) { return false }
  for i, _tgt := range p.Statuses {
    _src113 := other.Statuses[i]
    if !_tgt.Equals(_src113) { return false }
  }
  return true
}

func (p *ListIndexStatusResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListIndexStatusResp(%+v)", *p)
}

func (p *ListIndexStatusResp) Validate() error {
  return nil
}
// Attributes:
//  - Zones
//  - ZoneName
type MergeZoneReq struct {
  Zones [][]byte `thrift:"zones,1" db:"zones" json:"zones"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewMergeZoneReq() *MergeZoneReq {
  return &MergeZoneReq{}
}


func (p *MergeZoneReq) GetZones() [][]byte {
  return p.Zones
}

func (p *MergeZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *MergeZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MergeZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Zones =  tSlice
  for i := 0; i < size; i ++ {
var _elem114 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem114 = v
}
    p.Zones = append(p.Zones, _elem114)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MergeZoneReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *MergeZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MergeZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MergeZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zones", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zones: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Zones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Zones {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zones: ", p), err) }
  return err
}

func (p *MergeZoneReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *MergeZoneReq) Equals(other *MergeZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Zones) != len(other.Zones) { return false }
  for i, _tgt := range p.Zones {
    _src115 := other.Zones[i]
    if bytes.Compare(_tgt, _src115) != 0 { return false }
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  return true
}

func (p *MergeZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MergeZoneReq(%+v)", *p)
}

func (p *MergeZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - ZoneName
type DropZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewDropZoneReq() *DropZoneReq {
  return &DropZoneReq{}
}


func (p *DropZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *DropZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *DropZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DropZoneReq) Equals(other *DropZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  return true
}

func (p *DropZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropZoneReq(%+v)", *p)
}

func (p *DropZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - ZoneName
//  - ZoneItems
type DivideZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  ZoneItems map[string][]*nebula.HostAddr `thrift:"zone_items,2" db:"zone_items" json:"zone_items"`
}

func NewDivideZoneReq() *DivideZoneReq {
  return &DivideZoneReq{}
}


func (p *DivideZoneReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *DivideZoneReq) GetZoneItems() map[string][]*nebula.HostAddr {
  return p.ZoneItems
}
func (p *DivideZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DivideZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *DivideZoneReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*nebula.HostAddr, size)
  p.ZoneItems =  tMap
  for i := 0; i < size; i ++ {
var _key116 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key116 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.HostAddr, 0, size)
    _val117 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem118 := &nebula.HostAddr{}
      if err := _elem118.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem118), err)
      }
      _val117 = append(_val117, _elem118)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.ZoneItems[_key116] = _val117
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DivideZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DivideZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DivideZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DivideZoneReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_items", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_items: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.ZoneItems)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ZoneItems {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_items: ", p), err) }
  return err
}

func (p *DivideZoneReq) Equals(other *DivideZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  if len(p.ZoneItems) != len(other.ZoneItems) { return false }
  for k, _tgt := range p.ZoneItems {
    _src119 := other.ZoneItems[k]
    if len(_tgt) != len(_src119) { return false }
    for i, _tgt := range _tgt {
      _src120 := _src119[i]
      if !_tgt.Equals(_src120) { return false }
    }
  }
  return true
}

func (p *DivideZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DivideZoneReq(%+v)", *p)
}

func (p *DivideZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - OriginalZoneName
//  - ZoneName
type RenameZoneReq struct {
  OriginalZoneName []byte `thrift:"original_zone_name,1" db:"original_zone_name" json:"original_zone_name"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewRenameZoneReq() *RenameZoneReq {
  return &RenameZoneReq{}
}


func (p *RenameZoneReq) GetOriginalZoneName() []byte {
  return p.OriginalZoneName
}

func (p *RenameZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *RenameZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RenameZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OriginalZoneName = v
}
  return nil
}

func (p *RenameZoneReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *RenameZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RenameZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RenameZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "original_zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:original_zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.OriginalZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.original_zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:original_zone_name: ", p), err) }
  return err
}

func (p *RenameZoneReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *RenameZoneReq) Equals(other *RenameZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.OriginalZoneName, other.OriginalZoneName) != 0 { return false }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  return true
}

func (p *RenameZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RenameZoneReq(%+v)", *p)
}

func (p *RenameZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - Hosts
//  - ZoneName
//  - IsNew
type AddHostsIntoZoneReq struct {
  Hosts []*nebula.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
  IsNew bool `thrift:"is_new,3" db:"is_new" json:"is_new"`
}

func NewAddHostsIntoZoneReq() *AddHostsIntoZoneReq {
  return &AddHostsIntoZoneReq{}
}


func (p *AddHostsIntoZoneReq) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}

func (p *AddHostsIntoZoneReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *AddHostsIntoZoneReq) GetIsNew() bool {
  return p.IsNew
}
func (p *AddHostsIntoZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem121 := &nebula.HostAddr{}
    if err := _elem121.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem121), err)
    }
    p.Hosts = append(p.Hosts, _elem121)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsNew = v
}
  return nil
}

func (p *AddHostsIntoZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddHostsIntoZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostsIntoZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_new", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_new: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsNew)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_new (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_new: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) Equals(other *AddHostsIntoZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src122 := other.Hosts[i]
    if !_tgt.Equals(_src122) { return false }
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  if p.IsNew != other.IsNew { return false }
  return true
}

func (p *AddHostsIntoZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddHostsIntoZoneReq(%+v)", *p)
}

func (p *AddHostsIntoZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - ZoneName
type GetZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewGetZoneReq() *GetZoneReq {
  return &GetZoneReq{}
}


func (p *GetZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *GetZoneReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *GetZoneReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *GetZoneReq) Equals(other *GetZoneReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  return true
}

func (p *GetZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetZoneReq(%+v)", *p)
}

func (p *GetZoneReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Hosts
type GetZoneResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*nebula.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewGetZoneResp() *GetZoneResp {
  return &GetZoneResp{}
}


func (p *GetZoneResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetZoneResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetZoneResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetZoneResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetZoneResp) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}
func (p *GetZoneResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetZoneResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetZoneResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem123 := &nebula.HostAddr{}
    if err := _elem123.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem123), err)
    }
    p.Hosts = append(p.Hosts, _elem123)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetZoneResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetZoneResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *GetZoneResp) Equals(other *GetZoneResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src124 := other.Hosts[i]
    if !_tgt.Equals(_src124) { return false }
  }
  return true
}

func (p *GetZoneResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetZoneResp(%+v)", *p)
}

func (p *GetZoneResp) Validate() error {
  return nil
}
type ListZonesReq struct {
}

func NewListZonesReq() *ListZonesReq {
  return &ListZonesReq{}
}

func (p *ListZonesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListZonesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesReq) Equals(other *ListZonesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListZonesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListZonesReq(%+v)", *p)
}

func (p *ListZonesReq) Validate() error {
  return nil
}
// Attributes:
//  - ZoneName
//  - Nodes
type Zone struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  Nodes []*nebula.HostAddr `thrift:"nodes,2" db:"nodes" json:"nodes"`
}

func NewZone() *Zone {
  return &Zone{}
}


func (p *Zone) GetZoneName() []byte {
  return p.ZoneName
}

func (p *Zone) GetNodes() []*nebula.HostAddr {
  return p.Nodes
}
func (p *Zone) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Zone)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *Zone)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem125 := &nebula.HostAddr{}
    if err := _elem125.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem125), err)
    }
    p.Nodes = append(p.Nodes, _elem125)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Zone) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Zone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Zone) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *Zone) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nodes {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodes: ", p), err) }
  return err
}

func (p *Zone) Equals(other *Zone) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ZoneName, other.ZoneName) != 0 { return false }
  if len(p.Nodes) != len(other.Nodes) { return false }
  for i, _tgt := range p.Nodes {
    _src126 := other.Nodes[i]
    if !_tgt.Equals(_src126) { return false }
  }
  return true
}

func (p *Zone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Zone(%+v)", *p)
}

func (p *Zone) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Zones
type ListZonesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Zones []*Zone `thrift:"zones,3" db:"zones" json:"zones"`
}

func NewListZonesResp() *ListZonesResp {
  return &ListZonesResp{}
}


func (p *ListZonesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListZonesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListZonesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListZonesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListZonesResp) GetZones() []*Zone {
  return p.Zones
}
func (p *ListZonesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListZonesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListZonesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Zone, 0, size)
  p.Zones =  tSlice
  for i := 0; i < size; i ++ {
    _elem127 := &Zone{}
    if err := _elem127.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem127), err)
    }
    p.Zones = append(p.Zones, _elem127)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListZonesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListZonesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zones", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zones: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Zones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Zones {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zones: ", p), err) }
  return err
}

func (p *ListZonesResp) Equals(other *ListZonesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Zones) != len(other.Zones) { return false }
  for i, _tgt := range p.Zones {
    _src128 := other.Zones[i]
    if !_tgt.Equals(_src128) { return false }
  }
  return true
}

func (p *ListZonesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListZonesResp(%+v)", *p)
}

func (p *ListZonesResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Type
//  - Hosts
type AddListenerReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
  Hosts []*nebula.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewAddListenerReq() *AddListenerReq {
  return &AddListenerReq{}
}


func (p *AddListenerReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AddListenerReq) GetType() ListenerType {
  return p.Type
}

func (p *AddListenerReq) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}
func (p *AddListenerReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddListenerReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddListenerReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *AddListenerReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem129 := &nebula.HostAddr{}
    if err := _elem129.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem129), err)
    }
    p.Hosts = append(p.Hosts, _elem129)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddListenerReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddListenerReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *AddListenerReq) Equals(other *AddListenerReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.Type != other.Type { return false }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src130 := other.Hosts[i]
    if !_tgt.Equals(_src130) { return false }
  }
  return true
}

func (p *AddListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddListenerReq(%+v)", *p)
}

func (p *AddListenerReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Type
type RemoveListenerReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
}

func NewRemoveListenerReq() *RemoveListenerReq {
  return &RemoveListenerReq{}
}


func (p *RemoveListenerReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *RemoveListenerReq) GetType() ListenerType {
  return p.Type
}
func (p *RemoveListenerReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveListenerReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemoveListenerReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *RemoveListenerReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveListenerReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemoveListenerReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *RemoveListenerReq) Equals(other *RemoveListenerReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.Type != other.Type { return false }
  return true
}

func (p *RemoveListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveListenerReq(%+v)", *p)
}

func (p *RemoveListenerReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ListListenerReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListListenerReq() *ListListenerReq {
  return &ListListenerReq{}
}


func (p *ListListenerReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ListListenerReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListListenerReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListListenerReq) Equals(other *ListListenerReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ListListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListListenerReq(%+v)", *p)
}

func (p *ListListenerReq) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - Host
//  - PartID
//  - Status
type ListenerInfo struct {
  Type ListenerType `thrift:"type,1" db:"type" json:"type"`
  Host *nebula.HostAddr `thrift:"host,2" db:"host" json:"host"`
  PartID nebula.PartitionID `thrift:"part_id,3" db:"part_id" json:"part_id"`
  Status HostStatus `thrift:"status,4" db:"status" json:"status"`
}

func NewListenerInfo() *ListenerInfo {
  return &ListenerInfo{}
}


func (p *ListenerInfo) GetType() ListenerType {
  return p.Type
}
var ListenerInfo_Host_DEFAULT *nebula.HostAddr
func (p *ListenerInfo) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return ListenerInfo_Host_DEFAULT
  }
return p.Host
}

func (p *ListenerInfo) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *ListenerInfo) GetStatus() HostStatus {
  return p.Status
}
func (p *ListenerInfo) IsSetHost() bool {
  return p.Host != nil
}

func (p *ListenerInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *ListenerInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *ListenerInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := HostStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ListenerInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListenerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListenerInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *ListenerInfo) Equals(other *ListenerInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if !p.Host.Equals(other.Host) { return false }
  if p.PartID != other.PartID { return false }
  if p.Status != other.Status { return false }
  return true
}

func (p *ListenerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListenerInfo(%+v)", *p)
}

func (p *ListenerInfo) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Listeners
type ListListenerResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Listeners []*ListenerInfo `thrift:"listeners,3" db:"listeners" json:"listeners"`
}

func NewListListenerResp() *ListListenerResp {
  return &ListListenerResp{}
}


func (p *ListListenerResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListListenerResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListListenerResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListListenerResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListListenerResp) GetListeners() []*ListenerInfo {
  return p.Listeners
}
func (p *ListListenerResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListListenerResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListListenerResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ListenerInfo, 0, size)
  p.Listeners =  tSlice
  for i := 0; i < size; i ++ {
    _elem131 := &ListenerInfo{}
    if err := _elem131.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem131), err)
    }
    p.Listeners = append(p.Listeners, _elem131)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListListenerResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListListenerResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "listeners", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:listeners: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Listeners)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Listeners {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:listeners: ", p), err) }
  return err
}

func (p *ListListenerResp) Equals(other *ListListenerResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Listeners) != len(other.Listeners) { return false }
  for i, _tgt := range p.Listeners {
    _src132 := other.Listeners[i]
    if !_tgt.Equals(_src132) { return false }
  }
  return true
}

func (p *ListListenerResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListListenerResp(%+v)", *p)
}

func (p *ListListenerResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type GetStatsReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetStatsReq() *GetStatsReq {
  return &GetStatsReq{}
}


func (p *GetStatsReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *GetStatsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetStatsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetStatsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetStatsReq) Equals(other *GetStatsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *GetStatsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatsReq(%+v)", *p)
}

func (p *GetStatsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Stats
type GetStatsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Stats *StatsItem `thrift:"stats,3" db:"stats" json:"stats"`
}

func NewGetStatsResp() *GetStatsResp {
  return &GetStatsResp{}
}


func (p *GetStatsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetStatsResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetStatsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetStatsResp_Leader_DEFAULT
  }
return p.Leader
}
var GetStatsResp_Stats_DEFAULT *StatsItem
func (p *GetStatsResp) GetStats() *StatsItem {
  if !p.IsSetStats() {
    return GetStatsResp_Stats_DEFAULT
  }
return p.Stats
}
func (p *GetStatsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetStatsResp) IsSetStats() bool {
  return p.Stats != nil
}

func (p *GetStatsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetStatsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetStatsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stats = &StatsItem{}
  if err := p.Stats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *GetStatsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetStatsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetStatsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetStatsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stats: ", p), err) }
  if err := p.Stats.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stats: ", p), err) }
  return err
}

func (p *GetStatsResp) Equals(other *GetStatsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Stats.Equals(other.Stats) { return false }
  return true
}

func (p *GetStatsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatsResp(%+v)", *p)
}

func (p *GetStatsResp) Validate() error {
  return nil
}
// Attributes:
//  - Host
//  - Checkpoints
type HostBackupInfo struct {
  Host *nebula.HostAddr `thrift:"host,1" db:"host" json:"host"`
  Checkpoints []*nebula.CheckpointInfo `thrift:"checkpoints,2" db:"checkpoints" json:"checkpoints"`
}

func NewHostBackupInfo() *HostBackupInfo {
  return &HostBackupInfo{}
}

var HostBackupInfo_Host_DEFAULT *nebula.HostAddr
func (p *HostBackupInfo) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return HostBackupInfo_Host_DEFAULT
  }
return p.Host
}

func (p *HostBackupInfo) GetCheckpoints() []*nebula.CheckpointInfo {
  return p.Checkpoints
}
func (p *HostBackupInfo) IsSetHost() bool {
  return p.Host != nil
}

func (p *HostBackupInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostBackupInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HostBackupInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.CheckpointInfo, 0, size)
  p.Checkpoints =  tSlice
  for i := 0; i < size; i ++ {
    _elem133 := &nebula.CheckpointInfo{}
    if err := _elem133.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem133), err)
    }
    p.Checkpoints = append(p.Checkpoints, _elem133)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HostBackupInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HostBackupInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostBackupInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *HostBackupInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checkpoints", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:checkpoints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Checkpoints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Checkpoints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:checkpoints: ", p), err) }
  return err
}

func (p *HostBackupInfo) Equals(other *HostBackupInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Host.Equals(other.Host) { return false }
  if len(p.Checkpoints) != len(other.Checkpoints) { return false }
  for i, _tgt := range p.Checkpoints {
    _src134 := other.Checkpoints[i]
    if !_tgt.Equals(_src134) { return false }
  }
  return true
}

func (p *HostBackupInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostBackupInfo(%+v)", *p)
}

func (p *HostBackupInfo) Validate() error {
  return nil
}
// Attributes:
//  - Space
//  - HostBackups
type SpaceBackupInfo struct {
  Space *SpaceDesc `thrift:"space,1" db:"space" json:"space"`
  HostBackups []*HostBackupInfo `thrift:"host_backups,2" db:"host_backups" json:"host_backups"`
}

func NewSpaceBackupInfo() *SpaceBackupInfo {
  return &SpaceBackupInfo{}
}

var SpaceBackupInfo_Space_DEFAULT *SpaceDesc
func (p *SpaceBackupInfo) GetSpace() *SpaceDesc {
  if !p.IsSetSpace() {
    return SpaceBackupInfo_Space_DEFAULT
  }
return p.Space
}

func (p *SpaceBackupInfo) GetHostBackups() []*HostBackupInfo {
  return p.HostBackups
}
func (p *SpaceBackupInfo) IsSetSpace() bool {
  return p.Space != nil
}

func (p *SpaceBackupInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceBackupInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Space = &SpaceDesc{}
  if err := p.Space.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Space), err)
  }
  return nil
}

func (p *SpaceBackupInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostBackupInfo, 0, size)
  p.HostBackups =  tSlice
  for i := 0; i < size; i ++ {
    _elem135 := &HostBackupInfo{}
    if err := _elem135.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem135), err)
    }
    p.HostBackups = append(p.HostBackups, _elem135)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SpaceBackupInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SpaceBackupInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceBackupInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := p.Space.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Space), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *SpaceBackupInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host_backups", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host_backups: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.HostBackups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.HostBackups {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host_backups: ", p), err) }
  return err
}

func (p *SpaceBackupInfo) Equals(other *SpaceBackupInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Space.Equals(other.Space) { return false }
  if len(p.HostBackups) != len(other.HostBackups) { return false }
  for i, _tgt := range p.HostBackups {
    _src136 := other.HostBackups[i]
    if !_tgt.Equals(_src136) { return false }
  }
  return true
}

func (p *SpaceBackupInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceBackupInfo(%+v)", *p)
}

func (p *SpaceBackupInfo) Validate() error {
  return nil
}
// Attributes:
//  - SpaceBackups
//  - MetaFiles
//  - BackupName
//  - Full
//  - AllSpaces
//  - CreateTime
//  - BaseBackupName
//  - StorageHosts
//  - ClusterID
type BackupMeta struct {
  SpaceBackups map[nebula.GraphSpaceID]*SpaceBackupInfo `thrift:"space_backups,1" db:"space_backups" json:"space_backups"`
  MetaFiles [][]byte `thrift:"meta_files,2" db:"meta_files" json:"meta_files"`
  BackupName []byte `thrift:"backup_name,3" db:"backup_name" json:"backup_name"`
  Full bool `thrift:"full,4" db:"full" json:"full"`
  AllSpaces bool `thrift:"all_spaces,5" db:"all_spaces" json:"all_spaces"`
  CreateTime int64 `thrift:"create_time,6" db:"create_time" json:"create_time"`
  BaseBackupName []byte `thrift:"base_backup_name,7" db:"base_backup_name" json:"base_backup_name"`
  StorageHosts []*nebula.HostAddr `thrift:"storage_hosts,8" db:"storage_hosts" json:"storage_hosts"`
  ClusterID ClusterID `thrift:"cluster_id,9" db:"cluster_id" json:"cluster_id"`
}

func NewBackupMeta() *BackupMeta {
  return &BackupMeta{}
}


func (p *BackupMeta) GetSpaceBackups() map[nebula.GraphSpaceID]*SpaceBackupInfo {
  return p.SpaceBackups
}

func (p *BackupMeta) GetMetaFiles() [][]byte {
  return p.MetaFiles
}

func (p *BackupMeta) GetBackupName() []byte {
  return p.BackupName
}

func (p *BackupMeta) GetFull() bool {
  return p.Full
}

func (p *BackupMeta) GetAllSpaces() bool {
  return p.AllSpaces
}

func (p *BackupMeta) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *BackupMeta) GetBaseBackupName() []byte {
  return p.BaseBackupName
}

func (p *BackupMeta) GetStorageHosts() []*nebula.HostAddr {
  return p.StorageHosts
}

func (p *BackupMeta) GetClusterID() ClusterID {
  return p.ClusterID
}
func (p *BackupMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BackupMeta)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.GraphSpaceID]*SpaceBackupInfo, size)
  p.SpaceBackups =  tMap
  for i := 0; i < size; i ++ {
var _key137 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _key137 = temp
}
    _val138 := &SpaceBackupInfo{}
    if err := _val138.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val138), err)
    }
    p.SpaceBackups[_key137] = _val138
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.MetaFiles =  tSlice
  for i := 0; i < size; i ++ {
var _elem139 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem139 = v
}
    p.MetaFiles = append(p.MetaFiles, _elem139)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BackupName = v
}
  return nil
}

func (p *BackupMeta)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Full = v
}
  return nil
}

func (p *BackupMeta)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllSpaces = v
}
  return nil
}

func (p *BackupMeta)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *BackupMeta)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BaseBackupName = v
}
  return nil
}

func (p *BackupMeta)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.StorageHosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem140 := &nebula.HostAddr{}
    if err := _elem140.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem140), err)
    }
    p.StorageHosts = append(p.StorageHosts, _elem140)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *BackupMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BackupMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BackupMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_backups", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_backups: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.SpaceBackups)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SpaceBackups {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_backups: ", p), err) }
  return err
}

func (p *BackupMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta_files", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta_files: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MetaFiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MetaFiles {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta_files: ", p), err) }
  return err
}

func (p *BackupMeta) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "backup_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backup_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.BackupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backup_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backup_name: ", p), err) }
  return err
}

func (p *BackupMeta) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "full", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:full: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Full)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.full (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:full: ", p), err) }
  return err
}

func (p *BackupMeta) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "all_spaces", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:all_spaces: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllSpaces)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all_spaces (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:all_spaces: ", p), err) }
  return err
}

func (p *BackupMeta) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "create_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:create_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:create_time: ", p), err) }
  return err
}

func (p *BackupMeta) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "base_backup_name", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:base_backup_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.BaseBackupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.base_backup_name (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:base_backup_name: ", p), err) }
  return err
}

func (p *BackupMeta) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "storage_hosts", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:storage_hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StorageHosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StorageHosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:storage_hosts: ", p), err) }
  return err
}

func (p *BackupMeta) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cluster_id", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cluster_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cluster_id: ", p), err) }
  return err
}

func (p *BackupMeta) Equals(other *BackupMeta) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SpaceBackups) != len(other.SpaceBackups) { return false }
  for k, _tgt := range p.SpaceBackups {
    _src141 := other.SpaceBackups[k]
    if !_tgt.Equals(_src141) { return false }
  }
  if len(p.MetaFiles) != len(other.MetaFiles) { return false }
  for i, _tgt := range p.MetaFiles {
    _src142 := other.MetaFiles[i]
    if bytes.Compare(_tgt, _src142) != 0 { return false }
  }
  if bytes.Compare(p.BackupName, other.BackupName) != 0 { return false }
  if p.Full != other.Full { return false }
  if p.AllSpaces != other.AllSpaces { return false }
  if p.CreateTime != other.CreateTime { return false }
  if bytes.Compare(p.BaseBackupName, other.BaseBackupName) != 0 { return false }
  if len(p.StorageHosts) != len(other.StorageHosts) { return false }
  for i, _tgt := range p.StorageHosts {
    _src143 := other.StorageHosts[i]
    if !_tgt.Equals(_src143) { return false }
  }
  if p.ClusterID != other.ClusterID { return false }
  return true
}

func (p *BackupMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BackupMeta(%+v)", *p)
}

func (p *BackupMeta) Validate() error {
  return nil
}
// Attributes:
//  - Spaces
//  - BaseBackupName
//  - ClusterID
type CreateBackupReq struct {
  Spaces [][]byte `thrift:"spaces,1" db:"spaces" json:"spaces,omitempty"`
  BaseBackupName []byte `thrift:"base_backup_name,2" db:"base_backup_name" json:"base_backup_name,omitempty"`
  ClusterID *ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewCreateBackupReq() *CreateBackupReq {
  return &CreateBackupReq{}
}

var CreateBackupReq_Spaces_DEFAULT [][]byte

func (p *CreateBackupReq) GetSpaces() [][]byte {
  return p.Spaces
}
var CreateBackupReq_BaseBackupName_DEFAULT []byte

func (p *CreateBackupReq) GetBaseBackupName() []byte {
  return p.BaseBackupName
}
var CreateBackupReq_ClusterID_DEFAULT ClusterID
func (p *CreateBackupReq) GetClusterID() ClusterID {
  if !p.IsSetClusterID() {
    return CreateBackupReq_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *CreateBackupReq) IsSetSpaces() bool {
  return p.Spaces != nil
}

func (p *CreateBackupReq) IsSetBaseBackupName() bool {
  return p.BaseBackupName != nil
}

func (p *CreateBackupReq) IsSetClusterID() bool {
  return p.ClusterID != nil
}

func (p *CreateBackupReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBackupReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
var _elem144 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem144 = v
}
    p.Spaces = append(p.Spaces, _elem144)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateBackupReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BaseBackupName = v
}
  return nil
}

func (p *CreateBackupReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = &temp
}
  return nil
}

func (p *CreateBackupReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateBackupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBackupReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpaces() {
    if err := oprot.WriteFieldBegin(ctx, "spaces", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaces: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Spaces)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Spaces {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaces: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBaseBackupName() {
    if err := oprot.WriteFieldBegin(ctx, "base_backup_name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:base_backup_name: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BaseBackupName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.base_backup_name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:base_backup_name: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin(ctx, "cluster_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) Equals(other *CreateBackupReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Spaces) != len(other.Spaces) { return false }
  for i, _tgt := range p.Spaces {
    _src145 := other.Spaces[i]
    if bytes.Compare(_tgt, _src145) != 0 { return false }
  }
  if bytes.Compare(p.BaseBackupName, other.BaseBackupName) != 0 { return false }
  if p.ClusterID != other.ClusterID {
    if p.ClusterID == nil || other.ClusterID == nil {
      return false
    }
    if (*p.ClusterID) != (*other.ClusterID) { return false }
  }
  return true
}

func (p *CreateBackupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateBackupReq(%+v)", *p)
}

func (p *CreateBackupReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Meta
type CreateBackupResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Meta *BackupMeta `thrift:"meta,3" db:"meta" json:"meta"`
}

func NewCreateBackupResp() *CreateBackupResp {
  return &CreateBackupResp{}
}


func (p *CreateBackupResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var CreateBackupResp_Leader_DEFAULT *nebula.HostAddr
func (p *CreateBackupResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return CreateBackupResp_Leader_DEFAULT
  }
return p.Leader
}
var CreateBackupResp_Meta_DEFAULT *BackupMeta
func (p *CreateBackupResp) GetMeta() *BackupMeta {
  if !p.IsSetMeta() {
    return CreateBackupResp_Meta_DEFAULT
  }
return p.Meta
}
func (p *CreateBackupResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *CreateBackupResp) IsSetMeta() bool {
  return p.Meta != nil
}

func (p *CreateBackupResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBackupResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *CreateBackupResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *CreateBackupResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Meta = &BackupMeta{}
  if err := p.Meta.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *CreateBackupResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateBackupResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBackupResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateBackupResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *CreateBackupResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta: ", p), err) }
  if err := p.Meta.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta: ", p), err) }
  return err
}

func (p *CreateBackupResp) Equals(other *CreateBackupResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Meta.Equals(other.Meta) { return false }
  return true
}

func (p *CreateBackupResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateBackupResp(%+v)", *p)
}

func (p *CreateBackupResp) Validate() error {
  return nil
}
// Attributes:
//  - FromHost
//  - ToHost
type HostPair struct {
  FromHost *nebula.HostAddr `thrift:"from_host,1" db:"from_host" json:"from_host"`
  ToHost *nebula.HostAddr `thrift:"to_host,2" db:"to_host" json:"to_host"`
}

func NewHostPair() *HostPair {
  return &HostPair{}
}

var HostPair_FromHost_DEFAULT *nebula.HostAddr
func (p *HostPair) GetFromHost() *nebula.HostAddr {
  if !p.IsSetFromHost() {
    return HostPair_FromHost_DEFAULT
  }
return p.FromHost
}
var HostPair_ToHost_DEFAULT *nebula.HostAddr
func (p *HostPair) GetToHost() *nebula.HostAddr {
  if !p.IsSetToHost() {
    return HostPair_ToHost_DEFAULT
  }
return p.ToHost
}
func (p *HostPair) IsSetFromHost() bool {
  return p.FromHost != nil
}

func (p *HostPair) IsSetToHost() bool {
  return p.ToHost != nil
}

func (p *HostPair) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostPair)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromHost = &nebula.HostAddr{}
  if err := p.FromHost.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromHost), err)
  }
  return nil
}

func (p *HostPair)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToHost = &nebula.HostAddr{}
  if err := p.ToHost.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToHost), err)
  }
  return nil
}

func (p *HostPair) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "HostPair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostPair) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "from_host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_host: ", p), err) }
  if err := p.FromHost.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromHost), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_host: ", p), err) }
  return err
}

func (p *HostPair) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to_host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to_host: ", p), err) }
  if err := p.ToHost.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToHost), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to_host: ", p), err) }
  return err
}

func (p *HostPair) Equals(other *HostPair) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FromHost.Equals(other.FromHost) { return false }
  if !p.ToHost.Equals(other.ToHost) { return false }
  return true
}

func (p *HostPair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostPair(%+v)", *p)
}

func (p *HostPair) Validate() error {
  return nil
}
// Attributes:
//  - Files
//  - Hosts
type RestoreMetaReq struct {
  Files [][]byte `thrift:"files,1" db:"files" json:"files"`
  Hosts []*HostPair `thrift:"hosts,2" db:"hosts" json:"hosts"`
}

func NewRestoreMetaReq() *RestoreMetaReq {
  return &RestoreMetaReq{}
}


func (p *RestoreMetaReq) GetFiles() [][]byte {
  return p.Files
}

func (p *RestoreMetaReq) GetHosts() []*HostPair {
  return p.Hosts
}
func (p *RestoreMetaReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RestoreMetaReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Files =  tSlice
  for i := 0; i < size; i ++ {
var _elem146 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem146 = v
}
    p.Files = append(p.Files, _elem146)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RestoreMetaReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostPair, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem147 := &HostPair{}
    if err := _elem147.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem147), err)
    }
    p.Hosts = append(p.Hosts, _elem147)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RestoreMetaReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RestoreMetaReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RestoreMetaReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "files", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:files: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Files)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Files {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:files: ", p), err) }
  return err
}

func (p *RestoreMetaReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hosts: ", p), err) }
  return err
}

func (p *RestoreMetaReq) Equals(other *RestoreMetaReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Files) != len(other.Files) { return false }
  for i, _tgt := range p.Files {
    _src148 := other.Files[i]
    if bytes.Compare(_tgt, _src148) != 0 { return false }
  }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src149 := other.Hosts[i]
    if !_tgt.Equals(_src149) { return false }
  }
  return true
}

func (p *RestoreMetaReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RestoreMetaReq(%+v)", *p)
}

func (p *RestoreMetaReq) Validate() error {
  return nil
}
// Attributes:
//  - PartID
//  - Hosts
type PartInfo struct {
  PartID nebula.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Hosts []*nebula.HostAddr `thrift:"hosts,2" db:"hosts" json:"hosts"`
}

func NewPartInfo() *PartInfo {
  return &PartInfo{}
}


func (p *PartInfo) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *PartInfo) GetHosts() []*nebula.HostAddr {
  return p.Hosts
}
func (p *PartInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *PartInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem150 := &nebula.HostAddr{}
    if err := _elem150.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem150), err)
    }
    p.Hosts = append(p.Hosts, _elem150)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *PartInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hosts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hosts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hosts: ", p), err) }
  return err
}

func (p *PartInfo) Equals(other *PartInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartID != other.PartID { return false }
  if len(p.Hosts) != len(other.Hosts) { return false }
  for i, _tgt := range p.Hosts {
    _src151 := other.Hosts[i]
    if !_tgt.Equals(_src151) { return false }
  }
  return true
}

func (p *PartInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartInfo(%+v)", *p)
}

func (p *PartInfo) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - PartHosts
type RestoreMetaResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  PartHosts map[nebula.GraphSpaceID][]*PartInfo `thrift:"part_hosts,3" db:"part_hosts" json:"part_hosts"`
}

func NewRestoreMetaResp() *RestoreMetaResp {
  return &RestoreMetaResp{}
}


func (p *RestoreMetaResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var RestoreMetaResp_Leader_DEFAULT *nebula.HostAddr
func (p *RestoreMetaResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return RestoreMetaResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *RestoreMetaResp) GetPartHosts() map[nebula.GraphSpaceID][]*PartInfo {
  return p.PartHosts
}
func (p *RestoreMetaResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *RestoreMetaResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RestoreMetaResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *RestoreMetaResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *RestoreMetaResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.GraphSpaceID][]*PartInfo, size)
  p.PartHosts =  tMap
  for i := 0; i < size; i ++ {
var _key152 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _key152 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PartInfo, 0, size)
    _val153 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem154 := &PartInfo{}
      if err := _elem154.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem154), err)
      }
      _val153 = append(_val153, _elem154)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PartHosts[_key152] = _val153
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RestoreMetaResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RestoreMetaResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RestoreMetaResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RestoreMetaResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *RestoreMetaResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_hosts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_hosts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.PartHosts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartHosts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_hosts: ", p), err) }
  return err
}

func (p *RestoreMetaResp) Equals(other *RestoreMetaResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.PartHosts) != len(other.PartHosts) { return false }
  for k, _tgt := range p.PartHosts {
    _src155 := other.PartHosts[k]
    if len(_tgt) != len(_src155) { return false }
    for i, _tgt := range _tgt {
      _src156 := _src155[i]
      if !_tgt.Equals(_src156) { return false }
    }
  }
  return true
}

func (p *RestoreMetaResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RestoreMetaResp(%+v)", *p)
}

func (p *RestoreMetaResp) Validate() error {
  return nil
}
// Attributes:
//  - Host
//  - User
//  - Pwd
//  - ConnType
type ServiceClient struct {
  Host *nebula.HostAddr `thrift:"host,1,required" db:"host" json:"host"`
  User []byte `thrift:"user,2" db:"user" json:"user,omitempty"`
  Pwd []byte `thrift:"pwd,3" db:"pwd" json:"pwd,omitempty"`
  ConnType []byte `thrift:"conn_type,4" db:"conn_type" json:"conn_type,omitempty"`
}

func NewServiceClient() *ServiceClient {
  return &ServiceClient{}
}

var ServiceClient_Host_DEFAULT *nebula.HostAddr
func (p *ServiceClient) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return ServiceClient_Host_DEFAULT
  }
return p.Host
}
var ServiceClient_User_DEFAULT []byte

func (p *ServiceClient) GetUser() []byte {
  return p.User
}
var ServiceClient_Pwd_DEFAULT []byte

func (p *ServiceClient) GetPwd() []byte {
  return p.Pwd
}
var ServiceClient_ConnType_DEFAULT []byte

func (p *ServiceClient) GetConnType() []byte {
  return p.ConnType
}
func (p *ServiceClient) IsSetHost() bool {
  return p.Host != nil
}

func (p *ServiceClient) IsSetUser() bool {
  return p.User != nil
}

func (p *ServiceClient) IsSetPwd() bool {
  return p.Pwd != nil
}

func (p *ServiceClient) IsSetConnType() bool {
  return p.ConnType != nil
}

func (p *ServiceClient) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHost bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetHost = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHost{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  return nil
}

func (p *ServiceClient)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *ServiceClient)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *ServiceClient)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *ServiceClient)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConnType = v
}
  return nil
}

func (p *ServiceClient) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ServiceClient"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceClient) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *ServiceClient) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUser() {
    if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.User); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  }
  return err
}

func (p *ServiceClient) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPwd() {
    if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Pwd); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  }
  return err
}

func (p *ServiceClient) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnType() {
    if err := oprot.WriteFieldBegin(ctx, "conn_type", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:conn_type: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ConnType); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.conn_type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:conn_type: ", p), err) }
  }
  return err
}

func (p *ServiceClient) Equals(other *ServiceClient) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Host.Equals(other.Host) { return false }
  if bytes.Compare(p.User, other.User) != 0 { return false }
  if bytes.Compare(p.Pwd, other.Pwd) != 0 { return false }
  if bytes.Compare(p.ConnType, other.ConnType) != 0 { return false }
  return true
}

func (p *ServiceClient) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceClient(%+v)", *p)
}

func (p *ServiceClient) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - Clients
type SignInServiceReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
  Clients []*ServiceClient `thrift:"clients,2" db:"clients" json:"clients"`
}

func NewSignInServiceReq() *SignInServiceReq {
  return &SignInServiceReq{}
}


func (p *SignInServiceReq) GetType() ExternalServiceType {
  return p.Type
}

func (p *SignInServiceReq) GetClients() []*ServiceClient {
  return p.Clients
}
func (p *SignInServiceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignInServiceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ExternalServiceType(v)
  p.Type = temp
}
  return nil
}

func (p *SignInServiceReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServiceClient, 0, size)
  p.Clients =  tSlice
  for i := 0; i < size; i ++ {
    _elem157 := &ServiceClient{}
    if err := _elem157.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem157), err)
    }
    p.Clients = append(p.Clients, _elem157)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SignInServiceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SignInServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignInServiceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SignInServiceReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clients", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clients: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Clients {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clients: ", p), err) }
  return err
}

func (p *SignInServiceReq) Equals(other *SignInServiceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if len(p.Clients) != len(other.Clients) { return false }
  for i, _tgt := range p.Clients {
    _src158 := other.Clients[i]
    if !_tgt.Equals(_src158) { return false }
  }
  return true
}

func (p *SignInServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignInServiceReq(%+v)", *p)
}

func (p *SignInServiceReq) Validate() error {
  return nil
}
// Attributes:
//  - Type
type SignOutServiceReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
}

func NewSignOutServiceReq() *SignOutServiceReq {
  return &SignOutServiceReq{}
}


func (p *SignOutServiceReq) GetType() ExternalServiceType {
  return p.Type
}
func (p *SignOutServiceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignOutServiceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ExternalServiceType(v)
  p.Type = temp
}
  return nil
}

func (p *SignOutServiceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SignOutServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignOutServiceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SignOutServiceReq) Equals(other *SignOutServiceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  return true
}

func (p *SignOutServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignOutServiceReq(%+v)", *p)
}

func (p *SignOutServiceReq) Validate() error {
  return nil
}
// Attributes:
//  - Type
type ListServiceClientsReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
}

func NewListServiceClientsReq() *ListServiceClientsReq {
  return &ListServiceClientsReq{}
}


func (p *ListServiceClientsReq) GetType() ExternalServiceType {
  return p.Type
}
func (p *ListServiceClientsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListServiceClientsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ExternalServiceType(v)
  p.Type = temp
}
  return nil
}

func (p *ListServiceClientsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListServiceClientsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListServiceClientsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListServiceClientsReq) Equals(other *ListServiceClientsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  return true
}

func (p *ListServiceClientsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListServiceClientsReq(%+v)", *p)
}

func (p *ListServiceClientsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Clients
type ListServiceClientsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Clients map[ExternalServiceType][]*ServiceClient `thrift:"clients,3" db:"clients" json:"clients"`
}

func NewListServiceClientsResp() *ListServiceClientsResp {
  return &ListServiceClientsResp{}
}


func (p *ListServiceClientsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListServiceClientsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListServiceClientsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListServiceClientsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListServiceClientsResp) GetClients() map[ExternalServiceType][]*ServiceClient {
  return p.Clients
}
func (p *ListServiceClientsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListServiceClientsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListServiceClientsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListServiceClientsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListServiceClientsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[ExternalServiceType][]*ServiceClient, size)
  p.Clients =  tMap
  for i := 0; i < size; i ++ {
var _key159 ExternalServiceType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ExternalServiceType(v)
    _key159 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ServiceClient, 0, size)
    _val160 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem161 := &ServiceClient{}
      if err := _elem161.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem161), err)
      }
      _val160 = append(_val160, _elem161)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Clients[_key159] = _val160
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListServiceClientsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListServiceClientsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListServiceClientsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clients", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clients: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Clients {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clients: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) Equals(other *ListServiceClientsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Clients) != len(other.Clients) { return false }
  for k, _tgt := range p.Clients {
    _src162 := other.Clients[k]
    if len(_tgt) != len(_src162) { return false }
    for i, _tgt := range _tgt {
      _src163 := _src162[i]
      if !_tgt.Equals(_src163) { return false }
    }
  }
  return true
}

func (p *ListServiceClientsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListServiceClientsResp(%+v)", *p)
}

func (p *ListServiceClientsResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - DependSchema
//  - Fields
//  - Analyzer
type FTIndex struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  DependSchema *nebula.SchemaID `thrift:"depend_schema,2" db:"depend_schema" json:"depend_schema"`
  Fields [][]byte `thrift:"fields,3" db:"fields" json:"fields"`
  Analyzer []byte `thrift:"analyzer,4" db:"analyzer" json:"analyzer"`
}

func NewFTIndex() *FTIndex {
  return &FTIndex{}
}


func (p *FTIndex) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
var FTIndex_DependSchema_DEFAULT *nebula.SchemaID
func (p *FTIndex) GetDependSchema() *nebula.SchemaID {
  if !p.IsSetDependSchema() {
    return FTIndex_DependSchema_DEFAULT
  }
return p.DependSchema
}

func (p *FTIndex) GetFields() [][]byte {
  return p.Fields
}

func (p *FTIndex) GetAnalyzer() []byte {
  return p.Analyzer
}
func (p *FTIndex) IsSetDependSchema() bool {
  return p.DependSchema != nil
}

func (p *FTIndex) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FTIndex)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *FTIndex)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.DependSchema = &nebula.SchemaID{}
  if err := p.DependSchema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DependSchema), err)
  }
  return nil
}

func (p *FTIndex)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
var _elem164 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem164 = v
}
    p.Fields = append(p.Fields, _elem164)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FTIndex)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Analyzer = v
}
  return nil
}

func (p *FTIndex) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FTIndex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FTIndex) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *FTIndex) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "depend_schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depend_schema: ", p), err) }
  if err := p.DependSchema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DependSchema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depend_schema: ", p), err) }
  return err
}

func (p *FTIndex) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fields", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fields: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fields: ", p), err) }
  return err
}

func (p *FTIndex) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analyzer", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:analyzer: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Analyzer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analyzer (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:analyzer: ", p), err) }
  return err
}

func (p *FTIndex) Equals(other *FTIndex) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if !p.DependSchema.Equals(other.DependSchema) { return false }
  if len(p.Fields) != len(other.Fields) { return false }
  for i, _tgt := range p.Fields {
    _src165 := other.Fields[i]
    if bytes.Compare(_tgt, _src165) != 0 { return false }
  }
  if bytes.Compare(p.Analyzer, other.Analyzer) != 0 { return false }
  return true
}

func (p *FTIndex) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FTIndex(%+v)", *p)
}

func (p *FTIndex) Validate() error {
  return nil
}
// Attributes:
//  - FulltextIndexName
//  - Index
type CreateFTIndexReq struct {
  FulltextIndexName []byte `thrift:"fulltext_index_name,1" db:"fulltext_index_name" json:"fulltext_index_name"`
  Index *FTIndex `thrift:"index,2" db:"index" json:"index"`
}

func NewCreateFTIndexReq() *CreateFTIndexReq {
  return &CreateFTIndexReq{}
}


func (p *CreateFTIndexReq) GetFulltextIndexName() []byte {
  return p.FulltextIndexName
}
var CreateFTIndexReq_Index_DEFAULT *FTIndex
func (p *CreateFTIndexReq) GetIndex() *FTIndex {
  if !p.IsSetIndex() {
    return CreateFTIndexReq_Index_DEFAULT
  }
return p.Index
}
func (p *CreateFTIndexReq) IsSetIndex() bool {
  return p.Index != nil
}

func (p *CreateFTIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateFTIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FulltextIndexName = v
}
  return nil
}

func (p *CreateFTIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Index = &FTIndex{}
  if err := p.Index.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Index), err)
  }
  return nil
}

func (p *CreateFTIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateFTIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateFTIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fulltext_index_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fulltext_index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FulltextIndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fulltext_index_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fulltext_index_name: ", p), err) }
  return err
}

func (p *CreateFTIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := p.Index.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Index), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *CreateFTIndexReq) Equals(other *CreateFTIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.FulltextIndexName, other.FulltextIndexName) != 0 { return false }
  if !p.Index.Equals(other.Index) { return false }
  return true
}

func (p *CreateFTIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateFTIndexReq(%+v)", *p)
}

func (p *CreateFTIndexReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - FulltextIndexName
type DropFTIndexReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  FulltextIndexName []byte `thrift:"fulltext_index_name,2" db:"fulltext_index_name" json:"fulltext_index_name"`
}

func NewDropFTIndexReq() *DropFTIndexReq {
  return &DropFTIndexReq{}
}


func (p *DropFTIndexReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DropFTIndexReq) GetFulltextIndexName() []byte {
  return p.FulltextIndexName
}
func (p *DropFTIndexReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropFTIndexReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropFTIndexReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FulltextIndexName = v
}
  return nil
}

func (p *DropFTIndexReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropFTIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropFTIndexReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropFTIndexReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fulltext_index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fulltext_index_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FulltextIndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fulltext_index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fulltext_index_name: ", p), err) }
  return err
}

func (p *DropFTIndexReq) Equals(other *DropFTIndexReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if bytes.Compare(p.FulltextIndexName, other.FulltextIndexName) != 0 { return false }
  return true
}

func (p *DropFTIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropFTIndexReq(%+v)", *p)
}

func (p *DropFTIndexReq) Validate() error {
  return nil
}
type ListFTIndexesReq struct {
}

func NewListFTIndexesReq() *ListFTIndexesReq {
  return &ListFTIndexesReq{}
}

func (p *ListFTIndexesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTIndexesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListFTIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTIndexesReq) Equals(other *ListFTIndexesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListFTIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListFTIndexesReq(%+v)", *p)
}

func (p *ListFTIndexesReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Indexes
type ListFTIndexesResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Indexes map[string]*FTIndex `thrift:"indexes,3" db:"indexes" json:"indexes"`
}

func NewListFTIndexesResp() *ListFTIndexesResp {
  return &ListFTIndexesResp{}
}


func (p *ListFTIndexesResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListFTIndexesResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListFTIndexesResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListFTIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListFTIndexesResp) GetIndexes() map[string]*FTIndex {
  return p.Indexes
}
func (p *ListFTIndexesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListFTIndexesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTIndexesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListFTIndexesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListFTIndexesResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*FTIndex, size)
  p.Indexes =  tMap
  for i := 0; i < size; i ++ {
var _key166 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key166 = v
}
    _val167 := &FTIndex{}
    if err := _val167.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val167), err)
    }
    p.Indexes[_key166] = _val167
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListFTIndexesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListFTIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTIndexesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indexes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indexes: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Indexes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Indexes {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indexes: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) Equals(other *ListFTIndexesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Indexes) != len(other.Indexes) { return false }
  for k, _tgt := range p.Indexes {
    _src168 := other.Indexes[k]
    if !_tgt.Equals(_src168) { return false }
  }
  return true
}

func (p *ListFTIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListFTIndexesResp(%+v)", *p)
}

func (p *ListFTIndexesResp) Validate() error {
  return nil
}
// Attributes:
//  - StartTime
//  - Status
//  - Duration
//  - Query
//  - GraphAddr
type QueryDesc struct {
  StartTime nebula.Timestamp `thrift:"start_time,1" db:"start_time" json:"start_time"`
  Status QueryStatus `thrift:"status,2" db:"status" json:"status"`
  Duration int64 `thrift:"duration,3" db:"duration" json:"duration"`
  Query []byte `thrift:"query,4" db:"query" json:"query"`
  GraphAddr *nebula.HostAddr `thrift:"graph_addr,5" db:"graph_addr" json:"graph_addr"`
}

func NewQueryDesc() *QueryDesc {
  return &QueryDesc{}
}


func (p *QueryDesc) GetStartTime() nebula.Timestamp {
  return p.StartTime
}

func (p *QueryDesc) GetStatus() QueryStatus {
  return p.Status
}

func (p *QueryDesc) GetDuration() int64 {
  return p.Duration
}

func (p *QueryDesc) GetQuery() []byte {
  return p.Query
}
var QueryDesc_GraphAddr_DEFAULT *nebula.HostAddr
func (p *QueryDesc) GetGraphAddr() *nebula.HostAddr {
  if !p.IsSetGraphAddr() {
    return QueryDesc_GraphAddr_DEFAULT
  }
return p.GraphAddr
}
func (p *QueryDesc) IsSetGraphAddr() bool {
  return p.GraphAddr != nil
}

func (p *QueryDesc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryDesc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.Timestamp(v)
  p.StartTime = temp
}
  return nil
}

func (p *QueryDesc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := QueryStatus(v)
  p.Status = temp
}
  return nil
}

func (p *QueryDesc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *QueryDesc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *QueryDesc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.GraphAddr = &nebula.HostAddr{}
  if err := p.GraphAddr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *QueryDesc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "QueryDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryDesc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_time: ", p), err) }
  return err
}

func (p *QueryDesc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *QueryDesc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "duration", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:duration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:duration: ", p), err) }
  return err
}

func (p *QueryDesc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Query); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query: ", p), err) }
  return err
}

func (p *QueryDesc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "graph_addr", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:graph_addr: ", p), err) }
  return err
}

func (p *QueryDesc) Equals(other *QueryDesc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StartTime != other.StartTime { return false }
  if p.Status != other.Status { return false }
  if p.Duration != other.Duration { return false }
  if bytes.Compare(p.Query, other.Query) != 0 { return false }
  if !p.GraphAddr.Equals(other.GraphAddr) { return false }
  return true
}

func (p *QueryDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryDesc(%+v)", *p)
}

func (p *QueryDesc) Validate() error {
  return nil
}
// Attributes:
//  - SessionID
//  - CreateTime
//  - UpdateTime
//  - UserName
//  - SpaceName
//  - GraphAddr
//  - Timezone
//  - ClientIP
//  - Configs
//  - Queries
type Session struct {
  SessionID nebula.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id"`
  CreateTime nebula.Timestamp `thrift:"create_time,2" db:"create_time" json:"create_time"`
  UpdateTime nebula.Timestamp `thrift:"update_time,3" db:"update_time" json:"update_time"`
  UserName []byte `thrift:"user_name,4" db:"user_name" json:"user_name"`
  SpaceName []byte `thrift:"space_name,5" db:"space_name" json:"space_name"`
  GraphAddr *nebula.HostAddr `thrift:"graph_addr,6" db:"graph_addr" json:"graph_addr"`
  Timezone int32 `thrift:"timezone,7" db:"timezone" json:"timezone"`
  ClientIP []byte `thrift:"client_ip,8" db:"client_ip" json:"client_ip"`
  Configs map[string]*nebula.Value `thrift:"configs,9" db:"configs" json:"configs"`
  Queries map[nebula.ExecutionPlanID]*QueryDesc `thrift:"queries,10" db:"queries" json:"queries"`
}

func NewSession() *Session {
  return &Session{}
}


func (p *Session) GetSessionID() nebula.SessionID {
  return p.SessionID
}

func (p *Session) GetCreateTime() nebula.Timestamp {
  return p.CreateTime
}

func (p *Session) GetUpdateTime() nebula.Timestamp {
  return p.UpdateTime
}

func (p *Session) GetUserName() []byte {
  return p.UserName
}

func (p *Session) GetSpaceName() []byte {
  return p.SpaceName
}
var Session_GraphAddr_DEFAULT *nebula.HostAddr
func (p *Session) GetGraphAddr() *nebula.HostAddr {
  if !p.IsSetGraphAddr() {
    return Session_GraphAddr_DEFAULT
  }
return p.GraphAddr
}

func (p *Session) GetTimezone() int32 {
  return p.Timezone
}

func (p *Session) GetClientIP() []byte {
  return p.ClientIP
}

func (p *Session) GetConfigs() map[string]*nebula.Value {
  return p.Configs
}

func (p *Session) GetQueries() map[nebula.ExecutionPlanID]*QueryDesc {
  return p.Queries
}
func (p *Session) IsSetGraphAddr() bool {
  return p.GraphAddr != nil
}

func (p *Session) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Session)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.SessionID(v)
  p.SessionID = temp
}
  return nil
}

func (p *Session)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.Timestamp(v)
  p.CreateTime = temp
}
  return nil
}

func (p *Session)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula.Timestamp(v)
  p.UpdateTime = temp
}
  return nil
}

func (p *Session)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *Session)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *Session)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.GraphAddr = &nebula.HostAddr{}
  if err := p.GraphAddr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *Session)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Timezone = v
}
  return nil
}

func (p *Session)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ClientIP = v
}
  return nil
}

func (p *Session)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*nebula.Value, size)
  p.Configs =  tMap
  for i := 0; i < size; i ++ {
var _key169 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key169 = v
}
    _val170 := &nebula.Value{}
    if err := _val170.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val170), err)
    }
    p.Configs[_key169] = _val170
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Session)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.ExecutionPlanID]*QueryDesc, size)
  p.Queries =  tMap
  for i := 0; i < size; i ++ {
var _key171 nebula.ExecutionPlanID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.ExecutionPlanID(v)
    _key171 = temp
}
    _val172 := &QueryDesc{}
    if err := _val172.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val172), err)
    }
    p.Queries[_key171] = _val172
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Session) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Session"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Session) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  return err
}

func (p *Session) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "create_time", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:create_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:create_time: ", p), err) }
  return err
}

func (p *Session) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update_time", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:update_time: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:update_time: ", p), err) }
  return err
}

func (p *Session) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *Session) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:space_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:space_name: ", p), err) }
  return err
}

func (p *Session) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "graph_addr", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:graph_addr: ", p), err) }
  return err
}

func (p *Session) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timezone", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timezone: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Timezone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timezone (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timezone: ", p), err) }
  return err
}

func (p *Session) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_ip", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:client_ip: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ClientIP); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_ip (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:client_ip: ", p), err) }
  return err
}

func (p *Session) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "configs", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:configs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Configs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Configs {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:configs: ", p), err) }
  return err
}

func (p *Session) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "queries", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:queries: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRUCT, len(p.Queries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Queries {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:queries: ", p), err) }
  return err
}

func (p *Session) Equals(other *Session) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SessionID != other.SessionID { return false }
  if p.CreateTime != other.CreateTime { return false }
  if p.UpdateTime != other.UpdateTime { return false }
  if bytes.Compare(p.UserName, other.UserName) != 0 { return false }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if !p.GraphAddr.Equals(other.GraphAddr) { return false }
  if p.Timezone != other.Timezone { return false }
  if bytes.Compare(p.ClientIP, other.ClientIP) != 0 { return false }
  if len(p.Configs) != len(other.Configs) { return false }
  for k, _tgt := range p.Configs {
    _src173 := other.Configs[k]
    if !_tgt.Equals(_src173) { return false }
  }
  if len(p.Queries) != len(other.Queries) { return false }
  for k, _tgt := range p.Queries {
    _src174 := other.Queries[k]
    if !_tgt.Equals(_src174) { return false }
  }
  return true
}

func (p *Session) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Session(%+v)", *p)
}

func (p *Session) Validate() error {
  return nil
}
// Attributes:
//  - User
//  - GraphAddr
//  - ClientIP
type CreateSessionReq struct {
  User []byte `thrift:"user,1" db:"user" json:"user"`
  GraphAddr *nebula.HostAddr `thrift:"graph_addr,2" db:"graph_addr" json:"graph_addr"`
  ClientIP []byte `thrift:"client_ip,3" db:"client_ip" json:"client_ip"`
}

func NewCreateSessionReq() *CreateSessionReq {
  return &CreateSessionReq{}
}


func (p *CreateSessionReq) GetUser() []byte {
  return p.User
}
var CreateSessionReq_GraphAddr_DEFAULT *nebula.HostAddr
func (p *CreateSessionReq) GetGraphAddr() *nebula.HostAddr {
  if !p.IsSetGraphAddr() {
    return CreateSessionReq_GraphAddr_DEFAULT
  }
return p.GraphAddr
}

func (p *CreateSessionReq) GetClientIP() []byte {
  return p.ClientIP
}
func (p *CreateSessionReq) IsSetGraphAddr() bool {
  return p.GraphAddr != nil
}

func (p *CreateSessionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSessionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *CreateSessionReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.GraphAddr = &nebula.HostAddr{}
  if err := p.GraphAddr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *CreateSessionReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClientIP = v
}
  return nil
}

func (p *CreateSessionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSessionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.User); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *CreateSessionReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "graph_addr", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:graph_addr: ", p), err) }
  return err
}

func (p *CreateSessionReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:client_ip: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ClientIP); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:client_ip: ", p), err) }
  return err
}

func (p *CreateSessionReq) Equals(other *CreateSessionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.User, other.User) != 0 { return false }
  if !p.GraphAddr.Equals(other.GraphAddr) { return false }
  if bytes.Compare(p.ClientIP, other.ClientIP) != 0 { return false }
  return true
}

func (p *CreateSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSessionReq(%+v)", *p)
}

func (p *CreateSessionReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Session
type CreateSessionResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Session *Session `thrift:"session,3" db:"session" json:"session"`
}

func NewCreateSessionResp() *CreateSessionResp {
  return &CreateSessionResp{}
}


func (p *CreateSessionResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var CreateSessionResp_Leader_DEFAULT *nebula.HostAddr
func (p *CreateSessionResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return CreateSessionResp_Leader_DEFAULT
  }
return p.Leader
}
var CreateSessionResp_Session_DEFAULT *Session
func (p *CreateSessionResp) GetSession() *Session {
  if !p.IsSetSession() {
    return CreateSessionResp_Session_DEFAULT
  }
return p.Session
}
func (p *CreateSessionResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *CreateSessionResp) IsSetSession() bool {
  return p.Session != nil
}

func (p *CreateSessionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSessionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *CreateSessionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *CreateSessionResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Session = &Session{}
  if err := p.Session.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *CreateSessionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateSessionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSessionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateSessionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *CreateSessionResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session: ", p), err) }
  if err := p.Session.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session: ", p), err) }
  return err
}

func (p *CreateSessionResp) Equals(other *CreateSessionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Session.Equals(other.Session) { return false }
  return true
}

func (p *CreateSessionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSessionResp(%+v)", *p)
}

func (p *CreateSessionResp) Validate() error {
  return nil
}
// Attributes:
//  - Sessions
type UpdateSessionsReq struct {
  Sessions []*Session `thrift:"sessions,1" db:"sessions" json:"sessions"`
}

func NewUpdateSessionsReq() *UpdateSessionsReq {
  return &UpdateSessionsReq{}
}


func (p *UpdateSessionsReq) GetSessions() []*Session {
  return p.Sessions
}
func (p *UpdateSessionsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateSessionsReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Session, 0, size)
  p.Sessions =  tSlice
  for i := 0; i < size; i ++ {
    _elem175 := &Session{}
    if err := _elem175.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem175), err)
    }
    p.Sessions = append(p.Sessions, _elem175)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateSessionsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateSessionsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateSessionsReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Sessions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Sessions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessions: ", p), err) }
  return err
}

func (p *UpdateSessionsReq) Equals(other *UpdateSessionsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Sessions) != len(other.Sessions) { return false }
  for i, _tgt := range p.Sessions {
    _src176 := other.Sessions[i]
    if !_tgt.Equals(_src176) { return false }
  }
  return true
}

func (p *UpdateSessionsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateSessionsReq(%+v)", *p)
}

func (p *UpdateSessionsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - KilledQueries
//  - KilledSessions
type UpdateSessionsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  KilledQueries map[nebula.SessionID]map[nebula.ExecutionPlanID]*QueryDesc `thrift:"killed_queries,3" db:"killed_queries" json:"killed_queries"`
  KilledSessions []nebula.SessionID `thrift:"killed_sessions,4" db:"killed_sessions" json:"killed_sessions"`
}

func NewUpdateSessionsResp() *UpdateSessionsResp {
  return &UpdateSessionsResp{}
}


func (p *UpdateSessionsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var UpdateSessionsResp_Leader_DEFAULT *nebula.HostAddr
func (p *UpdateSessionsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return UpdateSessionsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *UpdateSessionsResp) GetKilledQueries() map[nebula.SessionID]map[nebula.ExecutionPlanID]*QueryDesc {
  return p.KilledQueries
}

func (p *UpdateSessionsResp) GetKilledSessions() []nebula.SessionID {
  return p.KilledSessions
}
func (p *UpdateSessionsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *UpdateSessionsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *UpdateSessionsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.SessionID]map[nebula.ExecutionPlanID]*QueryDesc, size)
  p.KilledQueries =  tMap
  for i := 0; i < size; i ++ {
var _key177 nebula.SessionID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.SessionID(v)
    _key177 = temp
}
    _, _, size, err := iprot.ReadMapBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[nebula.ExecutionPlanID]*QueryDesc, size)
    _val178 :=  tMap
    for i := 0; i < size; i ++ {
var _key179 nebula.ExecutionPlanID
      if v, err := iprot.ReadI64(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula.ExecutionPlanID(v)
      _key179 = temp
}
      _val180 := &QueryDesc{}
      if err := _val180.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val180), err)
      }
      _val178[_key179] = _val180
    }
    if err := iprot.ReadMapEnd(ctx); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.KilledQueries[_key177] = _val178
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.SessionID, 0, size)
  p.KilledSessions =  tSlice
  for i := 0; i < size; i ++ {
var _elem181 nebula.SessionID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.SessionID(v)
    _elem181 = temp
}
    p.KilledSessions = append(p.KilledSessions, _elem181)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateSessionsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateSessionsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateSessionsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "killed_queries", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:killed_queries: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.MAP, len(p.KilledQueries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KilledQueries {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteI64(ctx, int64(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:killed_queries: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "killed_sessions", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:killed_sessions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.KilledSessions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.KilledSessions {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:killed_sessions: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) Equals(other *UpdateSessionsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.KilledQueries) != len(other.KilledQueries) { return false }
  for k, _tgt := range p.KilledQueries {
    _src182 := other.KilledQueries[k]
    if len(_tgt) != len(_src182) { return false }
    for k, _tgt := range _tgt {
      _src183 := _src182[k]
      if !_tgt.Equals(_src183) { return false }
    }
  }
  if len(p.KilledSessions) != len(other.KilledSessions) { return false }
  for i, _tgt := range p.KilledSessions {
    _src184 := other.KilledSessions[i]
    if _tgt != _src184 { return false }
  }
  return true
}

func (p *UpdateSessionsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateSessionsResp(%+v)", *p)
}

func (p *UpdateSessionsResp) Validate() error {
  return nil
}
type ListSessionsReq struct {
}

func NewListSessionsReq() *ListSessionsReq {
  return &ListSessionsReq{}
}

func (p *ListSessionsReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSessionsReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSessionsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSessionsReq) Equals(other *ListSessionsReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListSessionsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSessionsReq(%+v)", *p)
}

func (p *ListSessionsReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Sessions
type ListSessionsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Sessions []*Session `thrift:"sessions,3" db:"sessions" json:"sessions"`
}

func NewListSessionsResp() *ListSessionsResp {
  return &ListSessionsResp{}
}


func (p *ListSessionsResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListSessionsResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListSessionsResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListSessionsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSessionsResp) GetSessions() []*Session {
  return p.Sessions
}
func (p *ListSessionsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSessionsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSessionsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSessionsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSessionsResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Session, 0, size)
  p.Sessions =  tSlice
  for i := 0; i < size; i ++ {
    _elem185 := &Session{}
    if err := _elem185.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem185), err)
    }
    p.Sessions = append(p.Sessions, _elem185)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSessionsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListSessionsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSessionsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSessionsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSessionsResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessions", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Sessions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Sessions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessions: ", p), err) }
  return err
}

func (p *ListSessionsResp) Equals(other *ListSessionsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.Sessions) != len(other.Sessions) { return false }
  for i, _tgt := range p.Sessions {
    _src186 := other.Sessions[i]
    if !_tgt.Equals(_src186) { return false }
  }
  return true
}

func (p *ListSessionsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSessionsResp(%+v)", *p)
}

func (p *ListSessionsResp) Validate() error {
  return nil
}
// Attributes:
//  - SessionID
type GetSessionReq struct {
  SessionID nebula.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id"`
}

func NewGetSessionReq() *GetSessionReq {
  return &GetSessionReq{}
}


func (p *GetSessionReq) GetSessionID() nebula.SessionID {
  return p.SessionID
}
func (p *GetSessionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSessionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.SessionID(v)
  p.SessionID = temp
}
  return nil
}

func (p *GetSessionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSessionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  return err
}

func (p *GetSessionReq) Equals(other *GetSessionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SessionID != other.SessionID { return false }
  return true
}

func (p *GetSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSessionReq(%+v)", *p)
}

func (p *GetSessionReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - Session
type GetSessionResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Session *Session `thrift:"session,3" db:"session" json:"session"`
}

func NewGetSessionResp() *GetSessionResp {
  return &GetSessionResp{}
}


func (p *GetSessionResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetSessionResp_Leader_DEFAULT *nebula.HostAddr
func (p *GetSessionResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return GetSessionResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSessionResp_Session_DEFAULT *Session
func (p *GetSessionResp) GetSession() *Session {
  if !p.IsSetSession() {
    return GetSessionResp_Session_DEFAULT
  }
return p.Session
}
func (p *GetSessionResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetSessionResp) IsSetSession() bool {
  return p.Session != nil
}

func (p *GetSessionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSessionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetSessionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSessionResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Session = &Session{}
  if err := p.Session.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *GetSessionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetSessionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSessionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSessionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSessionResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session: ", p), err) }
  if err := p.Session.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session: ", p), err) }
  return err
}

func (p *GetSessionResp) Equals(other *GetSessionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if !p.Session.Equals(other.Session) { return false }
  return true
}

func (p *GetSessionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSessionResp(%+v)", *p)
}

func (p *GetSessionResp) Validate() error {
  return nil
}
// Attributes:
//  - SessionIds
type RemoveSessionReq struct {
  SessionIds []nebula.SessionID `thrift:"session_ids,1" db:"session_ids" json:"session_ids"`
}

func NewRemoveSessionReq() *RemoveSessionReq {
  return &RemoveSessionReq{}
}


func (p *RemoveSessionReq) GetSessionIds() []nebula.SessionID {
  return p.SessionIds
}
func (p *RemoveSessionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveSessionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.SessionID, 0, size)
  p.SessionIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem187 nebula.SessionID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.SessionID(v)
    _elem187 = temp
}
    p.SessionIds = append(p.SessionIds, _elem187)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RemoveSessionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveSessionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.SessionIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SessionIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_ids: ", p), err) }
  return err
}

func (p *RemoveSessionReq) Equals(other *RemoveSessionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SessionIds) != len(other.SessionIds) { return false }
  for i, _tgt := range p.SessionIds {
    _src188 := other.SessionIds[i]
    if _tgt != _src188 { return false }
  }
  return true
}

func (p *RemoveSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSessionReq(%+v)", *p)
}

func (p *RemoveSessionReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - RemovedSessionIds
type RemoveSessionResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  RemovedSessionIds []nebula.SessionID `thrift:"removed_session_ids,3" db:"removed_session_ids" json:"removed_session_ids"`
}

func NewRemoveSessionResp() *RemoveSessionResp {
  return &RemoveSessionResp{}
}


func (p *RemoveSessionResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var RemoveSessionResp_Leader_DEFAULT *nebula.HostAddr
func (p *RemoveSessionResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return RemoveSessionResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *RemoveSessionResp) GetRemovedSessionIds() []nebula.SessionID {
  return p.RemovedSessionIds
}
func (p *RemoveSessionResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *RemoveSessionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveSessionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *RemoveSessionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *RemoveSessionResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.SessionID, 0, size)
  p.RemovedSessionIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem189 nebula.SessionID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.SessionID(v)
    _elem189 = temp
}
    p.RemovedSessionIds = append(p.RemovedSessionIds, _elem189)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RemoveSessionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemoveSessionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveSessionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RemoveSessionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *RemoveSessionResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "removed_session_ids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:removed_session_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.RemovedSessionIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RemovedSessionIds {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:removed_session_ids: ", p), err) }
  return err
}

func (p *RemoveSessionResp) Equals(other *RemoveSessionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.RemovedSessionIds) != len(other.RemovedSessionIds) { return false }
  for i, _tgt := range p.RemovedSessionIds {
    _src190 := other.RemovedSessionIds[i]
    if _tgt != _src190 { return false }
  }
  return true
}

func (p *RemoveSessionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveSessionResp(%+v)", *p)
}

func (p *RemoveSessionResp) Validate() error {
  return nil
}
// Attributes:
//  - KillQueries
type KillQueryReq struct {
  KillQueries map[nebula.SessionID][]nebula.ExecutionPlanID `thrift:"kill_queries,1" db:"kill_queries" json:"kill_queries"`
}

func NewKillQueryReq() *KillQueryReq {
  return &KillQueryReq{}
}


func (p *KillQueryReq) GetKillQueries() map[nebula.SessionID][]nebula.ExecutionPlanID {
  return p.KillQueries
}
func (p *KillQueryReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KillQueryReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.SessionID][]nebula.ExecutionPlanID, size)
  p.KillQueries =  tMap
  for i := 0; i < size; i ++ {
var _key191 nebula.SessionID
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.SessionID(v)
    _key191 = temp
}
    _, size, err := iprot.ReadSetBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]nebula.ExecutionPlanID, 0, size)
    _val192 :=  tSet
    for i := 0; i < size; i ++ {
var _elem193 nebula.ExecutionPlanID
      if v, err := iprot.ReadI64(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula.ExecutionPlanID(v)
      _elem193 = temp
}
      _val192 = append(_val192, _elem193)
    }
    if err := iprot.ReadSetEnd(ctx); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.KillQueries[_key191] = _val192
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KillQueryReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "KillQueryReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KillQueryReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kill_queries", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kill_queries: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.SET, len(p.KillQueries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KillQueries {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.I64, len(v)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(v); i++ {
      for j := i+1; j<len(v); j++ {
        if func(tgt, src nebula.ExecutionPlanID) bool {
          if tgt != src { return false }
          return true
        }(v[i], v[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
        }
      }
    }
    for _, v := range v {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kill_queries: ", p), err) }
  return err
}

func (p *KillQueryReq) Equals(other *KillQueryReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.KillQueries) != len(other.KillQueries) { return false }
  for k, _tgt := range p.KillQueries {
    _src194 := other.KillQueries[k]
    if len(_tgt) != len(_src194) { return false }
    for i, _tgt := range _tgt {
      _src195 := _src194[i]
      if _tgt != _src195 { return false }
    }
  }
  return true
}

func (p *KillQueryReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KillQueryReq(%+v)", *p)
}

func (p *KillQueryReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - SpaceID
//  - JobID
//  - TaskID
//  - Stats
type ReportTaskReq struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  SpaceID nebula.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,3" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,4" db:"task_id" json:"task_id"`
  Stats *StatsItem `thrift:"stats,5" db:"stats" json:"stats,omitempty"`
}

func NewReportTaskReq() *ReportTaskReq {
  return &ReportTaskReq{}
}


func (p *ReportTaskReq) GetCode() nebula.ErrorCode {
  return p.Code
}

func (p *ReportTaskReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ReportTaskReq) GetJobID() int32 {
  return p.JobID
}

func (p *ReportTaskReq) GetTaskID() int32 {
  return p.TaskID
}
var ReportTaskReq_Stats_DEFAULT *StatsItem
func (p *ReportTaskReq) GetStats() *StatsItem {
  if !p.IsSetStats() {
    return ReportTaskReq_Stats_DEFAULT
  }
return p.Stats
}
func (p *ReportTaskReq) IsSetStats() bool {
  return p.Stats != nil
}

func (p *ReportTaskReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportTaskReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ReportTaskReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ReportTaskReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *ReportTaskReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TaskID = v
}
  return nil
}

func (p *ReportTaskReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stats = &StatsItem{}
  if err := p.Stats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *ReportTaskReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReportTaskReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportTaskReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:job_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "task_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:task_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:task_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStats() {
    if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stats: ", p), err) }
    if err := p.Stats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stats: ", p), err) }
  }
  return err
}

func (p *ReportTaskReq) Equals(other *ReportTaskReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.SpaceID != other.SpaceID { return false }
  if p.JobID != other.JobID { return false }
  if p.TaskID != other.TaskID { return false }
  if !p.Stats.Equals(other.Stats) { return false }
  return true
}

func (p *ReportTaskReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportTaskReq(%+v)", *p)
}

func (p *ReportTaskReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - HostServices
type ListClusterInfoResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  HostServices map[string][]*ServiceInfo `thrift:"host_services,3" db:"host_services" json:"host_services"`
}

func NewListClusterInfoResp() *ListClusterInfoResp {
  return &ListClusterInfoResp{}
}


func (p *ListClusterInfoResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var ListClusterInfoResp_Leader_DEFAULT *nebula.HostAddr
func (p *ListClusterInfoResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return ListClusterInfoResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListClusterInfoResp) GetHostServices() map[string][]*ServiceInfo {
  return p.HostServices
}
func (p *ListClusterInfoResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListClusterInfoResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListClusterInfoResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ServiceInfo, size)
  p.HostServices =  tMap
  for i := 0; i < size; i ++ {
var _key196 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key196 = v
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ServiceInfo, 0, size)
    _val197 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem198 := &ServiceInfo{}
      if err := _elem198.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem198), err)
      }
      _val197 = append(_val197, _elem198)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.HostServices[_key196] = _val197
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListClusterInfoResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListClusterInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host_services", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host_services: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.LIST, len(p.HostServices)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.HostServices {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host_services: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) Equals(other *ListClusterInfoResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if len(p.HostServices) != len(other.HostServices) { return false }
  for k, _tgt := range p.HostServices {
    _src199 := other.HostServices[k]
    if len(_tgt) != len(_src199) { return false }
    for i, _tgt := range _tgt {
      _src200 := _src199[i]
      if !_tgt.Equals(_src200) { return false }
    }
  }
  return true
}

func (p *ListClusterInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListClusterInfoResp(%+v)", *p)
}

func (p *ListClusterInfoResp) Validate() error {
  return nil
}
type ListClusterInfoReq struct {
}

func NewListClusterInfoReq() *ListClusterInfoReq {
  return &ListClusterInfoReq{}
}

func (p *ListClusterInfoReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListClusterInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoReq) Equals(other *ListClusterInfoReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListClusterInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListClusterInfoReq(%+v)", *p)
}

func (p *ListClusterInfoReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Dir
type GetMetaDirInfoResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Dir *nebula.DirInfo `thrift:"dir,2" db:"dir" json:"dir"`
}

func NewGetMetaDirInfoResp() *GetMetaDirInfoResp {
  return &GetMetaDirInfoResp{}
}


func (p *GetMetaDirInfoResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var GetMetaDirInfoResp_Dir_DEFAULT *nebula.DirInfo
func (p *GetMetaDirInfoResp) GetDir() *nebula.DirInfo {
  if !p.IsSetDir() {
    return GetMetaDirInfoResp_Dir_DEFAULT
  }
return p.Dir
}
func (p *GetMetaDirInfoResp) IsSetDir() bool {
  return p.Dir != nil
}

func (p *GetMetaDirInfoResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMetaDirInfoResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetMetaDirInfoResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dir = &nebula.DirInfo{}
  if err := p.Dir.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *GetMetaDirInfoResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetMetaDirInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMetaDirInfoResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetMetaDirInfoResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dir", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dir: ", p), err) }
  if err := p.Dir.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dir: ", p), err) }
  return err
}

func (p *GetMetaDirInfoResp) Equals(other *GetMetaDirInfoResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Dir.Equals(other.Dir) { return false }
  return true
}

func (p *GetMetaDirInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDirInfoResp(%+v)", *p)
}

func (p *GetMetaDirInfoResp) Validate() error {
  return nil
}
type GetMetaDirInfoReq struct {
}

func NewGetMetaDirInfoReq() *GetMetaDirInfoReq {
  return &GetMetaDirInfoReq{}
}

func (p *GetMetaDirInfoReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMetaDirInfoReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetMetaDirInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMetaDirInfoReq) Equals(other *GetMetaDirInfoReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *GetMetaDirInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDirInfoReq(%+v)", *p)
}

func (p *GetMetaDirInfoReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - ErrorMsg
type VerifyClientVersionResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ErrorMsg []byte `thrift:"error_msg,3" db:"error_msg" json:"error_msg,omitempty"`
}

func NewVerifyClientVersionResp() *VerifyClientVersionResp {
  return &VerifyClientVersionResp{}
}


func (p *VerifyClientVersionResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var VerifyClientVersionResp_Leader_DEFAULT *nebula.HostAddr
func (p *VerifyClientVersionResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return VerifyClientVersionResp_Leader_DEFAULT
  }
return p.Leader
}
var VerifyClientVersionResp_ErrorMsg_DEFAULT []byte

func (p *VerifyClientVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *VerifyClientVersionResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *VerifyClientVersionResp) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *VerifyClientVersionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *VerifyClientVersionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *VerifyClientVersionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyClientVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin(ctx, "error_msg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error_msg: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error_msg: ", p), err) }
  }
  return err
}

func (p *VerifyClientVersionResp) Equals(other *VerifyClientVersionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if bytes.Compare(p.ErrorMsg, other.ErrorMsg) != 0 { return false }
  return true
}

func (p *VerifyClientVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyClientVersionResp(%+v)", *p)
}

func (p *VerifyClientVersionResp) Validate() error {
  return nil
}
// Attributes:
//  - ClientVersion
//  - Host
//  - BuildVersion
type VerifyClientVersionReq struct {
  ClientVersion []byte `thrift:"client_version,1,required" db:"client_version" json:"client_version"`
  Host *nebula.HostAddr `thrift:"host,2" db:"host" json:"host"`
  BuildVersion []byte `thrift:"build_version,3" db:"build_version" json:"build_version"`
}

func NewVerifyClientVersionReq() *VerifyClientVersionReq {
  return &VerifyClientVersionReq{
ClientVersion: []byte("3.0.0"),
}
}


func (p *VerifyClientVersionReq) GetClientVersion() []byte {
  return p.ClientVersion
}
var VerifyClientVersionReq_Host_DEFAULT *nebula.HostAddr
func (p *VerifyClientVersionReq) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return VerifyClientVersionReq_Host_DEFAULT
  }
return p.Host
}

func (p *VerifyClientVersionReq) GetBuildVersion() []byte {
  return p.BuildVersion
}
func (p *VerifyClientVersionReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *VerifyClientVersionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClientVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetClientVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClientVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientVersion is not set"));
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientVersion = v
}
  return nil
}

func (p *VerifyClientVersionReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BuildVersion = v
}
  return nil
}

func (p *VerifyClientVersionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyClientVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_version: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ClientVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "build_version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:build_version: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.BuildVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.build_version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:build_version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) Equals(other *VerifyClientVersionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ClientVersion, other.ClientVersion) != 0 { return false }
  if !p.Host.Equals(other.Host) { return false }
  if bytes.Compare(p.BuildVersion, other.BuildVersion) != 0 { return false }
  return true
}

func (p *VerifyClientVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyClientVersionReq(%+v)", *p)
}

func (p *VerifyClientVersionReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Leader
//  - ErrorMsg
type SaveGraphVersionResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ErrorMsg []byte `thrift:"error_msg,3" db:"error_msg" json:"error_msg,omitempty"`
}

func NewSaveGraphVersionResp() *SaveGraphVersionResp {
  return &SaveGraphVersionResp{}
}


func (p *SaveGraphVersionResp) GetCode() nebula.ErrorCode {
  return p.Code
}
var SaveGraphVersionResp_Leader_DEFAULT *nebula.HostAddr
func (p *SaveGraphVersionResp) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return SaveGraphVersionResp_Leader_DEFAULT
  }
return p.Leader
}
var SaveGraphVersionResp_ErrorMsg_DEFAULT []byte

func (p *SaveGraphVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *SaveGraphVersionResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *SaveGraphVersionResp) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *SaveGraphVersionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SaveGraphVersionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *SaveGraphVersionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *SaveGraphVersionResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *SaveGraphVersionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveGraphVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveGraphVersionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *SaveGraphVersionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *SaveGraphVersionResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin(ctx, "error_msg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error_msg: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error_msg: ", p), err) }
  }
  return err
}

func (p *SaveGraphVersionResp) Equals(other *SaveGraphVersionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  if bytes.Compare(p.ErrorMsg, other.ErrorMsg) != 0 { return false }
  return true
}

func (p *SaveGraphVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveGraphVersionResp(%+v)", *p)
}

func (p *SaveGraphVersionResp) Validate() error {
  return nil
}
// Attributes:
//  - ClientVersion
//  - Host
//  - BuildVersion
type SaveGraphVersionReq struct {
  ClientVersion []byte `thrift:"client_version,1,required" db:"client_version" json:"client_version"`
  Host *nebula.HostAddr `thrift:"host,2" db:"host" json:"host"`
  BuildVersion []byte `thrift:"build_version,3" db:"build_version" json:"build_version"`
}

func NewSaveGraphVersionReq() *SaveGraphVersionReq {
  return &SaveGraphVersionReq{
ClientVersion: []byte("3.0.0"),
}
}


func (p *SaveGraphVersionReq) GetClientVersion() []byte {
  return p.ClientVersion
}
var SaveGraphVersionReq_Host_DEFAULT *nebula.HostAddr
func (p *SaveGraphVersionReq) GetHost() *nebula.HostAddr {
  if !p.IsSetHost() {
    return SaveGraphVersionReq_Host_DEFAULT
  }
return p.Host
}

func (p *SaveGraphVersionReq) GetBuildVersion() []byte {
  return p.BuildVersion
}
func (p *SaveGraphVersionReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *SaveGraphVersionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClientVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetClientVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClientVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientVersion is not set"));
  }
  return nil
}

func (p *SaveGraphVersionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClientVersion = v
}
  return nil
}

func (p *SaveGraphVersionReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Host = &nebula.HostAddr{}
  if err := p.Host.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *SaveGraphVersionReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BuildVersion = v
}
  return nil
}

func (p *SaveGraphVersionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SaveGraphVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveGraphVersionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_version: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ClientVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_version: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "build_version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:build_version: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.BuildVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.build_version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:build_version: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) Equals(other *SaveGraphVersionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ClientVersion, other.ClientVersion) != 0 { return false }
  if !p.Host.Equals(other.Host) { return false }
  if bytes.Compare(p.BuildVersion, other.BuildVersion) != 0 { return false }
  return true
}

func (p *SaveGraphVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveGraphVersionReq(%+v)", *p)
}

func (p *SaveGraphVersionReq) Validate() error {
  return nil
}
type MetaService interface {
  // Parameters:
  //  - Req
  CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, _err error)
  // Parameters:
  //  - Req
  ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, _err error)
  // Parameters:
  //  - Req
  AlterSpace(ctx context.Context, req *AlterSpaceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  CreateSpaceAs(ctx context.Context, req *CreateSpaceAsReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, _err error)
  // Parameters:
  //  - Req
  ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, _err error)
  // Parameters:
  //  - Req
  CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, _err error)
  // Parameters:
  //  - Req
  ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, _err error)
  // Parameters:
  //  - Req
  AddHosts(ctx context.Context, req *AddHostsReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  AddHostsIntoZone(ctx context.Context, req *AddHostsIntoZoneReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropHosts(ctx context.Context, req *DropHostsReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, _err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, _err error)
  // Parameters:
  //  - Req
  ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, _err error)
  // Parameters:
  //  - Req
  GetWorkerId(ctx context.Context, req *GetWorkerIdReq) (_r *GetWorkerIdResp, _err error)
  // Parameters:
  //  - Req
  CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, _err error)
  // Parameters:
  //  - Req
  ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, _err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, _err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, _err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, _err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, _err error)
  // Parameters:
  //  - Req
  CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, _err error)
  // Parameters:
  //  - Req
  ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, _err error)
  // Parameters:
  //  - Req
  GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, _err error)
  // Parameters:
  //  - Req
  ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, _err error)
  // Parameters:
  //  - Req
  AgentHeartbeat(ctx context.Context, req *AgentHBReq) (_r *AgentHBResp, _err error)
  // Parameters:
  //  - Req
  RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, _err error)
  // Parameters:
  //  - Req
  SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, _err error)
  // Parameters:
  //  - Req
  CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, _err error)
  // Parameters:
  //  - Req
  RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, _err error)
  // Parameters:
  //  - Req
  MergeZone(ctx context.Context, req *MergeZoneReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DivideZone(ctx context.Context, req *DivideZoneReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  RenameZone(ctx context.Context, req *RenameZoneReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, _err error)
  // Parameters:
  //  - Req
  ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, _err error)
  // Parameters:
  //  - Req
  AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, _err error)
  // Parameters:
  //  - Req
  GetStats(ctx context.Context, req *GetStatsReq) (_r *GetStatsResp, _err error)
  // Parameters:
  //  - Req
  SignInService(ctx context.Context, req *SignInServiceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  SignOutService(ctx context.Context, req *SignOutServiceReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListServiceClients(ctx context.Context, req *ListServiceClientsReq) (_r *ListServiceClientsResp, _err error)
  // Parameters:
  //  - Req
  CreateFTIndex(ctx context.Context, req *CreateFTIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  DropFTIndex(ctx context.Context, req *DropFTIndexReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ListFTIndexes(ctx context.Context, req *ListFTIndexesReq) (_r *ListFTIndexesResp, _err error)
  // Parameters:
  //  - Req
  CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, _err error)
  // Parameters:
  //  - Req
  UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *UpdateSessionsResp, _err error)
  // Parameters:
  //  - Req
  ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, _err error)
  // Parameters:
  //  - Req
  GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, _err error)
  // Parameters:
  //  - Req
  RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *RemoveSessionResp, _err error)
  // Parameters:
  //  - Req
  KillQuery(ctx context.Context, req *KillQueryReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, _err error)
  // Parameters:
  //  - Req
  CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, _err error)
  // Parameters:
  //  - Req
  RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *RestoreMetaResp, _err error)
  // Parameters:
  //  - Req
  ListCluster(ctx context.Context, req *ListClusterInfoReq) (_r *ListClusterInfoResp, _err error)
  // Parameters:
  //  - Req
  GetMetaDirInfo(ctx context.Context, req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, _err error)
  // Parameters:
  //  - Req
  VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, _err error)
  // Parameters:
  //  - Req
  SaveGraphVersion(ctx context.Context, req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, _err error)
  // Parameters:
  //  - Req
  GetSegmentId(ctx context.Context, req *GetSegmentIdReq) (_r *GetSegmentIdResp, _err error)
}

type MetaServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetaServiceClient {
  return &MetaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetaServiceClient {
  return &MetaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMetaServiceClient(c thrift.TClient) *MetaServiceClient {
  return &MetaServiceClient{
    c: c,
  }
}

func (p *MetaServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MetaServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MetaServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, _err error) {
  var _args201 MetaServiceCreateSpaceArgs
  _args201.Req = req
  var _result203 MetaServiceCreateSpaceResult
  var _meta202 thrift.ResponseMeta
  _meta202, _err = p.Client_().Call(ctx, "createSpace", &_args201, &_result203)
  p.SetLastResponseMeta_(_meta202)
  if _err != nil {
    return
  }
  if _ret204 := _result203.GetSuccess(); _ret204 != nil {
    return _ret204, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, _err error) {
  var _args205 MetaServiceDropSpaceArgs
  _args205.Req = req
  var _result207 MetaServiceDropSpaceResult
  var _meta206 thrift.ResponseMeta
  _meta206, _err = p.Client_().Call(ctx, "dropSpace", &_args205, &_result207)
  p.SetLastResponseMeta_(_meta206)
  if _err != nil {
    return
  }
  if _ret208 := _result207.GetSuccess(); _ret208 != nil {
    return _ret208, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ExecResp, _err error) {
  var _args209 MetaServiceClearSpaceArgs
  _args209.Req = req
  var _result211 MetaServiceClearSpaceResult
  var _meta210 thrift.ResponseMeta
  _meta210, _err = p.Client_().Call(ctx, "clearSpace", &_args209, &_result211)
  p.SetLastResponseMeta_(_meta210)
  if _err != nil {
    return
  }
  if _ret212 := _result211.GetSuccess(); _ret212 != nil {
    return _ret212, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "clearSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, _err error) {
  var _args213 MetaServiceGetSpaceArgs
  _args213.Req = req
  var _result215 MetaServiceGetSpaceResult
  var _meta214 thrift.ResponseMeta
  _meta214, _err = p.Client_().Call(ctx, "getSpace", &_args213, &_result215)
  p.SetLastResponseMeta_(_meta214)
  if _err != nil {
    return
  }
  if _ret216 := _result215.GetSuccess(); _ret216 != nil {
    return _ret216, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, _err error) {
  var _args217 MetaServiceListSpacesArgs
  _args217.Req = req
  var _result219 MetaServiceListSpacesResult
  var _meta218 thrift.ResponseMeta
  _meta218, _err = p.Client_().Call(ctx, "listSpaces", &_args217, &_result219)
  p.SetLastResponseMeta_(_meta218)
  if _err != nil {
    return
  }
  if _ret220 := _result219.GetSuccess(); _ret220 != nil {
    return _ret220, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listSpaces failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterSpace(ctx context.Context, req *AlterSpaceReq) (_r *ExecResp, _err error) {
  var _args221 MetaServiceAlterSpaceArgs
  _args221.Req = req
  var _result223 MetaServiceAlterSpaceResult
  var _meta222 thrift.ResponseMeta
  _meta222, _err = p.Client_().Call(ctx, "alterSpace", &_args221, &_result223)
  p.SetLastResponseMeta_(_meta222)
  if _err != nil {
    return
  }
  if _ret224 := _result223.GetSuccess(); _ret224 != nil {
    return _ret224, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "alterSpace failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpaceAs(ctx context.Context, req *CreateSpaceAsReq) (_r *ExecResp, _err error) {
  var _args225 MetaServiceCreateSpaceAsArgs
  _args225.Req = req
  var _result227 MetaServiceCreateSpaceAsResult
  var _meta226 thrift.ResponseMeta
  _meta226, _err = p.Client_().Call(ctx, "createSpaceAs", &_args225, &_result227)
  p.SetLastResponseMeta_(_meta226)
  if _err != nil {
    return
  }
  if _ret228 := _result227.GetSuccess(); _ret228 != nil {
    return _ret228, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createSpaceAs failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, _err error) {
  var _args229 MetaServiceCreateTagArgs
  _args229.Req = req
  var _result231 MetaServiceCreateTagResult
  var _meta230 thrift.ResponseMeta
  _meta230, _err = p.Client_().Call(ctx, "createTag", &_args229, &_result231)
  p.SetLastResponseMeta_(_meta230)
  if _err != nil {
    return
  }
  if _ret232 := _result231.GetSuccess(); _ret232 != nil {
    return _ret232, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createTag failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, _err error) {
  var _args233 MetaServiceAlterTagArgs
  _args233.Req = req
  var _result235 MetaServiceAlterTagResult
  var _meta234 thrift.ResponseMeta
  _meta234, _err = p.Client_().Call(ctx, "alterTag", &_args233, &_result235)
  p.SetLastResponseMeta_(_meta234)
  if _err != nil {
    return
  }
  if _ret236 := _result235.GetSuccess(); _ret236 != nil {
    return _ret236, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "alterTag failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, _err error) {
  var _args237 MetaServiceDropTagArgs
  _args237.Req = req
  var _result239 MetaServiceDropTagResult
  var _meta238 thrift.ResponseMeta
  _meta238, _err = p.Client_().Call(ctx, "dropTag", &_args237, &_result239)
  p.SetLastResponseMeta_(_meta238)
  if _err != nil {
    return
  }
  if _ret240 := _result239.GetSuccess(); _ret240 != nil {
    return _ret240, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropTag failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, _err error) {
  var _args241 MetaServiceGetTagArgs
  _args241.Req = req
  var _result243 MetaServiceGetTagResult
  var _meta242 thrift.ResponseMeta
  _meta242, _err = p.Client_().Call(ctx, "getTag", &_args241, &_result243)
  p.SetLastResponseMeta_(_meta242)
  if _err != nil {
    return
  }
  if _ret244 := _result243.GetSuccess(); _ret244 != nil {
    return _ret244, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTag failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, _err error) {
  var _args245 MetaServiceListTagsArgs
  _args245.Req = req
  var _result247 MetaServiceListTagsResult
  var _meta246 thrift.ResponseMeta
  _meta246, _err = p.Client_().Call(ctx, "listTags", &_args245, &_result247)
  p.SetLastResponseMeta_(_meta246)
  if _err != nil {
    return
  }
  if _ret248 := _result247.GetSuccess(); _ret248 != nil {
    return _ret248, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listTags failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, _err error) {
  var _args249 MetaServiceCreateEdgeArgs
  _args249.Req = req
  var _result251 MetaServiceCreateEdgeResult
  var _meta250 thrift.ResponseMeta
  _meta250, _err = p.Client_().Call(ctx, "createEdge", &_args249, &_result251)
  p.SetLastResponseMeta_(_meta250)
  if _err != nil {
    return
  }
  if _ret252 := _result251.GetSuccess(); _ret252 != nil {
    return _ret252, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, _err error) {
  var _args253 MetaServiceAlterEdgeArgs
  _args253.Req = req
  var _result255 MetaServiceAlterEdgeResult
  var _meta254 thrift.ResponseMeta
  _meta254, _err = p.Client_().Call(ctx, "alterEdge", &_args253, &_result255)
  p.SetLastResponseMeta_(_meta254)
  if _err != nil {
    return
  }
  if _ret256 := _result255.GetSuccess(); _ret256 != nil {
    return _ret256, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "alterEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, _err error) {
  var _args257 MetaServiceDropEdgeArgs
  _args257.Req = req
  var _result259 MetaServiceDropEdgeResult
  var _meta258 thrift.ResponseMeta
  _meta258, _err = p.Client_().Call(ctx, "dropEdge", &_args257, &_result259)
  p.SetLastResponseMeta_(_meta258)
  if _err != nil {
    return
  }
  if _ret260 := _result259.GetSuccess(); _ret260 != nil {
    return _ret260, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, _err error) {
  var _args261 MetaServiceGetEdgeArgs
  _args261.Req = req
  var _result263 MetaServiceGetEdgeResult
  var _meta262 thrift.ResponseMeta
  _meta262, _err = p.Client_().Call(ctx, "getEdge", &_args261, &_result263)
  p.SetLastResponseMeta_(_meta262)
  if _err != nil {
    return
  }
  if _ret264 := _result263.GetSuccess(); _ret264 != nil {
    return _ret264, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, _err error) {
  var _args265 MetaServiceListEdgesArgs
  _args265.Req = req
  var _result267 MetaServiceListEdgesResult
  var _meta266 thrift.ResponseMeta
  _meta266, _err = p.Client_().Call(ctx, "listEdges", &_args265, &_result267)
  p.SetLastResponseMeta_(_meta266)
  if _err != nil {
    return
  }
  if _ret268 := _result267.GetSuccess(); _ret268 != nil {
    return _ret268, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHosts(ctx context.Context, req *AddHostsReq) (_r *ExecResp, _err error) {
  var _args269 MetaServiceAddHostsArgs
  _args269.Req = req
  var _result271 MetaServiceAddHostsResult
  var _meta270 thrift.ResponseMeta
  _meta270, _err = p.Client_().Call(ctx, "addHosts", &_args269, &_result271)
  p.SetLastResponseMeta_(_meta270)
  if _err != nil {
    return
  }
  if _ret272 := _result271.GetSuccess(); _ret272 != nil {
    return _ret272, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addHosts failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHostsIntoZone(ctx context.Context, req *AddHostsIntoZoneReq) (_r *ExecResp, _err error) {
  var _args273 MetaServiceAddHostsIntoZoneArgs
  _args273.Req = req
  var _result275 MetaServiceAddHostsIntoZoneResult
  var _meta274 thrift.ResponseMeta
  _meta274, _err = p.Client_().Call(ctx, "addHostsIntoZone", &_args273, &_result275)
  p.SetLastResponseMeta_(_meta274)
  if _err != nil {
    return
  }
  if _ret276 := _result275.GetSuccess(); _ret276 != nil {
    return _ret276, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addHostsIntoZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropHosts(ctx context.Context, req *DropHostsReq) (_r *ExecResp, _err error) {
  var _args277 MetaServiceDropHostsArgs
  _args277.Req = req
  var _result279 MetaServiceDropHostsResult
  var _meta278 thrift.ResponseMeta
  _meta278, _err = p.Client_().Call(ctx, "dropHosts", &_args277, &_result279)
  p.SetLastResponseMeta_(_meta278)
  if _err != nil {
    return
  }
  if _ret280 := _result279.GetSuccess(); _ret280 != nil {
    return _ret280, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropHosts failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, _err error) {
  var _args281 MetaServiceListHostsArgs
  _args281.Req = req
  var _result283 MetaServiceListHostsResult
  var _meta282 thrift.ResponseMeta
  _meta282, _err = p.Client_().Call(ctx, "listHosts", &_args281, &_result283)
  p.SetLastResponseMeta_(_meta282)
  if _err != nil {
    return
  }
  if _ret284 := _result283.GetSuccess(); _ret284 != nil {
    return _ret284, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listHosts failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, _err error) {
  var _args285 MetaServiceGetPartsAllocArgs
  _args285.Req = req
  var _result287 MetaServiceGetPartsAllocResult
  var _meta286 thrift.ResponseMeta
  _meta286, _err = p.Client_().Call(ctx, "getPartsAlloc", &_args285, &_result287)
  p.SetLastResponseMeta_(_meta286)
  if _err != nil {
    return
  }
  if _ret288 := _result287.GetSuccess(); _ret288 != nil {
    return _ret288, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPartsAlloc failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, _err error) {
  var _args289 MetaServiceListPartsArgs
  _args289.Req = req
  var _result291 MetaServiceListPartsResult
  var _meta290 thrift.ResponseMeta
  _meta290, _err = p.Client_().Call(ctx, "listParts", &_args289, &_result291)
  p.SetLastResponseMeta_(_meta290)
  if _err != nil {
    return
  }
  if _ret292 := _result291.GetSuccess(); _ret292 != nil {
    return _ret292, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listParts failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetWorkerId(ctx context.Context, req *GetWorkerIdReq) (_r *GetWorkerIdResp, _err error) {
  var _args293 MetaServiceGetWorkerIdArgs
  _args293.Req = req
  var _result295 MetaServiceGetWorkerIdResult
  var _meta294 thrift.ResponseMeta
  _meta294, _err = p.Client_().Call(ctx, "getWorkerId", &_args293, &_result295)
  p.SetLastResponseMeta_(_meta294)
  if _err != nil {
    return
  }
  if _ret296 := _result295.GetSuccess(); _ret296 != nil {
    return _ret296, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getWorkerId failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, _err error) {
  var _args297 MetaServiceCreateTagIndexArgs
  _args297.Req = req
  var _result299 MetaServiceCreateTagIndexResult
  var _meta298 thrift.ResponseMeta
  _meta298, _err = p.Client_().Call(ctx, "createTagIndex", &_args297, &_result299)
  p.SetLastResponseMeta_(_meta298)
  if _err != nil {
    return
  }
  if _ret300 := _result299.GetSuccess(); _ret300 != nil {
    return _ret300, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createTagIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, _err error) {
  var _args301 MetaServiceDropTagIndexArgs
  _args301.Req = req
  var _result303 MetaServiceDropTagIndexResult
  var _meta302 thrift.ResponseMeta
  _meta302, _err = p.Client_().Call(ctx, "dropTagIndex", &_args301, &_result303)
  p.SetLastResponseMeta_(_meta302)
  if _err != nil {
    return
  }
  if _ret304 := _result303.GetSuccess(); _ret304 != nil {
    return _ret304, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropTagIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, _err error) {
  var _args305 MetaServiceGetTagIndexArgs
  _args305.Req = req
  var _result307 MetaServiceGetTagIndexResult
  var _meta306 thrift.ResponseMeta
  _meta306, _err = p.Client_().Call(ctx, "getTagIndex", &_args305, &_result307)
  p.SetLastResponseMeta_(_meta306)
  if _err != nil {
    return
  }
  if _ret308 := _result307.GetSuccess(); _ret308 != nil {
    return _ret308, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTagIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, _err error) {
  var _args309 MetaServiceListTagIndexesArgs
  _args309.Req = req
  var _result311 MetaServiceListTagIndexesResult
  var _meta310 thrift.ResponseMeta
  _meta310, _err = p.Client_().Call(ctx, "listTagIndexes", &_args309, &_result311)
  p.SetLastResponseMeta_(_meta310)
  if _err != nil {
    return
  }
  if _ret312 := _result311.GetSuccess(); _ret312 != nil {
    return _ret312, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listTagIndexes failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, _err error) {
  var _args313 MetaServiceRebuildTagIndexArgs
  _args313.Req = req
  var _result315 MetaServiceRebuildTagIndexResult
  var _meta314 thrift.ResponseMeta
  _meta314, _err = p.Client_().Call(ctx, "rebuildTagIndex", &_args313, &_result315)
  p.SetLastResponseMeta_(_meta314)
  if _err != nil {
    return
  }
  if _ret316 := _result315.GetSuccess(); _ret316 != nil {
    return _ret316, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "rebuildTagIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, _err error) {
  var _args317 MetaServiceListTagIndexStatusArgs
  _args317.Req = req
  var _result319 MetaServiceListTagIndexStatusResult
  var _meta318 thrift.ResponseMeta
  _meta318, _err = p.Client_().Call(ctx, "listTagIndexStatus", &_args317, &_result319)
  p.SetLastResponseMeta_(_meta318)
  if _err != nil {
    return
  }
  if _ret320 := _result319.GetSuccess(); _ret320 != nil {
    return _ret320, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listTagIndexStatus failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, _err error) {
  var _args321 MetaServiceCreateEdgeIndexArgs
  _args321.Req = req
  var _result323 MetaServiceCreateEdgeIndexResult
  var _meta322 thrift.ResponseMeta
  _meta322, _err = p.Client_().Call(ctx, "createEdgeIndex", &_args321, &_result323)
  p.SetLastResponseMeta_(_meta322)
  if _err != nil {
    return
  }
  if _ret324 := _result323.GetSuccess(); _ret324 != nil {
    return _ret324, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createEdgeIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, _err error) {
  var _args325 MetaServiceDropEdgeIndexArgs
  _args325.Req = req
  var _result327 MetaServiceDropEdgeIndexResult
  var _meta326 thrift.ResponseMeta
  _meta326, _err = p.Client_().Call(ctx, "dropEdgeIndex", &_args325, &_result327)
  p.SetLastResponseMeta_(_meta326)
  if _err != nil {
    return
  }
  if _ret328 := _result327.GetSuccess(); _ret328 != nil {
    return _ret328, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropEdgeIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, _err error) {
  var _args329 MetaServiceGetEdgeIndexArgs
  _args329.Req = req
  var _result331 MetaServiceGetEdgeIndexResult
  var _meta330 thrift.ResponseMeta
  _meta330, _err = p.Client_().Call(ctx, "getEdgeIndex", &_args329, &_result331)
  p.SetLastResponseMeta_(_meta330)
  if _err != nil {
    return
  }
  if _ret332 := _result331.GetSuccess(); _ret332 != nil {
    return _ret332, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getEdgeIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, _err error) {
  var _args333 MetaServiceListEdgeIndexesArgs
  _args333.Req = req
  var _result335 MetaServiceListEdgeIndexesResult
  var _meta334 thrift.ResponseMeta
  _meta334, _err = p.Client_().Call(ctx, "listEdgeIndexes", &_args333, &_result335)
  p.SetLastResponseMeta_(_meta334)
  if _err != nil {
    return
  }
  if _ret336 := _result335.GetSuccess(); _ret336 != nil {
    return _ret336, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listEdgeIndexes failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, _err error) {
  var _args337 MetaServiceRebuildEdgeIndexArgs
  _args337.Req = req
  var _result339 MetaServiceRebuildEdgeIndexResult
  var _meta338 thrift.ResponseMeta
  _meta338, _err = p.Client_().Call(ctx, "rebuildEdgeIndex", &_args337, &_result339)
  p.SetLastResponseMeta_(_meta338)
  if _err != nil {
    return
  }
  if _ret340 := _result339.GetSuccess(); _ret340 != nil {
    return _ret340, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "rebuildEdgeIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, _err error) {
  var _args341 MetaServiceListEdgeIndexStatusArgs
  _args341.Req = req
  var _result343 MetaServiceListEdgeIndexStatusResult
  var _meta342 thrift.ResponseMeta
  _meta342, _err = p.Client_().Call(ctx, "listEdgeIndexStatus", &_args341, &_result343)
  p.SetLastResponseMeta_(_meta342)
  if _err != nil {
    return
  }
  if _ret344 := _result343.GetSuccess(); _ret344 != nil {
    return _ret344, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listEdgeIndexStatus failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, _err error) {
  var _args345 MetaServiceCreateUserArgs
  _args345.Req = req
  var _result347 MetaServiceCreateUserResult
  var _meta346 thrift.ResponseMeta
  _meta346, _err = p.Client_().Call(ctx, "createUser", &_args345, &_result347)
  p.SetLastResponseMeta_(_meta346)
  if _err != nil {
    return
  }
  if _ret348 := _result347.GetSuccess(); _ret348 != nil {
    return _ret348, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createUser failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, _err error) {
  var _args349 MetaServiceDropUserArgs
  _args349.Req = req
  var _result351 MetaServiceDropUserResult
  var _meta350 thrift.ResponseMeta
  _meta350, _err = p.Client_().Call(ctx, "dropUser", &_args349, &_result351)
  p.SetLastResponseMeta_(_meta350)
  if _err != nil {
    return
  }
  if _ret352 := _result351.GetSuccess(); _ret352 != nil {
    return _ret352, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropUser failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, _err error) {
  var _args353 MetaServiceAlterUserArgs
  _args353.Req = req
  var _result355 MetaServiceAlterUserResult
  var _meta354 thrift.ResponseMeta
  _meta354, _err = p.Client_().Call(ctx, "alterUser", &_args353, &_result355)
  p.SetLastResponseMeta_(_meta354)
  if _err != nil {
    return
  }
  if _ret356 := _result355.GetSuccess(); _ret356 != nil {
    return _ret356, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "alterUser failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, _err error) {
  var _args357 MetaServiceGrantRoleArgs
  _args357.Req = req
  var _result359 MetaServiceGrantRoleResult
  var _meta358 thrift.ResponseMeta
  _meta358, _err = p.Client_().Call(ctx, "grantRole", &_args357, &_result359)
  p.SetLastResponseMeta_(_meta358)
  if _err != nil {
    return
  }
  if _ret360 := _result359.GetSuccess(); _ret360 != nil {
    return _ret360, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "grantRole failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, _err error) {
  var _args361 MetaServiceRevokeRoleArgs
  _args361.Req = req
  var _result363 MetaServiceRevokeRoleResult
  var _meta362 thrift.ResponseMeta
  _meta362, _err = p.Client_().Call(ctx, "revokeRole", &_args361, &_result363)
  p.SetLastResponseMeta_(_meta362)
  if _err != nil {
    return
  }
  if _ret364 := _result363.GetSuccess(); _ret364 != nil {
    return _ret364, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "revokeRole failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, _err error) {
  var _args365 MetaServiceListUsersArgs
  _args365.Req = req
  var _result367 MetaServiceListUsersResult
  var _meta366 thrift.ResponseMeta
  _meta366, _err = p.Client_().Call(ctx, "listUsers", &_args365, &_result367)
  p.SetLastResponseMeta_(_meta366)
  if _err != nil {
    return
  }
  if _ret368 := _result367.GetSuccess(); _ret368 != nil {
    return _ret368, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listUsers failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, _err error) {
  var _args369 MetaServiceListRolesArgs
  _args369.Req = req
  var _result371 MetaServiceListRolesResult
  var _meta370 thrift.ResponseMeta
  _meta370, _err = p.Client_().Call(ctx, "listRoles", &_args369, &_result371)
  p.SetLastResponseMeta_(_meta370)
  if _err != nil {
    return
  }
  if _ret372 := _result371.GetSuccess(); _ret372 != nil {
    return _ret372, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listRoles failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, _err error) {
  var _args373 MetaServiceGetUserRolesArgs
  _args373.Req = req
  var _result375 MetaServiceGetUserRolesResult
  var _meta374 thrift.ResponseMeta
  _meta374, _err = p.Client_().Call(ctx, "getUserRoles", &_args373, &_result375)
  p.SetLastResponseMeta_(_meta374)
  if _err != nil {
    return
  }
  if _ret376 := _result375.GetSuccess(); _ret376 != nil {
    return _ret376, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getUserRoles failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, _err error) {
  var _args377 MetaServiceChangePasswordArgs
  _args377.Req = req
  var _result379 MetaServiceChangePasswordResult
  var _meta378 thrift.ResponseMeta
  _meta378, _err = p.Client_().Call(ctx, "changePassword", &_args377, &_result379)
  p.SetLastResponseMeta_(_meta378)
  if _err != nil {
    return
  }
  if _ret380 := _result379.GetSuccess(); _ret380 != nil {
    return _ret380, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "changePassword failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, _err error) {
  var _args381 MetaServiceHeartBeatArgs
  _args381.Req = req
  var _result383 MetaServiceHeartBeatResult
  var _meta382 thrift.ResponseMeta
  _meta382, _err = p.Client_().Call(ctx, "heartBeat", &_args381, &_result383)
  p.SetLastResponseMeta_(_meta382)
  if _err != nil {
    return
  }
  if _ret384 := _result383.GetSuccess(); _ret384 != nil {
    return _ret384, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "heartBeat failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AgentHeartbeat(ctx context.Context, req *AgentHBReq) (_r *AgentHBResp, _err error) {
  var _args385 MetaServiceAgentHeartbeatArgs
  _args385.Req = req
  var _result387 MetaServiceAgentHeartbeatResult
  var _meta386 thrift.ResponseMeta
  _meta386, _err = p.Client_().Call(ctx, "agentHeartbeat", &_args385, &_result387)
  p.SetLastResponseMeta_(_meta386)
  if _err != nil {
    return
  }
  if _ret388 := _result387.GetSuccess(); _ret388 != nil {
    return _ret388, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "agentHeartbeat failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, _err error) {
  var _args389 MetaServiceRegConfigArgs
  _args389.Req = req
  var _result391 MetaServiceRegConfigResult
  var _meta390 thrift.ResponseMeta
  _meta390, _err = p.Client_().Call(ctx, "regConfig", &_args389, &_result391)
  p.SetLastResponseMeta_(_meta390)
  if _err != nil {
    return
  }
  if _ret392 := _result391.GetSuccess(); _ret392 != nil {
    return _ret392, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "regConfig failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, _err error) {
  var _args393 MetaServiceGetConfigArgs
  _args393.Req = req
  var _result395 MetaServiceGetConfigResult
  var _meta394 thrift.ResponseMeta
  _meta394, _err = p.Client_().Call(ctx, "getConfig", &_args393, &_result395)
  p.SetLastResponseMeta_(_meta394)
  if _err != nil {
    return
  }
  if _ret396 := _result395.GetSuccess(); _ret396 != nil {
    return _ret396, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getConfig failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, _err error) {
  var _args397 MetaServiceSetConfigArgs
  _args397.Req = req
  var _result399 MetaServiceSetConfigResult
  var _meta398 thrift.ResponseMeta
  _meta398, _err = p.Client_().Call(ctx, "setConfig", &_args397, &_result399)
  p.SetLastResponseMeta_(_meta398)
  if _err != nil {
    return
  }
  if _ret400 := _result399.GetSuccess(); _ret400 != nil {
    return _ret400, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "setConfig failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, _err error) {
  var _args401 MetaServiceListConfigsArgs
  _args401.Req = req
  var _result403 MetaServiceListConfigsResult
  var _meta402 thrift.ResponseMeta
  _meta402, _err = p.Client_().Call(ctx, "listConfigs", &_args401, &_result403)
  p.SetLastResponseMeta_(_meta402)
  if _err != nil {
    return
  }
  if _ret404 := _result403.GetSuccess(); _ret404 != nil {
    return _ret404, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listConfigs failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, _err error) {
  var _args405 MetaServiceCreateSnapshotArgs
  _args405.Req = req
  var _result407 MetaServiceCreateSnapshotResult
  var _meta406 thrift.ResponseMeta
  _meta406, _err = p.Client_().Call(ctx, "createSnapshot", &_args405, &_result407)
  p.SetLastResponseMeta_(_meta406)
  if _err != nil {
    return
  }
  if _ret408 := _result407.GetSuccess(); _ret408 != nil {
    return _ret408, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createSnapshot failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, _err error) {
  var _args409 MetaServiceDropSnapshotArgs
  _args409.Req = req
  var _result411 MetaServiceDropSnapshotResult
  var _meta410 thrift.ResponseMeta
  _meta410, _err = p.Client_().Call(ctx, "dropSnapshot", &_args409, &_result411)
  p.SetLastResponseMeta_(_meta410)
  if _err != nil {
    return
  }
  if _ret412 := _result411.GetSuccess(); _ret412 != nil {
    return _ret412, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropSnapshot failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, _err error) {
  var _args413 MetaServiceListSnapshotsArgs
  _args413.Req = req
  var _result415 MetaServiceListSnapshotsResult
  var _meta414 thrift.ResponseMeta
  _meta414, _err = p.Client_().Call(ctx, "listSnapshots", &_args413, &_result415)
  p.SetLastResponseMeta_(_meta414)
  if _err != nil {
    return
  }
  if _ret416 := _result415.GetSuccess(); _ret416 != nil {
    return _ret416, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listSnapshots failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, _err error) {
  var _args417 MetaServiceRunAdminJobArgs
  _args417.Req = req
  var _result419 MetaServiceRunAdminJobResult
  var _meta418 thrift.ResponseMeta
  _meta418, _err = p.Client_().Call(ctx, "runAdminJob", &_args417, &_result419)
  p.SetLastResponseMeta_(_meta418)
  if _err != nil {
    return
  }
  if _ret420 := _result419.GetSuccess(); _ret420 != nil {
    return _ret420, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "runAdminJob failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MergeZone(ctx context.Context, req *MergeZoneReq) (_r *ExecResp, _err error) {
  var _args421 MetaServiceMergeZoneArgs
  _args421.Req = req
  var _result423 MetaServiceMergeZoneResult
  var _meta422 thrift.ResponseMeta
  _meta422, _err = p.Client_().Call(ctx, "mergeZone", &_args421, &_result423)
  p.SetLastResponseMeta_(_meta422)
  if _err != nil {
    return
  }
  if _ret424 := _result423.GetSuccess(); _ret424 != nil {
    return _ret424, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "mergeZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, _err error) {
  var _args425 MetaServiceDropZoneArgs
  _args425.Req = req
  var _result427 MetaServiceDropZoneResult
  var _meta426 thrift.ResponseMeta
  _meta426, _err = p.Client_().Call(ctx, "dropZone", &_args425, &_result427)
  p.SetLastResponseMeta_(_meta426)
  if _err != nil {
    return
  }
  if _ret428 := _result427.GetSuccess(); _ret428 != nil {
    return _ret428, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DivideZone(ctx context.Context, req *DivideZoneReq) (_r *ExecResp, _err error) {
  var _args429 MetaServiceDivideZoneArgs
  _args429.Req = req
  var _result431 MetaServiceDivideZoneResult
  var _meta430 thrift.ResponseMeta
  _meta430, _err = p.Client_().Call(ctx, "divideZone", &_args429, &_result431)
  p.SetLastResponseMeta_(_meta430)
  if _err != nil {
    return
  }
  if _ret432 := _result431.GetSuccess(); _ret432 != nil {
    return _ret432, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "divideZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RenameZone(ctx context.Context, req *RenameZoneReq) (_r *ExecResp, _err error) {
  var _args433 MetaServiceRenameZoneArgs
  _args433.Req = req
  var _result435 MetaServiceRenameZoneResult
  var _meta434 thrift.ResponseMeta
  _meta434, _err = p.Client_().Call(ctx, "renameZone", &_args433, &_result435)
  p.SetLastResponseMeta_(_meta434)
  if _err != nil {
    return
  }
  if _ret436 := _result435.GetSuccess(); _ret436 != nil {
    return _ret436, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "renameZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, _err error) {
  var _args437 MetaServiceGetZoneArgs
  _args437.Req = req
  var _result439 MetaServiceGetZoneResult
  var _meta438 thrift.ResponseMeta
  _meta438, _err = p.Client_().Call(ctx, "getZone", &_args437, &_result439)
  p.SetLastResponseMeta_(_meta438)
  if _err != nil {
    return
  }
  if _ret440 := _result439.GetSuccess(); _ret440 != nil {
    return _ret440, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getZone failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, _err error) {
  var _args441 MetaServiceListZonesArgs
  _args441.Req = req
  var _result443 MetaServiceListZonesResult
  var _meta442 thrift.ResponseMeta
  _meta442, _err = p.Client_().Call(ctx, "listZones", &_args441, &_result443)
  p.SetLastResponseMeta_(_meta442)
  if _err != nil {
    return
  }
  if _ret444 := _result443.GetSuccess(); _ret444 != nil {
    return _ret444, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listZones failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, _err error) {
  var _args445 MetaServiceAddListenerArgs
  _args445.Req = req
  var _result447 MetaServiceAddListenerResult
  var _meta446 thrift.ResponseMeta
  _meta446, _err = p.Client_().Call(ctx, "addListener", &_args445, &_result447)
  p.SetLastResponseMeta_(_meta446)
  if _err != nil {
    return
  }
  if _ret448 := _result447.GetSuccess(); _ret448 != nil {
    return _ret448, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addListener failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, _err error) {
  var _args449 MetaServiceRemoveListenerArgs
  _args449.Req = req
  var _result451 MetaServiceRemoveListenerResult
  var _meta450 thrift.ResponseMeta
  _meta450, _err = p.Client_().Call(ctx, "removeListener", &_args449, &_result451)
  p.SetLastResponseMeta_(_meta450)
  if _err != nil {
    return
  }
  if _ret452 := _result451.GetSuccess(); _ret452 != nil {
    return _ret452, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeListener failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, _err error) {
  var _args453 MetaServiceListListenerArgs
  _args453.Req = req
  var _result455 MetaServiceListListenerResult
  var _meta454 thrift.ResponseMeta
  _meta454, _err = p.Client_().Call(ctx, "listListener", &_args453, &_result455)
  p.SetLastResponseMeta_(_meta454)
  if _err != nil {
    return
  }
  if _ret456 := _result455.GetSuccess(); _ret456 != nil {
    return _ret456, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listListener failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetStats(ctx context.Context, req *GetStatsReq) (_r *GetStatsResp, _err error) {
  var _args457 MetaServiceGetStatsArgs
  _args457.Req = req
  var _result459 MetaServiceGetStatsResult
  var _meta458 thrift.ResponseMeta
  _meta458, _err = p.Client_().Call(ctx, "getStats", &_args457, &_result459)
  p.SetLastResponseMeta_(_meta458)
  if _err != nil {
    return
  }
  if _ret460 := _result459.GetSuccess(); _ret460 != nil {
    return _ret460, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getStats failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignInService(ctx context.Context, req *SignInServiceReq) (_r *ExecResp, _err error) {
  var _args461 MetaServiceSignInServiceArgs
  _args461.Req = req
  var _result463 MetaServiceSignInServiceResult
  var _meta462 thrift.ResponseMeta
  _meta462, _err = p.Client_().Call(ctx, "signInService", &_args461, &_result463)
  p.SetLastResponseMeta_(_meta462)
  if _err != nil {
    return
  }
  if _ret464 := _result463.GetSuccess(); _ret464 != nil {
    return _ret464, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "signInService failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignOutService(ctx context.Context, req *SignOutServiceReq) (_r *ExecResp, _err error) {
  var _args465 MetaServiceSignOutServiceArgs
  _args465.Req = req
  var _result467 MetaServiceSignOutServiceResult
  var _meta466 thrift.ResponseMeta
  _meta466, _err = p.Client_().Call(ctx, "signOutService", &_args465, &_result467)
  p.SetLastResponseMeta_(_meta466)
  if _err != nil {
    return
  }
  if _ret468 := _result467.GetSuccess(); _ret468 != nil {
    return _ret468, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "signOutService failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListServiceClients(ctx context.Context, req *ListServiceClientsReq) (_r *ListServiceClientsResp, _err error) {
  var _args469 MetaServiceListServiceClientsArgs
  _args469.Req = req
  var _result471 MetaServiceListServiceClientsResult
  var _meta470 thrift.ResponseMeta
  _meta470, _err = p.Client_().Call(ctx, "listServiceClients", &_args469, &_result471)
  p.SetLastResponseMeta_(_meta470)
  if _err != nil {
    return
  }
  if _ret472 := _result471.GetSuccess(); _ret472 != nil {
    return _ret472, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listServiceClients failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateFTIndex(ctx context.Context, req *CreateFTIndexReq) (_r *ExecResp, _err error) {
  var _args473 MetaServiceCreateFTIndexArgs
  _args473.Req = req
  var _result475 MetaServiceCreateFTIndexResult
  var _meta474 thrift.ResponseMeta
  _meta474, _err = p.Client_().Call(ctx, "createFTIndex", &_args473, &_result475)
  p.SetLastResponseMeta_(_meta474)
  if _err != nil {
    return
  }
  if _ret476 := _result475.GetSuccess(); _ret476 != nil {
    return _ret476, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createFTIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropFTIndex(ctx context.Context, req *DropFTIndexReq) (_r *ExecResp, _err error) {
  var _args477 MetaServiceDropFTIndexArgs
  _args477.Req = req
  var _result479 MetaServiceDropFTIndexResult
  var _meta478 thrift.ResponseMeta
  _meta478, _err = p.Client_().Call(ctx, "dropFTIndex", &_args477, &_result479)
  p.SetLastResponseMeta_(_meta478)
  if _err != nil {
    return
  }
  if _ret480 := _result479.GetSuccess(); _ret480 != nil {
    return _ret480, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropFTIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListFTIndexes(ctx context.Context, req *ListFTIndexesReq) (_r *ListFTIndexesResp, _err error) {
  var _args481 MetaServiceListFTIndexesArgs
  _args481.Req = req
  var _result483 MetaServiceListFTIndexesResult
  var _meta482 thrift.ResponseMeta
  _meta482, _err = p.Client_().Call(ctx, "listFTIndexes", &_args481, &_result483)
  p.SetLastResponseMeta_(_meta482)
  if _err != nil {
    return
  }
  if _ret484 := _result483.GetSuccess(); _ret484 != nil {
    return _ret484, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listFTIndexes failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, _err error) {
  var _args485 MetaServiceCreateSessionArgs
  _args485.Req = req
  var _result487 MetaServiceCreateSessionResult
  var _meta486 thrift.ResponseMeta
  _meta486, _err = p.Client_().Call(ctx, "createSession", &_args485, &_result487)
  p.SetLastResponseMeta_(_meta486)
  if _err != nil {
    return
  }
  if _ret488 := _result487.GetSuccess(); _ret488 != nil {
    return _ret488, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createSession failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *UpdateSessionsResp, _err error) {
  var _args489 MetaServiceUpdateSessionsArgs
  _args489.Req = req
  var _result491 MetaServiceUpdateSessionsResult
  var _meta490 thrift.ResponseMeta
  _meta490, _err = p.Client_().Call(ctx, "updateSessions", &_args489, &_result491)
  p.SetLastResponseMeta_(_meta490)
  if _err != nil {
    return
  }
  if _ret492 := _result491.GetSuccess(); _ret492 != nil {
    return _ret492, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateSessions failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, _err error) {
  var _args493 MetaServiceListSessionsArgs
  _args493.Req = req
  var _result495 MetaServiceListSessionsResult
  var _meta494 thrift.ResponseMeta
  _meta494, _err = p.Client_().Call(ctx, "listSessions", &_args493, &_result495)
  p.SetLastResponseMeta_(_meta494)
  if _err != nil {
    return
  }
  if _ret496 := _result495.GetSuccess(); _ret496 != nil {
    return _ret496, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listSessions failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, _err error) {
  var _args497 MetaServiceGetSessionArgs
  _args497.Req = req
  var _result499 MetaServiceGetSessionResult
  var _meta498 thrift.ResponseMeta
  _meta498, _err = p.Client_().Call(ctx, "getSession", &_args497, &_result499)
  p.SetLastResponseMeta_(_meta498)
  if _err != nil {
    return
  }
  if _ret500 := _result499.GetSuccess(); _ret500 != nil {
    return _ret500, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSession failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *RemoveSessionResp, _err error) {
  var _args501 MetaServiceRemoveSessionArgs
  _args501.Req = req
  var _result503 MetaServiceRemoveSessionResult
  var _meta502 thrift.ResponseMeta
  _meta502, _err = p.Client_().Call(ctx, "removeSession", &_args501, &_result503)
  p.SetLastResponseMeta_(_meta502)
  if _err != nil {
    return
  }
  if _ret504 := _result503.GetSuccess(); _ret504 != nil {
    return _ret504, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeSession failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) KillQuery(ctx context.Context, req *KillQueryReq) (_r *ExecResp, _err error) {
  var _args505 MetaServiceKillQueryArgs
  _args505.Req = req
  var _result507 MetaServiceKillQueryResult
  var _meta506 thrift.ResponseMeta
  _meta506, _err = p.Client_().Call(ctx, "killQuery", &_args505, &_result507)
  p.SetLastResponseMeta_(_meta506)
  if _err != nil {
    return
  }
  if _ret508 := _result507.GetSuccess(); _ret508 != nil {
    return _ret508, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "killQuery failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, _err error) {
  var _args509 MetaServiceReportTaskFinishArgs
  _args509.Req = req
  var _result511 MetaServiceReportTaskFinishResult
  var _meta510 thrift.ResponseMeta
  _meta510, _err = p.Client_().Call(ctx, "reportTaskFinish", &_args509, &_result511)
  p.SetLastResponseMeta_(_meta510)
  if _err != nil {
    return
  }
  if _ret512 := _result511.GetSuccess(); _ret512 != nil {
    return _ret512, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "reportTaskFinish failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, _err error) {
  var _args513 MetaServiceCreateBackupArgs
  _args513.Req = req
  var _result515 MetaServiceCreateBackupResult
  var _meta514 thrift.ResponseMeta
  _meta514, _err = p.Client_().Call(ctx, "createBackup", &_args513, &_result515)
  p.SetLastResponseMeta_(_meta514)
  if _err != nil {
    return
  }
  if _ret516 := _result515.GetSuccess(); _ret516 != nil {
    return _ret516, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createBackup failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *RestoreMetaResp, _err error) {
  var _args517 MetaServiceRestoreMetaArgs
  _args517.Req = req
  var _result519 MetaServiceRestoreMetaResult
  var _meta518 thrift.ResponseMeta
  _meta518, _err = p.Client_().Call(ctx, "restoreMeta", &_args517, &_result519)
  p.SetLastResponseMeta_(_meta518)
  if _err != nil {
    return
  }
  if _ret520 := _result519.GetSuccess(); _ret520 != nil {
    return _ret520, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "restoreMeta failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListCluster(ctx context.Context, req *ListClusterInfoReq) (_r *ListClusterInfoResp, _err error) {
  var _args521 MetaServiceListClusterArgs
  _args521.Req = req
  var _result523 MetaServiceListClusterResult
  var _meta522 thrift.ResponseMeta
  _meta522, _err = p.Client_().Call(ctx, "listCluster", &_args521, &_result523)
  p.SetLastResponseMeta_(_meta522)
  if _err != nil {
    return
  }
  if _ret524 := _result523.GetSuccess(); _ret524 != nil {
    return _ret524, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "listCluster failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetMetaDirInfo(ctx context.Context, req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, _err error) {
  var _args525 MetaServiceGetMetaDirInfoArgs
  _args525.Req = req
  var _result527 MetaServiceGetMetaDirInfoResult
  var _meta526 thrift.ResponseMeta
  _meta526, _err = p.Client_().Call(ctx, "getMetaDirInfo", &_args525, &_result527)
  p.SetLastResponseMeta_(_meta526)
  if _err != nil {
    return
  }
  if _ret528 := _result527.GetSuccess(); _ret528 != nil {
    return _ret528, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getMetaDirInfo failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, _err error) {
  var _args529 MetaServiceVerifyClientVersionArgs
  _args529.Req = req
  var _result531 MetaServiceVerifyClientVersionResult
  var _meta530 thrift.ResponseMeta
  _meta530, _err = p.Client_().Call(ctx, "verifyClientVersion", &_args529, &_result531)
  p.SetLastResponseMeta_(_meta530)
  if _err != nil {
    return
  }
  if _ret532 := _result531.GetSuccess(); _ret532 != nil {
    return _ret532, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "verifyClientVersion failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SaveGraphVersion(ctx context.Context, req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, _err error) {
  var _args533 MetaServiceSaveGraphVersionArgs
  _args533.Req = req
  var _result535 MetaServiceSaveGraphVersionResult
  var _meta534 thrift.ResponseMeta
  _meta534, _err = p.Client_().Call(ctx, "saveGraphVersion", &_args533, &_result535)
  p.SetLastResponseMeta_(_meta534)
  if _err != nil {
    return
  }
  if _ret536 := _result535.GetSuccess(); _ret536 != nil {
    return _ret536, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "saveGraphVersion failed: unknown result")
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSegmentId(ctx context.Context, req *GetSegmentIdReq) (_r *GetSegmentIdResp, _err error) {
  var _args537 MetaServiceGetSegmentIdArgs
  _args537.Req = req
  var _result539 MetaServiceGetSegmentIdResult
  var _meta538 thrift.ResponseMeta
  _meta538, _err = p.Client_().Call(ctx, "getSegmentId", &_args537, &_result539)
  p.SetLastResponseMeta_(_meta538)
  if _err != nil {
    return
  }
  if _ret540 := _result539.GetSuccess(); _ret540 != nil {
    return _ret540, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSegmentId failed: unknown result")
}

type MetaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MetaService
}

func (p *MetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMetaServiceProcessor(handler MetaService) *MetaServiceProcessor {

  self541 := &MetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self541.processorMap["createSpace"] = &metaServiceProcessorCreateSpace{handler:handler}
  self541.processorMap["dropSpace"] = &metaServiceProcessorDropSpace{handler:handler}
  self541.processorMap["clearSpace"] = &metaServiceProcessorClearSpace{handler:handler}
  self541.processorMap["getSpace"] = &metaServiceProcessorGetSpace{handler:handler}
  self541.processorMap["listSpaces"] = &metaServiceProcessorListSpaces{handler:handler}
  self541.processorMap["alterSpace"] = &metaServiceProcessorAlterSpace{handler:handler}
  self541.processorMap["createSpaceAs"] = &metaServiceProcessorCreateSpaceAs{handler:handler}
  self541.processorMap["createTag"] = &metaServiceProcessorCreateTag{handler:handler}
  self541.processorMap["alterTag"] = &metaServiceProcessorAlterTag{handler:handler}
  self541.processorMap["dropTag"] = &metaServiceProcessorDropTag{handler:handler}
  self541.processorMap["getTag"] = &metaServiceProcessorGetTag{handler:handler}
  self541.processorMap["listTags"] = &metaServiceProcessorListTags{handler:handler}
  self541.processorMap["createEdge"] = &metaServiceProcessorCreateEdge{handler:handler}
  self541.processorMap["alterEdge"] = &metaServiceProcessorAlterEdge{handler:handler}
  self541.processorMap["dropEdge"] = &metaServiceProcessorDropEdge{handler:handler}
  self541.processorMap["getEdge"] = &metaServiceProcessorGetEdge{handler:handler}
  self541.processorMap["listEdges"] = &metaServiceProcessorListEdges{handler:handler}
  self541.processorMap["addHosts"] = &metaServiceProcessorAddHosts{handler:handler}
  self541.processorMap["addHostsIntoZone"] = &metaServiceProcessorAddHostsIntoZone{handler:handler}
  self541.processorMap["dropHosts"] = &metaServiceProcessorDropHosts{handler:handler}
  self541.processorMap["listHosts"] = &metaServiceProcessorListHosts{handler:handler}
  self541.processorMap["getPartsAlloc"] = &metaServiceProcessorGetPartsAlloc{handler:handler}
  self541.processorMap["listParts"] = &metaServiceProcessorListParts{handler:handler}
  self541.processorMap["getWorkerId"] = &metaServiceProcessorGetWorkerId{handler:handler}
  self541.processorMap["createTagIndex"] = &metaServiceProcessorCreateTagIndex{handler:handler}
  self541.processorMap["dropTagIndex"] = &metaServiceProcessorDropTagIndex{handler:handler}
  self541.processorMap["getTagIndex"] = &metaServiceProcessorGetTagIndex{handler:handler}
  self541.processorMap["listTagIndexes"] = &metaServiceProcessorListTagIndexes{handler:handler}
  self541.processorMap["rebuildTagIndex"] = &metaServiceProcessorRebuildTagIndex{handler:handler}
  self541.processorMap["listTagIndexStatus"] = &metaServiceProcessorListTagIndexStatus{handler:handler}
  self541.processorMap["createEdgeIndex"] = &metaServiceProcessorCreateEdgeIndex{handler:handler}
  self541.processorMap["dropEdgeIndex"] = &metaServiceProcessorDropEdgeIndex{handler:handler}
  self541.processorMap["getEdgeIndex"] = &metaServiceProcessorGetEdgeIndex{handler:handler}
  self541.processorMap["listEdgeIndexes"] = &metaServiceProcessorListEdgeIndexes{handler:handler}
  self541.processorMap["rebuildEdgeIndex"] = &metaServiceProcessorRebuildEdgeIndex{handler:handler}
  self541.processorMap["listEdgeIndexStatus"] = &metaServiceProcessorListEdgeIndexStatus{handler:handler}
  self541.processorMap["createUser"] = &metaServiceProcessorCreateUser{handler:handler}
  self541.processorMap["dropUser"] = &metaServiceProcessorDropUser{handler:handler}
  self541.processorMap["alterUser"] = &metaServiceProcessorAlterUser{handler:handler}
  self541.processorMap["grantRole"] = &metaServiceProcessorGrantRole{handler:handler}
  self541.processorMap["revokeRole"] = &metaServiceProcessorRevokeRole{handler:handler}
  self541.processorMap["listUsers"] = &metaServiceProcessorListUsers{handler:handler}
  self541.processorMap["listRoles"] = &metaServiceProcessorListRoles{handler:handler}
  self541.processorMap["getUserRoles"] = &metaServiceProcessorGetUserRoles{handler:handler}
  self541.processorMap["changePassword"] = &metaServiceProcessorChangePassword{handler:handler}
  self541.processorMap["heartBeat"] = &metaServiceProcessorHeartBeat{handler:handler}
  self541.processorMap["agentHeartbeat"] = &metaServiceProcessorAgentHeartbeat{handler:handler}
  self541.processorMap["regConfig"] = &metaServiceProcessorRegConfig{handler:handler}
  self541.processorMap["getConfig"] = &metaServiceProcessorGetConfig{handler:handler}
  self541.processorMap["setConfig"] = &metaServiceProcessorSetConfig{handler:handler}
  self541.processorMap["listConfigs"] = &metaServiceProcessorListConfigs{handler:handler}
  self541.processorMap["createSnapshot"] = &metaServiceProcessorCreateSnapshot{handler:handler}
  self541.processorMap["dropSnapshot"] = &metaServiceProcessorDropSnapshot{handler:handler}
  self541.processorMap["listSnapshots"] = &metaServiceProcessorListSnapshots{handler:handler}
  self541.processorMap["runAdminJob"] = &metaServiceProcessorRunAdminJob{handler:handler}
  self541.processorMap["mergeZone"] = &metaServiceProcessorMergeZone{handler:handler}
  self541.processorMap["dropZone"] = &metaServiceProcessorDropZone{handler:handler}
  self541.processorMap["divideZone"] = &metaServiceProcessorDivideZone{handler:handler}
  self541.processorMap["renameZone"] = &metaServiceProcessorRenameZone{handler:handler}
  self541.processorMap["getZone"] = &metaServiceProcessorGetZone{handler:handler}
  self541.processorMap["listZones"] = &metaServiceProcessorListZones{handler:handler}
  self541.processorMap["addListener"] = &metaServiceProcessorAddListener{handler:handler}
  self541.processorMap["removeListener"] = &metaServiceProcessorRemoveListener{handler:handler}
  self541.processorMap["listListener"] = &metaServiceProcessorListListener{handler:handler}
  self541.processorMap["getStats"] = &metaServiceProcessorGetStats{handler:handler}
  self541.processorMap["signInService"] = &metaServiceProcessorSignInService{handler:handler}
  self541.processorMap["signOutService"] = &metaServiceProcessorSignOutService{handler:handler}
  self541.processorMap["listServiceClients"] = &metaServiceProcessorListServiceClients{handler:handler}
  self541.processorMap["createFTIndex"] = &metaServiceProcessorCreateFTIndex{handler:handler}
  self541.processorMap["dropFTIndex"] = &metaServiceProcessorDropFTIndex{handler:handler}
  self541.processorMap["listFTIndexes"] = &metaServiceProcessorListFTIndexes{handler:handler}
  self541.processorMap["createSession"] = &metaServiceProcessorCreateSession{handler:handler}
  self541.processorMap["updateSessions"] = &metaServiceProcessorUpdateSessions{handler:handler}
  self541.processorMap["listSessions"] = &metaServiceProcessorListSessions{handler:handler}
  self541.processorMap["getSession"] = &metaServiceProcessorGetSession{handler:handler}
  self541.processorMap["removeSession"] = &metaServiceProcessorRemoveSession{handler:handler}
  self541.processorMap["killQuery"] = &metaServiceProcessorKillQuery{handler:handler}
  self541.processorMap["reportTaskFinish"] = &metaServiceProcessorReportTaskFinish{handler:handler}
  self541.processorMap["createBackup"] = &metaServiceProcessorCreateBackup{handler:handler}
  self541.processorMap["restoreMeta"] = &metaServiceProcessorRestoreMeta{handler:handler}
  self541.processorMap["listCluster"] = &metaServiceProcessorListCluster{handler:handler}
  self541.processorMap["getMetaDirInfo"] = &metaServiceProcessorGetMetaDirInfo{handler:handler}
  self541.processorMap["verifyClientVersion"] = &metaServiceProcessorVerifyClientVersion{handler:handler}
  self541.processorMap["saveGraphVersion"] = &metaServiceProcessorSaveGraphVersion{handler:handler}
  self541.processorMap["getSegmentId"] = &metaServiceProcessorGetSegmentId{handler:handler}
return self541
}

func (p *MetaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x542 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x542.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x542

}

type metaServiceProcessorCreateSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err543 error
  args := MetaServiceCreateSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateSpaceResult{}
  if retval, err2 := p.handler.CreateSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc544 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err543 = thrift.WrapTException(err2)
    }
    if err2 := _exc544.Write(ctx, oprot); _write_err543 == nil && err2 != nil {
      _write_err543 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err543 == nil && err2 != nil {
      _write_err543 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err543 == nil && err2 != nil {
      _write_err543 = thrift.WrapTException(err2)
    }
    if _write_err543 != nil {
      return false, thrift.WrapTException(_write_err543)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err543 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err543 == nil && err2 != nil {
    _write_err543 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err543 == nil && err2 != nil {
    _write_err543 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err543 == nil && err2 != nil {
    _write_err543 = thrift.WrapTException(err2)
  }
  if _write_err543 != nil {
    return false, thrift.WrapTException(_write_err543)
  }
  return true, err
}

type metaServiceProcessorDropSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err545 error
  args := MetaServiceDropSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropSpaceResult{}
  if retval, err2 := p.handler.DropSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc546 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err545 = thrift.WrapTException(err2)
    }
    if err2 := _exc546.Write(ctx, oprot); _write_err545 == nil && err2 != nil {
      _write_err545 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err545 == nil && err2 != nil {
      _write_err545 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err545 == nil && err2 != nil {
      _write_err545 = thrift.WrapTException(err2)
    }
    if _write_err545 != nil {
      return false, thrift.WrapTException(_write_err545)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err545 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err545 == nil && err2 != nil {
    _write_err545 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err545 == nil && err2 != nil {
    _write_err545 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err545 == nil && err2 != nil {
    _write_err545 = thrift.WrapTException(err2)
  }
  if _write_err545 != nil {
    return false, thrift.WrapTException(_write_err545)
  }
  return true, err
}

type metaServiceProcessorClearSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorClearSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err547 error
  args := MetaServiceClearSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clearSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceClearSpaceResult{}
  if retval, err2 := p.handler.ClearSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc548 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "clearSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err547 = thrift.WrapTException(err2)
    }
    if err2 := _exc548.Write(ctx, oprot); _write_err547 == nil && err2 != nil {
      _write_err547 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err547 == nil && err2 != nil {
      _write_err547 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err547 == nil && err2 != nil {
      _write_err547 = thrift.WrapTException(err2)
    }
    if _write_err547 != nil {
      return false, thrift.WrapTException(_write_err547)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "clearSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err547 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err547 == nil && err2 != nil {
    _write_err547 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err547 == nil && err2 != nil {
    _write_err547 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err547 == nil && err2 != nil {
    _write_err547 = thrift.WrapTException(err2)
  }
  if _write_err547 != nil {
    return false, thrift.WrapTException(_write_err547)
  }
  return true, err
}

type metaServiceProcessorGetSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err549 error
  args := MetaServiceGetSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetSpaceResult{}
  if retval, err2 := p.handler.GetSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc550 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err549 = thrift.WrapTException(err2)
    }
    if err2 := _exc550.Write(ctx, oprot); _write_err549 == nil && err2 != nil {
      _write_err549 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err549 == nil && err2 != nil {
      _write_err549 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err549 == nil && err2 != nil {
      _write_err549 = thrift.WrapTException(err2)
    }
    if _write_err549 != nil {
      return false, thrift.WrapTException(_write_err549)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err549 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err549 == nil && err2 != nil {
    _write_err549 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err549 == nil && err2 != nil {
    _write_err549 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err549 == nil && err2 != nil {
    _write_err549 = thrift.WrapTException(err2)
  }
  if _write_err549 != nil {
    return false, thrift.WrapTException(_write_err549)
  }
  return true, err
}

type metaServiceProcessorListSpaces struct {
  handler MetaService
}

func (p *metaServiceProcessorListSpaces) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err551 error
  args := MetaServiceListSpacesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listSpaces", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListSpacesResult{}
  if retval, err2 := p.handler.ListSpaces(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc552 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSpaces: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listSpaces", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err551 = thrift.WrapTException(err2)
    }
    if err2 := _exc552.Write(ctx, oprot); _write_err551 == nil && err2 != nil {
      _write_err551 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err551 == nil && err2 != nil {
      _write_err551 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err551 == nil && err2 != nil {
      _write_err551 = thrift.WrapTException(err2)
    }
    if _write_err551 != nil {
      return false, thrift.WrapTException(_write_err551)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listSpaces", thrift.REPLY, seqId); err2 != nil {
    _write_err551 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err551 == nil && err2 != nil {
    _write_err551 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err551 == nil && err2 != nil {
    _write_err551 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err551 == nil && err2 != nil {
    _write_err551 = thrift.WrapTException(err2)
  }
  if _write_err551 != nil {
    return false, thrift.WrapTException(_write_err551)
  }
  return true, err
}

type metaServiceProcessorAlterSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err553 error
  args := MetaServiceAlterSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alterSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAlterSpaceResult{}
  if retval, err2 := p.handler.AlterSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc554 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "alterSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err553 = thrift.WrapTException(err2)
    }
    if err2 := _exc554.Write(ctx, oprot); _write_err553 == nil && err2 != nil {
      _write_err553 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err553 == nil && err2 != nil {
      _write_err553 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err553 == nil && err2 != nil {
      _write_err553 = thrift.WrapTException(err2)
    }
    if _write_err553 != nil {
      return false, thrift.WrapTException(_write_err553)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "alterSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err553 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err553 == nil && err2 != nil {
    _write_err553 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err553 == nil && err2 != nil {
    _write_err553 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err553 == nil && err2 != nil {
    _write_err553 = thrift.WrapTException(err2)
  }
  if _write_err553 != nil {
    return false, thrift.WrapTException(_write_err553)
  }
  return true, err
}

type metaServiceProcessorCreateSpaceAs struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSpaceAs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err555 error
  args := MetaServiceCreateSpaceAsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createSpaceAs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateSpaceAsResult{}
  if retval, err2 := p.handler.CreateSpaceAs(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc556 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpaceAs: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createSpaceAs", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err555 = thrift.WrapTException(err2)
    }
    if err2 := _exc556.Write(ctx, oprot); _write_err555 == nil && err2 != nil {
      _write_err555 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err555 == nil && err2 != nil {
      _write_err555 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err555 == nil && err2 != nil {
      _write_err555 = thrift.WrapTException(err2)
    }
    if _write_err555 != nil {
      return false, thrift.WrapTException(_write_err555)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createSpaceAs", thrift.REPLY, seqId); err2 != nil {
    _write_err555 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err555 == nil && err2 != nil {
    _write_err555 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err555 == nil && err2 != nil {
    _write_err555 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err555 == nil && err2 != nil {
    _write_err555 = thrift.WrapTException(err2)
  }
  if _write_err555 != nil {
    return false, thrift.WrapTException(_write_err555)
  }
  return true, err
}

type metaServiceProcessorCreateTag struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err557 error
  args := MetaServiceCreateTagArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateTagResult{}
  if retval, err2 := p.handler.CreateTag(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc558 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createTag", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err557 = thrift.WrapTException(err2)
    }
    if err2 := _exc558.Write(ctx, oprot); _write_err557 == nil && err2 != nil {
      _write_err557 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err557 == nil && err2 != nil {
      _write_err557 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err557 == nil && err2 != nil {
      _write_err557 = thrift.WrapTException(err2)
    }
    if _write_err557 != nil {
      return false, thrift.WrapTException(_write_err557)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createTag", thrift.REPLY, seqId); err2 != nil {
    _write_err557 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err557 == nil && err2 != nil {
    _write_err557 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err557 == nil && err2 != nil {
    _write_err557 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err557 == nil && err2 != nil {
    _write_err557 = thrift.WrapTException(err2)
  }
  if _write_err557 != nil {
    return false, thrift.WrapTException(_write_err557)
  }
  return true, err
}

type metaServiceProcessorAlterTag struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err559 error
  args := MetaServiceAlterTagArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alterTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAlterTagResult{}
  if retval, err2 := p.handler.AlterTag(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc560 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTag: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "alterTag", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err559 = thrift.WrapTException(err2)
    }
    if err2 := _exc560.Write(ctx, oprot); _write_err559 == nil && err2 != nil {
      _write_err559 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err559 == nil && err2 != nil {
      _write_err559 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err559 == nil && err2 != nil {
      _write_err559 = thrift.WrapTException(err2)
    }
    if _write_err559 != nil {
      return false, thrift.WrapTException(_write_err559)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "alterTag", thrift.REPLY, seqId); err2 != nil {
    _write_err559 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err559 == nil && err2 != nil {
    _write_err559 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err559 == nil && err2 != nil {
    _write_err559 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err559 == nil && err2 != nil {
    _write_err559 = thrift.WrapTException(err2)
  }
  if _write_err559 != nil {
    return false, thrift.WrapTException(_write_err559)
  }
  return true, err
}

type metaServiceProcessorDropTag struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err561 error
  args := MetaServiceDropTagArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropTagResult{}
  if retval, err2 := p.handler.DropTag(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc562 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTag: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropTag", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err561 = thrift.WrapTException(err2)
    }
    if err2 := _exc562.Write(ctx, oprot); _write_err561 == nil && err2 != nil {
      _write_err561 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err561 == nil && err2 != nil {
      _write_err561 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err561 == nil && err2 != nil {
      _write_err561 = thrift.WrapTException(err2)
    }
    if _write_err561 != nil {
      return false, thrift.WrapTException(_write_err561)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropTag", thrift.REPLY, seqId); err2 != nil {
    _write_err561 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err561 == nil && err2 != nil {
    _write_err561 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err561 == nil && err2 != nil {
    _write_err561 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err561 == nil && err2 != nil {
    _write_err561 = thrift.WrapTException(err2)
  }
  if _write_err561 != nil {
    return false, thrift.WrapTException(_write_err561)
  }
  return true, err
}

type metaServiceProcessorGetTag struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err563 error
  args := MetaServiceGetTagArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTag", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetTagResult{}
  if retval, err2 := p.handler.GetTag(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc564 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getTag", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err563 = thrift.WrapTException(err2)
    }
    if err2 := _exc564.Write(ctx, oprot); _write_err563 == nil && err2 != nil {
      _write_err563 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err563 == nil && err2 != nil {
      _write_err563 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err563 == nil && err2 != nil {
      _write_err563 = thrift.WrapTException(err2)
    }
    if _write_err563 != nil {
      return false, thrift.WrapTException(_write_err563)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getTag", thrift.REPLY, seqId); err2 != nil {
    _write_err563 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err563 == nil && err2 != nil {
    _write_err563 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err563 == nil && err2 != nil {
    _write_err563 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err563 == nil && err2 != nil {
    _write_err563 = thrift.WrapTException(err2)
  }
  if _write_err563 != nil {
    return false, thrift.WrapTException(_write_err563)
  }
  return true, err
}

type metaServiceProcessorListTags struct {
  handler MetaService
}

func (p *metaServiceProcessorListTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err565 error
  args := MetaServiceListTagsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listTags", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListTagsResult{}
  if retval, err2 := p.handler.ListTags(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc566 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listTags", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err565 = thrift.WrapTException(err2)
    }
    if err2 := _exc566.Write(ctx, oprot); _write_err565 == nil && err2 != nil {
      _write_err565 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err565 == nil && err2 != nil {
      _write_err565 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err565 == nil && err2 != nil {
      _write_err565 = thrift.WrapTException(err2)
    }
    if _write_err565 != nil {
      return false, thrift.WrapTException(_write_err565)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listTags", thrift.REPLY, seqId); err2 != nil {
    _write_err565 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err565 == nil && err2 != nil {
    _write_err565 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err565 == nil && err2 != nil {
    _write_err565 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err565 == nil && err2 != nil {
    _write_err565 = thrift.WrapTException(err2)
  }
  if _write_err565 != nil {
    return false, thrift.WrapTException(_write_err565)
  }
  return true, err
}

type metaServiceProcessorCreateEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err567 error
  args := MetaServiceCreateEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateEdgeResult{}
  if retval, err2 := p.handler.CreateEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc568 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err567 = thrift.WrapTException(err2)
    }
    if err2 := _exc568.Write(ctx, oprot); _write_err567 == nil && err2 != nil {
      _write_err567 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err567 == nil && err2 != nil {
      _write_err567 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err567 == nil && err2 != nil {
      _write_err567 = thrift.WrapTException(err2)
    }
    if _write_err567 != nil {
      return false, thrift.WrapTException(_write_err567)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err567 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err567 == nil && err2 != nil {
    _write_err567 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err567 == nil && err2 != nil {
    _write_err567 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err567 == nil && err2 != nil {
    _write_err567 = thrift.WrapTException(err2)
  }
  if _write_err567 != nil {
    return false, thrift.WrapTException(_write_err567)
  }
  return true, err
}

type metaServiceProcessorAlterEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err569 error
  args := MetaServiceAlterEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alterEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAlterEdgeResult{}
  if retval, err2 := p.handler.AlterEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc570 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "alterEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err569 = thrift.WrapTException(err2)
    }
    if err2 := _exc570.Write(ctx, oprot); _write_err569 == nil && err2 != nil {
      _write_err569 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err569 == nil && err2 != nil {
      _write_err569 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err569 == nil && err2 != nil {
      _write_err569 = thrift.WrapTException(err2)
    }
    if _write_err569 != nil {
      return false, thrift.WrapTException(_write_err569)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "alterEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err569 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err569 == nil && err2 != nil {
    _write_err569 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err569 == nil && err2 != nil {
    _write_err569 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err569 == nil && err2 != nil {
    _write_err569 = thrift.WrapTException(err2)
  }
  if _write_err569 != nil {
    return false, thrift.WrapTException(_write_err569)
  }
  return true, err
}

type metaServiceProcessorDropEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err571 error
  args := MetaServiceDropEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropEdgeResult{}
  if retval, err2 := p.handler.DropEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc572 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err571 = thrift.WrapTException(err2)
    }
    if err2 := _exc572.Write(ctx, oprot); _write_err571 == nil && err2 != nil {
      _write_err571 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err571 == nil && err2 != nil {
      _write_err571 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err571 == nil && err2 != nil {
      _write_err571 = thrift.WrapTException(err2)
    }
    if _write_err571 != nil {
      return false, thrift.WrapTException(_write_err571)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err571 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err571 == nil && err2 != nil {
    _write_err571 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err571 == nil && err2 != nil {
    _write_err571 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err571 == nil && err2 != nil {
    _write_err571 = thrift.WrapTException(err2)
  }
  if _write_err571 != nil {
    return false, thrift.WrapTException(_write_err571)
  }
  return true, err
}

type metaServiceProcessorGetEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err573 error
  args := MetaServiceGetEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetEdgeResult{}
  if retval, err2 := p.handler.GetEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc574 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err573 = thrift.WrapTException(err2)
    }
    if err2 := _exc574.Write(ctx, oprot); _write_err573 == nil && err2 != nil {
      _write_err573 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err573 == nil && err2 != nil {
      _write_err573 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err573 == nil && err2 != nil {
      _write_err573 = thrift.WrapTException(err2)
    }
    if _write_err573 != nil {
      return false, thrift.WrapTException(_write_err573)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err573 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err573 == nil && err2 != nil {
    _write_err573 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err573 == nil && err2 != nil {
    _write_err573 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err573 == nil && err2 != nil {
    _write_err573 = thrift.WrapTException(err2)
  }
  if _write_err573 != nil {
    return false, thrift.WrapTException(_write_err573)
  }
  return true, err
}

type metaServiceProcessorListEdges struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err575 error
  args := MetaServiceListEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListEdgesResult{}
  if retval, err2 := p.handler.ListEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc576 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err575 = thrift.WrapTException(err2)
    }
    if err2 := _exc576.Write(ctx, oprot); _write_err575 == nil && err2 != nil {
      _write_err575 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err575 == nil && err2 != nil {
      _write_err575 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err575 == nil && err2 != nil {
      _write_err575 = thrift.WrapTException(err2)
    }
    if _write_err575 != nil {
      return false, thrift.WrapTException(_write_err575)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err575 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err575 == nil && err2 != nil {
    _write_err575 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err575 == nil && err2 != nil {
    _write_err575 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err575 == nil && err2 != nil {
    _write_err575 = thrift.WrapTException(err2)
  }
  if _write_err575 != nil {
    return false, thrift.WrapTException(_write_err575)
  }
  return true, err
}

type metaServiceProcessorAddHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorAddHosts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err577 error
  args := MetaServiceAddHostsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addHosts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAddHostsResult{}
  if retval, err2 := p.handler.AddHosts(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc578 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHosts: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addHosts", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err577 = thrift.WrapTException(err2)
    }
    if err2 := _exc578.Write(ctx, oprot); _write_err577 == nil && err2 != nil {
      _write_err577 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err577 == nil && err2 != nil {
      _write_err577 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err577 == nil && err2 != nil {
      _write_err577 = thrift.WrapTException(err2)
    }
    if _write_err577 != nil {
      return false, thrift.WrapTException(_write_err577)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addHosts", thrift.REPLY, seqId); err2 != nil {
    _write_err577 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err577 == nil && err2 != nil {
    _write_err577 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err577 == nil && err2 != nil {
    _write_err577 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err577 == nil && err2 != nil {
    _write_err577 = thrift.WrapTException(err2)
  }
  if _write_err577 != nil {
    return false, thrift.WrapTException(_write_err577)
  }
  return true, err
}

type metaServiceProcessorAddHostsIntoZone struct {
  handler MetaService
}

func (p *metaServiceProcessorAddHostsIntoZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err579 error
  args := MetaServiceAddHostsIntoZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addHostsIntoZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAddHostsIntoZoneResult{}
  if retval, err2 := p.handler.AddHostsIntoZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc580 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHostsIntoZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addHostsIntoZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err579 = thrift.WrapTException(err2)
    }
    if err2 := _exc580.Write(ctx, oprot); _write_err579 == nil && err2 != nil {
      _write_err579 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err579 == nil && err2 != nil {
      _write_err579 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err579 == nil && err2 != nil {
      _write_err579 = thrift.WrapTException(err2)
    }
    if _write_err579 != nil {
      return false, thrift.WrapTException(_write_err579)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addHostsIntoZone", thrift.REPLY, seqId); err2 != nil {
    _write_err579 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err579 == nil && err2 != nil {
    _write_err579 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err579 == nil && err2 != nil {
    _write_err579 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err579 == nil && err2 != nil {
    _write_err579 = thrift.WrapTException(err2)
  }
  if _write_err579 != nil {
    return false, thrift.WrapTException(_write_err579)
  }
  return true, err
}

type metaServiceProcessorDropHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorDropHosts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err581 error
  args := MetaServiceDropHostsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropHosts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropHostsResult{}
  if retval, err2 := p.handler.DropHosts(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc582 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropHosts: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropHosts", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err581 = thrift.WrapTException(err2)
    }
    if err2 := _exc582.Write(ctx, oprot); _write_err581 == nil && err2 != nil {
      _write_err581 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err581 == nil && err2 != nil {
      _write_err581 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err581 == nil && err2 != nil {
      _write_err581 = thrift.WrapTException(err2)
    }
    if _write_err581 != nil {
      return false, thrift.WrapTException(_write_err581)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropHosts", thrift.REPLY, seqId); err2 != nil {
    _write_err581 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err581 == nil && err2 != nil {
    _write_err581 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err581 == nil && err2 != nil {
    _write_err581 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err581 == nil && err2 != nil {
    _write_err581 = thrift.WrapTException(err2)
  }
  if _write_err581 != nil {
    return false, thrift.WrapTException(_write_err581)
  }
  return true, err
}

type metaServiceProcessorListHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorListHosts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err583 error
  args := MetaServiceListHostsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listHosts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListHostsResult{}
  if retval, err2 := p.handler.ListHosts(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc584 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listHosts", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err583 = thrift.WrapTException(err2)
    }
    if err2 := _exc584.Write(ctx, oprot); _write_err583 == nil && err2 != nil {
      _write_err583 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err583 == nil && err2 != nil {
      _write_err583 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err583 == nil && err2 != nil {
      _write_err583 = thrift.WrapTException(err2)
    }
    if _write_err583 != nil {
      return false, thrift.WrapTException(_write_err583)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listHosts", thrift.REPLY, seqId); err2 != nil {
    _write_err583 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err583 == nil && err2 != nil {
    _write_err583 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err583 == nil && err2 != nil {
    _write_err583 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err583 == nil && err2 != nil {
    _write_err583 = thrift.WrapTException(err2)
  }
  if _write_err583 != nil {
    return false, thrift.WrapTException(_write_err583)
  }
  return true, err
}

type metaServiceProcessorGetPartsAlloc struct {
  handler MetaService
}

func (p *metaServiceProcessorGetPartsAlloc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err585 error
  args := MetaServiceGetPartsAllocArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPartsAlloc", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetPartsAllocResult{}
  if retval, err2 := p.handler.GetPartsAlloc(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc586 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartsAlloc: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getPartsAlloc", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err585 = thrift.WrapTException(err2)
    }
    if err2 := _exc586.Write(ctx, oprot); _write_err585 == nil && err2 != nil {
      _write_err585 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err585 == nil && err2 != nil {
      _write_err585 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err585 == nil && err2 != nil {
      _write_err585 = thrift.WrapTException(err2)
    }
    if _write_err585 != nil {
      return false, thrift.WrapTException(_write_err585)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getPartsAlloc", thrift.REPLY, seqId); err2 != nil {
    _write_err585 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err585 == nil && err2 != nil {
    _write_err585 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err585 == nil && err2 != nil {
    _write_err585 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err585 == nil && err2 != nil {
    _write_err585 = thrift.WrapTException(err2)
  }
  if _write_err585 != nil {
    return false, thrift.WrapTException(_write_err585)
  }
  return true, err
}

type metaServiceProcessorListParts struct {
  handler MetaService
}

func (p *metaServiceProcessorListParts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err587 error
  args := MetaServiceListPartsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listParts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListPartsResult{}
  if retval, err2 := p.handler.ListParts(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc588 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listParts: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listParts", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err587 = thrift.WrapTException(err2)
    }
    if err2 := _exc588.Write(ctx, oprot); _write_err587 == nil && err2 != nil {
      _write_err587 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err587 == nil && err2 != nil {
      _write_err587 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err587 == nil && err2 != nil {
      _write_err587 = thrift.WrapTException(err2)
    }
    if _write_err587 != nil {
      return false, thrift.WrapTException(_write_err587)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listParts", thrift.REPLY, seqId); err2 != nil {
    _write_err587 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err587 == nil && err2 != nil {
    _write_err587 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err587 == nil && err2 != nil {
    _write_err587 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err587 == nil && err2 != nil {
    _write_err587 = thrift.WrapTException(err2)
  }
  if _write_err587 != nil {
    return false, thrift.WrapTException(_write_err587)
  }
  return true, err
}

type metaServiceProcessorGetWorkerId struct {
  handler MetaService
}

func (p *metaServiceProcessorGetWorkerId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err589 error
  args := MetaServiceGetWorkerIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getWorkerId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetWorkerIdResult{}
  if retval, err2 := p.handler.GetWorkerId(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc590 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkerId: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getWorkerId", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err589 = thrift.WrapTException(err2)
    }
    if err2 := _exc590.Write(ctx, oprot); _write_err589 == nil && err2 != nil {
      _write_err589 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err589 == nil && err2 != nil {
      _write_err589 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err589 == nil && err2 != nil {
      _write_err589 = thrift.WrapTException(err2)
    }
    if _write_err589 != nil {
      return false, thrift.WrapTException(_write_err589)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getWorkerId", thrift.REPLY, seqId); err2 != nil {
    _write_err589 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err589 == nil && err2 != nil {
    _write_err589 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err589 == nil && err2 != nil {
    _write_err589 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err589 == nil && err2 != nil {
    _write_err589 = thrift.WrapTException(err2)
  }
  if _write_err589 != nil {
    return false, thrift.WrapTException(_write_err589)
  }
  return true, err
}

type metaServiceProcessorCreateTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTagIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err591 error
  args := MetaServiceCreateTagIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createTagIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateTagIndexResult{}
  if retval, err2 := p.handler.CreateTagIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc592 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTagIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createTagIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err591 = thrift.WrapTException(err2)
    }
    if err2 := _exc592.Write(ctx, oprot); _write_err591 == nil && err2 != nil {
      _write_err591 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err591 == nil && err2 != nil {
      _write_err591 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err591 == nil && err2 != nil {
      _write_err591 = thrift.WrapTException(err2)
    }
    if _write_err591 != nil {
      return false, thrift.WrapTException(_write_err591)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createTagIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err591 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err591 == nil && err2 != nil {
    _write_err591 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err591 == nil && err2 != nil {
    _write_err591 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err591 == nil && err2 != nil {
    _write_err591 = thrift.WrapTException(err2)
  }
  if _write_err591 != nil {
    return false, thrift.WrapTException(_write_err591)
  }
  return true, err
}

type metaServiceProcessorDropTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTagIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err593 error
  args := MetaServiceDropTagIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropTagIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropTagIndexResult{}
  if retval, err2 := p.handler.DropTagIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc594 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTagIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropTagIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err593 = thrift.WrapTException(err2)
    }
    if err2 := _exc594.Write(ctx, oprot); _write_err593 == nil && err2 != nil {
      _write_err593 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err593 == nil && err2 != nil {
      _write_err593 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err593 == nil && err2 != nil {
      _write_err593 = thrift.WrapTException(err2)
    }
    if _write_err593 != nil {
      return false, thrift.WrapTException(_write_err593)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropTagIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err593 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err593 == nil && err2 != nil {
    _write_err593 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err593 == nil && err2 != nil {
    _write_err593 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err593 == nil && err2 != nil {
    _write_err593 = thrift.WrapTException(err2)
  }
  if _write_err593 != nil {
    return false, thrift.WrapTException(_write_err593)
  }
  return true, err
}

type metaServiceProcessorGetTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTagIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err595 error
  args := MetaServiceGetTagIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTagIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetTagIndexResult{}
  if retval, err2 := p.handler.GetTagIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc596 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTagIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getTagIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err595 = thrift.WrapTException(err2)
    }
    if err2 := _exc596.Write(ctx, oprot); _write_err595 == nil && err2 != nil {
      _write_err595 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err595 == nil && err2 != nil {
      _write_err595 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err595 == nil && err2 != nil {
      _write_err595 = thrift.WrapTException(err2)
    }
    if _write_err595 != nil {
      return false, thrift.WrapTException(_write_err595)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getTagIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err595 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err595 == nil && err2 != nil {
    _write_err595 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err595 == nil && err2 != nil {
    _write_err595 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err595 == nil && err2 != nil {
    _write_err595 = thrift.WrapTException(err2)
  }
  if _write_err595 != nil {
    return false, thrift.WrapTException(_write_err595)
  }
  return true, err
}

type metaServiceProcessorListTagIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err597 error
  args := MetaServiceListTagIndexesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listTagIndexes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListTagIndexesResult{}
  if retval, err2 := p.handler.ListTagIndexes(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc598 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexes: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listTagIndexes", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err597 = thrift.WrapTException(err2)
    }
    if err2 := _exc598.Write(ctx, oprot); _write_err597 == nil && err2 != nil {
      _write_err597 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err597 == nil && err2 != nil {
      _write_err597 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err597 == nil && err2 != nil {
      _write_err597 = thrift.WrapTException(err2)
    }
    if _write_err597 != nil {
      return false, thrift.WrapTException(_write_err597)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listTagIndexes", thrift.REPLY, seqId); err2 != nil {
    _write_err597 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err597 == nil && err2 != nil {
    _write_err597 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err597 == nil && err2 != nil {
    _write_err597 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err597 == nil && err2 != nil {
    _write_err597 = thrift.WrapTException(err2)
  }
  if _write_err597 != nil {
    return false, thrift.WrapTException(_write_err597)
  }
  return true, err
}

type metaServiceProcessorRebuildTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildTagIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err599 error
  args := MetaServiceRebuildTagIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rebuildTagIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRebuildTagIndexResult{}
  if retval, err2 := p.handler.RebuildTagIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc600 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildTagIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "rebuildTagIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err599 = thrift.WrapTException(err2)
    }
    if err2 := _exc600.Write(ctx, oprot); _write_err599 == nil && err2 != nil {
      _write_err599 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err599 == nil && err2 != nil {
      _write_err599 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err599 == nil && err2 != nil {
      _write_err599 = thrift.WrapTException(err2)
    }
    if _write_err599 != nil {
      return false, thrift.WrapTException(_write_err599)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "rebuildTagIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err599 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err599 == nil && err2 != nil {
    _write_err599 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err599 == nil && err2 != nil {
    _write_err599 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err599 == nil && err2 != nil {
    _write_err599 = thrift.WrapTException(err2)
  }
  if _write_err599 != nil {
    return false, thrift.WrapTException(_write_err599)
  }
  return true, err
}

type metaServiceProcessorListTagIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err601 error
  args := MetaServiceListTagIndexStatusArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listTagIndexStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListTagIndexStatusResult{}
  if retval, err2 := p.handler.ListTagIndexStatus(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc602 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexStatus: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listTagIndexStatus", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err601 = thrift.WrapTException(err2)
    }
    if err2 := _exc602.Write(ctx, oprot); _write_err601 == nil && err2 != nil {
      _write_err601 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err601 == nil && err2 != nil {
      _write_err601 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err601 == nil && err2 != nil {
      _write_err601 = thrift.WrapTException(err2)
    }
    if _write_err601 != nil {
      return false, thrift.WrapTException(_write_err601)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listTagIndexStatus", thrift.REPLY, seqId); err2 != nil {
    _write_err601 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err601 == nil && err2 != nil {
    _write_err601 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err601 == nil && err2 != nil {
    _write_err601 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err601 == nil && err2 != nil {
    _write_err601 = thrift.WrapTException(err2)
  }
  if _write_err601 != nil {
    return false, thrift.WrapTException(_write_err601)
  }
  return true, err
}

type metaServiceProcessorCreateEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdgeIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err603 error
  args := MetaServiceCreateEdgeIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createEdgeIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateEdgeIndexResult{}
  if retval, err2 := p.handler.CreateEdgeIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc604 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdgeIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createEdgeIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err603 = thrift.WrapTException(err2)
    }
    if err2 := _exc604.Write(ctx, oprot); _write_err603 == nil && err2 != nil {
      _write_err603 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err603 == nil && err2 != nil {
      _write_err603 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err603 == nil && err2 != nil {
      _write_err603 = thrift.WrapTException(err2)
    }
    if _write_err603 != nil {
      return false, thrift.WrapTException(_write_err603)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createEdgeIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err603 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err603 == nil && err2 != nil {
    _write_err603 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err603 == nil && err2 != nil {
    _write_err603 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err603 == nil && err2 != nil {
    _write_err603 = thrift.WrapTException(err2)
  }
  if _write_err603 != nil {
    return false, thrift.WrapTException(_write_err603)
  }
  return true, err
}

type metaServiceProcessorDropEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdgeIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err605 error
  args := MetaServiceDropEdgeIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropEdgeIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropEdgeIndexResult{}
  if retval, err2 := p.handler.DropEdgeIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc606 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdgeIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropEdgeIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err605 = thrift.WrapTException(err2)
    }
    if err2 := _exc606.Write(ctx, oprot); _write_err605 == nil && err2 != nil {
      _write_err605 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err605 == nil && err2 != nil {
      _write_err605 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err605 == nil && err2 != nil {
      _write_err605 = thrift.WrapTException(err2)
    }
    if _write_err605 != nil {
      return false, thrift.WrapTException(_write_err605)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropEdgeIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err605 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err605 == nil && err2 != nil {
    _write_err605 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err605 == nil && err2 != nil {
    _write_err605 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err605 == nil && err2 != nil {
    _write_err605 = thrift.WrapTException(err2)
  }
  if _write_err605 != nil {
    return false, thrift.WrapTException(_write_err605)
  }
  return true, err
}

type metaServiceProcessorGetEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdgeIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err607 error
  args := MetaServiceGetEdgeIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getEdgeIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetEdgeIndexResult{}
  if retval, err2 := p.handler.GetEdgeIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc608 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getEdgeIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err607 = thrift.WrapTException(err2)
    }
    if err2 := _exc608.Write(ctx, oprot); _write_err607 == nil && err2 != nil {
      _write_err607 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err607 == nil && err2 != nil {
      _write_err607 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err607 == nil && err2 != nil {
      _write_err607 = thrift.WrapTException(err2)
    }
    if _write_err607 != nil {
      return false, thrift.WrapTException(_write_err607)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getEdgeIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err607 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err607 == nil && err2 != nil {
    _write_err607 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err607 == nil && err2 != nil {
    _write_err607 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err607 == nil && err2 != nil {
    _write_err607 = thrift.WrapTException(err2)
  }
  if _write_err607 != nil {
    return false, thrift.WrapTException(_write_err607)
  }
  return true, err
}

type metaServiceProcessorListEdgeIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err609 error
  args := MetaServiceListEdgeIndexesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listEdgeIndexes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListEdgeIndexesResult{}
  if retval, err2 := p.handler.ListEdgeIndexes(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc610 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexes: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listEdgeIndexes", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err609 = thrift.WrapTException(err2)
    }
    if err2 := _exc610.Write(ctx, oprot); _write_err609 == nil && err2 != nil {
      _write_err609 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err609 == nil && err2 != nil {
      _write_err609 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err609 == nil && err2 != nil {
      _write_err609 = thrift.WrapTException(err2)
    }
    if _write_err609 != nil {
      return false, thrift.WrapTException(_write_err609)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listEdgeIndexes", thrift.REPLY, seqId); err2 != nil {
    _write_err609 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err609 == nil && err2 != nil {
    _write_err609 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err609 == nil && err2 != nil {
    _write_err609 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err609 == nil && err2 != nil {
    _write_err609 = thrift.WrapTException(err2)
  }
  if _write_err609 != nil {
    return false, thrift.WrapTException(_write_err609)
  }
  return true, err
}

type metaServiceProcessorRebuildEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildEdgeIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err611 error
  args := MetaServiceRebuildEdgeIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rebuildEdgeIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRebuildEdgeIndexResult{}
  if retval, err2 := p.handler.RebuildEdgeIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc612 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildEdgeIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "rebuildEdgeIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err611 = thrift.WrapTException(err2)
    }
    if err2 := _exc612.Write(ctx, oprot); _write_err611 == nil && err2 != nil {
      _write_err611 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err611 == nil && err2 != nil {
      _write_err611 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err611 == nil && err2 != nil {
      _write_err611 = thrift.WrapTException(err2)
    }
    if _write_err611 != nil {
      return false, thrift.WrapTException(_write_err611)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "rebuildEdgeIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err611 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err611 == nil && err2 != nil {
    _write_err611 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err611 == nil && err2 != nil {
    _write_err611 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err611 == nil && err2 != nil {
    _write_err611 = thrift.WrapTException(err2)
  }
  if _write_err611 != nil {
    return false, thrift.WrapTException(_write_err611)
  }
  return true, err
}

type metaServiceProcessorListEdgeIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err613 error
  args := MetaServiceListEdgeIndexStatusArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listEdgeIndexStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListEdgeIndexStatusResult{}
  if retval, err2 := p.handler.ListEdgeIndexStatus(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc614 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexStatus: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listEdgeIndexStatus", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err613 = thrift.WrapTException(err2)
    }
    if err2 := _exc614.Write(ctx, oprot); _write_err613 == nil && err2 != nil {
      _write_err613 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err613 == nil && err2 != nil {
      _write_err613 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err613 == nil && err2 != nil {
      _write_err613 = thrift.WrapTException(err2)
    }
    if _write_err613 != nil {
      return false, thrift.WrapTException(_write_err613)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listEdgeIndexStatus", thrift.REPLY, seqId); err2 != nil {
    _write_err613 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err613 == nil && err2 != nil {
    _write_err613 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err613 == nil && err2 != nil {
    _write_err613 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err613 == nil && err2 != nil {
    _write_err613 = thrift.WrapTException(err2)
  }
  if _write_err613 != nil {
    return false, thrift.WrapTException(_write_err613)
  }
  return true, err
}

type metaServiceProcessorCreateUser struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err615 error
  args := MetaServiceCreateUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateUserResult{}
  if retval, err2 := p.handler.CreateUser(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc616 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createUser", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err615 = thrift.WrapTException(err2)
    }
    if err2 := _exc616.Write(ctx, oprot); _write_err615 == nil && err2 != nil {
      _write_err615 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err615 == nil && err2 != nil {
      _write_err615 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err615 == nil && err2 != nil {
      _write_err615 = thrift.WrapTException(err2)
    }
    if _write_err615 != nil {
      return false, thrift.WrapTException(_write_err615)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createUser", thrift.REPLY, seqId); err2 != nil {
    _write_err615 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err615 == nil && err2 != nil {
    _write_err615 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err615 == nil && err2 != nil {
    _write_err615 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err615 == nil && err2 != nil {
    _write_err615 = thrift.WrapTException(err2)
  }
  if _write_err615 != nil {
    return false, thrift.WrapTException(_write_err615)
  }
  return true, err
}

type metaServiceProcessorDropUser struct {
  handler MetaService
}

func (p *metaServiceProcessorDropUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err617 error
  args := MetaServiceDropUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropUserResult{}
  if retval, err2 := p.handler.DropUser(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc618 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropUser: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropUser", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err617 = thrift.WrapTException(err2)
    }
    if err2 := _exc618.Write(ctx, oprot); _write_err617 == nil && err2 != nil {
      _write_err617 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err617 == nil && err2 != nil {
      _write_err617 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err617 == nil && err2 != nil {
      _write_err617 = thrift.WrapTException(err2)
    }
    if _write_err617 != nil {
      return false, thrift.WrapTException(_write_err617)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropUser", thrift.REPLY, seqId); err2 != nil {
    _write_err617 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err617 == nil && err2 != nil {
    _write_err617 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err617 == nil && err2 != nil {
    _write_err617 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err617 == nil && err2 != nil {
    _write_err617 = thrift.WrapTException(err2)
  }
  if _write_err617 != nil {
    return false, thrift.WrapTException(_write_err617)
  }
  return true, err
}

type metaServiceProcessorAlterUser struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err619 error
  args := MetaServiceAlterUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "alterUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAlterUserResult{}
  if retval, err2 := p.handler.AlterUser(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc620 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterUser: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "alterUser", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err619 = thrift.WrapTException(err2)
    }
    if err2 := _exc620.Write(ctx, oprot); _write_err619 == nil && err2 != nil {
      _write_err619 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err619 == nil && err2 != nil {
      _write_err619 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err619 == nil && err2 != nil {
      _write_err619 = thrift.WrapTException(err2)
    }
    if _write_err619 != nil {
      return false, thrift.WrapTException(_write_err619)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "alterUser", thrift.REPLY, seqId); err2 != nil {
    _write_err619 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err619 == nil && err2 != nil {
    _write_err619 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err619 == nil && err2 != nil {
    _write_err619 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err619 == nil && err2 != nil {
    _write_err619 = thrift.WrapTException(err2)
  }
  if _write_err619 != nil {
    return false, thrift.WrapTException(_write_err619)
  }
  return true, err
}

type metaServiceProcessorGrantRole struct {
  handler MetaService
}

func (p *metaServiceProcessorGrantRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err621 error
  args := MetaServiceGrantRoleArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "grantRole", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGrantRoleResult{}
  if retval, err2 := p.handler.GrantRole(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc622 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantRole: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "grantRole", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err621 = thrift.WrapTException(err2)
    }
    if err2 := _exc622.Write(ctx, oprot); _write_err621 == nil && err2 != nil {
      _write_err621 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err621 == nil && err2 != nil {
      _write_err621 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err621 == nil && err2 != nil {
      _write_err621 = thrift.WrapTException(err2)
    }
    if _write_err621 != nil {
      return false, thrift.WrapTException(_write_err621)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "grantRole", thrift.REPLY, seqId); err2 != nil {
    _write_err621 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err621 == nil && err2 != nil {
    _write_err621 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err621 == nil && err2 != nil {
    _write_err621 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err621 == nil && err2 != nil {
    _write_err621 = thrift.WrapTException(err2)
  }
  if _write_err621 != nil {
    return false, thrift.WrapTException(_write_err621)
  }
  return true, err
}

type metaServiceProcessorRevokeRole struct {
  handler MetaService
}

func (p *metaServiceProcessorRevokeRole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err623 error
  args := MetaServiceRevokeRoleArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "revokeRole", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRevokeRoleResult{}
  if retval, err2 := p.handler.RevokeRole(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc624 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeRole: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "revokeRole", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err623 = thrift.WrapTException(err2)
    }
    if err2 := _exc624.Write(ctx, oprot); _write_err623 == nil && err2 != nil {
      _write_err623 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err623 == nil && err2 != nil {
      _write_err623 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err623 == nil && err2 != nil {
      _write_err623 = thrift.WrapTException(err2)
    }
    if _write_err623 != nil {
      return false, thrift.WrapTException(_write_err623)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "revokeRole", thrift.REPLY, seqId); err2 != nil {
    _write_err623 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err623 == nil && err2 != nil {
    _write_err623 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err623 == nil && err2 != nil {
    _write_err623 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err623 == nil && err2 != nil {
    _write_err623 = thrift.WrapTException(err2)
  }
  if _write_err623 != nil {
    return false, thrift.WrapTException(_write_err623)
  }
  return true, err
}

type metaServiceProcessorListUsers struct {
  handler MetaService
}

func (p *metaServiceProcessorListUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err625 error
  args := MetaServiceListUsersArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listUsers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListUsersResult{}
  if retval, err2 := p.handler.ListUsers(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc626 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUsers: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listUsers", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err625 = thrift.WrapTException(err2)
    }
    if err2 := _exc626.Write(ctx, oprot); _write_err625 == nil && err2 != nil {
      _write_err625 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err625 == nil && err2 != nil {
      _write_err625 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err625 == nil && err2 != nil {
      _write_err625 = thrift.WrapTException(err2)
    }
    if _write_err625 != nil {
      return false, thrift.WrapTException(_write_err625)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listUsers", thrift.REPLY, seqId); err2 != nil {
    _write_err625 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err625 == nil && err2 != nil {
    _write_err625 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err625 == nil && err2 != nil {
    _write_err625 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err625 == nil && err2 != nil {
    _write_err625 = thrift.WrapTException(err2)
  }
  if _write_err625 != nil {
    return false, thrift.WrapTException(_write_err625)
  }
  return true, err
}

type metaServiceProcessorListRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorListRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err627 error
  args := MetaServiceListRolesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listRoles", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListRolesResult{}
  if retval, err2 := p.handler.ListRoles(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc628 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listRoles: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listRoles", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err627 = thrift.WrapTException(err2)
    }
    if err2 := _exc628.Write(ctx, oprot); _write_err627 == nil && err2 != nil {
      _write_err627 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err627 == nil && err2 != nil {
      _write_err627 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err627 == nil && err2 != nil {
      _write_err627 = thrift.WrapTException(err2)
    }
    if _write_err627 != nil {
      return false, thrift.WrapTException(_write_err627)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listRoles", thrift.REPLY, seqId); err2 != nil {
    _write_err627 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err627 == nil && err2 != nil {
    _write_err627 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err627 == nil && err2 != nil {
    _write_err627 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err627 == nil && err2 != nil {
    _write_err627 = thrift.WrapTException(err2)
  }
  if _write_err627 != nil {
    return false, thrift.WrapTException(_write_err627)
  }
  return true, err
}

type metaServiceProcessorGetUserRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorGetUserRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err629 error
  args := MetaServiceGetUserRolesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getUserRoles", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetUserRolesResult{}
  if retval, err2 := p.handler.GetUserRoles(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc630 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRoles: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getUserRoles", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err629 = thrift.WrapTException(err2)
    }
    if err2 := _exc630.Write(ctx, oprot); _write_err629 == nil && err2 != nil {
      _write_err629 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err629 == nil && err2 != nil {
      _write_err629 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err629 == nil && err2 != nil {
      _write_err629 = thrift.WrapTException(err2)
    }
    if _write_err629 != nil {
      return false, thrift.WrapTException(_write_err629)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getUserRoles", thrift.REPLY, seqId); err2 != nil {
    _write_err629 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err629 == nil && err2 != nil {
    _write_err629 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err629 == nil && err2 != nil {
    _write_err629 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err629 == nil && err2 != nil {
    _write_err629 = thrift.WrapTException(err2)
  }
  if _write_err629 != nil {
    return false, thrift.WrapTException(_write_err629)
  }
  return true, err
}

type metaServiceProcessorChangePassword struct {
  handler MetaService
}

func (p *metaServiceProcessorChangePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err631 error
  args := MetaServiceChangePasswordArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "changePassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceChangePasswordResult{}
  if retval, err2 := p.handler.ChangePassword(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc632 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "changePassword", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err631 = thrift.WrapTException(err2)
    }
    if err2 := _exc632.Write(ctx, oprot); _write_err631 == nil && err2 != nil {
      _write_err631 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err631 == nil && err2 != nil {
      _write_err631 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err631 == nil && err2 != nil {
      _write_err631 = thrift.WrapTException(err2)
    }
    if _write_err631 != nil {
      return false, thrift.WrapTException(_write_err631)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "changePassword", thrift.REPLY, seqId); err2 != nil {
    _write_err631 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err631 == nil && err2 != nil {
    _write_err631 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err631 == nil && err2 != nil {
    _write_err631 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err631 == nil && err2 != nil {
    _write_err631 = thrift.WrapTException(err2)
  }
  if _write_err631 != nil {
    return false, thrift.WrapTException(_write_err631)
  }
  return true, err
}

type metaServiceProcessorHeartBeat struct {
  handler MetaService
}

func (p *metaServiceProcessorHeartBeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err633 error
  args := MetaServiceHeartBeatArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "heartBeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceHeartBeatResult{}
  if retval, err2 := p.handler.HeartBeat(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc634 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "heartBeat", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err633 = thrift.WrapTException(err2)
    }
    if err2 := _exc634.Write(ctx, oprot); _write_err633 == nil && err2 != nil {
      _write_err633 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err633 == nil && err2 != nil {
      _write_err633 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err633 == nil && err2 != nil {
      _write_err633 = thrift.WrapTException(err2)
    }
    if _write_err633 != nil {
      return false, thrift.WrapTException(_write_err633)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "heartBeat", thrift.REPLY, seqId); err2 != nil {
    _write_err633 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err633 == nil && err2 != nil {
    _write_err633 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err633 == nil && err2 != nil {
    _write_err633 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err633 == nil && err2 != nil {
    _write_err633 = thrift.WrapTException(err2)
  }
  if _write_err633 != nil {
    return false, thrift.WrapTException(_write_err633)
  }
  return true, err
}

type metaServiceProcessorAgentHeartbeat struct {
  handler MetaService
}

func (p *metaServiceProcessorAgentHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err635 error
  args := MetaServiceAgentHeartbeatArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "agentHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAgentHeartbeatResult{}
  if retval, err2 := p.handler.AgentHeartbeat(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc636 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing agentHeartbeat: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "agentHeartbeat", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err635 = thrift.WrapTException(err2)
    }
    if err2 := _exc636.Write(ctx, oprot); _write_err635 == nil && err2 != nil {
      _write_err635 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err635 == nil && err2 != nil {
      _write_err635 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err635 == nil && err2 != nil {
      _write_err635 = thrift.WrapTException(err2)
    }
    if _write_err635 != nil {
      return false, thrift.WrapTException(_write_err635)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "agentHeartbeat", thrift.REPLY, seqId); err2 != nil {
    _write_err635 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err635 == nil && err2 != nil {
    _write_err635 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err635 == nil && err2 != nil {
    _write_err635 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err635 == nil && err2 != nil {
    _write_err635 = thrift.WrapTException(err2)
  }
  if _write_err635 != nil {
    return false, thrift.WrapTException(_write_err635)
  }
  return true, err
}

type metaServiceProcessorRegConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorRegConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err637 error
  args := MetaServiceRegConfigArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "regConfig", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRegConfigResult{}
  if retval, err2 := p.handler.RegConfig(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc638 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing regConfig: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "regConfig", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err637 = thrift.WrapTException(err2)
    }
    if err2 := _exc638.Write(ctx, oprot); _write_err637 == nil && err2 != nil {
      _write_err637 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err637 == nil && err2 != nil {
      _write_err637 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err637 == nil && err2 != nil {
      _write_err637 = thrift.WrapTException(err2)
    }
    if _write_err637 != nil {
      return false, thrift.WrapTException(_write_err637)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "regConfig", thrift.REPLY, seqId); err2 != nil {
    _write_err637 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err637 == nil && err2 != nil {
    _write_err637 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err637 == nil && err2 != nil {
    _write_err637 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err637 == nil && err2 != nil {
    _write_err637 = thrift.WrapTException(err2)
  }
  if _write_err637 != nil {
    return false, thrift.WrapTException(_write_err637)
  }
  return true, err
}

type metaServiceProcessorGetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorGetConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err639 error
  args := MetaServiceGetConfigArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getConfig", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetConfigResult{}
  if retval, err2 := p.handler.GetConfig(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc640 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfig: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getConfig", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err639 = thrift.WrapTException(err2)
    }
    if err2 := _exc640.Write(ctx, oprot); _write_err639 == nil && err2 != nil {
      _write_err639 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err639 == nil && err2 != nil {
      _write_err639 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err639 == nil && err2 != nil {
      _write_err639 = thrift.WrapTException(err2)
    }
    if _write_err639 != nil {
      return false, thrift.WrapTException(_write_err639)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getConfig", thrift.REPLY, seqId); err2 != nil {
    _write_err639 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err639 == nil && err2 != nil {
    _write_err639 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err639 == nil && err2 != nil {
    _write_err639 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err639 == nil && err2 != nil {
    _write_err639 = thrift.WrapTException(err2)
  }
  if _write_err639 != nil {
    return false, thrift.WrapTException(_write_err639)
  }
  return true, err
}

type metaServiceProcessorSetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorSetConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err641 error
  args := MetaServiceSetConfigArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setConfig", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceSetConfigResult{}
  if retval, err2 := p.handler.SetConfig(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc642 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConfig: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "setConfig", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err641 = thrift.WrapTException(err2)
    }
    if err2 := _exc642.Write(ctx, oprot); _write_err641 == nil && err2 != nil {
      _write_err641 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err641 == nil && err2 != nil {
      _write_err641 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err641 == nil && err2 != nil {
      _write_err641 = thrift.WrapTException(err2)
    }
    if _write_err641 != nil {
      return false, thrift.WrapTException(_write_err641)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "setConfig", thrift.REPLY, seqId); err2 != nil {
    _write_err641 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err641 == nil && err2 != nil {
    _write_err641 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err641 == nil && err2 != nil {
    _write_err641 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err641 == nil && err2 != nil {
    _write_err641 = thrift.WrapTException(err2)
  }
  if _write_err641 != nil {
    return false, thrift.WrapTException(_write_err641)
  }
  return true, err
}

type metaServiceProcessorListConfigs struct {
  handler MetaService
}

func (p *metaServiceProcessorListConfigs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err643 error
  args := MetaServiceListConfigsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listConfigs", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListConfigsResult{}
  if retval, err2 := p.handler.ListConfigs(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc644 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConfigs: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listConfigs", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err643 = thrift.WrapTException(err2)
    }
    if err2 := _exc644.Write(ctx, oprot); _write_err643 == nil && err2 != nil {
      _write_err643 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err643 == nil && err2 != nil {
      _write_err643 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err643 == nil && err2 != nil {
      _write_err643 = thrift.WrapTException(err2)
    }
    if _write_err643 != nil {
      return false, thrift.WrapTException(_write_err643)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listConfigs", thrift.REPLY, seqId); err2 != nil {
    _write_err643 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err643 == nil && err2 != nil {
    _write_err643 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err643 == nil && err2 != nil {
    _write_err643 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err643 == nil && err2 != nil {
    _write_err643 = thrift.WrapTException(err2)
  }
  if _write_err643 != nil {
    return false, thrift.WrapTException(_write_err643)
  }
  return true, err
}

type metaServiceProcessorCreateSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err645 error
  args := MetaServiceCreateSnapshotArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createSnapshot", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateSnapshotResult{}
  if retval, err2 := p.handler.CreateSnapshot(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc646 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSnapshot: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createSnapshot", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err645 = thrift.WrapTException(err2)
    }
    if err2 := _exc646.Write(ctx, oprot); _write_err645 == nil && err2 != nil {
      _write_err645 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err645 == nil && err2 != nil {
      _write_err645 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err645 == nil && err2 != nil {
      _write_err645 = thrift.WrapTException(err2)
    }
    if _write_err645 != nil {
      return false, thrift.WrapTException(_write_err645)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createSnapshot", thrift.REPLY, seqId); err2 != nil {
    _write_err645 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err645 == nil && err2 != nil {
    _write_err645 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err645 == nil && err2 != nil {
    _write_err645 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err645 == nil && err2 != nil {
    _write_err645 = thrift.WrapTException(err2)
  }
  if _write_err645 != nil {
    return false, thrift.WrapTException(_write_err645)
  }
  return true, err
}

type metaServiceProcessorDropSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err647 error
  args := MetaServiceDropSnapshotArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropSnapshot", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropSnapshotResult{}
  if retval, err2 := p.handler.DropSnapshot(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc648 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSnapshot: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropSnapshot", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err647 = thrift.WrapTException(err2)
    }
    if err2 := _exc648.Write(ctx, oprot); _write_err647 == nil && err2 != nil {
      _write_err647 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err647 == nil && err2 != nil {
      _write_err647 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err647 == nil && err2 != nil {
      _write_err647 = thrift.WrapTException(err2)
    }
    if _write_err647 != nil {
      return false, thrift.WrapTException(_write_err647)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropSnapshot", thrift.REPLY, seqId); err2 != nil {
    _write_err647 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err647 == nil && err2 != nil {
    _write_err647 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err647 == nil && err2 != nil {
    _write_err647 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err647 == nil && err2 != nil {
    _write_err647 = thrift.WrapTException(err2)
  }
  if _write_err647 != nil {
    return false, thrift.WrapTException(_write_err647)
  }
  return true, err
}

type metaServiceProcessorListSnapshots struct {
  handler MetaService
}

func (p *metaServiceProcessorListSnapshots) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err649 error
  args := MetaServiceListSnapshotsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listSnapshots", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListSnapshotsResult{}
  if retval, err2 := p.handler.ListSnapshots(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc650 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSnapshots: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listSnapshots", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err649 = thrift.WrapTException(err2)
    }
    if err2 := _exc650.Write(ctx, oprot); _write_err649 == nil && err2 != nil {
      _write_err649 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err649 == nil && err2 != nil {
      _write_err649 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err649 == nil && err2 != nil {
      _write_err649 = thrift.WrapTException(err2)
    }
    if _write_err649 != nil {
      return false, thrift.WrapTException(_write_err649)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listSnapshots", thrift.REPLY, seqId); err2 != nil {
    _write_err649 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err649 == nil && err2 != nil {
    _write_err649 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err649 == nil && err2 != nil {
    _write_err649 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err649 == nil && err2 != nil {
    _write_err649 = thrift.WrapTException(err2)
  }
  if _write_err649 != nil {
    return false, thrift.WrapTException(_write_err649)
  }
  return true, err
}

type metaServiceProcessorRunAdminJob struct {
  handler MetaService
}

func (p *metaServiceProcessorRunAdminJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err651 error
  args := MetaServiceRunAdminJobArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "runAdminJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRunAdminJobResult{}
  if retval, err2 := p.handler.RunAdminJob(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc652 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing runAdminJob: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "runAdminJob", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err651 = thrift.WrapTException(err2)
    }
    if err2 := _exc652.Write(ctx, oprot); _write_err651 == nil && err2 != nil {
      _write_err651 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err651 == nil && err2 != nil {
      _write_err651 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err651 == nil && err2 != nil {
      _write_err651 = thrift.WrapTException(err2)
    }
    if _write_err651 != nil {
      return false, thrift.WrapTException(_write_err651)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "runAdminJob", thrift.REPLY, seqId); err2 != nil {
    _write_err651 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err651 == nil && err2 != nil {
    _write_err651 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err651 == nil && err2 != nil {
    _write_err651 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err651 == nil && err2 != nil {
    _write_err651 = thrift.WrapTException(err2)
  }
  if _write_err651 != nil {
    return false, thrift.WrapTException(_write_err651)
  }
  return true, err
}

type metaServiceProcessorMergeZone struct {
  handler MetaService
}

func (p *metaServiceProcessorMergeZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err653 error
  args := MetaServiceMergeZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "mergeZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceMergeZoneResult{}
  if retval, err2 := p.handler.MergeZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc654 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "mergeZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err653 = thrift.WrapTException(err2)
    }
    if err2 := _exc654.Write(ctx, oprot); _write_err653 == nil && err2 != nil {
      _write_err653 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err653 == nil && err2 != nil {
      _write_err653 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err653 == nil && err2 != nil {
      _write_err653 = thrift.WrapTException(err2)
    }
    if _write_err653 != nil {
      return false, thrift.WrapTException(_write_err653)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "mergeZone", thrift.REPLY, seqId); err2 != nil {
    _write_err653 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err653 == nil && err2 != nil {
    _write_err653 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err653 == nil && err2 != nil {
    _write_err653 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err653 == nil && err2 != nil {
    _write_err653 = thrift.WrapTException(err2)
  }
  if _write_err653 != nil {
    return false, thrift.WrapTException(_write_err653)
  }
  return true, err
}

type metaServiceProcessorDropZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDropZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err655 error
  args := MetaServiceDropZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropZoneResult{}
  if retval, err2 := p.handler.DropZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc656 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err655 = thrift.WrapTException(err2)
    }
    if err2 := _exc656.Write(ctx, oprot); _write_err655 == nil && err2 != nil {
      _write_err655 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err655 == nil && err2 != nil {
      _write_err655 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err655 == nil && err2 != nil {
      _write_err655 = thrift.WrapTException(err2)
    }
    if _write_err655 != nil {
      return false, thrift.WrapTException(_write_err655)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropZone", thrift.REPLY, seqId); err2 != nil {
    _write_err655 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err655 == nil && err2 != nil {
    _write_err655 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err655 == nil && err2 != nil {
    _write_err655 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err655 == nil && err2 != nil {
    _write_err655 = thrift.WrapTException(err2)
  }
  if _write_err655 != nil {
    return false, thrift.WrapTException(_write_err655)
  }
  return true, err
}

type metaServiceProcessorDivideZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDivideZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err657 error
  args := MetaServiceDivideZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "divideZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDivideZoneResult{}
  if retval, err2 := p.handler.DivideZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc658 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing divideZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "divideZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err657 = thrift.WrapTException(err2)
    }
    if err2 := _exc658.Write(ctx, oprot); _write_err657 == nil && err2 != nil {
      _write_err657 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err657 == nil && err2 != nil {
      _write_err657 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err657 == nil && err2 != nil {
      _write_err657 = thrift.WrapTException(err2)
    }
    if _write_err657 != nil {
      return false, thrift.WrapTException(_write_err657)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "divideZone", thrift.REPLY, seqId); err2 != nil {
    _write_err657 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err657 == nil && err2 != nil {
    _write_err657 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err657 == nil && err2 != nil {
    _write_err657 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err657 == nil && err2 != nil {
    _write_err657 = thrift.WrapTException(err2)
  }
  if _write_err657 != nil {
    return false, thrift.WrapTException(_write_err657)
  }
  return true, err
}

type metaServiceProcessorRenameZone struct {
  handler MetaService
}

func (p *metaServiceProcessorRenameZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err659 error
  args := MetaServiceRenameZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "renameZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRenameZoneResult{}
  if retval, err2 := p.handler.RenameZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc660 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renameZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "renameZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err659 = thrift.WrapTException(err2)
    }
    if err2 := _exc660.Write(ctx, oprot); _write_err659 == nil && err2 != nil {
      _write_err659 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err659 == nil && err2 != nil {
      _write_err659 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err659 == nil && err2 != nil {
      _write_err659 = thrift.WrapTException(err2)
    }
    if _write_err659 != nil {
      return false, thrift.WrapTException(_write_err659)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "renameZone", thrift.REPLY, seqId); err2 != nil {
    _write_err659 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err659 == nil && err2 != nil {
    _write_err659 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err659 == nil && err2 != nil {
    _write_err659 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err659 == nil && err2 != nil {
    _write_err659 = thrift.WrapTException(err2)
  }
  if _write_err659 != nil {
    return false, thrift.WrapTException(_write_err659)
  }
  return true, err
}

type metaServiceProcessorGetZone struct {
  handler MetaService
}

func (p *metaServiceProcessorGetZone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err661 error
  args := MetaServiceGetZoneArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getZone", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetZoneResult{}
  if retval, err2 := p.handler.GetZone(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc662 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getZone: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getZone", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err661 = thrift.WrapTException(err2)
    }
    if err2 := _exc662.Write(ctx, oprot); _write_err661 == nil && err2 != nil {
      _write_err661 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err661 == nil && err2 != nil {
      _write_err661 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err661 == nil && err2 != nil {
      _write_err661 = thrift.WrapTException(err2)
    }
    if _write_err661 != nil {
      return false, thrift.WrapTException(_write_err661)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getZone", thrift.REPLY, seqId); err2 != nil {
    _write_err661 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err661 == nil && err2 != nil {
    _write_err661 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err661 == nil && err2 != nil {
    _write_err661 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err661 == nil && err2 != nil {
    _write_err661 = thrift.WrapTException(err2)
  }
  if _write_err661 != nil {
    return false, thrift.WrapTException(_write_err661)
  }
  return true, err
}

type metaServiceProcessorListZones struct {
  handler MetaService
}

func (p *metaServiceProcessorListZones) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err663 error
  args := MetaServiceListZonesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listZones", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListZonesResult{}
  if retval, err2 := p.handler.ListZones(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc664 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listZones: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listZones", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err663 = thrift.WrapTException(err2)
    }
    if err2 := _exc664.Write(ctx, oprot); _write_err663 == nil && err2 != nil {
      _write_err663 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err663 == nil && err2 != nil {
      _write_err663 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err663 == nil && err2 != nil {
      _write_err663 = thrift.WrapTException(err2)
    }
    if _write_err663 != nil {
      return false, thrift.WrapTException(_write_err663)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listZones", thrift.REPLY, seqId); err2 != nil {
    _write_err663 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err663 == nil && err2 != nil {
    _write_err663 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err663 == nil && err2 != nil {
    _write_err663 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err663 == nil && err2 != nil {
    _write_err663 = thrift.WrapTException(err2)
  }
  if _write_err663 != nil {
    return false, thrift.WrapTException(_write_err663)
  }
  return true, err
}

type metaServiceProcessorAddListener struct {
  handler MetaService
}

func (p *metaServiceProcessorAddListener) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err665 error
  args := MetaServiceAddListenerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addListener", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceAddListenerResult{}
  if retval, err2 := p.handler.AddListener(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc666 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListener: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addListener", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err665 = thrift.WrapTException(err2)
    }
    if err2 := _exc666.Write(ctx, oprot); _write_err665 == nil && err2 != nil {
      _write_err665 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err665 == nil && err2 != nil {
      _write_err665 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err665 == nil && err2 != nil {
      _write_err665 = thrift.WrapTException(err2)
    }
    if _write_err665 != nil {
      return false, thrift.WrapTException(_write_err665)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addListener", thrift.REPLY, seqId); err2 != nil {
    _write_err665 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err665 == nil && err2 != nil {
    _write_err665 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err665 == nil && err2 != nil {
    _write_err665 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err665 == nil && err2 != nil {
    _write_err665 = thrift.WrapTException(err2)
  }
  if _write_err665 != nil {
    return false, thrift.WrapTException(_write_err665)
  }
  return true, err
}

type metaServiceProcessorRemoveListener struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveListener) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err667 error
  args := MetaServiceRemoveListenerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeListener", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRemoveListenerResult{}
  if retval, err2 := p.handler.RemoveListener(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc668 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeListener: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "removeListener", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err667 = thrift.WrapTException(err2)
    }
    if err2 := _exc668.Write(ctx, oprot); _write_err667 == nil && err2 != nil {
      _write_err667 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err667 == nil && err2 != nil {
      _write_err667 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err667 == nil && err2 != nil {
      _write_err667 = thrift.WrapTException(err2)
    }
    if _write_err667 != nil {
      return false, thrift.WrapTException(_write_err667)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "removeListener", thrift.REPLY, seqId); err2 != nil {
    _write_err667 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err667 == nil && err2 != nil {
    _write_err667 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err667 == nil && err2 != nil {
    _write_err667 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err667 == nil && err2 != nil {
    _write_err667 = thrift.WrapTException(err2)
  }
  if _write_err667 != nil {
    return false, thrift.WrapTException(_write_err667)
  }
  return true, err
}

type metaServiceProcessorListListener struct {
  handler MetaService
}

func (p *metaServiceProcessorListListener) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err669 error
  args := MetaServiceListListenerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listListener", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListListenerResult{}
  if retval, err2 := p.handler.ListListener(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc670 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listListener: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listListener", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err669 = thrift.WrapTException(err2)
    }
    if err2 := _exc670.Write(ctx, oprot); _write_err669 == nil && err2 != nil {
      _write_err669 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err669 == nil && err2 != nil {
      _write_err669 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err669 == nil && err2 != nil {
      _write_err669 = thrift.WrapTException(err2)
    }
    if _write_err669 != nil {
      return false, thrift.WrapTException(_write_err669)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listListener", thrift.REPLY, seqId); err2 != nil {
    _write_err669 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err669 == nil && err2 != nil {
    _write_err669 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err669 == nil && err2 != nil {
    _write_err669 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err669 == nil && err2 != nil {
    _write_err669 = thrift.WrapTException(err2)
  }
  if _write_err669 != nil {
    return false, thrift.WrapTException(_write_err669)
  }
  return true, err
}

type metaServiceProcessorGetStats struct {
  handler MetaService
}

func (p *metaServiceProcessorGetStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err671 error
  args := MetaServiceGetStatsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getStats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetStatsResult{}
  if retval, err2 := p.handler.GetStats(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc672 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStats: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getStats", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err671 = thrift.WrapTException(err2)
    }
    if err2 := _exc672.Write(ctx, oprot); _write_err671 == nil && err2 != nil {
      _write_err671 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err671 == nil && err2 != nil {
      _write_err671 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err671 == nil && err2 != nil {
      _write_err671 = thrift.WrapTException(err2)
    }
    if _write_err671 != nil {
      return false, thrift.WrapTException(_write_err671)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getStats", thrift.REPLY, seqId); err2 != nil {
    _write_err671 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err671 == nil && err2 != nil {
    _write_err671 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err671 == nil && err2 != nil {
    _write_err671 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err671 == nil && err2 != nil {
    _write_err671 = thrift.WrapTException(err2)
  }
  if _write_err671 != nil {
    return false, thrift.WrapTException(_write_err671)
  }
  return true, err
}

type metaServiceProcessorSignInService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignInService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err673 error
  args := MetaServiceSignInServiceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "signInService", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceSignInServiceResult{}
  if retval, err2 := p.handler.SignInService(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc674 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signInService: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "signInService", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err673 = thrift.WrapTException(err2)
    }
    if err2 := _exc674.Write(ctx, oprot); _write_err673 == nil && err2 != nil {
      _write_err673 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err673 == nil && err2 != nil {
      _write_err673 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err673 == nil && err2 != nil {
      _write_err673 = thrift.WrapTException(err2)
    }
    if _write_err673 != nil {
      return false, thrift.WrapTException(_write_err673)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "signInService", thrift.REPLY, seqId); err2 != nil {
    _write_err673 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err673 == nil && err2 != nil {
    _write_err673 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err673 == nil && err2 != nil {
    _write_err673 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err673 == nil && err2 != nil {
    _write_err673 = thrift.WrapTException(err2)
  }
  if _write_err673 != nil {
    return false, thrift.WrapTException(_write_err673)
  }
  return true, err
}

type metaServiceProcessorSignOutService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignOutService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err675 error
  args := MetaServiceSignOutServiceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "signOutService", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceSignOutServiceResult{}
  if retval, err2 := p.handler.SignOutService(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc676 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signOutService: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "signOutService", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err675 = thrift.WrapTException(err2)
    }
    if err2 := _exc676.Write(ctx, oprot); _write_err675 == nil && err2 != nil {
      _write_err675 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err675 == nil && err2 != nil {
      _write_err675 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err675 == nil && err2 != nil {
      _write_err675 = thrift.WrapTException(err2)
    }
    if _write_err675 != nil {
      return false, thrift.WrapTException(_write_err675)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "signOutService", thrift.REPLY, seqId); err2 != nil {
    _write_err675 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err675 == nil && err2 != nil {
    _write_err675 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err675 == nil && err2 != nil {
    _write_err675 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err675 == nil && err2 != nil {
    _write_err675 = thrift.WrapTException(err2)
  }
  if _write_err675 != nil {
    return false, thrift.WrapTException(_write_err675)
  }
  return true, err
}

type metaServiceProcessorListServiceClients struct {
  handler MetaService
}

func (p *metaServiceProcessorListServiceClients) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err677 error
  args := MetaServiceListServiceClientsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listServiceClients", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListServiceClientsResult{}
  if retval, err2 := p.handler.ListServiceClients(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc678 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listServiceClients: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listServiceClients", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err677 = thrift.WrapTException(err2)
    }
    if err2 := _exc678.Write(ctx, oprot); _write_err677 == nil && err2 != nil {
      _write_err677 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err677 == nil && err2 != nil {
      _write_err677 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err677 == nil && err2 != nil {
      _write_err677 = thrift.WrapTException(err2)
    }
    if _write_err677 != nil {
      return false, thrift.WrapTException(_write_err677)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listServiceClients", thrift.REPLY, seqId); err2 != nil {
    _write_err677 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err677 == nil && err2 != nil {
    _write_err677 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err677 == nil && err2 != nil {
    _write_err677 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err677 == nil && err2 != nil {
    _write_err677 = thrift.WrapTException(err2)
  }
  if _write_err677 != nil {
    return false, thrift.WrapTException(_write_err677)
  }
  return true, err
}

type metaServiceProcessorCreateFTIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateFTIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err679 error
  args := MetaServiceCreateFTIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createFTIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateFTIndexResult{}
  if retval, err2 := p.handler.CreateFTIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc680 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createFTIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createFTIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err679 = thrift.WrapTException(err2)
    }
    if err2 := _exc680.Write(ctx, oprot); _write_err679 == nil && err2 != nil {
      _write_err679 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err679 == nil && err2 != nil {
      _write_err679 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err679 == nil && err2 != nil {
      _write_err679 = thrift.WrapTException(err2)
    }
    if _write_err679 != nil {
      return false, thrift.WrapTException(_write_err679)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createFTIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err679 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err679 == nil && err2 != nil {
    _write_err679 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err679 == nil && err2 != nil {
    _write_err679 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err679 == nil && err2 != nil {
    _write_err679 = thrift.WrapTException(err2)
  }
  if _write_err679 != nil {
    return false, thrift.WrapTException(_write_err679)
  }
  return true, err
}

type metaServiceProcessorDropFTIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropFTIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err681 error
  args := MetaServiceDropFTIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropFTIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceDropFTIndexResult{}
  if retval, err2 := p.handler.DropFTIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc682 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropFTIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropFTIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err681 = thrift.WrapTException(err2)
    }
    if err2 := _exc682.Write(ctx, oprot); _write_err681 == nil && err2 != nil {
      _write_err681 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err681 == nil && err2 != nil {
      _write_err681 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err681 == nil && err2 != nil {
      _write_err681 = thrift.WrapTException(err2)
    }
    if _write_err681 != nil {
      return false, thrift.WrapTException(_write_err681)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropFTIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err681 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err681 == nil && err2 != nil {
    _write_err681 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err681 == nil && err2 != nil {
    _write_err681 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err681 == nil && err2 != nil {
    _write_err681 = thrift.WrapTException(err2)
  }
  if _write_err681 != nil {
    return false, thrift.WrapTException(_write_err681)
  }
  return true, err
}

type metaServiceProcessorListFTIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListFTIndexes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err683 error
  args := MetaServiceListFTIndexesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listFTIndexes", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListFTIndexesResult{}
  if retval, err2 := p.handler.ListFTIndexes(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc684 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listFTIndexes: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listFTIndexes", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err683 = thrift.WrapTException(err2)
    }
    if err2 := _exc684.Write(ctx, oprot); _write_err683 == nil && err2 != nil {
      _write_err683 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err683 == nil && err2 != nil {
      _write_err683 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err683 == nil && err2 != nil {
      _write_err683 = thrift.WrapTException(err2)
    }
    if _write_err683 != nil {
      return false, thrift.WrapTException(_write_err683)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listFTIndexes", thrift.REPLY, seqId); err2 != nil {
    _write_err683 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err683 == nil && err2 != nil {
    _write_err683 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err683 == nil && err2 != nil {
    _write_err683 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err683 == nil && err2 != nil {
    _write_err683 = thrift.WrapTException(err2)
  }
  if _write_err683 != nil {
    return false, thrift.WrapTException(_write_err683)
  }
  return true, err
}

type metaServiceProcessorCreateSession struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err685 error
  args := MetaServiceCreateSessionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateSessionResult{}
  if retval, err2 := p.handler.CreateSession(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc686 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createSession", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err685 = thrift.WrapTException(err2)
    }
    if err2 := _exc686.Write(ctx, oprot); _write_err685 == nil && err2 != nil {
      _write_err685 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err685 == nil && err2 != nil {
      _write_err685 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err685 == nil && err2 != nil {
      _write_err685 = thrift.WrapTException(err2)
    }
    if _write_err685 != nil {
      return false, thrift.WrapTException(_write_err685)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createSession", thrift.REPLY, seqId); err2 != nil {
    _write_err685 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err685 == nil && err2 != nil {
    _write_err685 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err685 == nil && err2 != nil {
    _write_err685 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err685 == nil && err2 != nil {
    _write_err685 = thrift.WrapTException(err2)
  }
  if _write_err685 != nil {
    return false, thrift.WrapTException(_write_err685)
  }
  return true, err
}

type metaServiceProcessorUpdateSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorUpdateSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err687 error
  args := MetaServiceUpdateSessionsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSessions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceUpdateSessionsResult{}
  if retval, err2 := p.handler.UpdateSessions(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc688 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSessions: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "updateSessions", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err687 = thrift.WrapTException(err2)
    }
    if err2 := _exc688.Write(ctx, oprot); _write_err687 == nil && err2 != nil {
      _write_err687 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err687 == nil && err2 != nil {
      _write_err687 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err687 == nil && err2 != nil {
      _write_err687 = thrift.WrapTException(err2)
    }
    if _write_err687 != nil {
      return false, thrift.WrapTException(_write_err687)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "updateSessions", thrift.REPLY, seqId); err2 != nil {
    _write_err687 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err687 == nil && err2 != nil {
    _write_err687 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err687 == nil && err2 != nil {
    _write_err687 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err687 == nil && err2 != nil {
    _write_err687 = thrift.WrapTException(err2)
  }
  if _write_err687 != nil {
    return false, thrift.WrapTException(_write_err687)
  }
  return true, err
}

type metaServiceProcessorListSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorListSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err689 error
  args := MetaServiceListSessionsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listSessions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListSessionsResult{}
  if retval, err2 := p.handler.ListSessions(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc690 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSessions: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listSessions", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err689 = thrift.WrapTException(err2)
    }
    if err2 := _exc690.Write(ctx, oprot); _write_err689 == nil && err2 != nil {
      _write_err689 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err689 == nil && err2 != nil {
      _write_err689 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err689 == nil && err2 != nil {
      _write_err689 = thrift.WrapTException(err2)
    }
    if _write_err689 != nil {
      return false, thrift.WrapTException(_write_err689)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listSessions", thrift.REPLY, seqId); err2 != nil {
    _write_err689 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err689 == nil && err2 != nil {
    _write_err689 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err689 == nil && err2 != nil {
    _write_err689 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err689 == nil && err2 != nil {
    _write_err689 = thrift.WrapTException(err2)
  }
  if _write_err689 != nil {
    return false, thrift.WrapTException(_write_err689)
  }
  return true, err
}

type metaServiceProcessorGetSession struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err691 error
  args := MetaServiceGetSessionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetSessionResult{}
  if retval, err2 := p.handler.GetSession(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc692 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getSession", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err691 = thrift.WrapTException(err2)
    }
    if err2 := _exc692.Write(ctx, oprot); _write_err691 == nil && err2 != nil {
      _write_err691 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err691 == nil && err2 != nil {
      _write_err691 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err691 == nil && err2 != nil {
      _write_err691 = thrift.WrapTException(err2)
    }
    if _write_err691 != nil {
      return false, thrift.WrapTException(_write_err691)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getSession", thrift.REPLY, seqId); err2 != nil {
    _write_err691 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err691 == nil && err2 != nil {
    _write_err691 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err691 == nil && err2 != nil {
    _write_err691 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err691 == nil && err2 != nil {
    _write_err691 = thrift.WrapTException(err2)
  }
  if _write_err691 != nil {
    return false, thrift.WrapTException(_write_err691)
  }
  return true, err
}

type metaServiceProcessorRemoveSession struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err693 error
  args := MetaServiceRemoveSessionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRemoveSessionResult{}
  if retval, err2 := p.handler.RemoveSession(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc694 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSession: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "removeSession", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err693 = thrift.WrapTException(err2)
    }
    if err2 := _exc694.Write(ctx, oprot); _write_err693 == nil && err2 != nil {
      _write_err693 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err693 == nil && err2 != nil {
      _write_err693 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err693 == nil && err2 != nil {
      _write_err693 = thrift.WrapTException(err2)
    }
    if _write_err693 != nil {
      return false, thrift.WrapTException(_write_err693)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "removeSession", thrift.REPLY, seqId); err2 != nil {
    _write_err693 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err693 == nil && err2 != nil {
    _write_err693 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err693 == nil && err2 != nil {
    _write_err693 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err693 == nil && err2 != nil {
    _write_err693 = thrift.WrapTException(err2)
  }
  if _write_err693 != nil {
    return false, thrift.WrapTException(_write_err693)
  }
  return true, err
}

type metaServiceProcessorKillQuery struct {
  handler MetaService
}

func (p *metaServiceProcessorKillQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err695 error
  args := MetaServiceKillQueryArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "killQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceKillQueryResult{}
  if retval, err2 := p.handler.KillQuery(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc696 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing killQuery: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "killQuery", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err695 = thrift.WrapTException(err2)
    }
    if err2 := _exc696.Write(ctx, oprot); _write_err695 == nil && err2 != nil {
      _write_err695 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err695 == nil && err2 != nil {
      _write_err695 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err695 == nil && err2 != nil {
      _write_err695 = thrift.WrapTException(err2)
    }
    if _write_err695 != nil {
      return false, thrift.WrapTException(_write_err695)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "killQuery", thrift.REPLY, seqId); err2 != nil {
    _write_err695 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err695 == nil && err2 != nil {
    _write_err695 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err695 == nil && err2 != nil {
    _write_err695 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err695 == nil && err2 != nil {
    _write_err695 = thrift.WrapTException(err2)
  }
  if _write_err695 != nil {
    return false, thrift.WrapTException(_write_err695)
  }
  return true, err
}

type metaServiceProcessorReportTaskFinish struct {
  handler MetaService
}

func (p *metaServiceProcessorReportTaskFinish) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err697 error
  args := MetaServiceReportTaskFinishArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reportTaskFinish", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceReportTaskFinishResult{}
  if retval, err2 := p.handler.ReportTaskFinish(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc698 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskFinish: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "reportTaskFinish", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err697 = thrift.WrapTException(err2)
    }
    if err2 := _exc698.Write(ctx, oprot); _write_err697 == nil && err2 != nil {
      _write_err697 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err697 == nil && err2 != nil {
      _write_err697 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err697 == nil && err2 != nil {
      _write_err697 = thrift.WrapTException(err2)
    }
    if _write_err697 != nil {
      return false, thrift.WrapTException(_write_err697)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "reportTaskFinish", thrift.REPLY, seqId); err2 != nil {
    _write_err697 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err697 == nil && err2 != nil {
    _write_err697 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err697 == nil && err2 != nil {
    _write_err697 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err697 == nil && err2 != nil {
    _write_err697 = thrift.WrapTException(err2)
  }
  if _write_err697 != nil {
    return false, thrift.WrapTException(_write_err697)
  }
  return true, err
}

type metaServiceProcessorCreateBackup struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateBackup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err699 error
  args := MetaServiceCreateBackupArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createBackup", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceCreateBackupResult{}
  if retval, err2 := p.handler.CreateBackup(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc700 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createBackup: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createBackup", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err699 = thrift.WrapTException(err2)
    }
    if err2 := _exc700.Write(ctx, oprot); _write_err699 == nil && err2 != nil {
      _write_err699 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err699 == nil && err2 != nil {
      _write_err699 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err699 == nil && err2 != nil {
      _write_err699 = thrift.WrapTException(err2)
    }
    if _write_err699 != nil {
      return false, thrift.WrapTException(_write_err699)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createBackup", thrift.REPLY, seqId); err2 != nil {
    _write_err699 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err699 == nil && err2 != nil {
    _write_err699 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err699 == nil && err2 != nil {
    _write_err699 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err699 == nil && err2 != nil {
    _write_err699 = thrift.WrapTException(err2)
  }
  if _write_err699 != nil {
    return false, thrift.WrapTException(_write_err699)
  }
  return true, err
}

type metaServiceProcessorRestoreMeta struct {
  handler MetaService
}

func (p *metaServiceProcessorRestoreMeta) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err701 error
  args := MetaServiceRestoreMetaArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "restoreMeta", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceRestoreMetaResult{}
  if retval, err2 := p.handler.RestoreMeta(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc702 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restoreMeta: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "restoreMeta", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err701 = thrift.WrapTException(err2)
    }
    if err2 := _exc702.Write(ctx, oprot); _write_err701 == nil && err2 != nil {
      _write_err701 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err701 == nil && err2 != nil {
      _write_err701 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err701 == nil && err2 != nil {
      _write_err701 = thrift.WrapTException(err2)
    }
    if _write_err701 != nil {
      return false, thrift.WrapTException(_write_err701)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "restoreMeta", thrift.REPLY, seqId); err2 != nil {
    _write_err701 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err701 == nil && err2 != nil {
    _write_err701 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err701 == nil && err2 != nil {
    _write_err701 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err701 == nil && err2 != nil {
    _write_err701 = thrift.WrapTException(err2)
  }
  if _write_err701 != nil {
    return false, thrift.WrapTException(_write_err701)
  }
  return true, err
}

type metaServiceProcessorListCluster struct {
  handler MetaService
}

func (p *metaServiceProcessorListCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err703 error
  args := MetaServiceListClusterArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "listCluster", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceListClusterResult{}
  if retval, err2 := p.handler.ListCluster(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc704 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listCluster: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "listCluster", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err703 = thrift.WrapTException(err2)
    }
    if err2 := _exc704.Write(ctx, oprot); _write_err703 == nil && err2 != nil {
      _write_err703 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err703 == nil && err2 != nil {
      _write_err703 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err703 == nil && err2 != nil {
      _write_err703 = thrift.WrapTException(err2)
    }
    if _write_err703 != nil {
      return false, thrift.WrapTException(_write_err703)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "listCluster", thrift.REPLY, seqId); err2 != nil {
    _write_err703 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err703 == nil && err2 != nil {
    _write_err703 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err703 == nil && err2 != nil {
    _write_err703 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err703 == nil && err2 != nil {
    _write_err703 = thrift.WrapTException(err2)
  }
  if _write_err703 != nil {
    return false, thrift.WrapTException(_write_err703)
  }
  return true, err
}

type metaServiceProcessorGetMetaDirInfo struct {
  handler MetaService
}

func (p *metaServiceProcessorGetMetaDirInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err705 error
  args := MetaServiceGetMetaDirInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMetaDirInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetMetaDirInfoResult{}
  if retval, err2 := p.handler.GetMetaDirInfo(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc706 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaDirInfo: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getMetaDirInfo", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err705 = thrift.WrapTException(err2)
    }
    if err2 := _exc706.Write(ctx, oprot); _write_err705 == nil && err2 != nil {
      _write_err705 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err705 == nil && err2 != nil {
      _write_err705 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err705 == nil && err2 != nil {
      _write_err705 = thrift.WrapTException(err2)
    }
    if _write_err705 != nil {
      return false, thrift.WrapTException(_write_err705)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getMetaDirInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err705 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err705 == nil && err2 != nil {
    _write_err705 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err705 == nil && err2 != nil {
    _write_err705 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err705 == nil && err2 != nil {
    _write_err705 = thrift.WrapTException(err2)
  }
  if _write_err705 != nil {
    return false, thrift.WrapTException(_write_err705)
  }
  return true, err
}

type metaServiceProcessorVerifyClientVersion struct {
  handler MetaService
}

func (p *metaServiceProcessorVerifyClientVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err707 error
  args := MetaServiceVerifyClientVersionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceVerifyClientVersionResult{}
  if retval, err2 := p.handler.VerifyClientVersion(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc708 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyClientVersion: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err707 = thrift.WrapTException(err2)
    }
    if err2 := _exc708.Write(ctx, oprot); _write_err707 == nil && err2 != nil {
      _write_err707 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err707 == nil && err2 != nil {
      _write_err707 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err707 == nil && err2 != nil {
      _write_err707 = thrift.WrapTException(err2)
    }
    if _write_err707 != nil {
      return false, thrift.WrapTException(_write_err707)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.REPLY, seqId); err2 != nil {
    _write_err707 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err707 == nil && err2 != nil {
    _write_err707 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err707 == nil && err2 != nil {
    _write_err707 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err707 == nil && err2 != nil {
    _write_err707 = thrift.WrapTException(err2)
  }
  if _write_err707 != nil {
    return false, thrift.WrapTException(_write_err707)
  }
  return true, err
}

type metaServiceProcessorSaveGraphVersion struct {
  handler MetaService
}

func (p *metaServiceProcessorSaveGraphVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err709 error
  args := MetaServiceSaveGraphVersionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "saveGraphVersion", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceSaveGraphVersionResult{}
  if retval, err2 := p.handler.SaveGraphVersion(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc710 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveGraphVersion: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "saveGraphVersion", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err709 = thrift.WrapTException(err2)
    }
    if err2 := _exc710.Write(ctx, oprot); _write_err709 == nil && err2 != nil {
      _write_err709 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err709 == nil && err2 != nil {
      _write_err709 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err709 == nil && err2 != nil {
      _write_err709 = thrift.WrapTException(err2)
    }
    if _write_err709 != nil {
      return false, thrift.WrapTException(_write_err709)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "saveGraphVersion", thrift.REPLY, seqId); err2 != nil {
    _write_err709 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err709 == nil && err2 != nil {
    _write_err709 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err709 == nil && err2 != nil {
    _write_err709 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err709 == nil && err2 != nil {
    _write_err709 = thrift.WrapTException(err2)
  }
  if _write_err709 != nil {
    return false, thrift.WrapTException(_write_err709)
  }
  return true, err
}

type metaServiceProcessorGetSegmentId struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSegmentId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err711 error
  args := MetaServiceGetSegmentIdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSegmentId", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MetaServiceGetSegmentIdResult{}
  if retval, err2 := p.handler.GetSegmentId(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc712 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSegmentId: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getSegmentId", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err711 = thrift.WrapTException(err2)
    }
    if err2 := _exc712.Write(ctx, oprot); _write_err711 == nil && err2 != nil {
      _write_err711 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err711 == nil && err2 != nil {
      _write_err711 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err711 == nil && err2 != nil {
      _write_err711 = thrift.WrapTException(err2)
    }
    if _write_err711 != nil {
      return false, thrift.WrapTException(_write_err711)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getSegmentId", thrift.REPLY, seqId); err2 != nil {
    _write_err711 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err711 == nil && err2 != nil {
    _write_err711 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err711 == nil && err2 != nil {
    _write_err711 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err711 == nil && err2 != nil {
    _write_err711 = thrift.WrapTException(err2)
  }
  if _write_err711 != nil {
    return false, thrift.WrapTException(_write_err711)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type MetaServiceCreateSpaceArgs struct {
  Req *CreateSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceArgs() *MetaServiceCreateSpaceArgs {
  return &MetaServiceCreateSpaceArgs{}
}

var MetaServiceCreateSpaceArgs_Req_DEFAULT *CreateSpaceReq
func (p *MetaServiceCreateSpaceArgs) GetReq() *CreateSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceResult() *MetaServiceCreateSpaceResult {
  return &MetaServiceCreateSpaceResult{}
}

var MetaServiceCreateSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropSpaceArgs struct {
  Req *DropSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSpaceArgs() *MetaServiceDropSpaceArgs {
  return &MetaServiceDropSpaceArgs{}
}

var MetaServiceDropSpaceArgs_Req_DEFAULT *DropSpaceReq
func (p *MetaServiceDropSpaceArgs) GetReq() *DropSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceDropSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSpaceResult() *MetaServiceDropSpaceResult {
  return &MetaServiceDropSpaceResult{}
}

var MetaServiceDropSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceClearSpaceArgs struct {
  Req *ClearSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceClearSpaceArgs() *MetaServiceClearSpaceArgs {
  return &MetaServiceClearSpaceArgs{}
}

var MetaServiceClearSpaceArgs_Req_DEFAULT *ClearSpaceReq
func (p *MetaServiceClearSpaceArgs) GetReq() *ClearSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceClearSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceClearSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceClearSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ClearSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceClearSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceClearSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceClearSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceClearSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceClearSpaceResult() *MetaServiceClearSpaceResult {
  return &MetaServiceClearSpaceResult{}
}

var MetaServiceClearSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceClearSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceClearSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceClearSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceClearSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceClearSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceClearSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceClearSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSpaceArgs struct {
  Req *GetSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSpaceArgs() *MetaServiceGetSpaceArgs {
  return &MetaServiceGetSpaceArgs{}
}

var MetaServiceGetSpaceArgs_Req_DEFAULT *GetSpaceReq
func (p *MetaServiceGetSpaceArgs) GetReq() *GetSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceGetSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSpaceResult struct {
  Success *GetSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSpaceResult() *MetaServiceGetSpaceResult {
  return &MetaServiceGetSpaceResult{}
}

var MetaServiceGetSpaceResult_Success_DEFAULT *GetSpaceResp
func (p *MetaServiceGetSpaceResult) GetSuccess() *GetSpaceResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSpacesArgs struct {
  Req *ListSpacesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSpacesArgs() *MetaServiceListSpacesArgs {
  return &MetaServiceListSpacesArgs{}
}

var MetaServiceListSpacesArgs_Req_DEFAULT *ListSpacesReq
func (p *MetaServiceListSpacesArgs) GetReq() *ListSpacesReq {
  if !p.IsSetReq() {
    return MetaServiceListSpacesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSpacesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSpacesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListSpacesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSpaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSpacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSpacesResult struct {
  Success *ListSpacesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSpacesResult() *MetaServiceListSpacesResult {
  return &MetaServiceListSpacesResult{}
}

var MetaServiceListSpacesResult_Success_DEFAULT *ListSpacesResp
func (p *MetaServiceListSpacesResult) GetSuccess() *ListSpacesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSpacesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSpacesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSpacesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListSpacesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSpaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSpacesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterSpaceArgs struct {
  Req *AlterSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterSpaceArgs() *MetaServiceAlterSpaceArgs {
  return &MetaServiceAlterSpaceArgs{}
}

var MetaServiceAlterSpaceArgs_Req_DEFAULT *AlterSpaceReq
func (p *MetaServiceAlterSpaceArgs) GetReq() *AlterSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceAlterSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AlterSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterSpaceResult() *MetaServiceAlterSpaceResult {
  return &MetaServiceAlterSpaceResult{}
}

var MetaServiceAlterSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateSpaceAsArgs struct {
  Req *CreateSpaceAsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceAsArgs() *MetaServiceCreateSpaceAsArgs {
  return &MetaServiceCreateSpaceAsArgs{}
}

var MetaServiceCreateSpaceAsArgs_Req_DEFAULT *CreateSpaceAsReq
func (p *MetaServiceCreateSpaceAsArgs) GetReq() *CreateSpaceAsReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceAsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceAsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSpaceAsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateSpaceAsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSpaceAs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceAsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceAsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceAsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceAsResult() *MetaServiceCreateSpaceAsResult {
  return &MetaServiceCreateSpaceAsResult{}
}

var MetaServiceCreateSpaceAsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceAsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceAsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceAsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSpaceAsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSpaceAs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceAsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceAsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateTagArgs struct {
  Req *CreateTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagArgs() *MetaServiceCreateTagArgs {
  return &MetaServiceCreateTagArgs{}
}

var MetaServiceCreateTagArgs_Req_DEFAULT *CreateTagReq
func (p *MetaServiceCreateTagArgs) GetReq() *CreateTagReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateTagReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagResult() *MetaServiceCreateTagResult {
  return &MetaServiceCreateTagResult{}
}

var MetaServiceCreateTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterTagArgs struct {
  Req *AlterTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterTagArgs() *MetaServiceAlterTagArgs {
  return &MetaServiceAlterTagArgs{}
}

var MetaServiceAlterTagArgs_Req_DEFAULT *AlterTagReq
func (p *MetaServiceAlterTagArgs) GetReq() *AlterTagReq {
  if !p.IsSetReq() {
    return MetaServiceAlterTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AlterTagReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterTagResult() *MetaServiceAlterTagResult {
  return &MetaServiceAlterTagResult{}
}

var MetaServiceAlterTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropTagArgs struct {
  Req *DropTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagArgs() *MetaServiceDropTagArgs {
  return &MetaServiceDropTagArgs{}
}

var MetaServiceDropTagArgs_Req_DEFAULT *DropTagReq
func (p *MetaServiceDropTagArgs) GetReq() *DropTagReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropTagReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagResult() *MetaServiceDropTagResult {
  return &MetaServiceDropTagResult{}
}

var MetaServiceDropTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetTagArgs struct {
  Req *GetTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagArgs() *MetaServiceGetTagArgs {
  return &MetaServiceGetTagArgs{}
}

var MetaServiceGetTagArgs_Req_DEFAULT *GetTagReq
func (p *MetaServiceGetTagArgs) GetReq() *GetTagReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetTagArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetTagReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetTagResult struct {
  Success *GetTagResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagResult() *MetaServiceGetTagResult {
  return &MetaServiceGetTagResult{}
}

var MetaServiceGetTagResult_Success_DEFAULT *GetTagResp
func (p *MetaServiceGetTagResult) GetSuccess() *GetTagResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetTagResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetTagResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagsArgs struct {
  Req *ListTagsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagsArgs() *MetaServiceListTagsArgs {
  return &MetaServiceListTagsArgs{}
}

var MetaServiceListTagsArgs_Req_DEFAULT *ListTagsReq
func (p *MetaServiceListTagsArgs) GetReq() *ListTagsReq {
  if !p.IsSetReq() {
    return MetaServiceListTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListTagsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagsResult struct {
  Success *ListTagsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagsResult() *MetaServiceListTagsResult {
  return &MetaServiceListTagsResult{}
}

var MetaServiceListTagsResult_Success_DEFAULT *ListTagsResp
func (p *MetaServiceListTagsResult) GetSuccess() *ListTagsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListTagsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeArgs struct {
  Req *CreateEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeArgs() *MetaServiceCreateEdgeArgs {
  return &MetaServiceCreateEdgeArgs{}
}

var MetaServiceCreateEdgeArgs_Req_DEFAULT *CreateEdgeReq
func (p *MetaServiceCreateEdgeArgs) GetReq() *CreateEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateEdgeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeResult() *MetaServiceCreateEdgeResult {
  return &MetaServiceCreateEdgeResult{}
}

var MetaServiceCreateEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterEdgeArgs struct {
  Req *AlterEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterEdgeArgs() *MetaServiceAlterEdgeArgs {
  return &MetaServiceAlterEdgeArgs{}
}

var MetaServiceAlterEdgeArgs_Req_DEFAULT *AlterEdgeReq
func (p *MetaServiceAlterEdgeArgs) GetReq() *AlterEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceAlterEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AlterEdgeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterEdgeResult() *MetaServiceAlterEdgeResult {
  return &MetaServiceAlterEdgeResult{}
}

var MetaServiceAlterEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeArgs struct {
  Req *DropEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeArgs() *MetaServiceDropEdgeArgs {
  return &MetaServiceDropEdgeArgs{}
}

var MetaServiceDropEdgeArgs_Req_DEFAULT *DropEdgeReq
func (p *MetaServiceDropEdgeArgs) GetReq() *DropEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropEdgeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeResult() *MetaServiceDropEdgeResult {
  return &MetaServiceDropEdgeResult{}
}

var MetaServiceDropEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeArgs struct {
  Req *GetEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeArgs() *MetaServiceGetEdgeArgs {
  return &MetaServiceGetEdgeArgs{}
}

var MetaServiceGetEdgeArgs_Req_DEFAULT *GetEdgeReq
func (p *MetaServiceGetEdgeArgs) GetReq() *GetEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetEdgeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeResult struct {
  Success *GetEdgeResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeResult() *MetaServiceGetEdgeResult {
  return &MetaServiceGetEdgeResult{}
}

var MetaServiceGetEdgeResult_Success_DEFAULT *GetEdgeResp
func (p *MetaServiceGetEdgeResult) GetSuccess() *GetEdgeResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetEdgeResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgesArgs struct {
  Req *ListEdgesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgesArgs() *MetaServiceListEdgesArgs {
  return &MetaServiceListEdgesArgs{}
}

var MetaServiceListEdgesArgs_Req_DEFAULT *ListEdgesReq
func (p *MetaServiceListEdgesArgs) GetReq() *ListEdgesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListEdgesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgesResult struct {
  Success *ListEdgesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgesResult() *MetaServiceListEdgesResult {
  return &MetaServiceListEdgesResult{}
}

var MetaServiceListEdgesResult_Success_DEFAULT *ListEdgesResp
func (p *MetaServiceListEdgesResult) GetSuccess() *ListEdgesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListEdgesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddHostsArgs struct {
  Req *AddHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostsArgs() *MetaServiceAddHostsArgs {
  return &MetaServiceAddHostsArgs{}
}

var MetaServiceAddHostsArgs_Req_DEFAULT *AddHostsReq
func (p *MetaServiceAddHostsArgs) GetReq() *AddHostsReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddHostsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddHostsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddHostsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostsResult() *MetaServiceAddHostsResult {
  return &MetaServiceAddHostsResult{}
}

var MetaServiceAddHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddHostsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddHostsIntoZoneArgs struct {
  Req *AddHostsIntoZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostsIntoZoneArgs() *MetaServiceAddHostsIntoZoneArgs {
  return &MetaServiceAddHostsIntoZoneArgs{}
}

var MetaServiceAddHostsIntoZoneArgs_Req_DEFAULT *AddHostsIntoZoneReq
func (p *MetaServiceAddHostsIntoZoneArgs) GetReq() *AddHostsIntoZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostsIntoZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostsIntoZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddHostsIntoZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddHostsIntoZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addHostsIntoZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostsIntoZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsIntoZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddHostsIntoZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostsIntoZoneResult() *MetaServiceAddHostsIntoZoneResult {
  return &MetaServiceAddHostsIntoZoneResult{}
}

var MetaServiceAddHostsIntoZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostsIntoZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostsIntoZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostsIntoZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddHostsIntoZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addHostsIntoZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostsIntoZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostsIntoZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropHostsArgs struct {
  Req *DropHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropHostsArgs() *MetaServiceDropHostsArgs {
  return &MetaServiceDropHostsArgs{}
}

var MetaServiceDropHostsArgs_Req_DEFAULT *DropHostsReq
func (p *MetaServiceDropHostsArgs) GetReq() *DropHostsReq {
  if !p.IsSetReq() {
    return MetaServiceDropHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropHostsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropHostsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropHostsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropHostsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropHostsResult() *MetaServiceDropHostsResult {
  return &MetaServiceDropHostsResult{}
}

var MetaServiceDropHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropHostsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropHostsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListHostsArgs struct {
  Req *ListHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListHostsArgs() *MetaServiceListHostsArgs {
  return &MetaServiceListHostsArgs{}
}

var MetaServiceListHostsArgs_Req_DEFAULT *ListHostsReq
func (p *MetaServiceListHostsArgs) GetReq() *ListHostsReq {
  if !p.IsSetReq() {
    return MetaServiceListHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListHostsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListHostsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListHostsResult struct {
  Success *ListHostsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListHostsResult() *MetaServiceListHostsResult {
  return &MetaServiceListHostsResult{}
}

var MetaServiceListHostsResult_Success_DEFAULT *ListHostsResp
func (p *MetaServiceListHostsResult) GetSuccess() *ListHostsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListHostsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListHostsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetPartsAllocArgs struct {
  Req *GetPartsAllocReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetPartsAllocArgs() *MetaServiceGetPartsAllocArgs {
  return &MetaServiceGetPartsAllocArgs{}
}

var MetaServiceGetPartsAllocArgs_Req_DEFAULT *GetPartsAllocReq
func (p *MetaServiceGetPartsAllocArgs) GetReq() *GetPartsAllocReq {
  if !p.IsSetReq() {
    return MetaServiceGetPartsAllocArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetPartsAllocArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetPartsAllocArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetPartsAllocReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPartsAlloc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetPartsAllocArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetPartsAllocResult struct {
  Success *GetPartsAllocResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetPartsAllocResult() *MetaServiceGetPartsAllocResult {
  return &MetaServiceGetPartsAllocResult{}
}

var MetaServiceGetPartsAllocResult_Success_DEFAULT *GetPartsAllocResp
func (p *MetaServiceGetPartsAllocResult) GetSuccess() *GetPartsAllocResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetPartsAllocResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetPartsAllocResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetPartsAllocResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetPartsAllocResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPartsAlloc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetPartsAllocResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListPartsArgs struct {
  Req *ListPartsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListPartsArgs() *MetaServiceListPartsArgs {
  return &MetaServiceListPartsArgs{}
}

var MetaServiceListPartsArgs_Req_DEFAULT *ListPartsReq
func (p *MetaServiceListPartsArgs) GetReq() *ListPartsReq {
  if !p.IsSetReq() {
    return MetaServiceListPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListPartsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListPartsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListPartsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListPartsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListPartsResult struct {
  Success *ListPartsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListPartsResult() *MetaServiceListPartsResult {
  return &MetaServiceListPartsResult{}
}

var MetaServiceListPartsResult_Success_DEFAULT *ListPartsResp
func (p *MetaServiceListPartsResult) GetSuccess() *ListPartsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListPartsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListPartsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListPartsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListPartsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetWorkerIdArgs struct {
  Req *GetWorkerIdReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetWorkerIdArgs() *MetaServiceGetWorkerIdArgs {
  return &MetaServiceGetWorkerIdArgs{}
}

var MetaServiceGetWorkerIdArgs_Req_DEFAULT *GetWorkerIdReq
func (p *MetaServiceGetWorkerIdArgs) GetReq() *GetWorkerIdReq {
  if !p.IsSetReq() {
    return MetaServiceGetWorkerIdArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetWorkerIdArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetWorkerIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetWorkerIdReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getWorkerId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetWorkerIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetWorkerIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetWorkerIdResult struct {
  Success *GetWorkerIdResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetWorkerIdResult() *MetaServiceGetWorkerIdResult {
  return &MetaServiceGetWorkerIdResult{}
}

var MetaServiceGetWorkerIdResult_Success_DEFAULT *GetWorkerIdResp
func (p *MetaServiceGetWorkerIdResult) GetSuccess() *GetWorkerIdResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetWorkerIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetWorkerIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetWorkerIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetWorkerIdResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getWorkerId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetWorkerIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetWorkerIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetWorkerIdResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateTagIndexArgs struct {
  Req *CreateTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagIndexArgs() *MetaServiceCreateTagIndexArgs {
  return &MetaServiceCreateTagIndexArgs{}
}

var MetaServiceCreateTagIndexArgs_Req_DEFAULT *CreateTagIndexReq
func (p *MetaServiceCreateTagIndexArgs) GetReq() *CreateTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateTagIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateTagIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagIndexResult() *MetaServiceCreateTagIndexResult {
  return &MetaServiceCreateTagIndexResult{}
}

var MetaServiceCreateTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateTagIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropTagIndexArgs struct {
  Req *DropTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagIndexArgs() *MetaServiceDropTagIndexArgs {
  return &MetaServiceDropTagIndexArgs{}
}

var MetaServiceDropTagIndexArgs_Req_DEFAULT *DropTagIndexReq
func (p *MetaServiceDropTagIndexArgs) GetReq() *DropTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropTagIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropTagIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagIndexResult() *MetaServiceDropTagIndexResult {
  return &MetaServiceDropTagIndexResult{}
}

var MetaServiceDropTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropTagIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetTagIndexArgs struct {
  Req *GetTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagIndexArgs() *MetaServiceGetTagIndexArgs {
  return &MetaServiceGetTagIndexArgs{}
}

var MetaServiceGetTagIndexArgs_Req_DEFAULT *GetTagIndexReq
func (p *MetaServiceGetTagIndexArgs) GetReq() *GetTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetTagIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetTagIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetTagIndexResult struct {
  Success *GetTagIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagIndexResult() *MetaServiceGetTagIndexResult {
  return &MetaServiceGetTagIndexResult{}
}

var MetaServiceGetTagIndexResult_Success_DEFAULT *GetTagIndexResp
func (p *MetaServiceGetTagIndexResult) GetSuccess() *GetTagIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetTagIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetTagIndexResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexesArgs struct {
  Req *ListTagIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexesArgs() *MetaServiceListTagIndexesArgs {
  return &MetaServiceListTagIndexesArgs{}
}

var MetaServiceListTagIndexesArgs_Req_DEFAULT *ListTagIndexesReq
func (p *MetaServiceListTagIndexesArgs) GetReq() *ListTagIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagIndexesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListTagIndexesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTagIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexesResult struct {
  Success *ListTagIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexesResult() *MetaServiceListTagIndexesResult {
  return &MetaServiceListTagIndexesResult{}
}

var MetaServiceListTagIndexesResult_Success_DEFAULT *ListTagIndexesResp
func (p *MetaServiceListTagIndexesResult) GetSuccess() *ListTagIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagIndexesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListTagIndexesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTagIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRebuildTagIndexArgs struct {
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildTagIndexArgs() *MetaServiceRebuildTagIndexArgs {
  return &MetaServiceRebuildTagIndexArgs{}
}

var MetaServiceRebuildTagIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildTagIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRebuildTagIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RebuildIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rebuildTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRebuildTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildTagIndexResult() *MetaServiceRebuildTagIndexResult {
  return &MetaServiceRebuildTagIndexResult{}
}

var MetaServiceRebuildTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRebuildTagIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rebuildTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexStatusArgs struct {
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexStatusArgs() *MetaServiceListTagIndexStatusArgs {
  return &MetaServiceListTagIndexStatusArgs{}
}

var MetaServiceListTagIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListTagIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagIndexStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListIndexStatusReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTagIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexStatusResult struct {
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexStatusResult() *MetaServiceListTagIndexStatusResult {
  return &MetaServiceListTagIndexStatusResult{}
}

var MetaServiceListTagIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListTagIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagIndexStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListIndexStatusResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listTagIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeIndexArgs struct {
  Req *CreateEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeIndexArgs() *MetaServiceCreateEdgeIndexArgs {
  return &MetaServiceCreateEdgeIndexArgs{}
}

var MetaServiceCreateEdgeIndexArgs_Req_DEFAULT *CreateEdgeIndexReq
func (p *MetaServiceCreateEdgeIndexArgs) GetReq() *CreateEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateEdgeIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeIndexResult() *MetaServiceCreateEdgeIndexResult {
  return &MetaServiceCreateEdgeIndexResult{}
}

var MetaServiceCreateEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateEdgeIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeIndexArgs struct {
  Req *DropEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeIndexArgs() *MetaServiceDropEdgeIndexArgs {
  return &MetaServiceDropEdgeIndexArgs{}
}

var MetaServiceDropEdgeIndexArgs_Req_DEFAULT *DropEdgeIndexReq
func (p *MetaServiceDropEdgeIndexArgs) GetReq() *DropEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropEdgeIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropEdgeIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeIndexResult() *MetaServiceDropEdgeIndexResult {
  return &MetaServiceDropEdgeIndexResult{}
}

var MetaServiceDropEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropEdgeIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeIndexArgs struct {
  Req *GetEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeIndexArgs() *MetaServiceGetEdgeIndexArgs {
  return &MetaServiceGetEdgeIndexArgs{}
}

var MetaServiceGetEdgeIndexArgs_Req_DEFAULT *GetEdgeIndexReq
func (p *MetaServiceGetEdgeIndexArgs) GetReq() *GetEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetEdgeIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetEdgeIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeIndexResult struct {
  Success *GetEdgeIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeIndexResult() *MetaServiceGetEdgeIndexResult {
  return &MetaServiceGetEdgeIndexResult{}
}

var MetaServiceGetEdgeIndexResult_Success_DEFAULT *GetEdgeIndexResp
func (p *MetaServiceGetEdgeIndexResult) GetSuccess() *GetEdgeIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetEdgeIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetEdgeIndexResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexesArgs struct {
  Req *ListEdgeIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexesArgs() *MetaServiceListEdgeIndexesArgs {
  return &MetaServiceListEdgeIndexesArgs{}
}

var MetaServiceListEdgeIndexesArgs_Req_DEFAULT *ListEdgeIndexesReq
func (p *MetaServiceListEdgeIndexesArgs) GetReq() *ListEdgeIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgeIndexesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListEdgeIndexesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdgeIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexesResult struct {
  Success *ListEdgeIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexesResult() *MetaServiceListEdgeIndexesResult {
  return &MetaServiceListEdgeIndexesResult{}
}

var MetaServiceListEdgeIndexesResult_Success_DEFAULT *ListEdgeIndexesResp
func (p *MetaServiceListEdgeIndexesResult) GetSuccess() *ListEdgeIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgeIndexesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListEdgeIndexesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdgeIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRebuildEdgeIndexArgs struct {
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildEdgeIndexArgs() *MetaServiceRebuildEdgeIndexArgs {
  return &MetaServiceRebuildEdgeIndexArgs{}
}

var MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildEdgeIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RebuildIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rebuildEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRebuildEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildEdgeIndexResult() *MetaServiceRebuildEdgeIndexResult {
  return &MetaServiceRebuildEdgeIndexResult{}
}

var MetaServiceRebuildEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rebuildEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexStatusArgs struct {
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexStatusArgs() *MetaServiceListEdgeIndexStatusArgs {
  return &MetaServiceListEdgeIndexStatusArgs{}
}

var MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListEdgeIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListIndexStatusReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdgeIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexStatusResult struct {
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexStatusResult() *MetaServiceListEdgeIndexStatusResult {
  return &MetaServiceListEdgeIndexStatusResult{}
}

var MetaServiceListEdgeIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListEdgeIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListIndexStatusResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listEdgeIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateUserArgs struct {
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateUserArgs() *MetaServiceCreateUserArgs {
  return &MetaServiceCreateUserArgs{}
}

var MetaServiceCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *MetaServiceCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return MetaServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateUserReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateUserResult() *MetaServiceCreateUserResult {
  return &MetaServiceCreateUserResult{}
}

var MetaServiceCreateUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropUserArgs struct {
  Req *DropUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropUserArgs() *MetaServiceDropUserArgs {
  return &MetaServiceDropUserArgs{}
}

var MetaServiceDropUserArgs_Req_DEFAULT *DropUserReq
func (p *MetaServiceDropUserArgs) GetReq() *DropUserReq {
  if !p.IsSetReq() {
    return MetaServiceDropUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropUserReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropUserResult() *MetaServiceDropUserResult {
  return &MetaServiceDropUserResult{}
}

var MetaServiceDropUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterUserArgs struct {
  Req *AlterUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterUserArgs() *MetaServiceAlterUserArgs {
  return &MetaServiceAlterUserArgs{}
}

var MetaServiceAlterUserArgs_Req_DEFAULT *AlterUserReq
func (p *MetaServiceAlterUserArgs) GetReq() *AlterUserReq {
  if !p.IsSetReq() {
    return MetaServiceAlterUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AlterUserReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterUserResult() *MetaServiceAlterUserResult {
  return &MetaServiceAlterUserResult{}
}

var MetaServiceAlterUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "alterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGrantRoleArgs struct {
  Req *GrantRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGrantRoleArgs() *MetaServiceGrantRoleArgs {
  return &MetaServiceGrantRoleArgs{}
}

var MetaServiceGrantRoleArgs_Req_DEFAULT *GrantRoleReq
func (p *MetaServiceGrantRoleArgs) GetReq() *GrantRoleReq {
  if !p.IsSetReq() {
    return MetaServiceGrantRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGrantRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGrantRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GrantRoleReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grantRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGrantRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGrantRoleResult() *MetaServiceGrantRoleResult {
  return &MetaServiceGrantRoleResult{}
}

var MetaServiceGrantRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceGrantRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceGrantRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGrantRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGrantRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "grantRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRevokeRoleArgs struct {
  Req *RevokeRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRevokeRoleArgs() *MetaServiceRevokeRoleArgs {
  return &MetaServiceRevokeRoleArgs{}
}

var MetaServiceRevokeRoleArgs_Req_DEFAULT *RevokeRoleReq
func (p *MetaServiceRevokeRoleArgs) GetReq() *RevokeRoleReq {
  if !p.IsSetReq() {
    return MetaServiceRevokeRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRevokeRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRevokeRoleArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RevokeRoleReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revokeRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRevokeRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRevokeRoleResult() *MetaServiceRevokeRoleResult {
  return &MetaServiceRevokeRoleResult{}
}

var MetaServiceRevokeRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRevokeRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRevokeRoleResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "revokeRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListUsersArgs struct {
  Req *ListUsersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListUsersArgs() *MetaServiceListUsersArgs {
  return &MetaServiceListUsersArgs{}
}

var MetaServiceListUsersArgs_Req_DEFAULT *ListUsersReq
func (p *MetaServiceListUsersArgs) GetReq() *ListUsersReq {
  if !p.IsSetReq() {
    return MetaServiceListUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListUsersArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListUsersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListUsersReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListUsersResult struct {
  Success *ListUsersResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListUsersResult() *MetaServiceListUsersResult {
  return &MetaServiceListUsersResult{}
}

var MetaServiceListUsersResult_Success_DEFAULT *ListUsersResp
func (p *MetaServiceListUsersResult) GetSuccess() *ListUsersResp {
  if !p.IsSetSuccess() {
    return MetaServiceListUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListUsersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListUsersResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListRolesArgs struct {
  Req *ListRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListRolesArgs() *MetaServiceListRolesArgs {
  return &MetaServiceListRolesArgs{}
}

var MetaServiceListRolesArgs_Req_DEFAULT *ListRolesReq
func (p *MetaServiceListRolesArgs) GetReq() *ListRolesReq {
  if !p.IsSetReq() {
    return MetaServiceListRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListRolesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListRolesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListRolesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListRolesResult struct {
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListRolesResult() *MetaServiceListRolesResult {
  return &MetaServiceListRolesResult{}
}

var MetaServiceListRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceListRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListRolesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListRolesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetUserRolesArgs struct {
  Req *GetUserRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetUserRolesArgs() *MetaServiceGetUserRolesArgs {
  return &MetaServiceGetUserRolesArgs{}
}

var MetaServiceGetUserRolesArgs_Req_DEFAULT *GetUserRolesReq
func (p *MetaServiceGetUserRolesArgs) GetReq() *GetUserRolesReq {
  if !p.IsSetReq() {
    return MetaServiceGetUserRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetUserRolesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetUserRolesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetUserRolesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUserRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetUserRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetUserRolesResult struct {
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetUserRolesResult() *MetaServiceGetUserRolesResult {
  return &MetaServiceGetUserRolesResult{}
}

var MetaServiceGetUserRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceGetUserRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetUserRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetUserRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetUserRolesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListRolesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUserRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetUserRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserRolesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceChangePasswordArgs struct {
  Req *ChangePasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceChangePasswordArgs() *MetaServiceChangePasswordArgs {
  return &MetaServiceChangePasswordArgs{}
}

var MetaServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq
func (p *MetaServiceChangePasswordArgs) GetReq() *ChangePasswordReq {
  if !p.IsSetReq() {
    return MetaServiceChangePasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceChangePasswordArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceChangePasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ChangePasswordReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceChangePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceChangePasswordResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceChangePasswordResult() *MetaServiceChangePasswordResult {
  return &MetaServiceChangePasswordResult{}
}

var MetaServiceChangePasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceChangePasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceChangePasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceChangePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceChangePasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceChangePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceHeartBeatArgs struct {
  Req *HBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceHeartBeatArgs() *MetaServiceHeartBeatArgs {
  return &MetaServiceHeartBeatArgs{}
}

var MetaServiceHeartBeatArgs_Req_DEFAULT *HBReq
func (p *MetaServiceHeartBeatArgs) GetReq() *HBReq {
  if !p.IsSetReq() {
    return MetaServiceHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceHeartBeatArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceHeartBeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &HBReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceHeartBeatResult struct {
  Success *HBResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceHeartBeatResult() *MetaServiceHeartBeatResult {
  return &MetaServiceHeartBeatResult{}
}

var MetaServiceHeartBeatResult_Success_DEFAULT *HBResp
func (p *MetaServiceHeartBeatResult) GetSuccess() *HBResp {
  if !p.IsSetSuccess() {
    return MetaServiceHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceHeartBeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &HBResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "heartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAgentHeartbeatArgs struct {
  Req *AgentHBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAgentHeartbeatArgs() *MetaServiceAgentHeartbeatArgs {
  return &MetaServiceAgentHeartbeatArgs{}
}

var MetaServiceAgentHeartbeatArgs_Req_DEFAULT *AgentHBReq
func (p *MetaServiceAgentHeartbeatArgs) GetReq() *AgentHBReq {
  if !p.IsSetReq() {
    return MetaServiceAgentHeartbeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAgentHeartbeatArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAgentHeartbeatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AgentHBReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "agentHeartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAgentHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAgentHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAgentHeartbeatResult struct {
  Success *AgentHBResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAgentHeartbeatResult() *MetaServiceAgentHeartbeatResult {
  return &MetaServiceAgentHeartbeatResult{}
}

var MetaServiceAgentHeartbeatResult_Success_DEFAULT *AgentHBResp
func (p *MetaServiceAgentHeartbeatResult) GetSuccess() *AgentHBResp {
  if !p.IsSetSuccess() {
    return MetaServiceAgentHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAgentHeartbeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAgentHeartbeatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AgentHBResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "agentHeartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAgentHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAgentHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRegConfigArgs struct {
  Req *RegConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRegConfigArgs() *MetaServiceRegConfigArgs {
  return &MetaServiceRegConfigArgs{}
}

var MetaServiceRegConfigArgs_Req_DEFAULT *RegConfigReq
func (p *MetaServiceRegConfigArgs) GetReq() *RegConfigReq {
  if !p.IsSetReq() {
    return MetaServiceRegConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRegConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRegConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RegConfigReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "regConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRegConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRegConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRegConfigResult() *MetaServiceRegConfigResult {
  return &MetaServiceRegConfigResult{}
}

var MetaServiceRegConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRegConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRegConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRegConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRegConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "regConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRegConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetConfigArgs struct {
  Req *GetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetConfigArgs() *MetaServiceGetConfigArgs {
  return &MetaServiceGetConfigArgs{}
}

var MetaServiceGetConfigArgs_Req_DEFAULT *GetConfigReq
func (p *MetaServiceGetConfigArgs) GetReq() *GetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceGetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetConfigReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetConfigResult struct {
  Success *GetConfigResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetConfigResult() *MetaServiceGetConfigResult {
  return &MetaServiceGetConfigResult{}
}

var MetaServiceGetConfigResult_Success_DEFAULT *GetConfigResp
func (p *MetaServiceGetConfigResult) GetSuccess() *GetConfigResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetConfigResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSetConfigArgs struct {
  Req *SetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSetConfigArgs() *MetaServiceSetConfigArgs {
  return &MetaServiceSetConfigArgs{}
}

var MetaServiceSetConfigArgs_Req_DEFAULT *SetConfigReq
func (p *MetaServiceSetConfigArgs) GetReq() *SetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceSetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSetConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SetConfigReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSetConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSetConfigResult() *MetaServiceSetConfigResult {
  return &MetaServiceSetConfigResult{}
}

var MetaServiceSetConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSetConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSetConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListConfigsArgs struct {
  Req *ListConfigsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListConfigsArgs() *MetaServiceListConfigsArgs {
  return &MetaServiceListConfigsArgs{}
}

var MetaServiceListConfigsArgs_Req_DEFAULT *ListConfigsReq
func (p *MetaServiceListConfigsArgs) GetReq() *ListConfigsReq {
  if !p.IsSetReq() {
    return MetaServiceListConfigsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListConfigsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListConfigsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListConfigsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listConfigs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListConfigsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListConfigsResult struct {
  Success *ListConfigsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListConfigsResult() *MetaServiceListConfigsResult {
  return &MetaServiceListConfigsResult{}
}

var MetaServiceListConfigsResult_Success_DEFAULT *ListConfigsResp
func (p *MetaServiceListConfigsResult) GetSuccess() *ListConfigsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListConfigsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListConfigsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListConfigsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListConfigsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listConfigs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListConfigsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateSnapshotArgs struct {
  Req *CreateSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSnapshotArgs() *MetaServiceCreateSnapshotArgs {
  return &MetaServiceCreateSnapshotArgs{}
}

var MetaServiceCreateSnapshotArgs_Req_DEFAULT *CreateSnapshotReq
func (p *MetaServiceCreateSnapshotArgs) GetReq() *CreateSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSnapshotArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSnapshotArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateSnapshotReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSnapshotResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSnapshotResult() *MetaServiceCreateSnapshotResult {
  return &MetaServiceCreateSnapshotResult{}
}

var MetaServiceCreateSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSnapshotResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropSnapshotArgs struct {
  Req *DropSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSnapshotArgs() *MetaServiceDropSnapshotArgs {
  return &MetaServiceDropSnapshotArgs{}
}

var MetaServiceDropSnapshotArgs_Req_DEFAULT *DropSnapshotReq
func (p *MetaServiceDropSnapshotArgs) GetReq() *DropSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceDropSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSnapshotArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropSnapshotArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropSnapshotReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropSnapshotResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSnapshotResult() *MetaServiceDropSnapshotResult {
  return &MetaServiceDropSnapshotResult{}
}

var MetaServiceDropSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropSnapshotResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSnapshotsArgs struct {
  Req *ListSnapshotsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSnapshotsArgs() *MetaServiceListSnapshotsArgs {
  return &MetaServiceListSnapshotsArgs{}
}

var MetaServiceListSnapshotsArgs_Req_DEFAULT *ListSnapshotsReq
func (p *MetaServiceListSnapshotsArgs) GetReq() *ListSnapshotsReq {
  if !p.IsSetReq() {
    return MetaServiceListSnapshotsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSnapshotsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSnapshotsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListSnapshotsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSnapshots_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSnapshotsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSnapshotsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSnapshotsResult struct {
  Success *ListSnapshotsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSnapshotsResult() *MetaServiceListSnapshotsResult {
  return &MetaServiceListSnapshotsResult{}
}

var MetaServiceListSnapshotsResult_Success_DEFAULT *ListSnapshotsResp
func (p *MetaServiceListSnapshotsResult) GetSuccess() *ListSnapshotsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSnapshotsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSnapshotsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSnapshotsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListSnapshotsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSnapshots_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSnapshotsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSnapshotsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRunAdminJobArgs struct {
  Req *AdminJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRunAdminJobArgs() *MetaServiceRunAdminJobArgs {
  return &MetaServiceRunAdminJobArgs{}
}

var MetaServiceRunAdminJobArgs_Req_DEFAULT *AdminJobReq
func (p *MetaServiceRunAdminJobArgs) GetReq() *AdminJobReq {
  if !p.IsSetReq() {
    return MetaServiceRunAdminJobArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRunAdminJobArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRunAdminJobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AdminJobReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "runAdminJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRunAdminJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRunAdminJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRunAdminJobResult struct {
  Success *AdminJobResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRunAdminJobResult() *MetaServiceRunAdminJobResult {
  return &MetaServiceRunAdminJobResult{}
}

var MetaServiceRunAdminJobResult_Success_DEFAULT *AdminJobResp
func (p *MetaServiceRunAdminJobResult) GetSuccess() *AdminJobResp {
  if !p.IsSetSuccess() {
    return MetaServiceRunAdminJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRunAdminJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRunAdminJobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminJobResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "runAdminJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRunAdminJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRunAdminJobResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceMergeZoneArgs struct {
  Req *MergeZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMergeZoneArgs() *MetaServiceMergeZoneArgs {
  return &MetaServiceMergeZoneArgs{}
}

var MetaServiceMergeZoneArgs_Req_DEFAULT *MergeZoneReq
func (p *MetaServiceMergeZoneArgs) GetReq() *MergeZoneReq {
  if !p.IsSetReq() {
    return MetaServiceMergeZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMergeZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceMergeZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &MergeZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mergeZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMergeZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMergeZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMergeZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceMergeZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMergeZoneResult() *MetaServiceMergeZoneResult {
  return &MetaServiceMergeZoneResult{}
}

var MetaServiceMergeZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceMergeZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceMergeZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMergeZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceMergeZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "mergeZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMergeZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMergeZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMergeZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropZoneArgs struct {
  Req *DropZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneArgs() *MetaServiceDropZoneArgs {
  return &MetaServiceDropZoneArgs{}
}

var MetaServiceDropZoneArgs_Req_DEFAULT *DropZoneReq
func (p *MetaServiceDropZoneArgs) GetReq() *DropZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneResult() *MetaServiceDropZoneResult {
  return &MetaServiceDropZoneResult{}
}

var MetaServiceDropZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDivideZoneArgs struct {
  Req *DivideZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDivideZoneArgs() *MetaServiceDivideZoneArgs {
  return &MetaServiceDivideZoneArgs{}
}

var MetaServiceDivideZoneArgs_Req_DEFAULT *DivideZoneReq
func (p *MetaServiceDivideZoneArgs) GetReq() *DivideZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDivideZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDivideZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDivideZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DivideZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "divideZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDivideZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDivideZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDivideZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDivideZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDivideZoneResult() *MetaServiceDivideZoneResult {
  return &MetaServiceDivideZoneResult{}
}

var MetaServiceDivideZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDivideZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDivideZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDivideZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDivideZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "divideZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDivideZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDivideZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDivideZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRenameZoneArgs struct {
  Req *RenameZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRenameZoneArgs() *MetaServiceRenameZoneArgs {
  return &MetaServiceRenameZoneArgs{}
}

var MetaServiceRenameZoneArgs_Req_DEFAULT *RenameZoneReq
func (p *MetaServiceRenameZoneArgs) GetReq() *RenameZoneReq {
  if !p.IsSetReq() {
    return MetaServiceRenameZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRenameZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRenameZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RenameZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "renameZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRenameZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRenameZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRenameZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRenameZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRenameZoneResult() *MetaServiceRenameZoneResult {
  return &MetaServiceRenameZoneResult{}
}

var MetaServiceRenameZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRenameZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRenameZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRenameZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRenameZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "renameZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRenameZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRenameZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRenameZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetZoneArgs struct {
  Req *GetZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetZoneArgs() *MetaServiceGetZoneArgs {
  return &MetaServiceGetZoneArgs{}
}

var MetaServiceGetZoneArgs_Req_DEFAULT *GetZoneReq
func (p *MetaServiceGetZoneArgs) GetReq() *GetZoneReq {
  if !p.IsSetReq() {
    return MetaServiceGetZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetZoneArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetZoneReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetZoneResult struct {
  Success *GetZoneResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetZoneResult() *MetaServiceGetZoneResult {
  return &MetaServiceGetZoneResult{}
}

var MetaServiceGetZoneResult_Success_DEFAULT *GetZoneResp
func (p *MetaServiceGetZoneResult) GetSuccess() *GetZoneResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetZoneResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetZoneResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListZonesArgs struct {
  Req *ListZonesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListZonesArgs() *MetaServiceListZonesArgs {
  return &MetaServiceListZonesArgs{}
}

var MetaServiceListZonesArgs_Req_DEFAULT *ListZonesReq
func (p *MetaServiceListZonesArgs) GetReq() *ListZonesReq {
  if !p.IsSetReq() {
    return MetaServiceListZonesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListZonesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListZonesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListZonesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listZones_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListZonesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListZonesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListZonesResult struct {
  Success *ListZonesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListZonesResult() *MetaServiceListZonesResult {
  return &MetaServiceListZonesResult{}
}

var MetaServiceListZonesResult_Success_DEFAULT *ListZonesResp
func (p *MetaServiceListZonesResult) GetSuccess() *ListZonesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListZonesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListZonesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListZonesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListZonesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listZones_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListZonesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListZonesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddListenerArgs struct {
  Req *AddListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddListenerArgs() *MetaServiceAddListenerArgs {
  return &MetaServiceAddListenerArgs{}
}

var MetaServiceAddListenerArgs_Req_DEFAULT *AddListenerReq
func (p *MetaServiceAddListenerArgs) GetReq() *AddListenerReq {
  if !p.IsSetReq() {
    return MetaServiceAddListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddListenerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddListenerReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddListenerResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddListenerResult() *MetaServiceAddListenerResult {
  return &MetaServiceAddListenerResult{}
}

var MetaServiceAddListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddListenerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveListenerArgs struct {
  Req *RemoveListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveListenerArgs() *MetaServiceRemoveListenerArgs {
  return &MetaServiceRemoveListenerArgs{}
}

var MetaServiceRemoveListenerArgs_Req_DEFAULT *RemoveListenerReq
func (p *MetaServiceRemoveListenerArgs) GetReq() *RemoveListenerReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveListenerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RemoveListenerReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveListenerResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveListenerResult() *MetaServiceRemoveListenerResult {
  return &MetaServiceRemoveListenerResult{}
}

var MetaServiceRemoveListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveListenerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListListenerArgs struct {
  Req *ListListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListListenerArgs() *MetaServiceListListenerArgs {
  return &MetaServiceListListenerArgs{}
}

var MetaServiceListListenerArgs_Req_DEFAULT *ListListenerReq
func (p *MetaServiceListListenerArgs) GetReq() *ListListenerReq {
  if !p.IsSetReq() {
    return MetaServiceListListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListListenerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListListenerReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListListenerResult struct {
  Success *ListListenerResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListListenerResult() *MetaServiceListListenerResult {
  return &MetaServiceListListenerResult{}
}

var MetaServiceListListenerResult_Success_DEFAULT *ListListenerResp
func (p *MetaServiceListListenerResult) GetSuccess() *ListListenerResp {
  if !p.IsSetSuccess() {
    return MetaServiceListListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListListenerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListListenerResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetStatsArgs struct {
  Req *GetStatsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetStatsArgs() *MetaServiceGetStatsArgs {
  return &MetaServiceGetStatsArgs{}
}

var MetaServiceGetStatsArgs_Req_DEFAULT *GetStatsReq
func (p *MetaServiceGetStatsArgs) GetReq() *GetStatsReq {
  if !p.IsSetReq() {
    return MetaServiceGetStatsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetStatsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetStatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetStatsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetStatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetStatsResult struct {
  Success *GetStatsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetStatsResult() *MetaServiceGetStatsResult {
  return &MetaServiceGetStatsResult{}
}

var MetaServiceGetStatsResult_Success_DEFAULT *GetStatsResp
func (p *MetaServiceGetStatsResult) GetSuccess() *GetStatsResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetStatsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetStatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetStatsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetStatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetStatsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSignInServiceArgs struct {
  Req *SignInServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignInServiceArgs() *MetaServiceSignInServiceArgs {
  return &MetaServiceSignInServiceArgs{}
}

var MetaServiceSignInServiceArgs_Req_DEFAULT *SignInServiceReq
func (p *MetaServiceSignInServiceArgs) GetReq() *SignInServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignInServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignInServiceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSignInServiceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SignInServiceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "signInService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInServiceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignInServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignInServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSignInServiceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignInServiceResult() *MetaServiceSignInServiceResult {
  return &MetaServiceSignInServiceResult{}
}

var MetaServiceSignInServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignInServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignInServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignInServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSignInServiceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "signInService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInServiceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignInServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignInServiceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSignOutServiceArgs struct {
  Req *SignOutServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignOutServiceArgs() *MetaServiceSignOutServiceArgs {
  return &MetaServiceSignOutServiceArgs{}
}

var MetaServiceSignOutServiceArgs_Req_DEFAULT *SignOutServiceReq
func (p *MetaServiceSignOutServiceArgs) GetReq() *SignOutServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignOutServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignOutServiceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSignOutServiceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SignOutServiceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "signOutService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutServiceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignOutServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignOutServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSignOutServiceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignOutServiceResult() *MetaServiceSignOutServiceResult {
  return &MetaServiceSignOutServiceResult{}
}

var MetaServiceSignOutServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignOutServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignOutServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignOutServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSignOutServiceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "signOutService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutServiceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignOutServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignOutServiceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListServiceClientsArgs struct {
  Req *ListServiceClientsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListServiceClientsArgs() *MetaServiceListServiceClientsArgs {
  return &MetaServiceListServiceClientsArgs{}
}

var MetaServiceListServiceClientsArgs_Req_DEFAULT *ListServiceClientsReq
func (p *MetaServiceListServiceClientsArgs) GetReq() *ListServiceClientsReq {
  if !p.IsSetReq() {
    return MetaServiceListServiceClientsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListServiceClientsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListServiceClientsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListServiceClientsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listServiceClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListServiceClientsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListServiceClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListServiceClientsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListServiceClientsResult struct {
  Success *ListServiceClientsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListServiceClientsResult() *MetaServiceListServiceClientsResult {
  return &MetaServiceListServiceClientsResult{}
}

var MetaServiceListServiceClientsResult_Success_DEFAULT *ListServiceClientsResp
func (p *MetaServiceListServiceClientsResult) GetSuccess() *ListServiceClientsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListServiceClientsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListServiceClientsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListServiceClientsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListServiceClientsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listServiceClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListServiceClientsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListServiceClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListServiceClientsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateFTIndexArgs struct {
  Req *CreateFTIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateFTIndexArgs() *MetaServiceCreateFTIndexArgs {
  return &MetaServiceCreateFTIndexArgs{}
}

var MetaServiceCreateFTIndexArgs_Req_DEFAULT *CreateFTIndexReq
func (p *MetaServiceCreateFTIndexArgs) GetReq() *CreateFTIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateFTIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateFTIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateFTIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateFTIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createFTIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateFTIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateFTIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateFTIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateFTIndexResult() *MetaServiceCreateFTIndexResult {
  return &MetaServiceCreateFTIndexResult{}
}

var MetaServiceCreateFTIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateFTIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateFTIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateFTIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateFTIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createFTIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateFTIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateFTIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateFTIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropFTIndexArgs struct {
  Req *DropFTIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropFTIndexArgs() *MetaServiceDropFTIndexArgs {
  return &MetaServiceDropFTIndexArgs{}
}

var MetaServiceDropFTIndexArgs_Req_DEFAULT *DropFTIndexReq
func (p *MetaServiceDropFTIndexArgs) GetReq() *DropFTIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropFTIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropFTIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropFTIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropFTIndexReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropFTIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropFTIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropFTIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropFTIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropFTIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropFTIndexResult() *MetaServiceDropFTIndexResult {
  return &MetaServiceDropFTIndexResult{}
}

var MetaServiceDropFTIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropFTIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropFTIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropFTIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropFTIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropFTIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropFTIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropFTIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropFTIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListFTIndexesArgs struct {
  Req *ListFTIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListFTIndexesArgs() *MetaServiceListFTIndexesArgs {
  return &MetaServiceListFTIndexesArgs{}
}

var MetaServiceListFTIndexesArgs_Req_DEFAULT *ListFTIndexesReq
func (p *MetaServiceListFTIndexesArgs) GetReq() *ListFTIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListFTIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListFTIndexesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListFTIndexesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListFTIndexesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listFTIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTIndexesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListFTIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListFTIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListFTIndexesResult struct {
  Success *ListFTIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListFTIndexesResult() *MetaServiceListFTIndexesResult {
  return &MetaServiceListFTIndexesResult{}
}

var MetaServiceListFTIndexesResult_Success_DEFAULT *ListFTIndexesResp
func (p *MetaServiceListFTIndexesResult) GetSuccess() *ListFTIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListFTIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListFTIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListFTIndexesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListFTIndexesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listFTIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTIndexesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListFTIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListFTIndexesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateSessionArgs struct {
  Req *CreateSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSessionArgs() *MetaServiceCreateSessionArgs {
  return &MetaServiceCreateSessionArgs{}
}

var MetaServiceCreateSessionArgs_Req_DEFAULT *CreateSessionReq
func (p *MetaServiceCreateSessionArgs) GetReq() *CreateSessionReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateSessionReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSessionResult struct {
  Success *CreateSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSessionResult() *MetaServiceCreateSessionResult {
  return &MetaServiceCreateSessionResult{}
}

var MetaServiceCreateSessionResult_Success_DEFAULT *CreateSessionResp
func (p *MetaServiceCreateSessionResult) GetSuccess() *CreateSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateSessionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceUpdateSessionsArgs struct {
  Req *UpdateSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceUpdateSessionsArgs() *MetaServiceUpdateSessionsArgs {
  return &MetaServiceUpdateSessionsArgs{}
}

var MetaServiceUpdateSessionsArgs_Req_DEFAULT *UpdateSessionsReq
func (p *MetaServiceUpdateSessionsArgs) GetReq() *UpdateSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceUpdateSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceUpdateSessionsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceUpdateSessionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &UpdateSessionsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceUpdateSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceUpdateSessionsResult struct {
  Success *UpdateSessionsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceUpdateSessionsResult() *MetaServiceUpdateSessionsResult {
  return &MetaServiceUpdateSessionsResult{}
}

var MetaServiceUpdateSessionsResult_Success_DEFAULT *UpdateSessionsResp
func (p *MetaServiceUpdateSessionsResult) GetSuccess() *UpdateSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceUpdateSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceUpdateSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceUpdateSessionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateSessionsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceUpdateSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSessionsArgs struct {
  Req *ListSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSessionsArgs() *MetaServiceListSessionsArgs {
  return &MetaServiceListSessionsArgs{}
}

var MetaServiceListSessionsArgs_Req_DEFAULT *ListSessionsReq
func (p *MetaServiceListSessionsArgs) GetReq() *ListSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceListSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSessionsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSessionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListSessionsReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSessionsResult struct {
  Success *ListSessionsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSessionsResult() *MetaServiceListSessionsResult {
  return &MetaServiceListSessionsResult{}
}

var MetaServiceListSessionsResult_Success_DEFAULT *ListSessionsResp
func (p *MetaServiceListSessionsResult) GetSuccess() *ListSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSessionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListSessionsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSessionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSessionArgs struct {
  Req *GetSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSessionArgs() *MetaServiceGetSessionArgs {
  return &MetaServiceGetSessionArgs{}
}

var MetaServiceGetSessionArgs_Req_DEFAULT *GetSessionReq
func (p *MetaServiceGetSessionArgs) GetReq() *GetSessionReq {
  if !p.IsSetReq() {
    return MetaServiceGetSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetSessionReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSessionResult struct {
  Success *GetSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSessionResult() *MetaServiceGetSessionResult {
  return &MetaServiceGetSessionResult{}
}

var MetaServiceGetSessionResult_Success_DEFAULT *GetSessionResp
func (p *MetaServiceGetSessionResult) GetSuccess() *GetSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetSessionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveSessionArgs struct {
  Req *RemoveSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveSessionArgs() *MetaServiceRemoveSessionArgs {
  return &MetaServiceRemoveSessionArgs{}
}

var MetaServiceRemoveSessionArgs_Req_DEFAULT *RemoveSessionReq
func (p *MetaServiceRemoveSessionArgs) GetReq() *RemoveSessionReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RemoveSessionReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveSessionResult struct {
  Success *RemoveSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveSessionResult() *MetaServiceRemoveSessionResult {
  return &MetaServiceRemoveSessionResult{}
}

var MetaServiceRemoveSessionResult_Success_DEFAULT *RemoveSessionResp
func (p *MetaServiceRemoveSessionResult) GetSuccess() *RemoveSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RemoveSessionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceKillQueryArgs struct {
  Req *KillQueryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceKillQueryArgs() *MetaServiceKillQueryArgs {
  return &MetaServiceKillQueryArgs{}
}

var MetaServiceKillQueryArgs_Req_DEFAULT *KillQueryReq
func (p *MetaServiceKillQueryArgs) GetReq() *KillQueryReq {
  if !p.IsSetReq() {
    return MetaServiceKillQueryArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceKillQueryArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceKillQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceKillQueryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &KillQueryReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceKillQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "killQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceKillQueryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceKillQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceKillQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceKillQueryResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceKillQueryResult() *MetaServiceKillQueryResult {
  return &MetaServiceKillQueryResult{}
}

var MetaServiceKillQueryResult_Success_DEFAULT *ExecResp
func (p *MetaServiceKillQueryResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceKillQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceKillQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceKillQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceKillQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceKillQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "killQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceKillQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceKillQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceKillQueryResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceReportTaskFinishArgs struct {
  Req *ReportTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceReportTaskFinishArgs() *MetaServiceReportTaskFinishArgs {
  return &MetaServiceReportTaskFinishArgs{}
}

var MetaServiceReportTaskFinishArgs_Req_DEFAULT *ReportTaskReq
func (p *MetaServiceReportTaskFinishArgs) GetReq() *ReportTaskReq {
  if !p.IsSetReq() {
    return MetaServiceReportTaskFinishArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceReportTaskFinishArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceReportTaskFinishArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ReportTaskReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportTaskFinish_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceReportTaskFinishArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceReportTaskFinishResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceReportTaskFinishResult() *MetaServiceReportTaskFinishResult {
  return &MetaServiceReportTaskFinishResult{}
}

var MetaServiceReportTaskFinishResult_Success_DEFAULT *ExecResp
func (p *MetaServiceReportTaskFinishResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceReportTaskFinishResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceReportTaskFinishResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceReportTaskFinishResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reportTaskFinish_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceReportTaskFinishResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateBackupArgs struct {
  Req *CreateBackupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateBackupArgs() *MetaServiceCreateBackupArgs {
  return &MetaServiceCreateBackupArgs{}
}

var MetaServiceCreateBackupArgs_Req_DEFAULT *CreateBackupReq
func (p *MetaServiceCreateBackupArgs) GetReq() *CreateBackupReq {
  if !p.IsSetReq() {
    return MetaServiceCreateBackupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateBackupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateBackupArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateBackupReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createBackup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateBackupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateBackupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateBackupResult struct {
  Success *CreateBackupResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateBackupResult() *MetaServiceCreateBackupResult {
  return &MetaServiceCreateBackupResult{}
}

var MetaServiceCreateBackupResult_Success_DEFAULT *CreateBackupResp
func (p *MetaServiceCreateBackupResult) GetSuccess() *CreateBackupResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateBackupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateBackupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateBackupResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateBackupResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createBackup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateBackupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateBackupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRestoreMetaArgs struct {
  Req *RestoreMetaReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRestoreMetaArgs() *MetaServiceRestoreMetaArgs {
  return &MetaServiceRestoreMetaArgs{}
}

var MetaServiceRestoreMetaArgs_Req_DEFAULT *RestoreMetaReq
func (p *MetaServiceRestoreMetaArgs) GetReq() *RestoreMetaReq {
  if !p.IsSetReq() {
    return MetaServiceRestoreMetaArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRestoreMetaArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRestoreMetaArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RestoreMetaReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "restoreMeta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRestoreMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRestoreMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRestoreMetaResult struct {
  Success *RestoreMetaResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRestoreMetaResult() *MetaServiceRestoreMetaResult {
  return &MetaServiceRestoreMetaResult{}
}

var MetaServiceRestoreMetaResult_Success_DEFAULT *RestoreMetaResp
func (p *MetaServiceRestoreMetaResult) GetSuccess() *RestoreMetaResp {
  if !p.IsSetSuccess() {
    return MetaServiceRestoreMetaResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRestoreMetaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRestoreMetaResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RestoreMetaResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "restoreMeta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRestoreMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRestoreMetaResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListClusterArgs struct {
  Req *ListClusterInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListClusterArgs() *MetaServiceListClusterArgs {
  return &MetaServiceListClusterArgs{}
}

var MetaServiceListClusterArgs_Req_DEFAULT *ListClusterInfoReq
func (p *MetaServiceListClusterArgs) GetReq() *ListClusterInfoReq {
  if !p.IsSetReq() {
    return MetaServiceListClusterArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListClusterArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListClusterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListClusterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ListClusterInfoReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListClusterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listCluster_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListClusterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListClusterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListClusterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListClusterResult struct {
  Success *ListClusterInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListClusterResult() *MetaServiceListClusterResult {
  return &MetaServiceListClusterResult{}
}

var MetaServiceListClusterResult_Success_DEFAULT *ListClusterInfoResp
func (p *MetaServiceListClusterResult) GetSuccess() *ListClusterInfoResp {
  if !p.IsSetSuccess() {
    return MetaServiceListClusterResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListClusterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListClusterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListClusterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ListClusterInfoResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListClusterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "listCluster_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListClusterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListClusterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListClusterResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetMetaDirInfoArgs struct {
  Req *GetMetaDirInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetMetaDirInfoArgs() *MetaServiceGetMetaDirInfoArgs {
  return &MetaServiceGetMetaDirInfoArgs{}
}

var MetaServiceGetMetaDirInfoArgs_Req_DEFAULT *GetMetaDirInfoReq
func (p *MetaServiceGetMetaDirInfoArgs) GetReq() *GetMetaDirInfoReq {
  if !p.IsSetReq() {
    return MetaServiceGetMetaDirInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetMetaDirInfoArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetMetaDirInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetMetaDirInfoReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaDirInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetMetaDirInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetMetaDirInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetMetaDirInfoResult struct {
  Success *GetMetaDirInfoResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetMetaDirInfoResult() *MetaServiceGetMetaDirInfoResult {
  return &MetaServiceGetMetaDirInfoResult{}
}

var MetaServiceGetMetaDirInfoResult_Success_DEFAULT *GetMetaDirInfoResp
func (p *MetaServiceGetMetaDirInfoResult) GetSuccess() *GetMetaDirInfoResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetMetaDirInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetMetaDirInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetMetaDirInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetMetaDirInfoResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaDirInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetMetaDirInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetMetaDirInfoResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceVerifyClientVersionArgs struct {
  Req *VerifyClientVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceVerifyClientVersionArgs() *MetaServiceVerifyClientVersionArgs {
  return &MetaServiceVerifyClientVersionArgs{}
}

var MetaServiceVerifyClientVersionArgs_Req_DEFAULT *VerifyClientVersionReq
func (p *MetaServiceVerifyClientVersionArgs) GetReq() *VerifyClientVersionReq {
  if !p.IsSetReq() {
    return MetaServiceVerifyClientVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceVerifyClientVersionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceVerifyClientVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &VerifyClientVersionReq{
  ClientVersion: []byte("3.0.0"),
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyClientVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceVerifyClientVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceVerifyClientVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceVerifyClientVersionResult struct {
  Success *VerifyClientVersionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceVerifyClientVersionResult() *MetaServiceVerifyClientVersionResult {
  return &MetaServiceVerifyClientVersionResult{}
}

var MetaServiceVerifyClientVersionResult_Success_DEFAULT *VerifyClientVersionResp
func (p *MetaServiceVerifyClientVersionResult) GetSuccess() *VerifyClientVersionResp {
  if !p.IsSetSuccess() {
    return MetaServiceVerifyClientVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceVerifyClientVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceVerifyClientVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyClientVersionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyClientVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceVerifyClientVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceVerifyClientVersionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSaveGraphVersionArgs struct {
  Req *SaveGraphVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSaveGraphVersionArgs() *MetaServiceSaveGraphVersionArgs {
  return &MetaServiceSaveGraphVersionArgs{}
}

var MetaServiceSaveGraphVersionArgs_Req_DEFAULT *SaveGraphVersionReq
func (p *MetaServiceSaveGraphVersionArgs) GetReq() *SaveGraphVersionReq {
  if !p.IsSetReq() {
    return MetaServiceSaveGraphVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSaveGraphVersionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSaveGraphVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &SaveGraphVersionReq{
  ClientVersion: []byte("3.0.0"),
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveGraphVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSaveGraphVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSaveGraphVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSaveGraphVersionResult struct {
  Success *SaveGraphVersionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSaveGraphVersionResult() *MetaServiceSaveGraphVersionResult {
  return &MetaServiceSaveGraphVersionResult{}
}

var MetaServiceSaveGraphVersionResult_Success_DEFAULT *SaveGraphVersionResp
func (p *MetaServiceSaveGraphVersionResult) GetSuccess() *SaveGraphVersionResp {
  if !p.IsSetSuccess() {
    return MetaServiceSaveGraphVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSaveGraphVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSaveGraphVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SaveGraphVersionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "saveGraphVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSaveGraphVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSaveGraphVersionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSegmentIdArgs struct {
  Req *GetSegmentIdReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSegmentIdArgs() *MetaServiceGetSegmentIdArgs {
  return &MetaServiceGetSegmentIdArgs{}
}

var MetaServiceGetSegmentIdArgs_Req_DEFAULT *GetSegmentIdReq
func (p *MetaServiceGetSegmentIdArgs) GetReq() *GetSegmentIdReq {
  if !p.IsSetReq() {
    return MetaServiceGetSegmentIdArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSegmentIdArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSegmentIdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetSegmentIdReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSegmentId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSegmentIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSegmentIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSegmentIdResult struct {
  Success *GetSegmentIdResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSegmentIdResult() *MetaServiceGetSegmentIdResult {
  return &MetaServiceGetSegmentIdResult{}
}

var MetaServiceGetSegmentIdResult_Success_DEFAULT *GetSegmentIdResp
func (p *MetaServiceGetSegmentIdResult) GetSuccess() *GetSegmentIdResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSegmentIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSegmentIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSegmentIdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetSegmentIdResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSegmentId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSegmentIdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSegmentIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSegmentIdResult(%+v)", *p)
}


