// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package raftex

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_LOG_GAP ErrorCode = -1
  ErrorCode_E_LOG_STALE ErrorCode = -2
  ErrorCode_E_MISSING_COMMIT ErrorCode = -3
  ErrorCode_E_WAITING_SNAPSHOT ErrorCode = -4
  ErrorCode_E_UNKNOWN_PART ErrorCode = -5
  ErrorCode_E_TERM_OUT_OF_DATE ErrorCode = -6
  ErrorCode_E_LAST_LOG_TERM_TOO_OLD ErrorCode = -7
  ErrorCode_E_BAD_STATE ErrorCode = -8
  ErrorCode_E_WRONG_LEADER ErrorCode = -9
  ErrorCode_E_WAL_FAIL ErrorCode = -10
  ErrorCode_E_NOT_READY ErrorCode = -11
  ErrorCode_E_HOST_STOPPED ErrorCode = -12
  ErrorCode_E_NOT_A_LEADER ErrorCode = -13
  ErrorCode_E_HOST_DISCONNECTED ErrorCode = -14
  ErrorCode_E_TOO_MANY_REQUESTS ErrorCode = -15
  ErrorCode_E_PERSIST_SNAPSHOT_FAILED ErrorCode = -16
  ErrorCode_E_BAD_ROLE ErrorCode = -17
  ErrorCode_E_EXCEPTION ErrorCode = -20
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_LOG_GAP: "E_LOG_GAP",
  ErrorCode_E_LOG_STALE: "E_LOG_STALE",
  ErrorCode_E_MISSING_COMMIT: "E_MISSING_COMMIT",
  ErrorCode_E_WAITING_SNAPSHOT: "E_WAITING_SNAPSHOT",
  ErrorCode_E_UNKNOWN_PART: "E_UNKNOWN_PART",
  ErrorCode_E_TERM_OUT_OF_DATE: "E_TERM_OUT_OF_DATE",
  ErrorCode_E_LAST_LOG_TERM_TOO_OLD: "E_LAST_LOG_TERM_TOO_OLD",
  ErrorCode_E_BAD_STATE: "E_BAD_STATE",
  ErrorCode_E_WRONG_LEADER: "E_WRONG_LEADER",
  ErrorCode_E_WAL_FAIL: "E_WAL_FAIL",
  ErrorCode_E_NOT_READY: "E_NOT_READY",
  ErrorCode_E_HOST_STOPPED: "E_HOST_STOPPED",
  ErrorCode_E_NOT_A_LEADER: "E_NOT_A_LEADER",
  ErrorCode_E_HOST_DISCONNECTED: "E_HOST_DISCONNECTED",
  ErrorCode_E_TOO_MANY_REQUESTS: "E_TOO_MANY_REQUESTS",
  ErrorCode_E_PERSIST_SNAPSHOT_FAILED: "E_PERSIST_SNAPSHOT_FAILED",
  ErrorCode_E_BAD_ROLE: "E_BAD_ROLE",
  ErrorCode_E_EXCEPTION: "E_EXCEPTION",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_LOG_GAP": ErrorCode_E_LOG_GAP,
  "E_LOG_STALE": ErrorCode_E_LOG_STALE,
  "E_MISSING_COMMIT": ErrorCode_E_MISSING_COMMIT,
  "E_WAITING_SNAPSHOT": ErrorCode_E_WAITING_SNAPSHOT,
  "E_UNKNOWN_PART": ErrorCode_E_UNKNOWN_PART,
  "E_TERM_OUT_OF_DATE": ErrorCode_E_TERM_OUT_OF_DATE,
  "E_LAST_LOG_TERM_TOO_OLD": ErrorCode_E_LAST_LOG_TERM_TOO_OLD,
  "E_BAD_STATE": ErrorCode_E_BAD_STATE,
  "E_WRONG_LEADER": ErrorCode_E_WRONG_LEADER,
  "E_WAL_FAIL": ErrorCode_E_WAL_FAIL,
  "E_NOT_READY": ErrorCode_E_NOT_READY,
  "E_HOST_STOPPED": ErrorCode_E_HOST_STOPPED,
  "E_NOT_A_LEADER": ErrorCode_E_NOT_A_LEADER,
  "E_HOST_DISCONNECTED": ErrorCode_E_HOST_DISCONNECTED,
  "E_TOO_MANY_REQUESTS": ErrorCode_E_TOO_MANY_REQUESTS,
  "E_PERSIST_SNAPSHOT_FAILED": ErrorCode_E_PERSIST_SNAPSHOT_FAILED,
  "E_BAD_ROLE": ErrorCode_E_BAD_ROLE,
  "E_EXCEPTION": ErrorCode_E_EXCEPTION,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type ClusterID int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

type GraphSpaceID int32

func GraphSpaceIDPtr(v GraphSpaceID) *GraphSpaceID { return &v }

type PartitionID int32

func PartitionIDPtr(v PartitionID) *PartitionID { return &v }

type TermID int64

func TermIDPtr(v TermID) *TermID { return &v }

type LogID int64

func LogIDPtr(v LogID) *LogID { return &v }

type Port int32

func PortPtr(v Port) *Port { return &v }

// Attributes:
//  - Space
//  - Part
//  - CandidateAddr
//  - CandidatePort
//  - Term
//  - LastLogID
//  - LastLogTerm
type AskForVoteRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  CandidateAddr string `thrift:"candidate_addr,3" db:"candidate_addr" json:"candidate_addr"`
  CandidatePort Port `thrift:"candidate_port,4" db:"candidate_port" json:"candidate_port"`
  Term TermID `thrift:"term,5" db:"term" json:"term"`
  LastLogID LogID `thrift:"last_log_id,6" db:"last_log_id" json:"last_log_id"`
  LastLogTerm TermID `thrift:"last_log_term,7" db:"last_log_term" json:"last_log_term"`
}

func NewAskForVoteRequest() *AskForVoteRequest {
  return &AskForVoteRequest{}
}


func (p *AskForVoteRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *AskForVoteRequest) GetPart() PartitionID {
  return p.Part
}

func (p *AskForVoteRequest) GetCandidateAddr() string {
  return p.CandidateAddr
}

func (p *AskForVoteRequest) GetCandidatePort() Port {
  return p.CandidatePort
}

func (p *AskForVoteRequest) GetTerm() TermID {
  return p.Term
}

func (p *AskForVoteRequest) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AskForVoteRequest) GetLastLogTerm() TermID {
  return p.LastLogTerm
}
func (p *AskForVoteRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AskForVoteRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CandidateAddr = v
}
  return nil
}

func (p *AskForVoteRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Port(v)
  p.CandidatePort = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TermID(v)
  p.Term = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TermID(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *AskForVoteRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AskForVoteRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AskForVoteRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("candidate_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:candidate_addr: ", p), err) }
  if err := oprot.WriteString(string(p.CandidateAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.candidate_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:candidate_addr: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("candidate_port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:candidate_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.CandidatePort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.candidate_port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:candidate_port: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:term: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_log_id: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_log_term: ", p), err) }
  return err
}

func (p *AskForVoteRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AskForVoteRequest(%+v)", *p)
}

// Attributes:
//  - ErrorCode
type AskForVoteResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
}

func NewAskForVoteResponse() *AskForVoteResponse {
  return &AskForVoteResponse{}
}


func (p *AskForVoteResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
func (p *AskForVoteResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AskForVoteResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AskForVoteResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AskForVoteResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AskForVoteResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AskForVoteResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AskForVoteResponse(%+v)", *p)
}

// Attributes:
//  - Cluster
//  - LogStr
type LogEntry struct {
  Cluster ClusterID `thrift:"cluster,1" db:"cluster" json:"cluster"`
  LogStr []byte `thrift:"log_str,2" db:"log_str" json:"log_str"`
}

func NewLogEntry() *LogEntry {
  return &LogEntry{}
}


func (p *LogEntry) GetCluster() ClusterID {
  return p.Cluster
}

func (p *LogEntry) GetLogStr() []byte {
  return p.LogStr
}
func (p *LogEntry) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogEntry)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ClusterID(v)
  p.Cluster = temp
}
  return nil
}

func (p *LogEntry)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LogStr = v
}
  return nil
}

func (p *LogEntry) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LogEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogEntry) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cluster: ", p), err) }
  if err := oprot.WriteI64(int64(p.Cluster)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cluster: ", p), err) }
  return err
}

func (p *LogEntry) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_str", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_str: ", p), err) }
  if err := oprot.WriteBinary(p.LogStr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_str (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_str: ", p), err) }
  return err
}

func (p *LogEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogEntry(%+v)", *p)
}

// Attributes:
//  - Space
//  - Part
//  - CurrentTerm
//  - LastLogID
//  - CommittedLogID
//  - LeaderAddr
//  - LeaderPort
//  - LastLogTermSent
//  - LastLogIdSent
//  - LogTerm
//  - LogStrList
//  - SendingSnapshot
type AppendLogRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  CurrentTerm TermID `thrift:"current_term,3" db:"current_term" json:"current_term"`
  LastLogID LogID `thrift:"last_log_id,4" db:"last_log_id" json:"last_log_id"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LeaderAddr string `thrift:"leader_addr,6" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,7" db:"leader_port" json:"leader_port"`
  LastLogTermSent TermID `thrift:"last_log_term_sent,8" db:"last_log_term_sent" json:"last_log_term_sent"`
  LastLogIdSent LogID `thrift:"last_log_id_sent,9" db:"last_log_id_sent" json:"last_log_id_sent"`
  LogTerm TermID `thrift:"log_term,10" db:"log_term" json:"log_term"`
  LogStrList []*LogEntry `thrift:"log_str_list,11" db:"log_str_list" json:"log_str_list"`
  SendingSnapshot bool `thrift:"sending_snapshot,12" db:"sending_snapshot" json:"sending_snapshot"`
}

func NewAppendLogRequest() *AppendLogRequest {
  return &AppendLogRequest{}
}


func (p *AppendLogRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *AppendLogRequest) GetPart() PartitionID {
  return p.Part
}

func (p *AppendLogRequest) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *AppendLogRequest) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AppendLogRequest) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *AppendLogRequest) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *AppendLogRequest) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *AppendLogRequest) GetLastLogTermSent() TermID {
  return p.LastLogTermSent
}

func (p *AppendLogRequest) GetLastLogIdSent() LogID {
  return p.LastLogIdSent
}

func (p *AppendLogRequest) GetLogTerm() TermID {
  return p.LogTerm
}

func (p *AppendLogRequest) GetLogStrList() []*LogEntry {
  return p.LogStrList
}

func (p *AppendLogRequest) GetSendingSnapshot() bool {
  return p.SendingSnapshot
}
func (p *AppendLogRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendLogRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *AppendLogRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := TermID(v)
  p.LastLogTermSent = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := LogID(v)
  p.LastLogIdSent = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TermID(v)
  p.LogTerm = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField11(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LogEntry, 0, size)
  p.LogStrList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := NewLogEntry()
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.LogStrList = append(p.LogStrList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppendLogRequest)  ReadField12(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.SendingSnapshot = v
}
  return nil
}

func (p *AppendLogRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AppendLogRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendLogRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:current_term: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_log_id: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leader_addr: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:leader_port: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term_sent", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:last_log_term_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTermSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term_sent (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:last_log_term_sent: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id_sent", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:last_log_id_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogIdSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id_sent (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:last_log_id_sent: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_term", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_term (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:log_term: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_str_list", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:log_str_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LogStrList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LogStrList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:log_str_list: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sending_snapshot", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:sending_snapshot: ", p), err) }
  if err := oprot.WriteBool(bool(p.SendingSnapshot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sending_snapshot (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:sending_snapshot: ", p), err) }
  return err
}

func (p *AppendLogRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendLogRequest(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - CurrentTerm
//  - LeaderAddr
//  - LeaderPort
//  - CommittedLogID
//  - LastLogID
//  - LastLogTerm
type AppendLogResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
  CurrentTerm TermID `thrift:"current_term,2" db:"current_term" json:"current_term"`
  LeaderAddr string `thrift:"leader_addr,3" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,4" db:"leader_port" json:"leader_port"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LastLogID LogID `thrift:"last_log_id,6" db:"last_log_id" json:"last_log_id"`
  LastLogTerm TermID `thrift:"last_log_term,7" db:"last_log_term" json:"last_log_term"`
}

func NewAppendLogResponse() *AppendLogResponse {
  return &AppendLogResponse{}
}


func (p *AppendLogResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *AppendLogResponse) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *AppendLogResponse) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *AppendLogResponse) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *AppendLogResponse) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *AppendLogResponse) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AppendLogResponse) GetLastLogTerm() TermID {
  return p.LastLogTerm
}
func (p *AppendLogResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendLogResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *AppendLogResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TermID(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *AppendLogResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AppendLogResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendLogResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:current_term: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_addr: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_port: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_log_id: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_log_term: ", p), err) }
  return err
}

func (p *AppendLogResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendLogResponse(%+v)", *p)
}

// Attributes:
//  - Space
//  - Part
//  - Term
//  - CommittedLogID
//  - CommittedLogTerm
//  - LeaderAddr
//  - LeaderPort
//  - Rows
//  - TotalSize
//  - TotalCount
//  - Done
type SendSnapshotRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  Term TermID `thrift:"term,3" db:"term" json:"term"`
  CommittedLogID LogID `thrift:"committed_log_id,4" db:"committed_log_id" json:"committed_log_id"`
  CommittedLogTerm TermID `thrift:"committed_log_term,5" db:"committed_log_term" json:"committed_log_term"`
  LeaderAddr string `thrift:"leader_addr,6" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,7" db:"leader_port" json:"leader_port"`
  Rows [][]byte `thrift:"rows,8" db:"rows" json:"rows"`
  TotalSize int64 `thrift:"total_size,9" db:"total_size" json:"total_size"`
  TotalCount int64 `thrift:"total_count,10" db:"total_count" json:"total_count"`
  Done bool `thrift:"done,11" db:"done" json:"done"`
}

func NewSendSnapshotRequest() *SendSnapshotRequest {
  return &SendSnapshotRequest{}
}


func (p *SendSnapshotRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *SendSnapshotRequest) GetPart() PartitionID {
  return p.Part
}

func (p *SendSnapshotRequest) GetTerm() TermID {
  return p.Term
}

func (p *SendSnapshotRequest) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *SendSnapshotRequest) GetCommittedLogTerm() TermID {
  return p.CommittedLogTerm
}

func (p *SendSnapshotRequest) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *SendSnapshotRequest) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *SendSnapshotRequest) GetRows() [][]byte {
  return p.Rows
}

func (p *SendSnapshotRequest) GetTotalSize() int64 {
  return p.TotalSize
}

func (p *SendSnapshotRequest) GetTotalCount() int64 {
  return p.TotalCount
}

func (p *SendSnapshotRequest) GetDone() bool {
  return p.Done
}
func (p *SendSnapshotRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendSnapshotRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.Term = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TermID(v)
  p.CommittedLogTerm = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Rows = append(p.Rows, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SendSnapshotRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TotalSize = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalCount = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *SendSnapshotRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SendSnapshotRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendSnapshotRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:term: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:committed_log_id: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_term: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leader_addr: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:leader_port: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:rows: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_size", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:total_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_size (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:total_size: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_count", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:total_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_count (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:total_count: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:done: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendSnapshotRequest(%+v)", *p)
}

// Attributes:
//  - ErrorCode
type SendSnapshotResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
}

func NewSendSnapshotResponse() *SendSnapshotResponse {
  return &SendSnapshotResponse{}
}


func (p *SendSnapshotResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
func (p *SendSnapshotResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendSnapshotResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *SendSnapshotResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SendSnapshotResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendSnapshotResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *SendSnapshotResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendSnapshotResponse(%+v)", *p)
}

