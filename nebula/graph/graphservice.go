// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package graph

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
type GraphService interface {
  // Parameters:
  //  - Username
  //  - Password
  Authenticate(ctx context.Context, username []byte, password []byte) (_r *AuthResponse, err error)
  // Parameters:
  //  - SessionId
  Signout(ctx context.Context, sessionId int64) (err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  Execute(ctx context.Context, sessionId int64, stmt []byte) (_r *ExecutionResponse, err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  ExecuteJson(ctx context.Context, sessionId int64, stmt []byte) (_r []byte, err error)
}

type GraphServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Username
  //  - Password
  Authenticate(username []byte, password []byte) (_r *AuthResponse, err error)
  // Parameters:
  //  - SessionId
  Signout(sessionId int64) (err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  Execute(sessionId int64, stmt []byte) (_r *ExecutionResponse, err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  ExecuteJson(sessionId int64, stmt []byte) (_r []byte, err error)
}

type GraphServiceClient struct {
  GraphServiceClientInterface
  CC thrift.ClientConn
}

func(client *GraphServiceClient) Open() error {
  return client.CC.Open()
}

func(client *GraphServiceClient) Close() error {
  return client.CC.Close()
}

func(client *GraphServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewGraphServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GraphServiceClient {
  return &GraphServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGraphServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GraphServiceClient {
  return &GraphServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGraphServiceClientProtocol(prot thrift.Protocol) *GraphServiceClient {
  return NewGraphServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Username
//  - Password
func (p *GraphServiceClient) Authenticate(username []byte, password []byte) (_r *AuthResponse, err error) {
  args := GraphServiceAuthenticateArgs{
    Username : username,
    Password : password,
  }
  err = p.CC.SendMsg("authenticate", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAuthenticate()
}


func (p *GraphServiceClient) recvAuthenticate() (value *AuthResponse, err error) {
  var result GraphServiceAuthenticateResult
  err = p.CC.RecvMsg("authenticate", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *GraphServiceClient) Signout(sessionId int64) (err error) {
  args := GraphServiceSignoutArgs{
    SessionId : sessionId,
  }
  err = p.CC.SendMsg("signout", &args, thrift.ONEWAY)
  if err != nil { return }
  return
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceClient) Execute(sessionId int64, stmt []byte) (_r *ExecutionResponse, err error) {
  args := GraphServiceExecuteArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  err = p.CC.SendMsg("execute", &args, thrift.CALL)
  if err != nil { return }
  return p.recvExecute()
}


func (p *GraphServiceClient) recvExecute() (value *ExecutionResponse, err error) {
  var result GraphServiceExecuteResult
  err = p.CC.RecvMsg("execute", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceClient) ExecuteJson(sessionId int64, stmt []byte) (_r []byte, err error) {
  args := GraphServiceExecuteJsonArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  err = p.CC.SendMsg("executeJson", &args, thrift.CALL)
  if err != nil { return }
  return p.recvExecuteJson()
}


func (p *GraphServiceClient) recvExecuteJson() (value []byte, err error) {
  var result GraphServiceExecuteJsonResult
  err = p.CC.RecvMsg("executeJson", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphServiceThreadsafeClient struct {
  GraphServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *GraphServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *GraphServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *GraphServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewGraphServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GraphServiceThreadsafeClient {
  return &GraphServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGraphServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GraphServiceThreadsafeClient {
  return &GraphServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGraphServiceThreadsafeClientProtocol(prot thrift.Protocol) *GraphServiceThreadsafeClient {
  return NewGraphServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Username
//  - Password
func (p *GraphServiceThreadsafeClient) Authenticate(username []byte, password []byte) (_r *AuthResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphServiceAuthenticateArgs{
    Username : username,
    Password : password,
  }
  err = p.CC.SendMsg("authenticate", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAuthenticate()
}


func (p *GraphServiceThreadsafeClient) recvAuthenticate() (value *AuthResponse, err error) {
  var result GraphServiceAuthenticateResult
  err = p.CC.RecvMsg("authenticate", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *GraphServiceThreadsafeClient) Signout(sessionId int64) (err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphServiceSignoutArgs{
    SessionId : sessionId,
  }
  err = p.CC.SendMsg("signout", &args, thrift.ONEWAY)
  if err != nil { return }
  return
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceThreadsafeClient) Execute(sessionId int64, stmt []byte) (_r *ExecutionResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphServiceExecuteArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  err = p.CC.SendMsg("execute", &args, thrift.CALL)
  if err != nil { return }
  return p.recvExecute()
}


func (p *GraphServiceThreadsafeClient) recvExecute() (value *ExecutionResponse, err error) {
  var result GraphServiceExecuteResult
  err = p.CC.RecvMsg("execute", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceThreadsafeClient) ExecuteJson(sessionId int64, stmt []byte) (_r []byte, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphServiceExecuteJsonArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  err = p.CC.SendMsg("executeJson", &args, thrift.CALL)
  if err != nil { return }
  return p.recvExecuteJson()
}


func (p *GraphServiceThreadsafeClient) recvExecuteJson() (value []byte, err error) {
  var result GraphServiceExecuteJsonResult
  err = p.CC.RecvMsg("executeJson", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *GraphServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *GraphServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *GraphServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewGraphServiceChannelClient(channel thrift.RequestChannel) *GraphServiceChannelClient {
  return &GraphServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Username
//  - Password
func (p *GraphServiceChannelClient) Authenticate(ctx context.Context, username []byte, password []byte) (_r *AuthResponse, err error) {
  args := GraphServiceAuthenticateArgs{
    Username : username,
    Password : password,
  }
  var result GraphServiceAuthenticateResult
  err = p.RequestChannel.Call(ctx, "authenticate", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *GraphServiceChannelClient) Signout(ctx context.Context, sessionId int64) (err error) {
  args := GraphServiceSignoutArgs{
    SessionId : sessionId,
  }
  err = p.RequestChannel.Oneway(ctx, "signout", &args)
  if err != nil { return }

  return nil
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceChannelClient) Execute(ctx context.Context, sessionId int64, stmt []byte) (_r *ExecutionResponse, err error) {
  args := GraphServiceExecuteArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  var result GraphServiceExecuteResult
  err = p.RequestChannel.Call(ctx, "execute", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceChannelClient) ExecuteJson(ctx context.Context, sessionId int64, stmt []byte) (_r []byte, err error) {
  args := GraphServiceExecuteJsonArgs{
    SessionId : sessionId,
    Stmt : stmt,
  }
  var result GraphServiceExecuteJsonResult
  err = p.RequestChannel.Call(ctx, "executeJson", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  handler GraphService
}

func (p *GraphServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *GraphServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *GraphServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func NewGraphServiceProcessor(handler GraphService) *GraphServiceProcessor {
  self9 := &GraphServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext)}
  self9.processorMap["authenticate"] = &graphServiceProcessorAuthenticate{handler:handler}
  self9.processorMap["signout"] = &graphServiceProcessorSignout{handler:handler}
  self9.processorMap["execute"] = &graphServiceProcessorExecute{handler:handler}
  self9.processorMap["executeJson"] = &graphServiceProcessorExecuteJson{handler:handler}
  return self9
}

type graphServiceProcessorAuthenticate struct {
  handler GraphService
}

func (p *graphServiceProcessorAuthenticate) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphServiceAuthenticateArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphServiceProcessorAuthenticate) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("authenticate", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphServiceProcessorAuthenticate) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphServiceAuthenticateArgs)
  var result GraphServiceAuthenticateResult
  if retval, err := p.handler.Authenticate(ctx, args.Username, args.Password); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticate: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphServiceProcessorSignout struct {
  handler GraphService
}

func (p *graphServiceProcessorSignout) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphServiceSignoutArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphServiceProcessorSignout) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signout", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphServiceProcessorSignout) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphServiceSignoutArgs)
  if err := p.handler.Signout(ctx, args.SessionId); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signout: " + err.Error())
      return x, x
    }
  }
  return nil, nil
}

type graphServiceProcessorExecute struct {
  handler GraphService
}

func (p *graphServiceProcessorExecute) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphServiceExecuteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphServiceProcessorExecute) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("execute", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphServiceProcessorExecute) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphServiceExecuteArgs)
  var result GraphServiceExecuteResult
  if retval, err := p.handler.Execute(ctx, args.SessionId, args.Stmt); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphServiceProcessorExecuteJson struct {
  handler GraphService
}

func (p *graphServiceProcessorExecuteJson) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphServiceExecuteJsonArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphServiceProcessorExecuteJson) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("executeJson", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphServiceProcessorExecuteJson) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphServiceExecuteJsonArgs)
  var result GraphServiceExecuteJsonResult
  if retval, err := p.handler.ExecuteJson(ctx, args.SessionId, args.Stmt); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeJson: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Username
//  - Password
type GraphServiceAuthenticateArgs struct {
  thrift.IRequest
  Username []byte `thrift:"username,1" db:"username" json:"username"`
  Password []byte `thrift:"password,2" db:"password" json:"password"`
}

func NewGraphServiceAuthenticateArgs() *GraphServiceAuthenticateArgs {
  return &GraphServiceAuthenticateArgs{}
}


func (p *GraphServiceAuthenticateArgs) GetUsername() []byte {
  return p.Username
}

func (p *GraphServiceAuthenticateArgs) GetPassword() []byte {
  return p.Password
}
func (p *GraphServiceAuthenticateArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *GraphServiceAuthenticateArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *GraphServiceAuthenticateArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("authenticate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceAuthenticateArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteBinary(p.Username); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *GraphServiceAuthenticateArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteBinary(p.Password); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *GraphServiceAuthenticateArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  usernameVal := fmt.Sprintf("%v", p.Username)
  passwordVal := fmt.Sprintf("%v", p.Password)
  return fmt.Sprintf("GraphServiceAuthenticateArgs({Username:%s Password:%s})", usernameVal, passwordVal)
}

// Attributes:
//  - Success
type GraphServiceAuthenticateResult struct {
  thrift.IResponse
  Success *AuthResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceAuthenticateResult() *GraphServiceAuthenticateResult {
  return &GraphServiceAuthenticateResult{}
}

var GraphServiceAuthenticateResult_Success_DEFAULT *AuthResponse
func (p *GraphServiceAuthenticateResult) GetSuccess() *AuthResponse {
  if !p.IsSetSuccess() {
    return GraphServiceAuthenticateResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceAuthenticateResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *GraphServiceAuthenticateResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAuthResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("authenticate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceAuthenticateResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceAuthenticateResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphServiceAuthenticateResult({Success:%s})", successVal)
}

// Attributes:
//  - SessionId
type GraphServiceSignoutArgs struct {
  thrift.IRequest
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewGraphServiceSignoutArgs() *GraphServiceSignoutArgs {
  return &GraphServiceSignoutArgs{}
}


func (p *GraphServiceSignoutArgs) GetSessionId() int64 {
  return p.SessionId
}
func (p *GraphServiceSignoutArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceSignoutArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceSignoutArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceSignoutArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceSignoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIdVal := fmt.Sprintf("%v", p.SessionId)
  return fmt.Sprintf("GraphServiceSignoutArgs({SessionId:%s})", sessionIdVal)
}

// Attributes:
//  - SessionId
//  - Stmt
type GraphServiceExecuteArgs struct {
  thrift.IRequest
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
}

func NewGraphServiceExecuteArgs() *GraphServiceExecuteArgs {
  return &GraphServiceExecuteArgs{}
}


func (p *GraphServiceExecuteArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteArgs) GetStmt() []byte {
  return p.Stmt
}
func (p *GraphServiceExecuteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIdVal := fmt.Sprintf("%v", p.SessionId)
  stmtVal := fmt.Sprintf("%v", p.Stmt)
  return fmt.Sprintf("GraphServiceExecuteArgs({SessionId:%s Stmt:%s})", sessionIdVal, stmtVal)
}

// Attributes:
//  - Success
type GraphServiceExecuteResult struct {
  thrift.IResponse
  Success *ExecutionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteResult() *GraphServiceExecuteResult {
  return &GraphServiceExecuteResult{}
}

var GraphServiceExecuteResult_Success_DEFAULT *ExecutionResponse
func (p *GraphServiceExecuteResult) GetSuccess() *ExecutionResponse {
  if !p.IsSetSuccess() {
    return GraphServiceExecuteResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceExecuteResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *GraphServiceExecuteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecutionResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceExecuteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphServiceExecuteResult({Success:%s})", successVal)
}

// Attributes:
//  - SessionId
//  - Stmt
type GraphServiceExecuteJsonArgs struct {
  thrift.IRequest
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
}

func NewGraphServiceExecuteJsonArgs() *GraphServiceExecuteJsonArgs {
  return &GraphServiceExecuteJsonArgs{}
}


func (p *GraphServiceExecuteJsonArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteJsonArgs) GetStmt() []byte {
  return p.Stmt
}
func (p *GraphServiceExecuteJsonArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonArgs)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteJsonArgs)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteJsonArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("executeJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonArgs) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIdVal := fmt.Sprintf("%v", p.SessionId)
  stmtVal := fmt.Sprintf("%v", p.Stmt)
  return fmt.Sprintf("GraphServiceExecuteJsonArgs({SessionId:%s Stmt:%s})", sessionIdVal, stmtVal)
}

// Attributes:
//  - Success
type GraphServiceExecuteJsonResult struct {
  thrift.IResponse
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteJsonResult() *GraphServiceExecuteJsonResult {
  return &GraphServiceExecuteJsonResult{}
}

var GraphServiceExecuteJsonResult_Success_DEFAULT []byte

func (p *GraphServiceExecuteJsonResult) GetSuccess() []byte {
  return p.Success
}
func (p *GraphServiceExecuteJsonResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *GraphServiceExecuteJsonResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonResult)  ReadField0(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *GraphServiceExecuteJsonResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("executeJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }

  successVal := fmt.Sprintf("%v", p.Success)
  return fmt.Sprintf("GraphServiceExecuteJsonResult({Success:%s})", successVal)
}


