// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/vesoft-inc/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"
	meta1 "github.com/vesoft-inc/nebula-go/v3/nebula/meta"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var _ = meta1.GoUnusedProtection__
var GoUnusedProtection__ int;

type StatType int64
const (
  StatType_SUM StatType = 1
  StatType_COUNT StatType = 2
  StatType_AVG StatType = 3
  StatType_MAX StatType = 4
  StatType_MIN StatType = 5
)

var StatTypeToName = map[StatType]string {
  StatType_SUM: "SUM",
  StatType_COUNT: "COUNT",
  StatType_AVG: "AVG",
  StatType_MAX: "MAX",
  StatType_MIN: "MIN",
}

var StatTypeToValue = map[string]StatType {
  "SUM": StatType_SUM,
  "COUNT": StatType_COUNT,
  "AVG": StatType_AVG,
  "MAX": StatType_MAX,
  "MIN": StatType_MIN,
}

var StatTypeNames = []string {
  "SUM",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
}

var StatTypeValues = []StatType {
  StatType_SUM,
  StatType_COUNT,
  StatType_AVG,
  StatType_MAX,
  StatType_MIN,
}

func (p StatType) String() string {
  if v, ok := StatTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func StatTypeFromString(s string) (StatType, error) {
  if v, ok := StatTypeToValue[s]; ok {
    return v, nil
  }
  return StatType(0), fmt.Errorf("not a valid StatType string")
}

func StatTypePtr(v StatType) *StatType { return &v }

type OrderDirection int64
const (
  OrderDirection_ASCENDING OrderDirection = 1
  OrderDirection_DESCENDING OrderDirection = 2
)

var OrderDirectionToName = map[OrderDirection]string {
  OrderDirection_ASCENDING: "ASCENDING",
  OrderDirection_DESCENDING: "DESCENDING",
}

var OrderDirectionToValue = map[string]OrderDirection {
  "ASCENDING": OrderDirection_ASCENDING,
  "DESCENDING": OrderDirection_DESCENDING,
}

var OrderDirectionNames = []string {
  "ASCENDING",
  "DESCENDING",
}

var OrderDirectionValues = []OrderDirection {
  OrderDirection_ASCENDING,
  OrderDirection_DESCENDING,
}

func (p OrderDirection) String() string {
  if v, ok := OrderDirectionToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func OrderDirectionFromString(s string) (OrderDirection, error) {
  if v, ok := OrderDirectionToValue[s]; ok {
    return v, nil
  }
  return OrderDirection(0), fmt.Errorf("not a valid OrderDirection string")
}

func OrderDirectionPtr(v OrderDirection) *OrderDirection { return &v }

type EdgeDirection int64
const (
  EdgeDirection_BOTH EdgeDirection = 1
  EdgeDirection_IN_EDGE EdgeDirection = 2
  EdgeDirection_OUT_EDGE EdgeDirection = 3
)

var EdgeDirectionToName = map[EdgeDirection]string {
  EdgeDirection_BOTH: "BOTH",
  EdgeDirection_IN_EDGE: "IN_EDGE",
  EdgeDirection_OUT_EDGE: "OUT_EDGE",
}

var EdgeDirectionToValue = map[string]EdgeDirection {
  "BOTH": EdgeDirection_BOTH,
  "IN_EDGE": EdgeDirection_IN_EDGE,
  "OUT_EDGE": EdgeDirection_OUT_EDGE,
}

var EdgeDirectionNames = []string {
  "BOTH",
  "IN_EDGE",
  "OUT_EDGE",
}

var EdgeDirectionValues = []EdgeDirection {
  EdgeDirection_BOTH,
  EdgeDirection_IN_EDGE,
  EdgeDirection_OUT_EDGE,
}

func (p EdgeDirection) String() string {
  if v, ok := EdgeDirectionToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func EdgeDirectionFromString(s string) (EdgeDirection, error) {
  if v, ok := EdgeDirectionToValue[s]; ok {
    return v, nil
  }
  return EdgeDirection(0), fmt.Errorf("not a valid EdgeDirection string")
}

func EdgeDirectionPtr(v EdgeDirection) *EdgeDirection { return &v }

type ScanType int64
const (
  ScanType_PREFIX ScanType = 1
  ScanType_RANGE ScanType = 2
)

var ScanTypeToName = map[ScanType]string {
  ScanType_PREFIX: "PREFIX",
  ScanType_RANGE: "RANGE",
}

var ScanTypeToValue = map[string]ScanType {
  "PREFIX": ScanType_PREFIX,
  "RANGE": ScanType_RANGE,
}

var ScanTypeNames = []string {
  "PREFIX",
  "RANGE",
}

var ScanTypeValues = []ScanType {
  ScanType_PREFIX,
  ScanType_RANGE,
}

func (p ScanType) String() string {
  if v, ok := ScanTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ScanTypeFromString(s string) (ScanType, error) {
  if v, ok := ScanTypeToValue[s]; ok {
    return v, nil
  }
  return ScanType(0), fmt.Errorf("not a valid ScanType string")
}

func ScanTypePtr(v ScanType) *ScanType { return &v }

type EngineSignType int64
const (
  EngineSignType_BLOCK_ON EngineSignType = 1
  EngineSignType_BLOCK_OFF EngineSignType = 2
)

var EngineSignTypeToName = map[EngineSignType]string {
  EngineSignType_BLOCK_ON: "BLOCK_ON",
  EngineSignType_BLOCK_OFF: "BLOCK_OFF",
}

var EngineSignTypeToValue = map[string]EngineSignType {
  "BLOCK_ON": EngineSignType_BLOCK_ON,
  "BLOCK_OFF": EngineSignType_BLOCK_OFF,
}

var EngineSignTypeNames = []string {
  "BLOCK_ON",
  "BLOCK_OFF",
}

var EngineSignTypeValues = []EngineSignType {
  EngineSignType_BLOCK_ON,
  EngineSignType_BLOCK_OFF,
}

func (p EngineSignType) String() string {
  if v, ok := EngineSignTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func EngineSignTypeFromString(s string) (EngineSignType, error) {
  if v, ok := EngineSignTypeToValue[s]; ok {
    return v, nil
  }
  return EngineSignType(0), fmt.Errorf("not a valid EngineSignType string")
}

func EngineSignTypePtr(v EngineSignType) *EngineSignType { return &v }

// Attributes:
//  - SessionID
//  - PlanID
//  - ProfileDetail
type RequestCommon struct {
  SessionID *nebula0.SessionID `thrift:"session_id,1,optional" db:"session_id" json:"session_id,omitempty"`
  PlanID *nebula0.ExecutionPlanID `thrift:"plan_id,2,optional" db:"plan_id" json:"plan_id,omitempty"`
  ProfileDetail *bool `thrift:"profile_detail,3,optional" db:"profile_detail" json:"profile_detail,omitempty"`
}

func NewRequestCommon() *RequestCommon {
  return &RequestCommon{}
}

var RequestCommon_SessionID_DEFAULT nebula0.SessionID
func (p *RequestCommon) GetSessionID() nebula0.SessionID {
  if !p.IsSetSessionID() {
    return RequestCommon_SessionID_DEFAULT
  }
return *p.SessionID
}
var RequestCommon_PlanID_DEFAULT nebula0.ExecutionPlanID
func (p *RequestCommon) GetPlanID() nebula0.ExecutionPlanID {
  if !p.IsSetPlanID() {
    return RequestCommon_PlanID_DEFAULT
  }
return *p.PlanID
}
var RequestCommon_ProfileDetail_DEFAULT bool
func (p *RequestCommon) GetProfileDetail() bool {
  if !p.IsSetProfileDetail() {
    return RequestCommon_ProfileDetail_DEFAULT
  }
return *p.ProfileDetail
}
func (p *RequestCommon) IsSetSessionID() bool {
  return p != nil && p.SessionID != nil
}

func (p *RequestCommon) IsSetPlanID() bool {
  return p != nil && p.PlanID != nil
}

func (p *RequestCommon) IsSetProfileDetail() bool {
  return p != nil && p.ProfileDetail != nil
}

type RequestCommonBuilder struct {
  obj *RequestCommon
}

func NewRequestCommonBuilder() *RequestCommonBuilder{
  return &RequestCommonBuilder{
    obj: NewRequestCommon(),
  }
}

func (p RequestCommonBuilder) Emit() *RequestCommon{
  return &RequestCommon{
    SessionID: p.obj.SessionID,
    PlanID: p.obj.PlanID,
    ProfileDetail: p.obj.ProfileDetail,
  }
}

func (r *RequestCommonBuilder) SessionID(sessionID *nebula0.SessionID) *RequestCommonBuilder {
  r.obj.SessionID = sessionID
  return r
}

func (r *RequestCommonBuilder) PlanID(planID *nebula0.ExecutionPlanID) *RequestCommonBuilder {
  r.obj.PlanID = planID
  return r
}

func (r *RequestCommonBuilder) ProfileDetail(profileDetail *bool) *RequestCommonBuilder {
  r.obj.ProfileDetail = profileDetail
  return r
}

func (r *RequestCommon) SetSessionID(sessionID *nebula0.SessionID) *RequestCommon {
  r.SessionID = sessionID
  return r
}

func (r *RequestCommon) SetPlanID(planID *nebula0.ExecutionPlanID) *RequestCommon {
  r.PlanID = planID
  return r
}

func (r *RequestCommon) SetProfileDetail(profileDetail *bool) *RequestCommon {
  r.ProfileDetail = profileDetail
  return r
}

func (p *RequestCommon) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestCommon)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.SessionID(v)
    p.SessionID = &temp
  }
  return nil
}

func (p *RequestCommon)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.ExecutionPlanID(v)
    p.PlanID = &temp
  }
  return nil
}

func (p *RequestCommon)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ProfileDetail = &v
  }
  return nil
}

func (p *RequestCommon) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RequestCommon"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestCommon) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin("session_id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  }
  return err
}

func (p *RequestCommon) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetPlanID() {
    if err := oprot.WriteFieldBegin("plan_id", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plan_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PlanID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.plan_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plan_id: ", p), err) }
  }
  return err
}

func (p *RequestCommon) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetProfileDetail() {
    if err := oprot.WriteFieldBegin("profile_detail", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profile_detail: ", p), err) }
    if err := oprot.WriteBool(bool(*p.ProfileDetail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.profile_detail (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profile_detail: ", p), err) }
  }
  return err
}

func (p *RequestCommon) String() string {
  if p == nil {
    return "<nil>"
  }

  var sessionIDVal string
  if p.SessionID == nil {
    sessionIDVal = "<nil>"
  } else {
    sessionIDVal = fmt.Sprintf("%v", *p.SessionID)
  }
  var planIDVal string
  if p.PlanID == nil {
    planIDVal = "<nil>"
  } else {
    planIDVal = fmt.Sprintf("%v", *p.PlanID)
  }
  var profileDetailVal string
  if p.ProfileDetail == nil {
    profileDetailVal = "<nil>"
  } else {
    profileDetailVal = fmt.Sprintf("%v", *p.ProfileDetail)
  }
  return fmt.Sprintf("RequestCommon({SessionID:%s PlanID:%s ProfileDetail:%s})", sessionIDVal, planIDVal, profileDetailVal)
}

// Attributes:
//  - Code
//  - PartID
//  - Leader
type PartitionResult_ struct {
  Code nebula0.ErrorCode `thrift:"code,1,required" db:"code" json:"code"`
  PartID nebula0.PartitionID `thrift:"part_id,2,required" db:"part_id" json:"part_id"`
  Leader *nebula0.HostAddr `thrift:"leader,3,optional" db:"leader" json:"leader,omitempty"`
}

func NewPartitionResult_() *PartitionResult_ {
  return &PartitionResult_{}
}


func (p *PartitionResult_) GetCode() nebula0.ErrorCode {
  return p.Code
}

func (p *PartitionResult_) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var PartitionResult__Leader_DEFAULT *nebula0.HostAddr
func (p *PartitionResult_) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return PartitionResult__Leader_DEFAULT
  }
return p.Leader
}
func (p *PartitionResult_) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type PartitionResult_Builder struct {
  obj *PartitionResult_
}

func NewPartitionResult_Builder() *PartitionResult_Builder{
  return &PartitionResult_Builder{
    obj: NewPartitionResult_(),
  }
}

func (p PartitionResult_Builder) Emit() *PartitionResult_{
  return &PartitionResult_{
    Code: p.obj.Code,
    PartID: p.obj.PartID,
    Leader: p.obj.Leader,
  }
}

func (p *PartitionResult_Builder) Code(code nebula0.ErrorCode) *PartitionResult_Builder {
  p.obj.Code = code
  return p
}

func (p *PartitionResult_Builder) PartID(partID nebula0.PartitionID) *PartitionResult_Builder {
  p.obj.PartID = partID
  return p
}

func (p *PartitionResult_Builder) Leader(leader *nebula0.HostAddr) *PartitionResult_Builder {
  p.obj.Leader = leader
  return p
}

func (p *PartitionResult_) SetCode(code nebula0.ErrorCode) *PartitionResult_ {
  p.Code = code
  return p
}

func (p *PartitionResult_) SetPartID(partID nebula0.PartitionID) *PartitionResult_ {
  p.PartID = partID
  return p
}

func (p *PartitionResult_) SetLeader(leader *nebula0.HostAddr) *PartitionResult_ {
  p.Leader = leader
  return p
}

func (p *PartitionResult_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetPartID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetPartID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetPartID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  return nil
}

func (p *PartitionResult_)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *PartitionResult_)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *PartitionResult_)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *PartitionResult_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartitionResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionResult_) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *PartitionResult_) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *PartitionResult_) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
    if err := p.Leader.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  }
  return err
}

func (p *PartitionResult_) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  return fmt.Sprintf("PartitionResult_({Code:%s PartID:%s Leader:%s})", codeVal, partIDVal, leaderVal)
}

// Attributes:
//  - FailedParts
//  - LatencyInUs
//  - LatencyDetailUs
type ResponseCommon struct {
  FailedParts []*PartitionResult_ `thrift:"failed_parts,1,required" db:"failed_parts" json:"failed_parts"`
  LatencyInUs int64 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  LatencyDetailUs map[string]int32 `thrift:"latency_detail_us,3,optional" db:"latency_detail_us" json:"latency_detail_us,omitempty"`
}

func NewResponseCommon() *ResponseCommon {
  return &ResponseCommon{}
}


func (p *ResponseCommon) GetFailedParts() []*PartitionResult_ {
  return p.FailedParts
}

func (p *ResponseCommon) GetLatencyInUs() int64 {
  return p.LatencyInUs
}
var ResponseCommon_LatencyDetailUs_DEFAULT map[string]int32

func (p *ResponseCommon) GetLatencyDetailUs() map[string]int32 {
  return p.LatencyDetailUs
}
func (p *ResponseCommon) IsSetLatencyDetailUs() bool {
  return p != nil && p.LatencyDetailUs != nil
}

type ResponseCommonBuilder struct {
  obj *ResponseCommon
}

func NewResponseCommonBuilder() *ResponseCommonBuilder{
  return &ResponseCommonBuilder{
    obj: NewResponseCommon(),
  }
}

func (p ResponseCommonBuilder) Emit() *ResponseCommon{
  return &ResponseCommon{
    FailedParts: p.obj.FailedParts,
    LatencyInUs: p.obj.LatencyInUs,
    LatencyDetailUs: p.obj.LatencyDetailUs,
  }
}

func (r *ResponseCommonBuilder) FailedParts(failedParts []*PartitionResult_) *ResponseCommonBuilder {
  r.obj.FailedParts = failedParts
  return r
}

func (r *ResponseCommonBuilder) LatencyInUs(latencyInUs int64) *ResponseCommonBuilder {
  r.obj.LatencyInUs = latencyInUs
  return r
}

func (r *ResponseCommonBuilder) LatencyDetailUs(latencyDetailUs map[string]int32) *ResponseCommonBuilder {
  r.obj.LatencyDetailUs = latencyDetailUs
  return r
}

func (r *ResponseCommon) SetFailedParts(failedParts []*PartitionResult_) *ResponseCommon {
  r.FailedParts = failedParts
  return r
}

func (r *ResponseCommon) SetLatencyInUs(latencyInUs int64) *ResponseCommon {
  r.LatencyInUs = latencyInUs
  return r
}

func (r *ResponseCommon) SetLatencyDetailUs(latencyDetailUs map[string]int32) *ResponseCommon {
  r.LatencyDetailUs = latencyDetailUs
  return r
}

func (p *ResponseCommon) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFailedParts bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFailedParts = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLatencyInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFailedParts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FailedParts is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ResponseCommon)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionResult_, 0, size)
  p.FailedParts =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := NewPartitionResult_()
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.FailedParts = append(p.FailedParts, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResponseCommon)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.LatencyInUs = v
  }
  return nil
}

func (p *ResponseCommon)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.LatencyDetailUs =  tMap
  for i := 0; i < size; i ++ {
    var _key3 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key3 = v
    }
    var _val4 int32
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val4 = v
    }
    p.LatencyDetailUs[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ResponseCommon) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ResponseCommon"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseCommon) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("failed_parts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failed_parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedParts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FailedParts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failed_parts: ", p), err) }
  return err
}

func (p *ResponseCommon) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("latency_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI64(int64(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ResponseCommon) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetLatencyDetailUs() {
    if err := oprot.WriteFieldBegin("latency_detail_us", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latency_detail_us: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.LatencyDetailUs)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.LatencyDetailUs {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latency_detail_us: ", p), err) }
  }
  return err
}

func (p *ResponseCommon) String() string {
  if p == nil {
    return "<nil>"
  }

  failedPartsVal := fmt.Sprintf("%v", p.FailedParts)
  latencyInUsVal := fmt.Sprintf("%v", p.LatencyInUs)
  latencyDetailUsVal := fmt.Sprintf("%v", p.LatencyDetailUs)
  return fmt.Sprintf("ResponseCommon({FailedParts:%s LatencyInUs:%s LatencyDetailUs:%s})", failedPartsVal, latencyInUsVal, latencyDetailUsVal)
}

// Attributes:
//  - Alias
//  - Prop
//  - Stat
type StatProp struct {
  Alias []byte `thrift:"alias,1" db:"alias" json:"alias"`
  Prop []byte `thrift:"prop,2" db:"prop" json:"prop"`
  Stat StatType `thrift:"stat,3" db:"stat" json:"stat"`
}

func NewStatProp() *StatProp {
  return &StatProp{}
}


func (p *StatProp) GetAlias() []byte {
  return p.Alias
}

func (p *StatProp) GetProp() []byte {
  return p.Prop
}

func (p *StatProp) GetStat() StatType {
  return p.Stat
}
type StatPropBuilder struct {
  obj *StatProp
}

func NewStatPropBuilder() *StatPropBuilder{
  return &StatPropBuilder{
    obj: NewStatProp(),
  }
}

func (p StatPropBuilder) Emit() *StatProp{
  return &StatProp{
    Alias: p.obj.Alias,
    Prop: p.obj.Prop,
    Stat: p.obj.Stat,
  }
}

func (s *StatPropBuilder) Alias(alias []byte) *StatPropBuilder {
  s.obj.Alias = alias
  return s
}

func (s *StatPropBuilder) Prop(prop []byte) *StatPropBuilder {
  s.obj.Prop = prop
  return s
}

func (s *StatPropBuilder) Stat(stat StatType) *StatPropBuilder {
  s.obj.Stat = stat
  return s
}

func (s *StatProp) SetAlias(alias []byte) *StatProp {
  s.Alias = alias
  return s
}

func (s *StatProp) SetProp(prop []byte) *StatProp {
  s.Prop = prop
  return s
}

func (s *StatProp) SetStat(stat StatType) *StatProp {
  s.Stat = stat
  return s
}

func (p *StatProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Alias = v
  }
  return nil
}

func (p *StatProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Prop = v
  }
  return nil
}

func (p *StatProp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := StatType(v)
    p.Stat = temp
  }
  return nil
}

func (p *StatProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StatProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatProp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("alias", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alias: ", p), err) }
  if err := oprot.WriteBinary(p.Alias); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alias (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alias: ", p), err) }
  return err
}

func (p *StatProp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prop: ", p), err) }
  if err := oprot.WriteBinary(p.Prop); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prop (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prop: ", p), err) }
  return err
}

func (p *StatProp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stat", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stat: ", p), err) }
  if err := oprot.WriteI32(int32(p.Stat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stat (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stat: ", p), err) }
  return err
}

func (p *StatProp) String() string {
  if p == nil {
    return "<nil>"
  }

  aliasVal := fmt.Sprintf("%v", p.Alias)
  propVal := fmt.Sprintf("%v", p.Prop)
  statVal := fmt.Sprintf("%v", p.Stat)
  return fmt.Sprintf("StatProp({Alias:%s Prop:%s Stat:%s})", aliasVal, propVal, statVal)
}

// Attributes:
//  - Alias
//  - Expr
type Expr struct {
  Alias []byte `thrift:"alias,1" db:"alias" json:"alias"`
  Expr []byte `thrift:"expr,2" db:"expr" json:"expr"`
}

func NewExpr() *Expr {
  return &Expr{}
}


func (p *Expr) GetAlias() []byte {
  return p.Alias
}

func (p *Expr) GetExpr() []byte {
  return p.Expr
}
type ExprBuilder struct {
  obj *Expr
}

func NewExprBuilder() *ExprBuilder{
  return &ExprBuilder{
    obj: NewExpr(),
  }
}

func (p ExprBuilder) Emit() *Expr{
  return &Expr{
    Alias: p.obj.Alias,
    Expr: p.obj.Expr,
  }
}

func (e *ExprBuilder) Alias(alias []byte) *ExprBuilder {
  e.obj.Alias = alias
  return e
}

func (e *ExprBuilder) Expr(expr []byte) *ExprBuilder {
  e.obj.Expr = expr
  return e
}

func (e *Expr) SetAlias(alias []byte) *Expr {
  e.Alias = alias
  return e
}

func (e *Expr) SetExpr(expr []byte) *Expr {
  e.Expr = expr
  return e
}

func (p *Expr) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Expr)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Alias = v
  }
  return nil
}

func (p *Expr)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Expr = v
  }
  return nil
}

func (p *Expr) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Expr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Expr) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("alias", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alias: ", p), err) }
  if err := oprot.WriteBinary(p.Alias); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alias (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alias: ", p), err) }
  return err
}

func (p *Expr) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("expr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expr: ", p), err) }
  if err := oprot.WriteBinary(p.Expr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expr: ", p), err) }
  return err
}

func (p *Expr) String() string {
  if p == nil {
    return "<nil>"
  }

  aliasVal := fmt.Sprintf("%v", p.Alias)
  exprVal := fmt.Sprintf("%v", p.Expr)
  return fmt.Sprintf("Expr({Alias:%s Expr:%s})", aliasVal, exprVal)
}

// Attributes:
//  - Type
//  - Props
type EdgeProp struct {
  Type nebula0.EdgeType `thrift:"type,1" db:"type" json:"type"`
  Props [][]byte `thrift:"props,2" db:"props" json:"props"`
}

func NewEdgeProp() *EdgeProp {
  return &EdgeProp{}
}


func (p *EdgeProp) GetType() nebula0.EdgeType {
  return p.Type
}

func (p *EdgeProp) GetProps() [][]byte {
  return p.Props
}
type EdgePropBuilder struct {
  obj *EdgeProp
}

func NewEdgePropBuilder() *EdgePropBuilder{
  return &EdgePropBuilder{
    obj: NewEdgeProp(),
  }
}

func (p EdgePropBuilder) Emit() *EdgeProp{
  return &EdgeProp{
    Type: p.obj.Type,
    Props: p.obj.Props,
  }
}

func (e *EdgePropBuilder) Type(type_a1 nebula0.EdgeType) *EdgePropBuilder {
  e.obj.Type = type_a1
  return e
}

func (e *EdgePropBuilder) Props(props [][]byte) *EdgePropBuilder {
  e.obj.Props = props
  return e
}

func (e *EdgeProp) SetType(type_a1 nebula0.EdgeType) *EdgeProp {
  e.Type = type_a1
  return e
}

func (e *EdgeProp) SetProps(props [][]byte) *EdgeProp {
  e.Props = props
  return e
}

func (p *EdgeProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.EdgeType(v)
    p.Type = temp
  }
  return nil
}

func (p *EdgeProp)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    var _elem5 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem5 = v
    }
    p.Props = append(p.Props, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EdgeProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeProp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *EdgeProp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *EdgeProp) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  propsVal := fmt.Sprintf("%v", p.Props)
  return fmt.Sprintf("EdgeProp({Type:%s Props:%s})", typeVal, propsVal)
}

// Attributes:
//  - Tag
//  - Props
type VertexProp struct {
  Tag nebula0.TagID `thrift:"tag,1" db:"tag" json:"tag"`
  Props [][]byte `thrift:"props,2" db:"props" json:"props"`
}

func NewVertexProp() *VertexProp {
  return &VertexProp{}
}


func (p *VertexProp) GetTag() nebula0.TagID {
  return p.Tag
}

func (p *VertexProp) GetProps() [][]byte {
  return p.Props
}
type VertexPropBuilder struct {
  obj *VertexProp
}

func NewVertexPropBuilder() *VertexPropBuilder{
  return &VertexPropBuilder{
    obj: NewVertexProp(),
  }
}

func (p VertexPropBuilder) Emit() *VertexProp{
  return &VertexProp{
    Tag: p.obj.Tag,
    Props: p.obj.Props,
  }
}

func (v *VertexPropBuilder) Tag(tag nebula0.TagID) *VertexPropBuilder {
  v.obj.Tag = tag
  return v
}

func (v *VertexPropBuilder) Props(props [][]byte) *VertexPropBuilder {
  v.obj.Props = props
  return v
}

func (v *VertexProp) SetTag(tag nebula0.TagID) *VertexProp {
  v.Tag = tag
  return v
}

func (v *VertexProp) SetProps(props [][]byte) *VertexProp {
  v.Props = props
  return v
}

func (p *VertexProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VertexProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.TagID(v)
    p.Tag = temp
  }
  return nil
}

func (p *VertexProp)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    var _elem6 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem6 = v
    }
    p.Props = append(p.Props, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VertexProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VertexProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VertexProp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err) }
  return err
}

func (p *VertexProp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *VertexProp) String() string {
  if p == nil {
    return "<nil>"
  }

  tagVal := fmt.Sprintf("%v", p.Tag)
  propsVal := fmt.Sprintf("%v", p.Props)
  return fmt.Sprintf("VertexProp({Tag:%s Props:%s})", tagVal, propsVal)
}

// Attributes:
//  - Prop
//  - Direction
type OrderBy struct {
  Prop []byte `thrift:"prop,1" db:"prop" json:"prop"`
  Direction OrderDirection `thrift:"direction,2" db:"direction" json:"direction"`
}

func NewOrderBy() *OrderBy {
  return &OrderBy{}
}


func (p *OrderBy) GetProp() []byte {
  return p.Prop
}

func (p *OrderBy) GetDirection() OrderDirection {
  return p.Direction
}
type OrderByBuilder struct {
  obj *OrderBy
}

func NewOrderByBuilder() *OrderByBuilder{
  return &OrderByBuilder{
    obj: NewOrderBy(),
  }
}

func (p OrderByBuilder) Emit() *OrderBy{
  return &OrderBy{
    Prop: p.obj.Prop,
    Direction: p.obj.Direction,
  }
}

func (o *OrderByBuilder) Prop(prop []byte) *OrderByBuilder {
  o.obj.Prop = prop
  return o
}

func (o *OrderByBuilder) Direction(direction OrderDirection) *OrderByBuilder {
  o.obj.Direction = direction
  return o
}

func (o *OrderBy) SetProp(prop []byte) *OrderBy {
  o.Prop = prop
  return o
}

func (o *OrderBy) SetDirection(direction OrderDirection) *OrderBy {
  o.Direction = direction
  return o
}

func (p *OrderBy) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderBy)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Prop = v
  }
  return nil
}

func (p *OrderBy)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := OrderDirection(v)
    p.Direction = temp
  }
  return nil
}

func (p *OrderBy) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OrderBy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderBy) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prop: ", p), err) }
  if err := oprot.WriteBinary(p.Prop); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prop (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prop: ", p), err) }
  return err
}

func (p *OrderBy) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:direction: ", p), err) }
  return err
}

func (p *OrderBy) String() string {
  if p == nil {
    return "<nil>"
  }

  propVal := fmt.Sprintf("%v", p.Prop)
  directionVal := fmt.Sprintf("%v", p.Direction)
  return fmt.Sprintf("OrderBy({Prop:%s Direction:%s})", propVal, directionVal)
}

// Attributes:
//  - EdgeTypes
//  - EdgeDirection
//  - Dedup
//  - StatProps
//  - VertexProps
//  - EdgeProps
//  - Expressions
//  - OrderBy
//  - Random
//  - Limit
//  - Filter
//  - TagFilter
type TraverseSpec struct {
  EdgeTypes []nebula0.EdgeType `thrift:"edge_types,1" db:"edge_types" json:"edge_types"`
  EdgeDirection EdgeDirection `thrift:"edge_direction,2" db:"edge_direction" json:"edge_direction"`
  Dedup bool `thrift:"dedup,3" db:"dedup" json:"dedup"`
  StatProps []*StatProp `thrift:"stat_props,4,optional" db:"stat_props" json:"stat_props,omitempty"`
  VertexProps []*VertexProp `thrift:"vertex_props,5,optional" db:"vertex_props" json:"vertex_props,omitempty"`
  EdgeProps []*EdgeProp `thrift:"edge_props,6,optional" db:"edge_props" json:"edge_props,omitempty"`
  Expressions []*Expr `thrift:"expressions,7,optional" db:"expressions" json:"expressions,omitempty"`
  OrderBy []*OrderBy `thrift:"order_by,8,optional" db:"order_by" json:"order_by,omitempty"`
  Random *bool `thrift:"random,9,optional" db:"random" json:"random,omitempty"`
  Limit *int64 `thrift:"limit,10,optional" db:"limit" json:"limit,omitempty"`
  Filter []byte `thrift:"filter,11,optional" db:"filter" json:"filter,omitempty"`
  TagFilter []byte `thrift:"tag_filter,12,optional" db:"tag_filter" json:"tag_filter,omitempty"`
}

func NewTraverseSpec() *TraverseSpec {
  return &TraverseSpec{
    EdgeDirection: 1,
  }
}


func (p *TraverseSpec) GetEdgeTypes() []nebula0.EdgeType {
  return p.EdgeTypes
}

func (p *TraverseSpec) GetEdgeDirection() EdgeDirection {
  return p.EdgeDirection
}

func (p *TraverseSpec) GetDedup() bool {
  return p.Dedup
}
var TraverseSpec_StatProps_DEFAULT []*StatProp

func (p *TraverseSpec) GetStatProps() []*StatProp {
  return p.StatProps
}
var TraverseSpec_VertexProps_DEFAULT []*VertexProp

func (p *TraverseSpec) GetVertexProps() []*VertexProp {
  return p.VertexProps
}
var TraverseSpec_EdgeProps_DEFAULT []*EdgeProp

func (p *TraverseSpec) GetEdgeProps() []*EdgeProp {
  return p.EdgeProps
}
var TraverseSpec_Expressions_DEFAULT []*Expr

func (p *TraverseSpec) GetExpressions() []*Expr {
  return p.Expressions
}
var TraverseSpec_OrderBy_DEFAULT []*OrderBy

func (p *TraverseSpec) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var TraverseSpec_Random_DEFAULT bool
func (p *TraverseSpec) GetRandom() bool {
  if !p.IsSetRandom() {
    return TraverseSpec_Random_DEFAULT
  }
return *p.Random
}
var TraverseSpec_Limit_DEFAULT int64
func (p *TraverseSpec) GetLimit() int64 {
  if !p.IsSetLimit() {
    return TraverseSpec_Limit_DEFAULT
  }
return *p.Limit
}
var TraverseSpec_Filter_DEFAULT []byte

func (p *TraverseSpec) GetFilter() []byte {
  return p.Filter
}
var TraverseSpec_TagFilter_DEFAULT []byte

func (p *TraverseSpec) GetTagFilter() []byte {
  return p.TagFilter
}
func (p *TraverseSpec) IsSetStatProps() bool {
  return p != nil && p.StatProps != nil
}

func (p *TraverseSpec) IsSetVertexProps() bool {
  return p != nil && p.VertexProps != nil
}

func (p *TraverseSpec) IsSetEdgeProps() bool {
  return p != nil && p.EdgeProps != nil
}

func (p *TraverseSpec) IsSetExpressions() bool {
  return p != nil && p.Expressions != nil
}

func (p *TraverseSpec) IsSetOrderBy() bool {
  return p != nil && p.OrderBy != nil
}

func (p *TraverseSpec) IsSetRandom() bool {
  return p != nil && p.Random != nil
}

func (p *TraverseSpec) IsSetLimit() bool {
  return p != nil && p.Limit != nil
}

func (p *TraverseSpec) IsSetFilter() bool {
  return p != nil && p.Filter != nil
}

func (p *TraverseSpec) IsSetTagFilter() bool {
  return p != nil && p.TagFilter != nil
}

type TraverseSpecBuilder struct {
  obj *TraverseSpec
}

func NewTraverseSpecBuilder() *TraverseSpecBuilder{
  return &TraverseSpecBuilder{
    obj: NewTraverseSpec(),
  }
}

func (p TraverseSpecBuilder) Emit() *TraverseSpec{
  return &TraverseSpec{
    EdgeTypes: p.obj.EdgeTypes,
    EdgeDirection: p.obj.EdgeDirection,
    Dedup: p.obj.Dedup,
    StatProps: p.obj.StatProps,
    VertexProps: p.obj.VertexProps,
    EdgeProps: p.obj.EdgeProps,
    Expressions: p.obj.Expressions,
    OrderBy: p.obj.OrderBy,
    Random: p.obj.Random,
    Limit: p.obj.Limit,
    Filter: p.obj.Filter,
    TagFilter: p.obj.TagFilter,
  }
}

func (t *TraverseSpecBuilder) EdgeTypes(edgeTypes []nebula0.EdgeType) *TraverseSpecBuilder {
  t.obj.EdgeTypes = edgeTypes
  return t
}

func (t *TraverseSpecBuilder) EdgeDirection(edgeDirection EdgeDirection) *TraverseSpecBuilder {
  t.obj.EdgeDirection = edgeDirection
  return t
}

func (t *TraverseSpecBuilder) Dedup(dedup bool) *TraverseSpecBuilder {
  t.obj.Dedup = dedup
  return t
}

func (t *TraverseSpecBuilder) StatProps(statProps []*StatProp) *TraverseSpecBuilder {
  t.obj.StatProps = statProps
  return t
}

func (t *TraverseSpecBuilder) VertexProps(vertexProps []*VertexProp) *TraverseSpecBuilder {
  t.obj.VertexProps = vertexProps
  return t
}

func (t *TraverseSpecBuilder) EdgeProps(edgeProps []*EdgeProp) *TraverseSpecBuilder {
  t.obj.EdgeProps = edgeProps
  return t
}

func (t *TraverseSpecBuilder) Expressions(expressions []*Expr) *TraverseSpecBuilder {
  t.obj.Expressions = expressions
  return t
}

func (t *TraverseSpecBuilder) OrderBy(orderBy []*OrderBy) *TraverseSpecBuilder {
  t.obj.OrderBy = orderBy
  return t
}

func (t *TraverseSpecBuilder) Random(random *bool) *TraverseSpecBuilder {
  t.obj.Random = random
  return t
}

func (t *TraverseSpecBuilder) Limit(limit *int64) *TraverseSpecBuilder {
  t.obj.Limit = limit
  return t
}

func (t *TraverseSpecBuilder) Filter(filter []byte) *TraverseSpecBuilder {
  t.obj.Filter = filter
  return t
}

func (t *TraverseSpecBuilder) TagFilter(tagFilter []byte) *TraverseSpecBuilder {
  t.obj.TagFilter = tagFilter
  return t
}

func (t *TraverseSpec) SetEdgeTypes(edgeTypes []nebula0.EdgeType) *TraverseSpec {
  t.EdgeTypes = edgeTypes
  return t
}

func (t *TraverseSpec) SetEdgeDirection(edgeDirection EdgeDirection) *TraverseSpec {
  t.EdgeDirection = edgeDirection
  return t
}

func (t *TraverseSpec) SetDedup(dedup bool) *TraverseSpec {
  t.Dedup = dedup
  return t
}

func (t *TraverseSpec) SetStatProps(statProps []*StatProp) *TraverseSpec {
  t.StatProps = statProps
  return t
}

func (t *TraverseSpec) SetVertexProps(vertexProps []*VertexProp) *TraverseSpec {
  t.VertexProps = vertexProps
  return t
}

func (t *TraverseSpec) SetEdgeProps(edgeProps []*EdgeProp) *TraverseSpec {
  t.EdgeProps = edgeProps
  return t
}

func (t *TraverseSpec) SetExpressions(expressions []*Expr) *TraverseSpec {
  t.Expressions = expressions
  return t
}

func (t *TraverseSpec) SetOrderBy(orderBy []*OrderBy) *TraverseSpec {
  t.OrderBy = orderBy
  return t
}

func (t *TraverseSpec) SetRandom(random *bool) *TraverseSpec {
  t.Random = random
  return t
}

func (t *TraverseSpec) SetLimit(limit *int64) *TraverseSpec {
  t.Limit = limit
  return t
}

func (t *TraverseSpec) SetFilter(filter []byte) *TraverseSpec {
  t.Filter = filter
  return t
}

func (t *TraverseSpec) SetTagFilter(tagFilter []byte) *TraverseSpec {
  t.TagFilter = tagFilter
  return t
}

func (p *TraverseSpec) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.EdgeType, 0, size)
  p.EdgeTypes =  tSlice
  for i := 0; i < size; i ++ {
    var _elem7 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.EdgeType(v)
      _elem7 = temp
    }
    p.EdgeTypes = append(p.EdgeTypes, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := EdgeDirection(v)
    p.EdgeDirection = temp
  }
  return nil
}

func (p *TraverseSpec)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Dedup = v
  }
  return nil
}

func (p *TraverseSpec)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*StatProp, 0, size)
  p.StatProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := NewStatProp()
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.StatProps = append(p.StatProps, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.VertexProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := NewVertexProp()
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.VertexProps = append(p.VertexProps, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.EdgeProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := NewEdgeProp()
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.EdgeProps = append(p.EdgeProps, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Expr, 0, size)
  p.Expressions =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := NewExpr()
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Expressions = append(p.Expressions, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := NewOrderBy()
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.OrderBy = append(p.OrderBy, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.Random = &v
  }
  return nil
}

func (p *TraverseSpec)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 10: ", err)
  } else {
    p.Limit = &v
  }
  return nil
}

func (p *TraverseSpec)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 11: ", err)
  } else {
    p.Filter = v
  }
  return nil
}

func (p *TraverseSpec)  ReadField12(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 12: ", err)
  } else {
    p.TagFilter = v
  }
  return nil
}

func (p *TraverseSpec) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TraverseSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TraverseSpec) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_types", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.EdgeTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_types: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_direction", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeDirection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_direction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_direction: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dedup", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dedup: ", p), err) }
  if err := oprot.WriteBool(bool(p.Dedup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dedup (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dedup: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetStatProps() {
    if err := oprot.WriteFieldBegin("stat_props", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stat_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StatProps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stat_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetVertexProps() {
    if err := oprot.WriteFieldBegin("vertex_props", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vertex_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VertexProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VertexProps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vertex_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeProps() {
    if err := oprot.WriteFieldBegin("edge_props", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:edge_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EdgeProps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:edge_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetExpressions() {
    if err := oprot.WriteFieldBegin("expressions", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:expressions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Expressions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Expressions {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:expressions: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin("order_by", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:order_by: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:order_by: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetRandom() {
    if err := oprot.WriteFieldBegin("random", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:random: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Random)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.random (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:random: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:limit: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField11(oprot thrift.Protocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin("filter", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:filter: ", p), err) }
    if err := oprot.WriteBinary(p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:filter: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField12(oprot thrift.Protocol) (err error) {
  if p.IsSetTagFilter() {
    if err := oprot.WriteFieldBegin("tag_filter", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tag_filter: ", p), err) }
    if err := oprot.WriteBinary(p.TagFilter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_filter (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tag_filter: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) String() string {
  if p == nil {
    return "<nil>"
  }

  edgeTypesVal := fmt.Sprintf("%v", p.EdgeTypes)
  edgeDirectionVal := fmt.Sprintf("%v", p.EdgeDirection)
  dedupVal := fmt.Sprintf("%v", p.Dedup)
  statPropsVal := fmt.Sprintf("%v", p.StatProps)
  vertexPropsVal := fmt.Sprintf("%v", p.VertexProps)
  edgePropsVal := fmt.Sprintf("%v", p.EdgeProps)
  expressionsVal := fmt.Sprintf("%v", p.Expressions)
  orderByVal := fmt.Sprintf("%v", p.OrderBy)
  var randomVal string
  if p.Random == nil {
    randomVal = "<nil>"
  } else {
    randomVal = fmt.Sprintf("%v", *p.Random)
  }
  var limitVal string
  if p.Limit == nil {
    limitVal = "<nil>"
  } else {
    limitVal = fmt.Sprintf("%v", *p.Limit)
  }
  filterVal := fmt.Sprintf("%v", p.Filter)
  tagFilterVal := fmt.Sprintf("%v", p.TagFilter)
  return fmt.Sprintf("TraverseSpec({EdgeTypes:%s EdgeDirection:%s Dedup:%s StatProps:%s VertexProps:%s EdgeProps:%s Expressions:%s OrderBy:%s Random:%s Limit:%s Filter:%s TagFilter:%s})", edgeTypesVal, edgeDirectionVal, dedupVal, statPropsVal, vertexPropsVal, edgePropsVal, expressionsVal, orderByVal, randomVal, limitVal, filterVal, tagFilterVal)
}

// Attributes:
//  - SpaceID
//  - ColumnNames
//  - Parts
//  - TraverseSpec
//  - Common
type GetNeighborsRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  ColumnNames [][]byte `thrift:"column_names,2" db:"column_names" json:"column_names"`
  Parts map[nebula0.PartitionID][]*nebula0.Value `thrift:"parts,3" db:"parts" json:"parts"`
  TraverseSpec *TraverseSpec `thrift:"traverse_spec,4" db:"traverse_spec" json:"traverse_spec"`
  Common *RequestCommon `thrift:"common,5,optional" db:"common" json:"common,omitempty"`
}

func NewGetNeighborsRequest() *GetNeighborsRequest {
  return &GetNeighborsRequest{
    TraverseSpec: NewTraverseSpec(),
  }
}


func (p *GetNeighborsRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetNeighborsRequest) GetColumnNames() [][]byte {
  return p.ColumnNames
}

func (p *GetNeighborsRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Value {
  return p.Parts
}
var GetNeighborsRequest_TraverseSpec_DEFAULT *TraverseSpec
func (p *GetNeighborsRequest) GetTraverseSpec() *TraverseSpec {
  if !p.IsSetTraverseSpec() {
    return GetNeighborsRequest_TraverseSpec_DEFAULT
  }
return p.TraverseSpec
}
var GetNeighborsRequest_Common_DEFAULT *RequestCommon
func (p *GetNeighborsRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetNeighborsRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetNeighborsRequest) IsSetTraverseSpec() bool {
  return p != nil && p.TraverseSpec != nil
}

func (p *GetNeighborsRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type GetNeighborsRequestBuilder struct {
  obj *GetNeighborsRequest
}

func NewGetNeighborsRequestBuilder() *GetNeighborsRequestBuilder{
  return &GetNeighborsRequestBuilder{
    obj: NewGetNeighborsRequest(),
  }
}

func (p GetNeighborsRequestBuilder) Emit() *GetNeighborsRequest{
  return &GetNeighborsRequest{
    SpaceID: p.obj.SpaceID,
    ColumnNames: p.obj.ColumnNames,
    Parts: p.obj.Parts,
    TraverseSpec: p.obj.TraverseSpec,
    Common: p.obj.Common,
  }
}

func (g *GetNeighborsRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetNeighborsRequestBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetNeighborsRequestBuilder) ColumnNames(columnNames [][]byte) *GetNeighborsRequestBuilder {
  g.obj.ColumnNames = columnNames
  return g
}

func (g *GetNeighborsRequestBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.Value) *GetNeighborsRequestBuilder {
  g.obj.Parts = parts
  return g
}

func (g *GetNeighborsRequestBuilder) TraverseSpec(traverseSpec *TraverseSpec) *GetNeighborsRequestBuilder {
  g.obj.TraverseSpec = traverseSpec
  return g
}

func (g *GetNeighborsRequestBuilder) Common(common *RequestCommon) *GetNeighborsRequestBuilder {
  g.obj.Common = common
  return g
}

func (g *GetNeighborsRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetNeighborsRequest {
  g.SpaceID = spaceID
  return g
}

func (g *GetNeighborsRequest) SetColumnNames(columnNames [][]byte) *GetNeighborsRequest {
  g.ColumnNames = columnNames
  return g
}

func (g *GetNeighborsRequest) SetParts(parts map[nebula0.PartitionID][]*nebula0.Value) *GetNeighborsRequest {
  g.Parts = parts
  return g
}

func (g *GetNeighborsRequest) SetTraverseSpec(traverseSpec *TraverseSpec) *GetNeighborsRequest {
  g.TraverseSpec = traverseSpec
  return g
}

func (g *GetNeighborsRequest) SetCommon(common *RequestCommon) *GetNeighborsRequest {
  g.Common = common
  return g
}

func (p *GetNeighborsRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
    var _elem13 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem13 = v
    }
    p.ColumnNames = append(p.ColumnNames, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key14 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key14 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Value, 0, size)
    _val15 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem16 := nebula0.NewValue()
      if err := _elem16.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
      }
      _val15 = append(_val15, _elem16)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField4(iprot thrift.Protocol) error {
  p.TraverseSpec = NewTraverseSpec()
  if err := p.TraverseSpec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TraverseSpec), err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField5(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetNeighborsRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetNeighborsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetNeighborsRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("column_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_names: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("traverse_spec", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:traverse_spec: ", p), err) }
  if err := p.TraverseSpec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TraverseSpec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:traverse_spec: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *GetNeighborsRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  columnNamesVal := fmt.Sprintf("%v", p.ColumnNames)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var traverseSpecVal string
  if p.TraverseSpec == nil {
    traverseSpecVal = "<nil>"
  } else {
    traverseSpecVal = fmt.Sprintf("%v", p.TraverseSpec)
  }
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("GetNeighborsRequest({SpaceID:%s ColumnNames:%s Parts:%s TraverseSpec:%s Common:%s})", spaceIDVal, columnNamesVal, partsVal, traverseSpecVal, commonVal)
}

// Attributes:
//  - Result_
//  - Vertices
type GetNeighborsResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Vertices *nebula0.DataSet `thrift:"vertices,2,optional" db:"vertices" json:"vertices,omitempty"`
}

func NewGetNeighborsResponse() *GetNeighborsResponse {
  return &GetNeighborsResponse{
    Result_: NewResponseCommon(),
  }
}

var GetNeighborsResponse_Result__DEFAULT *ResponseCommon
func (p *GetNeighborsResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetNeighborsResponse_Result__DEFAULT
  }
return p.Result_
}
var GetNeighborsResponse_Vertices_DEFAULT *nebula0.DataSet
func (p *GetNeighborsResponse) GetVertices() *nebula0.DataSet {
  if !p.IsSetVertices() {
    return GetNeighborsResponse_Vertices_DEFAULT
  }
return p.Vertices
}
func (p *GetNeighborsResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *GetNeighborsResponse) IsSetVertices() bool {
  return p != nil && p.Vertices != nil
}

type GetNeighborsResponseBuilder struct {
  obj *GetNeighborsResponse
}

func NewGetNeighborsResponseBuilder() *GetNeighborsResponseBuilder{
  return &GetNeighborsResponseBuilder{
    obj: NewGetNeighborsResponse(),
  }
}

func (p GetNeighborsResponseBuilder) Emit() *GetNeighborsResponse{
  return &GetNeighborsResponse{
    Result_: p.obj.Result_,
    Vertices: p.obj.Vertices,
  }
}

func (g *GetNeighborsResponseBuilder) Result_(result *ResponseCommon) *GetNeighborsResponseBuilder {
  g.obj.Result_ = result
  return g
}

func (g *GetNeighborsResponseBuilder) Vertices(vertices *nebula0.DataSet) *GetNeighborsResponseBuilder {
  g.obj.Vertices = vertices
  return g
}

func (g *GetNeighborsResponse) SetResult_(result *ResponseCommon) *GetNeighborsResponse {
  g.Result_ = result
  return g
}

func (g *GetNeighborsResponse) SetVertices(vertices *nebula0.DataSet) *GetNeighborsResponse {
  g.Vertices = vertices
  return g
}

func (p *GetNeighborsResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetNeighborsResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetNeighborsResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Vertices = nebula0.NewDataSet()
  if err := p.Vertices.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vertices), err)
  }
  return nil
}

func (p *GetNeighborsResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetNeighborsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetNeighborsResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetNeighborsResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetVertices() {
    if err := oprot.WriteFieldBegin("vertices", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertices: ", p), err) }
    if err := p.Vertices.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vertices), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertices: ", p), err) }
  }
  return err
}

func (p *GetNeighborsResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var verticesVal string
  if p.Vertices == nil {
    verticesVal = "<nil>"
  } else {
    verticesVal = fmt.Sprintf("%v", p.Vertices)
  }
  return fmt.Sprintf("GetNeighborsResponse({Result_:%s Vertices:%s})", resultVal, verticesVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeTypes
//  - Common
type GetDstBySrcRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.Value `thrift:"parts,2" db:"parts" json:"parts"`
  EdgeTypes []nebula0.EdgeType `thrift:"edge_types,3" db:"edge_types" json:"edge_types"`
  Common *RequestCommon `thrift:"common,4,optional" db:"common" json:"common,omitempty"`
}

func NewGetDstBySrcRequest() *GetDstBySrcRequest {
  return &GetDstBySrcRequest{}
}


func (p *GetDstBySrcRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetDstBySrcRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Value {
  return p.Parts
}

func (p *GetDstBySrcRequest) GetEdgeTypes() []nebula0.EdgeType {
  return p.EdgeTypes
}
var GetDstBySrcRequest_Common_DEFAULT *RequestCommon
func (p *GetDstBySrcRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetDstBySrcRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetDstBySrcRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type GetDstBySrcRequestBuilder struct {
  obj *GetDstBySrcRequest
}

func NewGetDstBySrcRequestBuilder() *GetDstBySrcRequestBuilder{
  return &GetDstBySrcRequestBuilder{
    obj: NewGetDstBySrcRequest(),
  }
}

func (p GetDstBySrcRequestBuilder) Emit() *GetDstBySrcRequest{
  return &GetDstBySrcRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    EdgeTypes: p.obj.EdgeTypes,
    Common: p.obj.Common,
  }
}

func (g *GetDstBySrcRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetDstBySrcRequestBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetDstBySrcRequestBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.Value) *GetDstBySrcRequestBuilder {
  g.obj.Parts = parts
  return g
}

func (g *GetDstBySrcRequestBuilder) EdgeTypes(edgeTypes []nebula0.EdgeType) *GetDstBySrcRequestBuilder {
  g.obj.EdgeTypes = edgeTypes
  return g
}

func (g *GetDstBySrcRequestBuilder) Common(common *RequestCommon) *GetDstBySrcRequestBuilder {
  g.obj.Common = common
  return g
}

func (g *GetDstBySrcRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetDstBySrcRequest {
  g.SpaceID = spaceID
  return g
}

func (g *GetDstBySrcRequest) SetParts(parts map[nebula0.PartitionID][]*nebula0.Value) *GetDstBySrcRequest {
  g.Parts = parts
  return g
}

func (g *GetDstBySrcRequest) SetEdgeTypes(edgeTypes []nebula0.EdgeType) *GetDstBySrcRequest {
  g.EdgeTypes = edgeTypes
  return g
}

func (g *GetDstBySrcRequest) SetCommon(common *RequestCommon) *GetDstBySrcRequest {
  g.Common = common
  return g
}

func (p *GetDstBySrcRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key17 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key17 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Value, 0, size)
    _val18 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem19 := nebula0.NewValue()
      if err := _elem19.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
      }
      _val18 = append(_val18, _elem19)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.EdgeType, 0, size)
  p.EdgeTypes =  tSlice
  for i := 0; i < size; i ++ {
    var _elem20 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.EdgeType(v)
      _elem20 = temp
    }
    p.EdgeTypes = append(p.EdgeTypes, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField4(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetDstBySrcRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetDstBySrcRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetDstBySrcRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_types", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.EdgeTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_types: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err) }
  }
  return err
}

func (p *GetDstBySrcRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  edgeTypesVal := fmt.Sprintf("%v", p.EdgeTypes)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("GetDstBySrcRequest({SpaceID:%s Parts:%s EdgeTypes:%s Common:%s})", spaceIDVal, partsVal, edgeTypesVal, commonVal)
}

// Attributes:
//  - Result_
//  - Dsts
type GetDstBySrcResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Dsts *nebula0.DataSet `thrift:"dsts,2,optional" db:"dsts" json:"dsts,omitempty"`
}

func NewGetDstBySrcResponse() *GetDstBySrcResponse {
  return &GetDstBySrcResponse{
    Result_: NewResponseCommon(),
  }
}

var GetDstBySrcResponse_Result__DEFAULT *ResponseCommon
func (p *GetDstBySrcResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetDstBySrcResponse_Result__DEFAULT
  }
return p.Result_
}
var GetDstBySrcResponse_Dsts_DEFAULT *nebula0.DataSet
func (p *GetDstBySrcResponse) GetDsts() *nebula0.DataSet {
  if !p.IsSetDsts() {
    return GetDstBySrcResponse_Dsts_DEFAULT
  }
return p.Dsts
}
func (p *GetDstBySrcResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *GetDstBySrcResponse) IsSetDsts() bool {
  return p != nil && p.Dsts != nil
}

type GetDstBySrcResponseBuilder struct {
  obj *GetDstBySrcResponse
}

func NewGetDstBySrcResponseBuilder() *GetDstBySrcResponseBuilder{
  return &GetDstBySrcResponseBuilder{
    obj: NewGetDstBySrcResponse(),
  }
}

func (p GetDstBySrcResponseBuilder) Emit() *GetDstBySrcResponse{
  return &GetDstBySrcResponse{
    Result_: p.obj.Result_,
    Dsts: p.obj.Dsts,
  }
}

func (g *GetDstBySrcResponseBuilder) Result_(result *ResponseCommon) *GetDstBySrcResponseBuilder {
  g.obj.Result_ = result
  return g
}

func (g *GetDstBySrcResponseBuilder) Dsts(dsts *nebula0.DataSet) *GetDstBySrcResponseBuilder {
  g.obj.Dsts = dsts
  return g
}

func (g *GetDstBySrcResponse) SetResult_(result *ResponseCommon) *GetDstBySrcResponse {
  g.Result_ = result
  return g
}

func (g *GetDstBySrcResponse) SetDsts(dsts *nebula0.DataSet) *GetDstBySrcResponse {
  g.Dsts = dsts
  return g
}

func (p *GetDstBySrcResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetDstBySrcResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetDstBySrcResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Dsts = nebula0.NewDataSet()
  if err := p.Dsts.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dsts), err)
  }
  return nil
}

func (p *GetDstBySrcResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetDstBySrcResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetDstBySrcResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetDstBySrcResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetDsts() {
    if err := oprot.WriteFieldBegin("dsts", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dsts: ", p), err) }
    if err := p.Dsts.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dsts), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dsts: ", p), err) }
  }
  return err
}

func (p *GetDstBySrcResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var dstsVal string
  if p.Dsts == nil {
    dstsVal = "<nil>"
  } else {
    dstsVal = fmt.Sprintf("%v", p.Dsts)
  }
  return fmt.Sprintf("GetDstBySrcResponse({Result_:%s Dsts:%s})", resultVal, dstsVal)
}

// Attributes:
//  - Result_
type ExecResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewExecResponse() *ExecResponse {
  return &ExecResponse{
    Result_: NewResponseCommon(),
  }
}

var ExecResponse_Result__DEFAULT *ResponseCommon
func (p *ExecResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ExecResponse_Result__DEFAULT
  }
return p.Result_
}
func (p *ExecResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

type ExecResponseBuilder struct {
  obj *ExecResponse
}

func NewExecResponseBuilder() *ExecResponseBuilder{
  return &ExecResponseBuilder{
    obj: NewExecResponse(),
  }
}

func (p ExecResponseBuilder) Emit() *ExecResponse{
  return &ExecResponse{
    Result_: p.obj.Result_,
  }
}

func (e *ExecResponseBuilder) Result_(result *ResponseCommon) *ExecResponseBuilder {
  e.obj.Result_ = result
  return e
}

func (e *ExecResponse) SetResult_(result *ResponseCommon) *ExecResponse {
  e.Result_ = result
  return e
}

func (p *ExecResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ExecResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ExecResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ExecResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  return fmt.Sprintf("ExecResponse({Result_:%s})", resultVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - VertexProps
//  - EdgeProps
//  - Expressions
//  - Dedup
//  - OrderBy
//  - Limit
//  - Filter
//  - Common
type GetPropRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.Row `thrift:"parts,2" db:"parts" json:"parts"`
  VertexProps []*VertexProp `thrift:"vertex_props,3,optional" db:"vertex_props" json:"vertex_props,omitempty"`
  EdgeProps []*EdgeProp `thrift:"edge_props,4,optional" db:"edge_props" json:"edge_props,omitempty"`
  Expressions []*Expr `thrift:"expressions,5,optional" db:"expressions" json:"expressions,omitempty"`
  Dedup bool `thrift:"dedup,6" db:"dedup" json:"dedup"`
  OrderBy []*OrderBy `thrift:"order_by,7,optional" db:"order_by" json:"order_by,omitempty"`
  Limit *int64 `thrift:"limit,8,optional" db:"limit" json:"limit,omitempty"`
  Filter []byte `thrift:"filter,9,optional" db:"filter" json:"filter,omitempty"`
  Common *RequestCommon `thrift:"common,10,optional" db:"common" json:"common,omitempty"`
}

func NewGetPropRequest() *GetPropRequest {
  return &GetPropRequest{}
}


func (p *GetPropRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetPropRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Row {
  return p.Parts
}
var GetPropRequest_VertexProps_DEFAULT []*VertexProp

func (p *GetPropRequest) GetVertexProps() []*VertexProp {
  return p.VertexProps
}
var GetPropRequest_EdgeProps_DEFAULT []*EdgeProp

func (p *GetPropRequest) GetEdgeProps() []*EdgeProp {
  return p.EdgeProps
}
var GetPropRequest_Expressions_DEFAULT []*Expr

func (p *GetPropRequest) GetExpressions() []*Expr {
  return p.Expressions
}

func (p *GetPropRequest) GetDedup() bool {
  return p.Dedup
}
var GetPropRequest_OrderBy_DEFAULT []*OrderBy

func (p *GetPropRequest) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var GetPropRequest_Limit_DEFAULT int64
func (p *GetPropRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return GetPropRequest_Limit_DEFAULT
  }
return *p.Limit
}
var GetPropRequest_Filter_DEFAULT []byte

func (p *GetPropRequest) GetFilter() []byte {
  return p.Filter
}
var GetPropRequest_Common_DEFAULT *RequestCommon
func (p *GetPropRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetPropRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetPropRequest) IsSetVertexProps() bool {
  return p != nil && p.VertexProps != nil
}

func (p *GetPropRequest) IsSetEdgeProps() bool {
  return p != nil && p.EdgeProps != nil
}

func (p *GetPropRequest) IsSetExpressions() bool {
  return p != nil && p.Expressions != nil
}

func (p *GetPropRequest) IsSetOrderBy() bool {
  return p != nil && p.OrderBy != nil
}

func (p *GetPropRequest) IsSetLimit() bool {
  return p != nil && p.Limit != nil
}

func (p *GetPropRequest) IsSetFilter() bool {
  return p != nil && p.Filter != nil
}

func (p *GetPropRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type GetPropRequestBuilder struct {
  obj *GetPropRequest
}

func NewGetPropRequestBuilder() *GetPropRequestBuilder{
  return &GetPropRequestBuilder{
    obj: NewGetPropRequest(),
  }
}

func (p GetPropRequestBuilder) Emit() *GetPropRequest{
  return &GetPropRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    VertexProps: p.obj.VertexProps,
    EdgeProps: p.obj.EdgeProps,
    Expressions: p.obj.Expressions,
    Dedup: p.obj.Dedup,
    OrderBy: p.obj.OrderBy,
    Limit: p.obj.Limit,
    Filter: p.obj.Filter,
    Common: p.obj.Common,
  }
}

func (g *GetPropRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetPropRequestBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetPropRequestBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.Row) *GetPropRequestBuilder {
  g.obj.Parts = parts
  return g
}

func (g *GetPropRequestBuilder) VertexProps(vertexProps []*VertexProp) *GetPropRequestBuilder {
  g.obj.VertexProps = vertexProps
  return g
}

func (g *GetPropRequestBuilder) EdgeProps(edgeProps []*EdgeProp) *GetPropRequestBuilder {
  g.obj.EdgeProps = edgeProps
  return g
}

func (g *GetPropRequestBuilder) Expressions(expressions []*Expr) *GetPropRequestBuilder {
  g.obj.Expressions = expressions
  return g
}

func (g *GetPropRequestBuilder) Dedup(dedup bool) *GetPropRequestBuilder {
  g.obj.Dedup = dedup
  return g
}

func (g *GetPropRequestBuilder) OrderBy(orderBy []*OrderBy) *GetPropRequestBuilder {
  g.obj.OrderBy = orderBy
  return g
}

func (g *GetPropRequestBuilder) Limit(limit *int64) *GetPropRequestBuilder {
  g.obj.Limit = limit
  return g
}

func (g *GetPropRequestBuilder) Filter(filter []byte) *GetPropRequestBuilder {
  g.obj.Filter = filter
  return g
}

func (g *GetPropRequestBuilder) Common(common *RequestCommon) *GetPropRequestBuilder {
  g.obj.Common = common
  return g
}

func (g *GetPropRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetPropRequest {
  g.SpaceID = spaceID
  return g
}

func (g *GetPropRequest) SetParts(parts map[nebula0.PartitionID][]*nebula0.Row) *GetPropRequest {
  g.Parts = parts
  return g
}

func (g *GetPropRequest) SetVertexProps(vertexProps []*VertexProp) *GetPropRequest {
  g.VertexProps = vertexProps
  return g
}

func (g *GetPropRequest) SetEdgeProps(edgeProps []*EdgeProp) *GetPropRequest {
  g.EdgeProps = edgeProps
  return g
}

func (g *GetPropRequest) SetExpressions(expressions []*Expr) *GetPropRequest {
  g.Expressions = expressions
  return g
}

func (g *GetPropRequest) SetDedup(dedup bool) *GetPropRequest {
  g.Dedup = dedup
  return g
}

func (g *GetPropRequest) SetOrderBy(orderBy []*OrderBy) *GetPropRequest {
  g.OrderBy = orderBy
  return g
}

func (g *GetPropRequest) SetLimit(limit *int64) *GetPropRequest {
  g.Limit = limit
  return g
}

func (g *GetPropRequest) SetFilter(filter []byte) *GetPropRequest {
  g.Filter = filter
  return g
}

func (g *GetPropRequest) SetCommon(common *RequestCommon) *GetPropRequest {
  g.Common = common
  return g
}

func (p *GetPropRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetPropRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Row, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key21 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key21 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Row, 0, size)
    _val22 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem23 := nebula0.NewRow()
      if err := _elem23.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
      }
      _val22 = append(_val22, _elem23)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.VertexProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := NewVertexProp()
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.VertexProps = append(p.VertexProps, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.EdgeProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := NewEdgeProp()
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.EdgeProps = append(p.EdgeProps, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Expr, 0, size)
  p.Expressions =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := NewExpr()
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Expressions = append(p.Expressions, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Dedup = v
  }
  return nil
}

func (p *GetPropRequest)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := NewOrderBy()
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.OrderBy = append(p.OrderBy, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Limit = &v
  }
  return nil
}

func (p *GetPropRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.Filter = v
  }
  return nil
}

func (p *GetPropRequest)  ReadField10(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetPropRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPropRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPropRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetVertexProps() {
    if err := oprot.WriteFieldBegin("vertex_props", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertex_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VertexProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VertexProps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertex_props: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeProps() {
    if err := oprot.WriteFieldBegin("edge_props", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:edge_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EdgeProps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:edge_props: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetExpressions() {
    if err := oprot.WriteFieldBegin("expressions", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:expressions: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Expressions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Expressions {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:expressions: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dedup", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dedup: ", p), err) }
  if err := oprot.WriteBool(bool(p.Dedup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dedup (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dedup: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin("order_by", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order_by: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order_by: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:limit: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin("filter", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:filter: ", p), err) }
    if err := oprot.WriteBinary(p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:filter: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  vertexPropsVal := fmt.Sprintf("%v", p.VertexProps)
  edgePropsVal := fmt.Sprintf("%v", p.EdgeProps)
  expressionsVal := fmt.Sprintf("%v", p.Expressions)
  dedupVal := fmt.Sprintf("%v", p.Dedup)
  orderByVal := fmt.Sprintf("%v", p.OrderBy)
  var limitVal string
  if p.Limit == nil {
    limitVal = "<nil>"
  } else {
    limitVal = fmt.Sprintf("%v", *p.Limit)
  }
  filterVal := fmt.Sprintf("%v", p.Filter)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("GetPropRequest({SpaceID:%s Parts:%s VertexProps:%s EdgeProps:%s Expressions:%s Dedup:%s OrderBy:%s Limit:%s Filter:%s Common:%s})", spaceIDVal, partsVal, vertexPropsVal, edgePropsVal, expressionsVal, dedupVal, orderByVal, limitVal, filterVal, commonVal)
}

// Attributes:
//  - Result_
//  - Props
type GetPropResponse struct {
  Result_ *ResponseCommon `thrift:"result,1" db:"result" json:"result"`
  Props *nebula0.DataSet `thrift:"props,2,optional" db:"props" json:"props,omitempty"`
}

func NewGetPropResponse() *GetPropResponse {
  return &GetPropResponse{
    Result_: NewResponseCommon(),
  }
}

var GetPropResponse_Result__DEFAULT *ResponseCommon
func (p *GetPropResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetPropResponse_Result__DEFAULT
  }
return p.Result_
}
var GetPropResponse_Props_DEFAULT *nebula0.DataSet
func (p *GetPropResponse) GetProps() *nebula0.DataSet {
  if !p.IsSetProps() {
    return GetPropResponse_Props_DEFAULT
  }
return p.Props
}
func (p *GetPropResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *GetPropResponse) IsSetProps() bool {
  return p != nil && p.Props != nil
}

type GetPropResponseBuilder struct {
  obj *GetPropResponse
}

func NewGetPropResponseBuilder() *GetPropResponseBuilder{
  return &GetPropResponseBuilder{
    obj: NewGetPropResponse(),
  }
}

func (p GetPropResponseBuilder) Emit() *GetPropResponse{
  return &GetPropResponse{
    Result_: p.obj.Result_,
    Props: p.obj.Props,
  }
}

func (g *GetPropResponseBuilder) Result_(result *ResponseCommon) *GetPropResponseBuilder {
  g.obj.Result_ = result
  return g
}

func (g *GetPropResponseBuilder) Props(props *nebula0.DataSet) *GetPropResponseBuilder {
  g.obj.Props = props
  return g
}

func (g *GetPropResponse) SetResult_(result *ResponseCommon) *GetPropResponse {
  g.Result_ = result
  return g
}

func (g *GetPropResponse) SetProps(props *nebula0.DataSet) *GetPropResponse {
  g.Props = props
  return g
}

func (p *GetPropResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPropResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetPropResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Props = nebula0.NewDataSet()
  if err := p.Props.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *GetPropResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPropResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPropResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetPropResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin("props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *GetPropResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var propsVal string
  if p.Props == nil {
    propsVal = "<nil>"
  } else {
    propsVal = fmt.Sprintf("%v", p.Props)
  }
  return fmt.Sprintf("GetPropResponse({Result_:%s Props:%s})", resultVal, propsVal)
}

// Attributes:
//  - TagID
//  - Props
type NewTag_ struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Props []*nebula0.Value `thrift:"props,2" db:"props" json:"props"`
}

func NewNewTag_() *NewTag_ {
  return &NewTag_{}
}


func (p *NewTag_) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *NewTag_) GetProps() []*nebula0.Value {
  return p.Props
}
type NewTag_Builder struct {
  obj *NewTag_
}

func NewNewTag_Builder() *NewTag_Builder{
  return &NewTag_Builder{
    obj: NewNewTag_(),
  }
}

func (p NewTag_Builder) Emit() *NewTag_{
  return &NewTag_{
    TagID: p.obj.TagID,
    Props: p.obj.Props,
  }
}

func (n *NewTag_Builder) TagID(tagID nebula0.TagID) *NewTag_Builder {
  n.obj.TagID = tagID
  return n
}

func (n *NewTag_Builder) Props(props []*nebula0.Value) *NewTag_Builder {
  n.obj.Props = props
  return n
}

func (n *NewTag_) SetTagID(tagID nebula0.TagID) *NewTag_ {
  n.TagID = tagID
  return n
}

func (n *NewTag_) SetProps(props []*nebula0.Value) *NewTag_ {
  n.Props = props
  return n
}

func (p *NewTag_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewTag_)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.TagID(v)
    p.TagID = temp
  }
  return nil
}

func (p *NewTag_)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.Value, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := nebula0.NewValue()
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.Props = append(p.Props, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewTag_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NewTag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewTag_) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *NewTag_) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *NewTag_) String() string {
  if p == nil {
    return "<nil>"
  }

  tagIDVal := fmt.Sprintf("%v", p.TagID)
  propsVal := fmt.Sprintf("%v", p.Props)
  return fmt.Sprintf("NewTag_({TagID:%s Props:%s})", tagIDVal, propsVal)
}

// Attributes:
//  - Id
//  - Tags
type NewVertex_ struct {
  Id *nebula0.Value `thrift:"id,1" db:"id" json:"id"`
  Tags []*NewTag_ `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewNewVertex_() *NewVertex_ {
  return &NewVertex_{}
}

var NewVertex__Id_DEFAULT *nebula0.Value
func (p *NewVertex_) GetId() *nebula0.Value {
  if !p.IsSetId() {
    return NewVertex__Id_DEFAULT
  }
return p.Id
}

func (p *NewVertex_) GetTags() []*NewTag_ {
  return p.Tags
}
func (p *NewVertex_) IsSetId() bool {
  return p != nil && p.Id != nil
}

type NewVertex_Builder struct {
  obj *NewVertex_
}

func NewNewVertex_Builder() *NewVertex_Builder{
  return &NewVertex_Builder{
    obj: NewNewVertex_(),
  }
}

func (p NewVertex_Builder) Emit() *NewVertex_{
  return &NewVertex_{
    Id: p.obj.Id,
    Tags: p.obj.Tags,
  }
}

func (n *NewVertex_Builder) Id(id *nebula0.Value) *NewVertex_Builder {
  n.obj.Id = id
  return n
}

func (n *NewVertex_Builder) Tags(tags []*NewTag_) *NewVertex_Builder {
  n.obj.Tags = tags
  return n
}

func (n *NewVertex_) SetId(id *nebula0.Value) *NewVertex_ {
  n.Id = id
  return n
}

func (n *NewVertex_) SetTags(tags []*NewTag_) *NewVertex_ {
  n.Tags = tags
  return n
}

func (p *NewVertex_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewVertex_)  ReadField1(iprot thrift.Protocol) error {
  p.Id = nebula0.NewValue()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *NewVertex_)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NewTag_, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := NewNewTag_()
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Tags = append(p.Tags, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewVertex_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NewVertex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewVertex_) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *NewVertex_) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *NewVertex_) String() string {
  if p == nil {
    return "<nil>"
  }

  var idVal string
  if p.Id == nil {
    idVal = "<nil>"
  } else {
    idVal = fmt.Sprintf("%v", p.Id)
  }
  tagsVal := fmt.Sprintf("%v", p.Tags)
  return fmt.Sprintf("NewVertex_({Id:%s Tags:%s})", idVal, tagsVal)
}

// Attributes:
//  - Src
//  - EdgeType
//  - Ranking
//  - Dst
type EdgeKey struct {
  Src *nebula0.Value `thrift:"src,1" db:"src" json:"src"`
  EdgeType nebula0.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type"`
  Ranking nebula0.EdgeRanking `thrift:"ranking,3" db:"ranking" json:"ranking"`
  Dst *nebula0.Value `thrift:"dst,4" db:"dst" json:"dst"`
}

func NewEdgeKey() *EdgeKey {
  return &EdgeKey{}
}

var EdgeKey_Src_DEFAULT *nebula0.Value
func (p *EdgeKey) GetSrc() *nebula0.Value {
  if !p.IsSetSrc() {
    return EdgeKey_Src_DEFAULT
  }
return p.Src
}

func (p *EdgeKey) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgeKey) GetRanking() nebula0.EdgeRanking {
  return p.Ranking
}
var EdgeKey_Dst_DEFAULT *nebula0.Value
func (p *EdgeKey) GetDst() *nebula0.Value {
  if !p.IsSetDst() {
    return EdgeKey_Dst_DEFAULT
  }
return p.Dst
}
func (p *EdgeKey) IsSetSrc() bool {
  return p != nil && p.Src != nil
}

func (p *EdgeKey) IsSetDst() bool {
  return p != nil && p.Dst != nil
}

type EdgeKeyBuilder struct {
  obj *EdgeKey
}

func NewEdgeKeyBuilder() *EdgeKeyBuilder{
  return &EdgeKeyBuilder{
    obj: NewEdgeKey(),
  }
}

func (p EdgeKeyBuilder) Emit() *EdgeKey{
  return &EdgeKey{
    Src: p.obj.Src,
    EdgeType: p.obj.EdgeType,
    Ranking: p.obj.Ranking,
    Dst: p.obj.Dst,
  }
}

func (e *EdgeKeyBuilder) Src(src *nebula0.Value) *EdgeKeyBuilder {
  e.obj.Src = src
  return e
}

func (e *EdgeKeyBuilder) EdgeType(edgeType nebula0.EdgeType) *EdgeKeyBuilder {
  e.obj.EdgeType = edgeType
  return e
}

func (e *EdgeKeyBuilder) Ranking(ranking nebula0.EdgeRanking) *EdgeKeyBuilder {
  e.obj.Ranking = ranking
  return e
}

func (e *EdgeKeyBuilder) Dst(dst *nebula0.Value) *EdgeKeyBuilder {
  e.obj.Dst = dst
  return e
}

func (e *EdgeKey) SetSrc(src *nebula0.Value) *EdgeKey {
  e.Src = src
  return e
}

func (e *EdgeKey) SetEdgeType(edgeType nebula0.EdgeType) *EdgeKey {
  e.EdgeType = edgeType
  return e
}

func (e *EdgeKey) SetRanking(ranking nebula0.EdgeRanking) *EdgeKey {
  e.Ranking = ranking
  return e
}

func (e *EdgeKey) SetDst(dst *nebula0.Value) *EdgeKey {
  e.Dst = dst
  return e
}

func (p *EdgeKey) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeKey)  ReadField1(iprot thrift.Protocol) error {
  p.Src = nebula0.NewValue()
  if err := p.Src.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *EdgeKey)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.EdgeType(v)
    p.EdgeType = temp
  }
  return nil
}

func (p *EdgeKey)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := nebula0.EdgeRanking(v)
    p.Ranking = temp
  }
  return nil
}

func (p *EdgeKey)  ReadField4(iprot thrift.Protocol) error {
  p.Dst = nebula0.NewValue()
  if err := p.Dst.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dst), err)
  }
  return nil
}

func (p *EdgeKey) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeKey) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *EdgeKey) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  return err
}

func (p *EdgeKey) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ranking", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ranking: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ranking)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ranking (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ranking: ", p), err) }
  return err
}

func (p *EdgeKey) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dst: ", p), err) }
  if err := p.Dst.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dst), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dst: ", p), err) }
  return err
}

func (p *EdgeKey) String() string {
  if p == nil {
    return "<nil>"
  }

  var srcVal string
  if p.Src == nil {
    srcVal = "<nil>"
  } else {
    srcVal = fmt.Sprintf("%v", p.Src)
  }
  edgeTypeVal := fmt.Sprintf("%v", p.EdgeType)
  rankingVal := fmt.Sprintf("%v", p.Ranking)
  var dstVal string
  if p.Dst == nil {
    dstVal = "<nil>"
  } else {
    dstVal = fmt.Sprintf("%v", p.Dst)
  }
  return fmt.Sprintf("EdgeKey({Src:%s EdgeType:%s Ranking:%s Dst:%s})", srcVal, edgeTypeVal, rankingVal, dstVal)
}

// Attributes:
//  - Key
//  - Props
type NewEdge_ struct {
  Key *EdgeKey `thrift:"key,1" db:"key" json:"key"`
  Props []*nebula0.Value `thrift:"props,2" db:"props" json:"props"`
}

func NewNewEdge_() *NewEdge_ {
  return &NewEdge_{
    Key: NewEdgeKey(),
  }
}

var NewEdge__Key_DEFAULT *EdgeKey
func (p *NewEdge_) GetKey() *EdgeKey {
  if !p.IsSetKey() {
    return NewEdge__Key_DEFAULT
  }
return p.Key
}

func (p *NewEdge_) GetProps() []*nebula0.Value {
  return p.Props
}
func (p *NewEdge_) IsSetKey() bool {
  return p != nil && p.Key != nil
}

type NewEdge_Builder struct {
  obj *NewEdge_
}

func NewNewEdge_Builder() *NewEdge_Builder{
  return &NewEdge_Builder{
    obj: NewNewEdge_(),
  }
}

func (p NewEdge_Builder) Emit() *NewEdge_{
  return &NewEdge_{
    Key: p.obj.Key,
    Props: p.obj.Props,
  }
}

func (n *NewEdge_Builder) Key(key *EdgeKey) *NewEdge_Builder {
  n.obj.Key = key
  return n
}

func (n *NewEdge_Builder) Props(props []*nebula0.Value) *NewEdge_Builder {
  n.obj.Props = props
  return n
}

func (n *NewEdge_) SetKey(key *EdgeKey) *NewEdge_ {
  n.Key = key
  return n
}

func (n *NewEdge_) SetProps(props []*nebula0.Value) *NewEdge_ {
  n.Props = props
  return n
}

func (p *NewEdge_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewEdge_)  ReadField1(iprot thrift.Protocol) error {
  p.Key = NewEdgeKey()
  if err := p.Key.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *NewEdge_)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.Value, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := nebula0.NewValue()
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Props = append(p.Props, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewEdge_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("NewEdge"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewEdge_) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *NewEdge_) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *NewEdge_) String() string {
  if p == nil {
    return "<nil>"
  }

  var keyVal string
  if p.Key == nil {
    keyVal = "<nil>"
  } else {
    keyVal = fmt.Sprintf("%v", p.Key)
  }
  propsVal := fmt.Sprintf("%v", p.Props)
  return fmt.Sprintf("NewEdge_({Key:%s Props:%s})", keyVal, propsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - IgnoreExistedIndex
//  - Common
type AddVerticesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*NewVertex_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames map[nebula0.TagID][][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  IgnoreExistedIndex bool `thrift:"ignore_existed_index,5" db:"ignore_existed_index" json:"ignore_existed_index"`
  Common *RequestCommon `thrift:"common,6,optional" db:"common" json:"common,omitempty"`
}

func NewAddVerticesRequest() *AddVerticesRequest {
  return &AddVerticesRequest{}
}


func (p *AddVerticesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddVerticesRequest) GetParts() map[nebula0.PartitionID][]*NewVertex_ {
  return p.Parts
}

func (p *AddVerticesRequest) GetPropNames() map[nebula0.TagID][][]byte {
  return p.PropNames
}

func (p *AddVerticesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *AddVerticesRequest) GetIgnoreExistedIndex() bool {
  return p.IgnoreExistedIndex
}
var AddVerticesRequest_Common_DEFAULT *RequestCommon
func (p *AddVerticesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return AddVerticesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *AddVerticesRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type AddVerticesRequestBuilder struct {
  obj *AddVerticesRequest
}

func NewAddVerticesRequestBuilder() *AddVerticesRequestBuilder{
  return &AddVerticesRequestBuilder{
    obj: NewAddVerticesRequest(),
  }
}

func (p AddVerticesRequestBuilder) Emit() *AddVerticesRequest{
  return &AddVerticesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    PropNames: p.obj.PropNames,
    IfNotExists: p.obj.IfNotExists,
    IgnoreExistedIndex: p.obj.IgnoreExistedIndex,
    Common: p.obj.Common,
  }
}

func (a *AddVerticesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AddVerticesRequestBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AddVerticesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*NewVertex_) *AddVerticesRequestBuilder {
  a.obj.Parts = parts
  return a
}

func (a *AddVerticesRequestBuilder) PropNames(propNames map[nebula0.TagID][][]byte) *AddVerticesRequestBuilder {
  a.obj.PropNames = propNames
  return a
}

func (a *AddVerticesRequestBuilder) IfNotExists(ifNotExists bool) *AddVerticesRequestBuilder {
  a.obj.IfNotExists = ifNotExists
  return a
}

func (a *AddVerticesRequestBuilder) IgnoreExistedIndex(ignoreExistedIndex bool) *AddVerticesRequestBuilder {
  a.obj.IgnoreExistedIndex = ignoreExistedIndex
  return a
}

func (a *AddVerticesRequestBuilder) Common(common *RequestCommon) *AddVerticesRequestBuilder {
  a.obj.Common = common
  return a
}

func (a *AddVerticesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *AddVerticesRequest {
  a.SpaceID = spaceID
  return a
}

func (a *AddVerticesRequest) SetParts(parts map[nebula0.PartitionID][]*NewVertex_) *AddVerticesRequest {
  a.Parts = parts
  return a
}

func (a *AddVerticesRequest) SetPropNames(propNames map[nebula0.TagID][][]byte) *AddVerticesRequest {
  a.PropNames = propNames
  return a
}

func (a *AddVerticesRequest) SetIfNotExists(ifNotExists bool) *AddVerticesRequest {
  a.IfNotExists = ifNotExists
  return a
}

func (a *AddVerticesRequest) SetIgnoreExistedIndex(ignoreExistedIndex bool) *AddVerticesRequest {
  a.IgnoreExistedIndex = ignoreExistedIndex
  return a
}

func (a *AddVerticesRequest) SetCommon(common *RequestCommon) *AddVerticesRequest {
  a.Common = common
  return a
}

func (p *AddVerticesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*NewVertex_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key31 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key31 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewVertex_, 0, size)
    _val32 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem33 := NewNewVertex_()
      if err := _elem33.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
      }
      _val32 = append(_val32, _elem33)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.TagID][][]byte, size)
  p.PropNames =  tMap
  for i := 0; i < size; i ++ {
    var _key34 nebula0.TagID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.TagID(v)
      _key34 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val35 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem36 []byte
      if v, err := iprot.ReadBinary(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _elem36 = v
      }
      _val35 = append(_val35, _elem36)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PropNames[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.IgnoreExistedIndex = v
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField6(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *AddVerticesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddVerticesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop_names", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PropNames {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ignore_existed_index", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ignore_existed_index: ", p), err) }
  if err := oprot.WriteBool(bool(p.IgnoreExistedIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignore_existed_index (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ignore_existed_index: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:common: ", p), err) }
  }
  return err
}

func (p *AddVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  propNamesVal := fmt.Sprintf("%v", p.PropNames)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  ignoreExistedIndexVal := fmt.Sprintf("%v", p.IgnoreExistedIndex)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("AddVerticesRequest({SpaceID:%s Parts:%s PropNames:%s IfNotExists:%s IgnoreExistedIndex:%s Common:%s})", spaceIDVal, partsVal, propNamesVal, ifNotExistsVal, ignoreExistedIndexVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - IgnoreExistedIndex
//  - Common
type AddEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*NewEdge_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames [][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  IgnoreExistedIndex bool `thrift:"ignore_existed_index,5" db:"ignore_existed_index" json:"ignore_existed_index"`
  Common *RequestCommon `thrift:"common,6,optional" db:"common" json:"common,omitempty"`
}

func NewAddEdgesRequest() *AddEdgesRequest {
  return &AddEdgesRequest{}
}


func (p *AddEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddEdgesRequest) GetParts() map[nebula0.PartitionID][]*NewEdge_ {
  return p.Parts
}

func (p *AddEdgesRequest) GetPropNames() [][]byte {
  return p.PropNames
}

func (p *AddEdgesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *AddEdgesRequest) GetIgnoreExistedIndex() bool {
  return p.IgnoreExistedIndex
}
var AddEdgesRequest_Common_DEFAULT *RequestCommon
func (p *AddEdgesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return AddEdgesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *AddEdgesRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type AddEdgesRequestBuilder struct {
  obj *AddEdgesRequest
}

func NewAddEdgesRequestBuilder() *AddEdgesRequestBuilder{
  return &AddEdgesRequestBuilder{
    obj: NewAddEdgesRequest(),
  }
}

func (p AddEdgesRequestBuilder) Emit() *AddEdgesRequest{
  return &AddEdgesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    PropNames: p.obj.PropNames,
    IfNotExists: p.obj.IfNotExists,
    IgnoreExistedIndex: p.obj.IgnoreExistedIndex,
    Common: p.obj.Common,
  }
}

func (a *AddEdgesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AddEdgesRequestBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AddEdgesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*NewEdge_) *AddEdgesRequestBuilder {
  a.obj.Parts = parts
  return a
}

func (a *AddEdgesRequestBuilder) PropNames(propNames [][]byte) *AddEdgesRequestBuilder {
  a.obj.PropNames = propNames
  return a
}

func (a *AddEdgesRequestBuilder) IfNotExists(ifNotExists bool) *AddEdgesRequestBuilder {
  a.obj.IfNotExists = ifNotExists
  return a
}

func (a *AddEdgesRequestBuilder) IgnoreExistedIndex(ignoreExistedIndex bool) *AddEdgesRequestBuilder {
  a.obj.IgnoreExistedIndex = ignoreExistedIndex
  return a
}

func (a *AddEdgesRequestBuilder) Common(common *RequestCommon) *AddEdgesRequestBuilder {
  a.obj.Common = common
  return a
}

func (a *AddEdgesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *AddEdgesRequest {
  a.SpaceID = spaceID
  return a
}

func (a *AddEdgesRequest) SetParts(parts map[nebula0.PartitionID][]*NewEdge_) *AddEdgesRequest {
  a.Parts = parts
  return a
}

func (a *AddEdgesRequest) SetPropNames(propNames [][]byte) *AddEdgesRequest {
  a.PropNames = propNames
  return a
}

func (a *AddEdgesRequest) SetIfNotExists(ifNotExists bool) *AddEdgesRequest {
  a.IfNotExists = ifNotExists
  return a
}

func (a *AddEdgesRequest) SetIgnoreExistedIndex(ignoreExistedIndex bool) *AddEdgesRequest {
  a.IgnoreExistedIndex = ignoreExistedIndex
  return a
}

func (a *AddEdgesRequest) SetCommon(common *RequestCommon) *AddEdgesRequest {
  a.Common = common
  return a
}

func (p *AddEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*NewEdge_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key37 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key37 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewEdge_, 0, size)
    _val38 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem39 := NewNewEdge_()
      if err := _elem39.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
      }
      _val38 = append(_val38, _elem39)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.PropNames =  tSlice
  for i := 0; i < size; i ++ {
    var _elem40 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem40 = v
    }
    p.PropNames = append(p.PropNames, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.IgnoreExistedIndex = v
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField6(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *AddEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PropNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ignore_existed_index", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ignore_existed_index: ", p), err) }
  if err := oprot.WriteBool(bool(p.IgnoreExistedIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignore_existed_index (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ignore_existed_index: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:common: ", p), err) }
  }
  return err
}

func (p *AddEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  propNamesVal := fmt.Sprintf("%v", p.PropNames)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  ignoreExistedIndexVal := fmt.Sprintf("%v", p.IgnoreExistedIndex)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("AddEdgesRequest({SpaceID:%s Parts:%s PropNames:%s IfNotExists:%s IgnoreExistedIndex:%s Common:%s})", spaceIDVal, partsVal, propNamesVal, ifNotExistsVal, ignoreExistedIndexVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteVerticesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.Value `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3,optional" db:"common" json:"common,omitempty"`
}

func NewDeleteVerticesRequest() *DeleteVerticesRequest {
  return &DeleteVerticesRequest{}
}


func (p *DeleteVerticesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteVerticesRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Value {
  return p.Parts
}
var DeleteVerticesRequest_Common_DEFAULT *RequestCommon
func (p *DeleteVerticesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteVerticesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteVerticesRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type DeleteVerticesRequestBuilder struct {
  obj *DeleteVerticesRequest
}

func NewDeleteVerticesRequestBuilder() *DeleteVerticesRequestBuilder{
  return &DeleteVerticesRequestBuilder{
    obj: NewDeleteVerticesRequest(),
  }
}

func (p DeleteVerticesRequestBuilder) Emit() *DeleteVerticesRequest{
  return &DeleteVerticesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    Common: p.obj.Common,
  }
}

func (d *DeleteVerticesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DeleteVerticesRequestBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DeleteVerticesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.Value) *DeleteVerticesRequestBuilder {
  d.obj.Parts = parts
  return d
}

func (d *DeleteVerticesRequestBuilder) Common(common *RequestCommon) *DeleteVerticesRequestBuilder {
  d.obj.Common = common
  return d
}

func (d *DeleteVerticesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *DeleteVerticesRequest {
  d.SpaceID = spaceID
  return d
}

func (d *DeleteVerticesRequest) SetParts(parts map[nebula0.PartitionID][]*nebula0.Value) *DeleteVerticesRequest {
  d.Parts = parts
  return d
}

func (d *DeleteVerticesRequest) SetCommon(common *RequestCommon) *DeleteVerticesRequest {
  d.Common = common
  return d
}

func (p *DeleteVerticesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key41 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key41 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Value, 0, size)
    _val42 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem43 := nebula0.NewValue()
      if err := _elem43.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
      }
      _val42 = append(_val42, _elem43)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key41] = _val42
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField3(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteVerticesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DeleteVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteVerticesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("DeleteVerticesRequest({SpaceID:%s Parts:%s Common:%s})", spaceIDVal, partsVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3,optional" db:"common" json:"common,omitempty"`
}

func NewDeleteEdgesRequest() *DeleteEdgesRequest {
  return &DeleteEdgesRequest{}
}


func (p *DeleteEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteEdgesRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
  return p.Parts
}
var DeleteEdgesRequest_Common_DEFAULT *RequestCommon
func (p *DeleteEdgesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteEdgesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteEdgesRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type DeleteEdgesRequestBuilder struct {
  obj *DeleteEdgesRequest
}

func NewDeleteEdgesRequestBuilder() *DeleteEdgesRequestBuilder{
  return &DeleteEdgesRequestBuilder{
    obj: NewDeleteEdgesRequest(),
  }
}

func (p DeleteEdgesRequestBuilder) Emit() *DeleteEdgesRequest{
  return &DeleteEdgesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    Common: p.obj.Common,
  }
}

func (d *DeleteEdgesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DeleteEdgesRequestBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DeleteEdgesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*EdgeKey) *DeleteEdgesRequestBuilder {
  d.obj.Parts = parts
  return d
}

func (d *DeleteEdgesRequestBuilder) Common(common *RequestCommon) *DeleteEdgesRequestBuilder {
  d.obj.Common = common
  return d
}

func (d *DeleteEdgesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *DeleteEdgesRequest {
  d.SpaceID = spaceID
  return d
}

func (d *DeleteEdgesRequest) SetParts(parts map[nebula0.PartitionID][]*EdgeKey) *DeleteEdgesRequest {
  d.Parts = parts
  return d
}

func (d *DeleteEdgesRequest) SetCommon(common *RequestCommon) *DeleteEdgesRequest {
  d.Common = common
  return d
}

func (p *DeleteEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key44 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key44 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val45 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem46 := NewEdgeKey()
      if err := _elem46.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
      }
      _val45 = append(_val45, _elem46)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key44] = _val45
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField3(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DeleteEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("DeleteEdgesRequest({SpaceID:%s Parts:%s Common:%s})", spaceIDVal, partsVal, commonVal)
}

// Attributes:
//  - Id
//  - Tags
type DelTags struct {
  Id *nebula0.Value `thrift:"id,1" db:"id" json:"id"`
  Tags []nebula0.TagID `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewDelTags() *DelTags {
  return &DelTags{}
}

var DelTags_Id_DEFAULT *nebula0.Value
func (p *DelTags) GetId() *nebula0.Value {
  if !p.IsSetId() {
    return DelTags_Id_DEFAULT
  }
return p.Id
}

func (p *DelTags) GetTags() []nebula0.TagID {
  return p.Tags
}
func (p *DelTags) IsSetId() bool {
  return p != nil && p.Id != nil
}

type DelTagsBuilder struct {
  obj *DelTags
}

func NewDelTagsBuilder() *DelTagsBuilder{
  return &DelTagsBuilder{
    obj: NewDelTags(),
  }
}

func (p DelTagsBuilder) Emit() *DelTags{
  return &DelTags{
    Id: p.obj.Id,
    Tags: p.obj.Tags,
  }
}

func (d *DelTagsBuilder) Id(id *nebula0.Value) *DelTagsBuilder {
  d.obj.Id = id
  return d
}

func (d *DelTagsBuilder) Tags(tags []nebula0.TagID) *DelTagsBuilder {
  d.obj.Tags = tags
  return d
}

func (d *DelTags) SetId(id *nebula0.Value) *DelTags {
  d.Id = id
  return d
}

func (d *DelTags) SetTags(tags []nebula0.TagID) *DelTags {
  d.Tags = tags
  return d
}

func (p *DelTags) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelTags)  ReadField1(iprot thrift.Protocol) error {
  p.Id = nebula0.NewValue()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *DelTags)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.TagID, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    var _elem47 nebula0.TagID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.TagID(v)
      _elem47 = temp
    }
    p.Tags = append(p.Tags, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DelTags) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DelTags"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelTags) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DelTags) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *DelTags) String() string {
  if p == nil {
    return "<nil>"
  }

  var idVal string
  if p.Id == nil {
    idVal = "<nil>"
  } else {
    idVal = fmt.Sprintf("%v", p.Id)
  }
  tagsVal := fmt.Sprintf("%v", p.Tags)
  return fmt.Sprintf("DelTags({Id:%s Tags:%s})", idVal, tagsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteTagsRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*DelTags `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3,optional" db:"common" json:"common,omitempty"`
}

func NewDeleteTagsRequest() *DeleteTagsRequest {
  return &DeleteTagsRequest{}
}


func (p *DeleteTagsRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteTagsRequest) GetParts() map[nebula0.PartitionID][]*DelTags {
  return p.Parts
}
var DeleteTagsRequest_Common_DEFAULT *RequestCommon
func (p *DeleteTagsRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteTagsRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteTagsRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type DeleteTagsRequestBuilder struct {
  obj *DeleteTagsRequest
}

func NewDeleteTagsRequestBuilder() *DeleteTagsRequestBuilder{
  return &DeleteTagsRequestBuilder{
    obj: NewDeleteTagsRequest(),
  }
}

func (p DeleteTagsRequestBuilder) Emit() *DeleteTagsRequest{
  return &DeleteTagsRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    Common: p.obj.Common,
  }
}

func (d *DeleteTagsRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DeleteTagsRequestBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DeleteTagsRequestBuilder) Parts(parts map[nebula0.PartitionID][]*DelTags) *DeleteTagsRequestBuilder {
  d.obj.Parts = parts
  return d
}

func (d *DeleteTagsRequestBuilder) Common(common *RequestCommon) *DeleteTagsRequestBuilder {
  d.obj.Common = common
  return d
}

func (d *DeleteTagsRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *DeleteTagsRequest {
  d.SpaceID = spaceID
  return d
}

func (d *DeleteTagsRequest) SetParts(parts map[nebula0.PartitionID][]*DelTags) *DeleteTagsRequest {
  d.Parts = parts
  return d
}

func (d *DeleteTagsRequest) SetCommon(common *RequestCommon) *DeleteTagsRequest {
  d.Common = common
  return d
}

func (p *DeleteTagsRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteTagsRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DeleteTagsRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*DelTags, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key48 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key48 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*DelTags, 0, size)
    _val49 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem50 := NewDelTags()
      if err := _elem50.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
      }
      _val49 = append(_val49, _elem50)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key48] = _val49
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteTagsRequest)  ReadField3(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteTagsRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DeleteTagsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteTagsRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteTagsRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteTagsRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteTagsRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("DeleteTagsRequest({SpaceID:%s Parts:%s Common:%s})", spaceIDVal, partsVal, commonVal)
}

// Attributes:
//  - Result_
//  - Props
type UpdateResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Props *nebula0.DataSet `thrift:"props,2,optional" db:"props" json:"props,omitempty"`
}

func NewUpdateResponse() *UpdateResponse {
  return &UpdateResponse{
    Result_: NewResponseCommon(),
  }
}

var UpdateResponse_Result__DEFAULT *ResponseCommon
func (p *UpdateResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return UpdateResponse_Result__DEFAULT
  }
return p.Result_
}
var UpdateResponse_Props_DEFAULT *nebula0.DataSet
func (p *UpdateResponse) GetProps() *nebula0.DataSet {
  if !p.IsSetProps() {
    return UpdateResponse_Props_DEFAULT
  }
return p.Props
}
func (p *UpdateResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *UpdateResponse) IsSetProps() bool {
  return p != nil && p.Props != nil
}

type UpdateResponseBuilder struct {
  obj *UpdateResponse
}

func NewUpdateResponseBuilder() *UpdateResponseBuilder{
  return &UpdateResponseBuilder{
    obj: NewUpdateResponse(),
  }
}

func (p UpdateResponseBuilder) Emit() *UpdateResponse{
  return &UpdateResponse{
    Result_: p.obj.Result_,
    Props: p.obj.Props,
  }
}

func (u *UpdateResponseBuilder) Result_(result *ResponseCommon) *UpdateResponseBuilder {
  u.obj.Result_ = result
  return u
}

func (u *UpdateResponseBuilder) Props(props *nebula0.DataSet) *UpdateResponseBuilder {
  u.obj.Props = props
  return u
}

func (u *UpdateResponse) SetResult_(result *ResponseCommon) *UpdateResponse {
  u.Result_ = result
  return u
}

func (u *UpdateResponse) SetProps(props *nebula0.DataSet) *UpdateResponse {
  u.Props = props
  return u
}

func (p *UpdateResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *UpdateResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *UpdateResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Props = nebula0.NewDataSet()
  if err := p.Props.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *UpdateResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin("props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *UpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var propsVal string
  if p.Props == nil {
    propsVal = "<nil>"
  } else {
    propsVal = fmt.Sprintf("%v", p.Props)
  }
  return fmt.Sprintf("UpdateResponse({Result_:%s Props:%s})", resultVal, propsVal)
}

// Attributes:
//  - Name
//  - Value
type UpdatedProp struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewUpdatedProp() *UpdatedProp {
  return &UpdatedProp{}
}


func (p *UpdatedProp) GetName() []byte {
  return p.Name
}

func (p *UpdatedProp) GetValue() []byte {
  return p.Value
}
type UpdatedPropBuilder struct {
  obj *UpdatedProp
}

func NewUpdatedPropBuilder() *UpdatedPropBuilder{
  return &UpdatedPropBuilder{
    obj: NewUpdatedProp(),
  }
}

func (p UpdatedPropBuilder) Emit() *UpdatedProp{
  return &UpdatedProp{
    Name: p.obj.Name,
    Value: p.obj.Value,
  }
}

func (u *UpdatedPropBuilder) Name(name []byte) *UpdatedPropBuilder {
  u.obj.Name = name
  return u
}

func (u *UpdatedPropBuilder) Value(value []byte) *UpdatedPropBuilder {
  u.obj.Value = value
  return u
}

func (u *UpdatedProp) SetName(name []byte) *UpdatedProp {
  u.Name = name
  return u
}

func (u *UpdatedProp) SetValue(value []byte) *UpdatedProp {
  u.Value = value
  return u
}

func (p *UpdatedProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetValue = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetValue{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *UpdatedProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *UpdatedProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Value = v
  }
  return nil
}

func (p *UpdatedProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdatedProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatedProp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *UpdatedProp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *UpdatedProp) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  valueVal := fmt.Sprintf("%v", p.Value)
  return fmt.Sprintf("UpdatedProp({Name:%s Value:%s})", nameVal, valueVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - VertexID
//  - TagID
//  - UpdatedProps
//  - Insertable
//  - ReturnProps
//  - Condition
//  - Common
type UpdateVertexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  VertexID *nebula0.Value `thrift:"vertex_id,3" db:"vertex_id" json:"vertex_id"`
  TagID nebula0.TagID `thrift:"tag_id,4,required" db:"tag_id" json:"tag_id"`
  UpdatedProps []*UpdatedProp `thrift:"updated_props,5" db:"updated_props" json:"updated_props"`
  Insertable bool `thrift:"insertable,6,optional" db:"insertable" json:"insertable,omitempty"`
  ReturnProps [][]byte `thrift:"return_props,7,optional" db:"return_props" json:"return_props,omitempty"`
  Condition []byte `thrift:"condition,8,optional" db:"condition" json:"condition,omitempty"`
  Common *RequestCommon `thrift:"common,9,optional" db:"common" json:"common,omitempty"`
}

func NewUpdateVertexRequest() *UpdateVertexRequest {
  return &UpdateVertexRequest{}
}


func (p *UpdateVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *UpdateVertexRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var UpdateVertexRequest_VertexID_DEFAULT *nebula0.Value
func (p *UpdateVertexRequest) GetVertexID() *nebula0.Value {
  if !p.IsSetVertexID() {
    return UpdateVertexRequest_VertexID_DEFAULT
  }
return p.VertexID
}

func (p *UpdateVertexRequest) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *UpdateVertexRequest) GetUpdatedProps() []*UpdatedProp {
  return p.UpdatedProps
}
var UpdateVertexRequest_Insertable_DEFAULT bool = false

func (p *UpdateVertexRequest) GetInsertable() bool {
  return p.Insertable
}
var UpdateVertexRequest_ReturnProps_DEFAULT [][]byte

func (p *UpdateVertexRequest) GetReturnProps() [][]byte {
  return p.ReturnProps
}
var UpdateVertexRequest_Condition_DEFAULT []byte

func (p *UpdateVertexRequest) GetCondition() []byte {
  return p.Condition
}
var UpdateVertexRequest_Common_DEFAULT *RequestCommon
func (p *UpdateVertexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return UpdateVertexRequest_Common_DEFAULT
  }
return p.Common
}
func (p *UpdateVertexRequest) IsSetVertexID() bool {
  return p != nil && p.VertexID != nil
}

func (p *UpdateVertexRequest) IsSetInsertable() bool {
  return p != nil && p.Insertable != UpdateVertexRequest_Insertable_DEFAULT
}

func (p *UpdateVertexRequest) IsSetReturnProps() bool {
  return p != nil && p.ReturnProps != nil
}

func (p *UpdateVertexRequest) IsSetCondition() bool {
  return p != nil && p.Condition != nil
}

func (p *UpdateVertexRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type UpdateVertexRequestBuilder struct {
  obj *UpdateVertexRequest
}

func NewUpdateVertexRequestBuilder() *UpdateVertexRequestBuilder{
  return &UpdateVertexRequestBuilder{
    obj: NewUpdateVertexRequest(),
  }
}

func (p UpdateVertexRequestBuilder) Emit() *UpdateVertexRequest{
  return &UpdateVertexRequest{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    VertexID: p.obj.VertexID,
    TagID: p.obj.TagID,
    UpdatedProps: p.obj.UpdatedProps,
    Insertable: p.obj.Insertable,
    ReturnProps: p.obj.ReturnProps,
    Condition: p.obj.Condition,
    Common: p.obj.Common,
  }
}

func (u *UpdateVertexRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *UpdateVertexRequestBuilder {
  u.obj.SpaceID = spaceID
  return u
}

func (u *UpdateVertexRequestBuilder) PartID(partID nebula0.PartitionID) *UpdateVertexRequestBuilder {
  u.obj.PartID = partID
  return u
}

func (u *UpdateVertexRequestBuilder) VertexID(vertexID *nebula0.Value) *UpdateVertexRequestBuilder {
  u.obj.VertexID = vertexID
  return u
}

func (u *UpdateVertexRequestBuilder) TagID(tagID nebula0.TagID) *UpdateVertexRequestBuilder {
  u.obj.TagID = tagID
  return u
}

func (u *UpdateVertexRequestBuilder) UpdatedProps(updatedProps []*UpdatedProp) *UpdateVertexRequestBuilder {
  u.obj.UpdatedProps = updatedProps
  return u
}

func (u *UpdateVertexRequestBuilder) Insertable(insertable bool) *UpdateVertexRequestBuilder {
  u.obj.Insertable = insertable
  return u
}

func (u *UpdateVertexRequestBuilder) ReturnProps(returnProps [][]byte) *UpdateVertexRequestBuilder {
  u.obj.ReturnProps = returnProps
  return u
}

func (u *UpdateVertexRequestBuilder) Condition(condition []byte) *UpdateVertexRequestBuilder {
  u.obj.Condition = condition
  return u
}

func (u *UpdateVertexRequestBuilder) Common(common *RequestCommon) *UpdateVertexRequestBuilder {
  u.obj.Common = common
  return u
}

func (u *UpdateVertexRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *UpdateVertexRequest {
  u.SpaceID = spaceID
  return u
}

func (u *UpdateVertexRequest) SetPartID(partID nebula0.PartitionID) *UpdateVertexRequest {
  u.PartID = partID
  return u
}

func (u *UpdateVertexRequest) SetVertexID(vertexID *nebula0.Value) *UpdateVertexRequest {
  u.VertexID = vertexID
  return u
}

func (u *UpdateVertexRequest) SetTagID(tagID nebula0.TagID) *UpdateVertexRequest {
  u.TagID = tagID
  return u
}

func (u *UpdateVertexRequest) SetUpdatedProps(updatedProps []*UpdatedProp) *UpdateVertexRequest {
  u.UpdatedProps = updatedProps
  return u
}

func (u *UpdateVertexRequest) SetInsertable(insertable bool) *UpdateVertexRequest {
  u.Insertable = insertable
  return u
}

func (u *UpdateVertexRequest) SetReturnProps(returnProps [][]byte) *UpdateVertexRequest {
  u.ReturnProps = returnProps
  return u
}

func (u *UpdateVertexRequest) SetCondition(condition []byte) *UpdateVertexRequest {
  u.Condition = condition
  return u
}

func (u *UpdateVertexRequest) SetCommon(common *RequestCommon) *UpdateVertexRequest {
  u.Common = common
  return u
}

func (p *UpdateVertexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTagID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetTagID = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTagID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TagID is not set"));
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField3(iprot thrift.Protocol) error {
  p.VertexID = nebula0.NewValue()
  if err := p.VertexID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VertexID), err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := nebula0.TagID(v)
    p.TagID = temp
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdatedProp, 0, size)
  p.UpdatedProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem51 := NewUpdatedProp()
    if err := _elem51.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem51), err)
    }
    p.UpdatedProps = append(p.UpdatedProps, _elem51)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Insertable = v
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnProps =  tSlice
  for i := 0; i < size; i ++ {
    var _elem52 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem52 = v
    }
    p.ReturnProps = append(p.ReturnProps, _elem52)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Condition = v
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField9(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *UpdateVertexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertex_id: ", p), err) }
  if err := p.VertexID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VertexID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertex_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_props", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updated_props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdatedProps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdatedProps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updated_props: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetInsertable() {
    if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:insertable: ", p), err) }
    if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.insertable (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:insertable: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetReturnProps() {
    if err := oprot.WriteFieldBegin("return_props", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:return_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnProps {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:return_props: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetCondition() {
    if err := oprot.WriteFieldBegin("condition", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:condition: ", p), err) }
    if err := oprot.WriteBinary(p.Condition); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.condition (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:condition: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:common: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var vertexIDVal string
  if p.VertexID == nil {
    vertexIDVal = "<nil>"
  } else {
    vertexIDVal = fmt.Sprintf("%v", p.VertexID)
  }
  tagIDVal := fmt.Sprintf("%v", p.TagID)
  updatedPropsVal := fmt.Sprintf("%v", p.UpdatedProps)
  insertableVal := fmt.Sprintf("%v", p.Insertable)
  returnPropsVal := fmt.Sprintf("%v", p.ReturnProps)
  conditionVal := fmt.Sprintf("%v", p.Condition)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("UpdateVertexRequest({SpaceID:%s PartID:%s VertexID:%s TagID:%s UpdatedProps:%s Insertable:%s ReturnProps:%s Condition:%s Common:%s})", spaceIDVal, partIDVal, vertexIDVal, tagIDVal, updatedPropsVal, insertableVal, returnPropsVal, conditionVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - EdgeKey
//  - UpdatedProps
//  - Insertable
//  - ReturnProps
//  - Condition
//  - Common
type UpdateEdgeRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  EdgeKey *EdgeKey `thrift:"edge_key,3" db:"edge_key" json:"edge_key"`
  UpdatedProps []*UpdatedProp `thrift:"updated_props,4" db:"updated_props" json:"updated_props"`
  Insertable bool `thrift:"insertable,5,optional" db:"insertable" json:"insertable,omitempty"`
  ReturnProps [][]byte `thrift:"return_props,6,optional" db:"return_props" json:"return_props,omitempty"`
  Condition []byte `thrift:"condition,7,optional" db:"condition" json:"condition,omitempty"`
  Common *RequestCommon `thrift:"common,8,optional" db:"common" json:"common,omitempty"`
}

func NewUpdateEdgeRequest() *UpdateEdgeRequest {
  return &UpdateEdgeRequest{
    EdgeKey: NewEdgeKey(),
  }
}


func (p *UpdateEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *UpdateEdgeRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var UpdateEdgeRequest_EdgeKey_DEFAULT *EdgeKey
func (p *UpdateEdgeRequest) GetEdgeKey() *EdgeKey {
  if !p.IsSetEdgeKey() {
    return UpdateEdgeRequest_EdgeKey_DEFAULT
  }
return p.EdgeKey
}

func (p *UpdateEdgeRequest) GetUpdatedProps() []*UpdatedProp {
  return p.UpdatedProps
}
var UpdateEdgeRequest_Insertable_DEFAULT bool = false

func (p *UpdateEdgeRequest) GetInsertable() bool {
  return p.Insertable
}
var UpdateEdgeRequest_ReturnProps_DEFAULT [][]byte

func (p *UpdateEdgeRequest) GetReturnProps() [][]byte {
  return p.ReturnProps
}
var UpdateEdgeRequest_Condition_DEFAULT []byte

func (p *UpdateEdgeRequest) GetCondition() []byte {
  return p.Condition
}
var UpdateEdgeRequest_Common_DEFAULT *RequestCommon
func (p *UpdateEdgeRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return UpdateEdgeRequest_Common_DEFAULT
  }
return p.Common
}
func (p *UpdateEdgeRequest) IsSetEdgeKey() bool {
  return p != nil && p.EdgeKey != nil
}

func (p *UpdateEdgeRequest) IsSetInsertable() bool {
  return p != nil && p.Insertable != UpdateEdgeRequest_Insertable_DEFAULT
}

func (p *UpdateEdgeRequest) IsSetReturnProps() bool {
  return p != nil && p.ReturnProps != nil
}

func (p *UpdateEdgeRequest) IsSetCondition() bool {
  return p != nil && p.Condition != nil
}

func (p *UpdateEdgeRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type UpdateEdgeRequestBuilder struct {
  obj *UpdateEdgeRequest
}

func NewUpdateEdgeRequestBuilder() *UpdateEdgeRequestBuilder{
  return &UpdateEdgeRequestBuilder{
    obj: NewUpdateEdgeRequest(),
  }
}

func (p UpdateEdgeRequestBuilder) Emit() *UpdateEdgeRequest{
  return &UpdateEdgeRequest{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    EdgeKey: p.obj.EdgeKey,
    UpdatedProps: p.obj.UpdatedProps,
    Insertable: p.obj.Insertable,
    ReturnProps: p.obj.ReturnProps,
    Condition: p.obj.Condition,
    Common: p.obj.Common,
  }
}

func (u *UpdateEdgeRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *UpdateEdgeRequestBuilder {
  u.obj.SpaceID = spaceID
  return u
}

func (u *UpdateEdgeRequestBuilder) PartID(partID nebula0.PartitionID) *UpdateEdgeRequestBuilder {
  u.obj.PartID = partID
  return u
}

func (u *UpdateEdgeRequestBuilder) EdgeKey(edgeKey *EdgeKey) *UpdateEdgeRequestBuilder {
  u.obj.EdgeKey = edgeKey
  return u
}

func (u *UpdateEdgeRequestBuilder) UpdatedProps(updatedProps []*UpdatedProp) *UpdateEdgeRequestBuilder {
  u.obj.UpdatedProps = updatedProps
  return u
}

func (u *UpdateEdgeRequestBuilder) Insertable(insertable bool) *UpdateEdgeRequestBuilder {
  u.obj.Insertable = insertable
  return u
}

func (u *UpdateEdgeRequestBuilder) ReturnProps(returnProps [][]byte) *UpdateEdgeRequestBuilder {
  u.obj.ReturnProps = returnProps
  return u
}

func (u *UpdateEdgeRequestBuilder) Condition(condition []byte) *UpdateEdgeRequestBuilder {
  u.obj.Condition = condition
  return u
}

func (u *UpdateEdgeRequestBuilder) Common(common *RequestCommon) *UpdateEdgeRequestBuilder {
  u.obj.Common = common
  return u
}

func (u *UpdateEdgeRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *UpdateEdgeRequest {
  u.SpaceID = spaceID
  return u
}

func (u *UpdateEdgeRequest) SetPartID(partID nebula0.PartitionID) *UpdateEdgeRequest {
  u.PartID = partID
  return u
}

func (u *UpdateEdgeRequest) SetEdgeKey(edgeKey *EdgeKey) *UpdateEdgeRequest {
  u.EdgeKey = edgeKey
  return u
}

func (u *UpdateEdgeRequest) SetUpdatedProps(updatedProps []*UpdatedProp) *UpdateEdgeRequest {
  u.UpdatedProps = updatedProps
  return u
}

func (u *UpdateEdgeRequest) SetInsertable(insertable bool) *UpdateEdgeRequest {
  u.Insertable = insertable
  return u
}

func (u *UpdateEdgeRequest) SetReturnProps(returnProps [][]byte) *UpdateEdgeRequest {
  u.ReturnProps = returnProps
  return u
}

func (u *UpdateEdgeRequest) SetCondition(condition []byte) *UpdateEdgeRequest {
  u.Condition = condition
  return u
}

func (u *UpdateEdgeRequest) SetCommon(common *RequestCommon) *UpdateEdgeRequest {
  u.Common = common
  return u
}

func (p *UpdateEdgeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField3(iprot thrift.Protocol) error {
  p.EdgeKey = NewEdgeKey()
  if err := p.EdgeKey.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EdgeKey), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdatedProp, 0, size)
  p.UpdatedProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := NewUpdatedProp()
    if err := _elem53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.UpdatedProps = append(p.UpdatedProps, _elem53)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Insertable = v
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnProps =  tSlice
  for i := 0; i < size; i ++ {
    var _elem54 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem54 = v
    }
    p.ReturnProps = append(p.ReturnProps, _elem54)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Condition = v
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField8(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *UpdateEdgeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_key", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_key: ", p), err) }
  if err := p.EdgeKey.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EdgeKey), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_key: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_props", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updated_props: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdatedProps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdatedProps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updated_props: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetInsertable() {
    if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:insertable: ", p), err) }
    if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.insertable (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:insertable: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetReturnProps() {
    if err := oprot.WriteFieldBegin("return_props", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_props: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnProps {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_props: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetCondition() {
    if err := oprot.WriteFieldBegin("condition", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:condition: ", p), err) }
    if err := oprot.WriteBinary(p.Condition); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.condition (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:condition: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:common: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var edgeKeyVal string
  if p.EdgeKey == nil {
    edgeKeyVal = "<nil>"
  } else {
    edgeKeyVal = fmt.Sprintf("%v", p.EdgeKey)
  }
  updatedPropsVal := fmt.Sprintf("%v", p.UpdatedProps)
  insertableVal := fmt.Sprintf("%v", p.Insertable)
  returnPropsVal := fmt.Sprintf("%v", p.ReturnProps)
  conditionVal := fmt.Sprintf("%v", p.Condition)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("UpdateEdgeRequest({SpaceID:%s PartID:%s EdgeKey:%s UpdatedProps:%s Insertable:%s ReturnProps:%s Condition:%s Common:%s})", spaceIDVal, partIDVal, edgeKeyVal, updatedPropsVal, insertableVal, returnPropsVal, conditionVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Name
//  - Common
type GetUUIDReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Name []byte `thrift:"name,3" db:"name" json:"name"`
  Common *RequestCommon `thrift:"common,4,optional" db:"common" json:"common,omitempty"`
}

func NewGetUUIDReq() *GetUUIDReq {
  return &GetUUIDReq{}
}


func (p *GetUUIDReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetUUIDReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *GetUUIDReq) GetName() []byte {
  return p.Name
}
var GetUUIDReq_Common_DEFAULT *RequestCommon
func (p *GetUUIDReq) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetUUIDReq_Common_DEFAULT
  }
return p.Common
}
func (p *GetUUIDReq) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type GetUUIDReqBuilder struct {
  obj *GetUUIDReq
}

func NewGetUUIDReqBuilder() *GetUUIDReqBuilder{
  return &GetUUIDReqBuilder{
    obj: NewGetUUIDReq(),
  }
}

func (p GetUUIDReqBuilder) Emit() *GetUUIDReq{
  return &GetUUIDReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    Name: p.obj.Name,
    Common: p.obj.Common,
  }
}

func (g *GetUUIDReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetUUIDReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetUUIDReqBuilder) PartID(partID nebula0.PartitionID) *GetUUIDReqBuilder {
  g.obj.PartID = partID
  return g
}

func (g *GetUUIDReqBuilder) Name(name []byte) *GetUUIDReqBuilder {
  g.obj.Name = name
  return g
}

func (g *GetUUIDReqBuilder) Common(common *RequestCommon) *GetUUIDReqBuilder {
  g.obj.Common = common
  return g
}

func (g *GetUUIDReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetUUIDReq {
  g.SpaceID = spaceID
  return g
}

func (g *GetUUIDReq) SetPartID(partID nebula0.PartitionID) *GetUUIDReq {
  g.PartID = partID
  return g
}

func (g *GetUUIDReq) SetName(name []byte) *GetUUIDReq {
  g.Name = name
  return g
}

func (g *GetUUIDReq) SetCommon(common *RequestCommon) *GetUUIDReq {
  g.Common = common
  return g
}

func (p *GetUUIDReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUUIDReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetUUIDReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *GetUUIDReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *GetUUIDReq)  ReadField4(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetUUIDReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUUIDReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err) }
  }
  return err
}

func (p *GetUUIDReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  nameVal := fmt.Sprintf("%v", p.Name)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("GetUUIDReq({SpaceID:%s PartID:%s Name:%s Common:%s})", spaceIDVal, partIDVal, nameVal, commonVal)
}

// Attributes:
//  - Result_
//  - Id
type GetUUIDResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Id *nebula0.Value `thrift:"id,2" db:"id" json:"id"`
}

func NewGetUUIDResp() *GetUUIDResp {
  return &GetUUIDResp{
    Result_: NewResponseCommon(),
  }
}

var GetUUIDResp_Result__DEFAULT *ResponseCommon
func (p *GetUUIDResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetUUIDResp_Result__DEFAULT
  }
return p.Result_
}
var GetUUIDResp_Id_DEFAULT *nebula0.Value
func (p *GetUUIDResp) GetId() *nebula0.Value {
  if !p.IsSetId() {
    return GetUUIDResp_Id_DEFAULT
  }
return p.Id
}
func (p *GetUUIDResp) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *GetUUIDResp) IsSetId() bool {
  return p != nil && p.Id != nil
}

type GetUUIDRespBuilder struct {
  obj *GetUUIDResp
}

func NewGetUUIDRespBuilder() *GetUUIDRespBuilder{
  return &GetUUIDRespBuilder{
    obj: NewGetUUIDResp(),
  }
}

func (p GetUUIDRespBuilder) Emit() *GetUUIDResp{
  return &GetUUIDResp{
    Result_: p.obj.Result_,
    Id: p.obj.Id,
  }
}

func (g *GetUUIDRespBuilder) Result_(result *ResponseCommon) *GetUUIDRespBuilder {
  g.obj.Result_ = result
  return g
}

func (g *GetUUIDRespBuilder) Id(id *nebula0.Value) *GetUUIDRespBuilder {
  g.obj.Id = id
  return g
}

func (g *GetUUIDResp) SetResult_(result *ResponseCommon) *GetUUIDResp {
  g.Result_ = result
  return g
}

func (g *GetUUIDResp) SetId(id *nebula0.Value) *GetUUIDResp {
  g.Id = id
  return g
}

func (p *GetUUIDResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetUUIDResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetUUIDResp)  ReadField2(iprot thrift.Protocol) error {
  p.Id = nebula0.NewValue()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *GetUUIDResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUUIDResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetUUIDResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *GetUUIDResp) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var idVal string
  if p.Id == nil {
    idVal = "<nil>"
  } else {
    idVal = fmt.Sprintf("%v", p.Id)
  }
  return fmt.Sprintf("GetUUIDResp({Result_:%s Id:%s})", resultVal, idVal)
}

// Attributes:
//  - Result_
//  - Data
//  - StatData
type LookupIndexResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Data *nebula0.DataSet `thrift:"data,2,optional" db:"data" json:"data,omitempty"`
  StatData *nebula0.DataSet `thrift:"stat_data,3,optional" db:"stat_data" json:"stat_data,omitempty"`
}

func NewLookupIndexResp() *LookupIndexResp {
  return &LookupIndexResp{
    Result_: NewResponseCommon(),
  }
}

var LookupIndexResp_Result__DEFAULT *ResponseCommon
func (p *LookupIndexResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return LookupIndexResp_Result__DEFAULT
  }
return p.Result_
}
var LookupIndexResp_Data_DEFAULT *nebula0.DataSet
func (p *LookupIndexResp) GetData() *nebula0.DataSet {
  if !p.IsSetData() {
    return LookupIndexResp_Data_DEFAULT
  }
return p.Data
}
var LookupIndexResp_StatData_DEFAULT *nebula0.DataSet
func (p *LookupIndexResp) GetStatData() *nebula0.DataSet {
  if !p.IsSetStatData() {
    return LookupIndexResp_StatData_DEFAULT
  }
return p.StatData
}
func (p *LookupIndexResp) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *LookupIndexResp) IsSetData() bool {
  return p != nil && p.Data != nil
}

func (p *LookupIndexResp) IsSetStatData() bool {
  return p != nil && p.StatData != nil
}

type LookupIndexRespBuilder struct {
  obj *LookupIndexResp
}

func NewLookupIndexRespBuilder() *LookupIndexRespBuilder{
  return &LookupIndexRespBuilder{
    obj: NewLookupIndexResp(),
  }
}

func (p LookupIndexRespBuilder) Emit() *LookupIndexResp{
  return &LookupIndexResp{
    Result_: p.obj.Result_,
    Data: p.obj.Data,
    StatData: p.obj.StatData,
  }
}

func (l *LookupIndexRespBuilder) Result_(result *ResponseCommon) *LookupIndexRespBuilder {
  l.obj.Result_ = result
  return l
}

func (l *LookupIndexRespBuilder) Data(data *nebula0.DataSet) *LookupIndexRespBuilder {
  l.obj.Data = data
  return l
}

func (l *LookupIndexRespBuilder) StatData(statData *nebula0.DataSet) *LookupIndexRespBuilder {
  l.obj.StatData = statData
  return l
}

func (l *LookupIndexResp) SetResult_(result *ResponseCommon) *LookupIndexResp {
  l.Result_ = result
  return l
}

func (l *LookupIndexResp) SetData(data *nebula0.DataSet) *LookupIndexResp {
  l.Data = data
  return l
}

func (l *LookupIndexResp) SetStatData(statData *nebula0.DataSet) *LookupIndexResp {
  l.StatData = statData
  return l
}

func (p *LookupIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *LookupIndexResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *LookupIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Data = nebula0.NewDataSet()
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *LookupIndexResp)  ReadField3(iprot thrift.Protocol) error {
  p.StatData = nebula0.NewDataSet()
  if err := p.StatData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatData), err)
  }
  return nil
}

func (p *LookupIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LookupIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *LookupIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *LookupIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetStatData() {
    if err := oprot.WriteFieldBegin("stat_data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stat_data: ", p), err) }
    if err := p.StatData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stat_data: ", p), err) }
  }
  return err
}

func (p *LookupIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var dataVal string
  if p.Data == nil {
    dataVal = "<nil>"
  } else {
    dataVal = fmt.Sprintf("%v", p.Data)
  }
  var statDataVal string
  if p.StatData == nil {
    statDataVal = "<nil>"
  } else {
    statDataVal = fmt.Sprintf("%v", p.StatData)
  }
  return fmt.Sprintf("LookupIndexResp({Result_:%s Data:%s StatData:%s})", resultVal, dataVal, statDataVal)
}

// Attributes:
//  - ColumnName
//  - ScanType
//  - BeginValue
//  - EndValue
//  - IncludeBegin
//  - IncludeEnd
type IndexColumnHint struct {
  ColumnName []byte `thrift:"column_name,1" db:"column_name" json:"column_name"`
  ScanType ScanType `thrift:"scan_type,2" db:"scan_type" json:"scan_type"`
  BeginValue *nebula0.Value `thrift:"begin_value,3" db:"begin_value" json:"begin_value"`
  EndValue *nebula0.Value `thrift:"end_value,4" db:"end_value" json:"end_value"`
  IncludeBegin bool `thrift:"include_begin,5" db:"include_begin" json:"include_begin"`
  IncludeEnd bool `thrift:"include_end,6" db:"include_end" json:"include_end"`
}

func NewIndexColumnHint() *IndexColumnHint {
  return &IndexColumnHint{
    IncludeBegin: true,
  }
}


func (p *IndexColumnHint) GetColumnName() []byte {
  return p.ColumnName
}

func (p *IndexColumnHint) GetScanType() ScanType {
  return p.ScanType
}
var IndexColumnHint_BeginValue_DEFAULT *nebula0.Value
func (p *IndexColumnHint) GetBeginValue() *nebula0.Value {
  if !p.IsSetBeginValue() {
    return IndexColumnHint_BeginValue_DEFAULT
  }
return p.BeginValue
}
var IndexColumnHint_EndValue_DEFAULT *nebula0.Value
func (p *IndexColumnHint) GetEndValue() *nebula0.Value {
  if !p.IsSetEndValue() {
    return IndexColumnHint_EndValue_DEFAULT
  }
return p.EndValue
}

func (p *IndexColumnHint) GetIncludeBegin() bool {
  return p.IncludeBegin
}

func (p *IndexColumnHint) GetIncludeEnd() bool {
  return p.IncludeEnd
}
func (p *IndexColumnHint) IsSetBeginValue() bool {
  return p != nil && p.BeginValue != nil
}

func (p *IndexColumnHint) IsSetEndValue() bool {
  return p != nil && p.EndValue != nil
}

type IndexColumnHintBuilder struct {
  obj *IndexColumnHint
}

func NewIndexColumnHintBuilder() *IndexColumnHintBuilder{
  return &IndexColumnHintBuilder{
    obj: NewIndexColumnHint(),
  }
}

func (p IndexColumnHintBuilder) Emit() *IndexColumnHint{
  return &IndexColumnHint{
    ColumnName: p.obj.ColumnName,
    ScanType: p.obj.ScanType,
    BeginValue: p.obj.BeginValue,
    EndValue: p.obj.EndValue,
    IncludeBegin: p.obj.IncludeBegin,
    IncludeEnd: p.obj.IncludeEnd,
  }
}

func (i *IndexColumnHintBuilder) ColumnName(columnName []byte) *IndexColumnHintBuilder {
  i.obj.ColumnName = columnName
  return i
}

func (i *IndexColumnHintBuilder) ScanType(scanType ScanType) *IndexColumnHintBuilder {
  i.obj.ScanType = scanType
  return i
}

func (i *IndexColumnHintBuilder) BeginValue(beginValue *nebula0.Value) *IndexColumnHintBuilder {
  i.obj.BeginValue = beginValue
  return i
}

func (i *IndexColumnHintBuilder) EndValue(endValue *nebula0.Value) *IndexColumnHintBuilder {
  i.obj.EndValue = endValue
  return i
}

func (i *IndexColumnHintBuilder) IncludeBegin(includeBegin bool) *IndexColumnHintBuilder {
  i.obj.IncludeBegin = includeBegin
  return i
}

func (i *IndexColumnHintBuilder) IncludeEnd(includeEnd bool) *IndexColumnHintBuilder {
  i.obj.IncludeEnd = includeEnd
  return i
}

func (i *IndexColumnHint) SetColumnName(columnName []byte) *IndexColumnHint {
  i.ColumnName = columnName
  return i
}

func (i *IndexColumnHint) SetScanType(scanType ScanType) *IndexColumnHint {
  i.ScanType = scanType
  return i
}

func (i *IndexColumnHint) SetBeginValue(beginValue *nebula0.Value) *IndexColumnHint {
  i.BeginValue = beginValue
  return i
}

func (i *IndexColumnHint) SetEndValue(endValue *nebula0.Value) *IndexColumnHint {
  i.EndValue = endValue
  return i
}

func (i *IndexColumnHint) SetIncludeBegin(includeBegin bool) *IndexColumnHint {
  i.IncludeBegin = includeBegin
  return i
}

func (i *IndexColumnHint) SetIncludeEnd(includeEnd bool) *IndexColumnHint {
  i.IncludeEnd = includeEnd
  return i
}

func (p *IndexColumnHint) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ColumnName = v
  }
  return nil
}

func (p *IndexColumnHint)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := ScanType(v)
    p.ScanType = temp
  }
  return nil
}

func (p *IndexColumnHint)  ReadField3(iprot thrift.Protocol) error {
  p.BeginValue = nebula0.NewValue()
  if err := p.BeginValue.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BeginValue), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField4(iprot thrift.Protocol) error {
  p.EndValue = nebula0.NewValue()
  if err := p.EndValue.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EndValue), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.IncludeBegin = v
  }
  return nil
}

func (p *IndexColumnHint)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.IncludeEnd = v
  }
  return nil
}

func (p *IndexColumnHint) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexColumnHint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexColumnHint) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("column_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:column_name: ", p), err) }
  if err := oprot.WriteBinary(p.ColumnName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:column_name: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("scan_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scan_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.ScanType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scan_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scan_type: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("begin_value", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:begin_value: ", p), err) }
  if err := p.BeginValue.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BeginValue), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:begin_value: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end_value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:end_value: ", p), err) }
  if err := p.EndValue.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EndValue), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:end_value: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("include_begin", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:include_begin: ", p), err) }
  if err := oprot.WriteBool(bool(p.IncludeBegin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.include_begin (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:include_begin: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("include_end", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:include_end: ", p), err) }
  if err := oprot.WriteBool(bool(p.IncludeEnd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.include_end (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:include_end: ", p), err) }
  return err
}

func (p *IndexColumnHint) String() string {
  if p == nil {
    return "<nil>"
  }

  columnNameVal := fmt.Sprintf("%v", p.ColumnName)
  scanTypeVal := fmt.Sprintf("%v", p.ScanType)
  var beginValueVal string
  if p.BeginValue == nil {
    beginValueVal = "<nil>"
  } else {
    beginValueVal = fmt.Sprintf("%v", p.BeginValue)
  }
  var endValueVal string
  if p.EndValue == nil {
    endValueVal = "<nil>"
  } else {
    endValueVal = fmt.Sprintf("%v", p.EndValue)
  }
  includeBeginVal := fmt.Sprintf("%v", p.IncludeBegin)
  includeEndVal := fmt.Sprintf("%v", p.IncludeEnd)
  return fmt.Sprintf("IndexColumnHint({ColumnName:%s ScanType:%s BeginValue:%s EndValue:%s IncludeBegin:%s IncludeEnd:%s})", columnNameVal, scanTypeVal, beginValueVal, endValueVal, includeBeginVal, includeEndVal)
}

// Attributes:
//  - IndexID
//  - Filter
//  - ColumnHints
type IndexQueryContext struct {
  IndexID nebula0.IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  Filter []byte `thrift:"filter,2" db:"filter" json:"filter"`
  ColumnHints []*IndexColumnHint `thrift:"column_hints,3" db:"column_hints" json:"column_hints"`
}

func NewIndexQueryContext() *IndexQueryContext {
  return &IndexQueryContext{}
}


func (p *IndexQueryContext) GetIndexID() nebula0.IndexID {
  return p.IndexID
}

func (p *IndexQueryContext) GetFilter() []byte {
  return p.Filter
}

func (p *IndexQueryContext) GetColumnHints() []*IndexColumnHint {
  return p.ColumnHints
}
type IndexQueryContextBuilder struct {
  obj *IndexQueryContext
}

func NewIndexQueryContextBuilder() *IndexQueryContextBuilder{
  return &IndexQueryContextBuilder{
    obj: NewIndexQueryContext(),
  }
}

func (p IndexQueryContextBuilder) Emit() *IndexQueryContext{
  return &IndexQueryContext{
    IndexID: p.obj.IndexID,
    Filter: p.obj.Filter,
    ColumnHints: p.obj.ColumnHints,
  }
}

func (i *IndexQueryContextBuilder) IndexID(indexID nebula0.IndexID) *IndexQueryContextBuilder {
  i.obj.IndexID = indexID
  return i
}

func (i *IndexQueryContextBuilder) Filter(filter []byte) *IndexQueryContextBuilder {
  i.obj.Filter = filter
  return i
}

func (i *IndexQueryContextBuilder) ColumnHints(columnHints []*IndexColumnHint) *IndexQueryContextBuilder {
  i.obj.ColumnHints = columnHints
  return i
}

func (i *IndexQueryContext) SetIndexID(indexID nebula0.IndexID) *IndexQueryContext {
  i.IndexID = indexID
  return i
}

func (i *IndexQueryContext) SetFilter(filter []byte) *IndexQueryContext {
  i.Filter = filter
  return i
}

func (i *IndexQueryContext) SetColumnHints(columnHints []*IndexColumnHint) *IndexQueryContext {
  i.ColumnHints = columnHints
  return i
}

func (p *IndexQueryContext) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexQueryContext)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.IndexID(v)
    p.IndexID = temp
  }
  return nil
}

func (p *IndexQueryContext)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Filter = v
  }
  return nil
}

func (p *IndexQueryContext)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexColumnHint, 0, size)
  p.ColumnHints =  tSlice
  for i := 0; i < size; i ++ {
    _elem55 := NewIndexColumnHint()
    if err := _elem55.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem55), err)
    }
    p.ColumnHints = append(p.ColumnHints, _elem55)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexQueryContext) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexQueryContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexQueryContext) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexQueryContext) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err) }
  return err
}

func (p *IndexQueryContext) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("column_hints", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_hints: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnHints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnHints {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_hints: ", p), err) }
  return err
}

func (p *IndexQueryContext) String() string {
  if p == nil {
    return "<nil>"
  }

  indexIDVal := fmt.Sprintf("%v", p.IndexID)
  filterVal := fmt.Sprintf("%v", p.Filter)
  columnHintsVal := fmt.Sprintf("%v", p.ColumnHints)
  return fmt.Sprintf("IndexQueryContext({IndexID:%s Filter:%s ColumnHints:%s})", indexIDVal, filterVal, columnHintsVal)
}

// Attributes:
//  - Contexts
//  - SchemaID
type IndexSpec struct {
  Contexts []*IndexQueryContext `thrift:"contexts,1,required" db:"contexts" json:"contexts"`
  SchemaID *nebula0.SchemaID `thrift:"schema_id,2" db:"schema_id" json:"schema_id"`
}

func NewIndexSpec() *IndexSpec {
  return &IndexSpec{}
}


func (p *IndexSpec) GetContexts() []*IndexQueryContext {
  return p.Contexts
}
var IndexSpec_SchemaID_DEFAULT *nebula0.SchemaID
func (p *IndexSpec) GetSchemaID() *nebula0.SchemaID {
  if !p.IsSetSchemaID() {
    return IndexSpec_SchemaID_DEFAULT
  }
return p.SchemaID
}
func (p *IndexSpec) IsSetSchemaID() bool {
  return p != nil && p.SchemaID != nil
}

type IndexSpecBuilder struct {
  obj *IndexSpec
}

func NewIndexSpecBuilder() *IndexSpecBuilder{
  return &IndexSpecBuilder{
    obj: NewIndexSpec(),
  }
}

func (p IndexSpecBuilder) Emit() *IndexSpec{
  return &IndexSpec{
    Contexts: p.obj.Contexts,
    SchemaID: p.obj.SchemaID,
  }
}

func (i *IndexSpecBuilder) Contexts(contexts []*IndexQueryContext) *IndexSpecBuilder {
  i.obj.Contexts = contexts
  return i
}

func (i *IndexSpecBuilder) SchemaID(schemaID *nebula0.SchemaID) *IndexSpecBuilder {
  i.obj.SchemaID = schemaID
  return i
}

func (i *IndexSpec) SetContexts(contexts []*IndexQueryContext) *IndexSpec {
  i.Contexts = contexts
  return i
}

func (i *IndexSpec) SetSchemaID(schemaID *nebula0.SchemaID) *IndexSpec {
  i.SchemaID = schemaID
  return i
}

func (p *IndexSpec) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetContexts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetContexts = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetContexts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Contexts is not set"));
  }
  return nil
}

func (p *IndexSpec)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexQueryContext, 0, size)
  p.Contexts =  tSlice
  for i := 0; i < size; i ++ {
    _elem56 := NewIndexQueryContext()
    if err := _elem56.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
    }
    p.Contexts = append(p.Contexts, _elem56)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexSpec)  ReadField2(iprot thrift.Protocol) error {
  p.SchemaID = nebula0.NewSchemaID()
  if err := p.SchemaID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexSpec) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexSpec) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("contexts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contexts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contexts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contexts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contexts: ", p), err) }
  return err
}

func (p *IndexSpec) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_id: ", p), err) }
  if err := p.SchemaID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_id: ", p), err) }
  return err
}

func (p *IndexSpec) String() string {
  if p == nil {
    return "<nil>"
  }

  contextsVal := fmt.Sprintf("%v", p.Contexts)
  var schemaIDVal string
  if p.SchemaID == nil {
    schemaIDVal = "<nil>"
  } else {
    schemaIDVal = fmt.Sprintf("%v", p.SchemaID)
  }
  return fmt.Sprintf("IndexSpec({Contexts:%s SchemaID:%s})", contextsVal, schemaIDVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Indices
//  - ReturnColumns
//  - Common
//  - Limit
//  - OrderBy
//  - StatColumns
type LookupIndexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1,required" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2,required" db:"parts" json:"parts"`
  Indices *IndexSpec `thrift:"indices,3" db:"indices" json:"indices"`
  ReturnColumns [][]byte `thrift:"return_columns,4,optional" db:"return_columns" json:"return_columns,omitempty"`
  Common *RequestCommon `thrift:"common,5,optional" db:"common" json:"common,omitempty"`
  Limit *int64 `thrift:"limit,6,optional" db:"limit" json:"limit,omitempty"`
  OrderBy []*OrderBy `thrift:"order_by,7,optional" db:"order_by" json:"order_by,omitempty"`
  StatColumns []*StatProp `thrift:"stat_columns,8,optional" db:"stat_columns" json:"stat_columns,omitempty"`
}

func NewLookupIndexRequest() *LookupIndexRequest {
  return &LookupIndexRequest{
    Indices: NewIndexSpec(),
  }
}


func (p *LookupIndexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *LookupIndexRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}
var LookupIndexRequest_Indices_DEFAULT *IndexSpec
func (p *LookupIndexRequest) GetIndices() *IndexSpec {
  if !p.IsSetIndices() {
    return LookupIndexRequest_Indices_DEFAULT
  }
return p.Indices
}
var LookupIndexRequest_ReturnColumns_DEFAULT [][]byte

func (p *LookupIndexRequest) GetReturnColumns() [][]byte {
  return p.ReturnColumns
}
var LookupIndexRequest_Common_DEFAULT *RequestCommon
func (p *LookupIndexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return LookupIndexRequest_Common_DEFAULT
  }
return p.Common
}
var LookupIndexRequest_Limit_DEFAULT int64
func (p *LookupIndexRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return LookupIndexRequest_Limit_DEFAULT
  }
return *p.Limit
}
var LookupIndexRequest_OrderBy_DEFAULT []*OrderBy

func (p *LookupIndexRequest) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var LookupIndexRequest_StatColumns_DEFAULT []*StatProp

func (p *LookupIndexRequest) GetStatColumns() []*StatProp {
  return p.StatColumns
}
func (p *LookupIndexRequest) IsSetIndices() bool {
  return p != nil && p.Indices != nil
}

func (p *LookupIndexRequest) IsSetReturnColumns() bool {
  return p != nil && p.ReturnColumns != nil
}

func (p *LookupIndexRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

func (p *LookupIndexRequest) IsSetLimit() bool {
  return p != nil && p.Limit != nil
}

func (p *LookupIndexRequest) IsSetOrderBy() bool {
  return p != nil && p.OrderBy != nil
}

func (p *LookupIndexRequest) IsSetStatColumns() bool {
  return p != nil && p.StatColumns != nil
}

type LookupIndexRequestBuilder struct {
  obj *LookupIndexRequest
}

func NewLookupIndexRequestBuilder() *LookupIndexRequestBuilder{
  return &LookupIndexRequestBuilder{
    obj: NewLookupIndexRequest(),
  }
}

func (p LookupIndexRequestBuilder) Emit() *LookupIndexRequest{
  return &LookupIndexRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    Indices: p.obj.Indices,
    ReturnColumns: p.obj.ReturnColumns,
    Common: p.obj.Common,
    Limit: p.obj.Limit,
    OrderBy: p.obj.OrderBy,
    StatColumns: p.obj.StatColumns,
  }
}

func (l *LookupIndexRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *LookupIndexRequestBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *LookupIndexRequestBuilder) Parts(parts []nebula0.PartitionID) *LookupIndexRequestBuilder {
  l.obj.Parts = parts
  return l
}

func (l *LookupIndexRequestBuilder) Indices(indices *IndexSpec) *LookupIndexRequestBuilder {
  l.obj.Indices = indices
  return l
}

func (l *LookupIndexRequestBuilder) ReturnColumns(returnColumns [][]byte) *LookupIndexRequestBuilder {
  l.obj.ReturnColumns = returnColumns
  return l
}

func (l *LookupIndexRequestBuilder) Common(common *RequestCommon) *LookupIndexRequestBuilder {
  l.obj.Common = common
  return l
}

func (l *LookupIndexRequestBuilder) Limit(limit *int64) *LookupIndexRequestBuilder {
  l.obj.Limit = limit
  return l
}

func (l *LookupIndexRequestBuilder) OrderBy(orderBy []*OrderBy) *LookupIndexRequestBuilder {
  l.obj.OrderBy = orderBy
  return l
}

func (l *LookupIndexRequestBuilder) StatColumns(statColumns []*StatProp) *LookupIndexRequestBuilder {
  l.obj.StatColumns = statColumns
  return l
}

func (l *LookupIndexRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *LookupIndexRequest {
  l.SpaceID = spaceID
  return l
}

func (l *LookupIndexRequest) SetParts(parts []nebula0.PartitionID) *LookupIndexRequest {
  l.Parts = parts
  return l
}

func (l *LookupIndexRequest) SetIndices(indices *IndexSpec) *LookupIndexRequest {
  l.Indices = indices
  return l
}

func (l *LookupIndexRequest) SetReturnColumns(returnColumns [][]byte) *LookupIndexRequest {
  l.ReturnColumns = returnColumns
  return l
}

func (l *LookupIndexRequest) SetCommon(common *RequestCommon) *LookupIndexRequest {
  l.Common = common
  return l
}

func (l *LookupIndexRequest) SetLimit(limit *int64) *LookupIndexRequest {
  l.Limit = limit
  return l
}

func (l *LookupIndexRequest) SetOrderBy(orderBy []*OrderBy) *LookupIndexRequest {
  l.OrderBy = orderBy
  return l
}

func (l *LookupIndexRequest) SetStatColumns(statColumns []*StatProp) *LookupIndexRequest {
  l.StatColumns = statColumns
  return l
}

func (p *LookupIndexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSpaceID bool = false;
  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetSpaceID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetParts = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSpaceID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpaceID is not set"));
  }
  if !issetParts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    var _elem57 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem57 = temp
    }
    p.Parts = append(p.Parts, _elem57)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField3(iprot thrift.Protocol) error {
  p.Indices = NewIndexSpec()
  if err := p.Indices.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Indices), err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    var _elem58 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem58 = v
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem58)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField5(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Limit = &v
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem59 := NewOrderBy()
    if err := _elem59.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
    }
    p.OrderBy = append(p.OrderBy, _elem59)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*StatProp, 0, size)
  p.StatColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem60 := NewStatProp()
    if err := _elem60.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
    }
    p.StatColumns = append(p.StatColumns, _elem60)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LookupIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupIndexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("indices", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indices: ", p), err) }
  if err := p.Indices.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Indices), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indices: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetReturnColumns() {
    if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_columns: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnColumns {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_columns: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin("order_by", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order_by: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order_by: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetStatColumns() {
    if err := oprot.WriteFieldBegin("stat_columns", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stat_columns: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StatColumns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StatColumns {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stat_columns: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var indicesVal string
  if p.Indices == nil {
    indicesVal = "<nil>"
  } else {
    indicesVal = fmt.Sprintf("%v", p.Indices)
  }
  returnColumnsVal := fmt.Sprintf("%v", p.ReturnColumns)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  var limitVal string
  if p.Limit == nil {
    limitVal = "<nil>"
  } else {
    limitVal = fmt.Sprintf("%v", *p.Limit)
  }
  orderByVal := fmt.Sprintf("%v", p.OrderBy)
  statColumnsVal := fmt.Sprintf("%v", p.StatColumns)
  return fmt.Sprintf("LookupIndexRequest({SpaceID:%s Parts:%s Indices:%s ReturnColumns:%s Common:%s Limit:%s OrderBy:%s StatColumns:%s})", spaceIDVal, partsVal, indicesVal, returnColumnsVal, commonVal, limitVal, orderByVal, statColumnsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Indices
//  - TraverseSpec
//  - Common
type LookupAndTraverseRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1,required" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2,required" db:"parts" json:"parts"`
  Indices *IndexSpec `thrift:"indices,3" db:"indices" json:"indices"`
  TraverseSpec *TraverseSpec `thrift:"traverse_spec,4" db:"traverse_spec" json:"traverse_spec"`
  Common *RequestCommon `thrift:"common,5,optional" db:"common" json:"common,omitempty"`
}

func NewLookupAndTraverseRequest() *LookupAndTraverseRequest {
  return &LookupAndTraverseRequest{
    Indices: NewIndexSpec(),
    TraverseSpec: NewTraverseSpec(),
  }
}


func (p *LookupAndTraverseRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *LookupAndTraverseRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}
var LookupAndTraverseRequest_Indices_DEFAULT *IndexSpec
func (p *LookupAndTraverseRequest) GetIndices() *IndexSpec {
  if !p.IsSetIndices() {
    return LookupAndTraverseRequest_Indices_DEFAULT
  }
return p.Indices
}
var LookupAndTraverseRequest_TraverseSpec_DEFAULT *TraverseSpec
func (p *LookupAndTraverseRequest) GetTraverseSpec() *TraverseSpec {
  if !p.IsSetTraverseSpec() {
    return LookupAndTraverseRequest_TraverseSpec_DEFAULT
  }
return p.TraverseSpec
}
var LookupAndTraverseRequest_Common_DEFAULT *RequestCommon
func (p *LookupAndTraverseRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return LookupAndTraverseRequest_Common_DEFAULT
  }
return p.Common
}
func (p *LookupAndTraverseRequest) IsSetIndices() bool {
  return p != nil && p.Indices != nil
}

func (p *LookupAndTraverseRequest) IsSetTraverseSpec() bool {
  return p != nil && p.TraverseSpec != nil
}

func (p *LookupAndTraverseRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type LookupAndTraverseRequestBuilder struct {
  obj *LookupAndTraverseRequest
}

func NewLookupAndTraverseRequestBuilder() *LookupAndTraverseRequestBuilder{
  return &LookupAndTraverseRequestBuilder{
    obj: NewLookupAndTraverseRequest(),
  }
}

func (p LookupAndTraverseRequestBuilder) Emit() *LookupAndTraverseRequest{
  return &LookupAndTraverseRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    Indices: p.obj.Indices,
    TraverseSpec: p.obj.TraverseSpec,
    Common: p.obj.Common,
  }
}

func (l *LookupAndTraverseRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *LookupAndTraverseRequestBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *LookupAndTraverseRequestBuilder) Parts(parts []nebula0.PartitionID) *LookupAndTraverseRequestBuilder {
  l.obj.Parts = parts
  return l
}

func (l *LookupAndTraverseRequestBuilder) Indices(indices *IndexSpec) *LookupAndTraverseRequestBuilder {
  l.obj.Indices = indices
  return l
}

func (l *LookupAndTraverseRequestBuilder) TraverseSpec(traverseSpec *TraverseSpec) *LookupAndTraverseRequestBuilder {
  l.obj.TraverseSpec = traverseSpec
  return l
}

func (l *LookupAndTraverseRequestBuilder) Common(common *RequestCommon) *LookupAndTraverseRequestBuilder {
  l.obj.Common = common
  return l
}

func (l *LookupAndTraverseRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *LookupAndTraverseRequest {
  l.SpaceID = spaceID
  return l
}

func (l *LookupAndTraverseRequest) SetParts(parts []nebula0.PartitionID) *LookupAndTraverseRequest {
  l.Parts = parts
  return l
}

func (l *LookupAndTraverseRequest) SetIndices(indices *IndexSpec) *LookupAndTraverseRequest {
  l.Indices = indices
  return l
}

func (l *LookupAndTraverseRequest) SetTraverseSpec(traverseSpec *TraverseSpec) *LookupAndTraverseRequest {
  l.TraverseSpec = traverseSpec
  return l
}

func (l *LookupAndTraverseRequest) SetCommon(common *RequestCommon) *LookupAndTraverseRequest {
  l.Common = common
  return l
}

func (p *LookupAndTraverseRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSpaceID bool = false;
  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetSpaceID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetParts = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSpaceID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpaceID is not set"));
  }
  if !issetParts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    var _elem61 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem61 = temp
    }
    p.Parts = append(p.Parts, _elem61)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField3(iprot thrift.Protocol) error {
  p.Indices = NewIndexSpec()
  if err := p.Indices.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Indices), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField4(iprot thrift.Protocol) error {
  p.TraverseSpec = NewTraverseSpec()
  if err := p.TraverseSpec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TraverseSpec), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField5(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LookupAndTraverseRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupAndTraverseRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("indices", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indices: ", p), err) }
  if err := p.Indices.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Indices), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indices: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("traverse_spec", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:traverse_spec: ", p), err) }
  if err := p.TraverseSpec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TraverseSpec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:traverse_spec: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *LookupAndTraverseRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  var indicesVal string
  if p.Indices == nil {
    indicesVal = "<nil>"
  } else {
    indicesVal = fmt.Sprintf("%v", p.Indices)
  }
  var traverseSpecVal string
  if p.TraverseSpec == nil {
    traverseSpecVal = "<nil>"
  } else {
    traverseSpecVal = fmt.Sprintf("%v", p.TraverseSpec)
  }
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("LookupAndTraverseRequest({SpaceID:%s Parts:%s Indices:%s TraverseSpec:%s Common:%s})", spaceIDVal, partsVal, indicesVal, traverseSpecVal, commonVal)
}

// Attributes:
//  - NextCursor
type ScanCursor struct {
  NextCursor []byte `thrift:"next_cursor,1,optional" db:"next_cursor" json:"next_cursor,omitempty"`
}

func NewScanCursor() *ScanCursor {
  return &ScanCursor{}
}

var ScanCursor_NextCursor_DEFAULT []byte

func (p *ScanCursor) GetNextCursor() []byte {
  return p.NextCursor
}
func (p *ScanCursor) IsSetNextCursor() bool {
  return p != nil && p.NextCursor != nil
}

type ScanCursorBuilder struct {
  obj *ScanCursor
}

func NewScanCursorBuilder() *ScanCursorBuilder{
  return &ScanCursorBuilder{
    obj: NewScanCursor(),
  }
}

func (p ScanCursorBuilder) Emit() *ScanCursor{
  return &ScanCursor{
    NextCursor: p.obj.NextCursor,
  }
}

func (s *ScanCursorBuilder) NextCursor(nextCursor []byte) *ScanCursorBuilder {
  s.obj.NextCursor = nextCursor
  return s
}

func (s *ScanCursor) SetNextCursor(nextCursor []byte) *ScanCursor {
  s.NextCursor = nextCursor
  return s
}

func (p *ScanCursor) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanCursor)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.NextCursor = v
  }
  return nil
}

func (p *ScanCursor) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanCursor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanCursor) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetNextCursor() {
    if err := oprot.WriteFieldBegin("next_cursor", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:next_cursor: ", p), err) }
    if err := oprot.WriteBinary(p.NextCursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.next_cursor (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:next_cursor: ", p), err) }
  }
  return err
}

func (p *ScanCursor) String() string {
  if p == nil {
    return "<nil>"
  }

  nextCursorVal := fmt.Sprintf("%v", p.NextCursor)
  return fmt.Sprintf("ScanCursor({NextCursor:%s})", nextCursorVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
//  - Limit
//  - StartTime
//  - EndTime
//  - Filter
//  - OnlyLatestVersion
//  - EnableReadFromFollower
//  - Common
type ScanVertexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID]*ScanCursor `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnColumns []*VertexProp `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
  Limit int64 `thrift:"limit,4" db:"limit" json:"limit"`
  StartTime *int64 `thrift:"start_time,5,optional" db:"start_time" json:"start_time,omitempty"`
  EndTime *int64 `thrift:"end_time,6,optional" db:"end_time" json:"end_time,omitempty"`
  Filter []byte `thrift:"filter,7,optional" db:"filter" json:"filter,omitempty"`
  OnlyLatestVersion bool `thrift:"only_latest_version,8" db:"only_latest_version" json:"only_latest_version"`
  EnableReadFromFollower bool `thrift:"enable_read_from_follower,9" db:"enable_read_from_follower" json:"enable_read_from_follower"`
  Common *RequestCommon `thrift:"common,10,optional" db:"common" json:"common,omitempty"`
}

func NewScanVertexRequest() *ScanVertexRequest {
  return &ScanVertexRequest{
    EnableReadFromFollower: true,
  }
}


func (p *ScanVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanVertexRequest) GetParts() map[nebula0.PartitionID]*ScanCursor {
  return p.Parts
}

func (p *ScanVertexRequest) GetReturnColumns() []*VertexProp {
  return p.ReturnColumns
}

func (p *ScanVertexRequest) GetLimit() int64 {
  return p.Limit
}
var ScanVertexRequest_StartTime_DEFAULT int64
func (p *ScanVertexRequest) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return ScanVertexRequest_StartTime_DEFAULT
  }
return *p.StartTime
}
var ScanVertexRequest_EndTime_DEFAULT int64
func (p *ScanVertexRequest) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return ScanVertexRequest_EndTime_DEFAULT
  }
return *p.EndTime
}
var ScanVertexRequest_Filter_DEFAULT []byte

func (p *ScanVertexRequest) GetFilter() []byte {
  return p.Filter
}

func (p *ScanVertexRequest) GetOnlyLatestVersion() bool {
  return p.OnlyLatestVersion
}

func (p *ScanVertexRequest) GetEnableReadFromFollower() bool {
  return p.EnableReadFromFollower
}
var ScanVertexRequest_Common_DEFAULT *RequestCommon
func (p *ScanVertexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return ScanVertexRequest_Common_DEFAULT
  }
return p.Common
}
func (p *ScanVertexRequest) IsSetStartTime() bool {
  return p != nil && p.StartTime != nil
}

func (p *ScanVertexRequest) IsSetEndTime() bool {
  return p != nil && p.EndTime != nil
}

func (p *ScanVertexRequest) IsSetFilter() bool {
  return p != nil && p.Filter != nil
}

func (p *ScanVertexRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type ScanVertexRequestBuilder struct {
  obj *ScanVertexRequest
}

func NewScanVertexRequestBuilder() *ScanVertexRequestBuilder{
  return &ScanVertexRequestBuilder{
    obj: NewScanVertexRequest(),
  }
}

func (p ScanVertexRequestBuilder) Emit() *ScanVertexRequest{
  return &ScanVertexRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    ReturnColumns: p.obj.ReturnColumns,
    Limit: p.obj.Limit,
    StartTime: p.obj.StartTime,
    EndTime: p.obj.EndTime,
    Filter: p.obj.Filter,
    OnlyLatestVersion: p.obj.OnlyLatestVersion,
    EnableReadFromFollower: p.obj.EnableReadFromFollower,
    Common: p.obj.Common,
  }
}

func (s *ScanVertexRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ScanVertexRequestBuilder {
  s.obj.SpaceID = spaceID
  return s
}

func (s *ScanVertexRequestBuilder) Parts(parts map[nebula0.PartitionID]*ScanCursor) *ScanVertexRequestBuilder {
  s.obj.Parts = parts
  return s
}

func (s *ScanVertexRequestBuilder) ReturnColumns(returnColumns []*VertexProp) *ScanVertexRequestBuilder {
  s.obj.ReturnColumns = returnColumns
  return s
}

func (s *ScanVertexRequestBuilder) Limit(limit int64) *ScanVertexRequestBuilder {
  s.obj.Limit = limit
  return s
}

func (s *ScanVertexRequestBuilder) StartTime(startTime *int64) *ScanVertexRequestBuilder {
  s.obj.StartTime = startTime
  return s
}

func (s *ScanVertexRequestBuilder) EndTime(endTime *int64) *ScanVertexRequestBuilder {
  s.obj.EndTime = endTime
  return s
}

func (s *ScanVertexRequestBuilder) Filter(filter []byte) *ScanVertexRequestBuilder {
  s.obj.Filter = filter
  return s
}

func (s *ScanVertexRequestBuilder) OnlyLatestVersion(onlyLatestVersion bool) *ScanVertexRequestBuilder {
  s.obj.OnlyLatestVersion = onlyLatestVersion
  return s
}

func (s *ScanVertexRequestBuilder) EnableReadFromFollower(enableReadFromFollower bool) *ScanVertexRequestBuilder {
  s.obj.EnableReadFromFollower = enableReadFromFollower
  return s
}

func (s *ScanVertexRequestBuilder) Common(common *RequestCommon) *ScanVertexRequestBuilder {
  s.obj.Common = common
  return s
}

func (s *ScanVertexRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *ScanVertexRequest {
  s.SpaceID = spaceID
  return s
}

func (s *ScanVertexRequest) SetParts(parts map[nebula0.PartitionID]*ScanCursor) *ScanVertexRequest {
  s.Parts = parts
  return s
}

func (s *ScanVertexRequest) SetReturnColumns(returnColumns []*VertexProp) *ScanVertexRequest {
  s.ReturnColumns = returnColumns
  return s
}

func (s *ScanVertexRequest) SetLimit(limit int64) *ScanVertexRequest {
  s.Limit = limit
  return s
}

func (s *ScanVertexRequest) SetStartTime(startTime *int64) *ScanVertexRequest {
  s.StartTime = startTime
  return s
}

func (s *ScanVertexRequest) SetEndTime(endTime *int64) *ScanVertexRequest {
  s.EndTime = endTime
  return s
}

func (s *ScanVertexRequest) SetFilter(filter []byte) *ScanVertexRequest {
  s.Filter = filter
  return s
}

func (s *ScanVertexRequest) SetOnlyLatestVersion(onlyLatestVersion bool) *ScanVertexRequest {
  s.OnlyLatestVersion = onlyLatestVersion
  return s
}

func (s *ScanVertexRequest) SetEnableReadFromFollower(enableReadFromFollower bool) *ScanVertexRequest {
  s.EnableReadFromFollower = enableReadFromFollower
  return s
}

func (s *ScanVertexRequest) SetCommon(common *RequestCommon) *ScanVertexRequest {
  s.Common = common
  return s
}

func (p *ScanVertexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]*ScanCursor, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key62 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key62 = temp
    }
    _val63 := NewScanCursor()
    if err := _val63.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val63), err)
    }
    p.Parts[_key62] = _val63
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem64 := NewVertexProp()
    if err := _elem64.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem64), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem64)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Limit = v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.StartTime = &v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.EndTime = &v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Filter = v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.OnlyLatestVersion = v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.EnableReadFromFollower = v
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField10(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *ScanVertexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI64(int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin("end_time", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin("filter", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:filter: ", p), err) }
    if err := oprot.WriteBinary(p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:filter: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("only_latest_version", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:only_latest_version: ", p), err) }
  if err := oprot.WriteBool(bool(p.OnlyLatestVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.only_latest_version (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:only_latest_version: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enable_read_from_follower", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:enable_read_from_follower: ", p), err) }
  if err := oprot.WriteBool(bool(p.EnableReadFromFollower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_read_from_follower (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:enable_read_from_follower: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  returnColumnsVal := fmt.Sprintf("%v", p.ReturnColumns)
  limitVal := fmt.Sprintf("%v", p.Limit)
  var startTimeVal string
  if p.StartTime == nil {
    startTimeVal = "<nil>"
  } else {
    startTimeVal = fmt.Sprintf("%v", *p.StartTime)
  }
  var endTimeVal string
  if p.EndTime == nil {
    endTimeVal = "<nil>"
  } else {
    endTimeVal = fmt.Sprintf("%v", *p.EndTime)
  }
  filterVal := fmt.Sprintf("%v", p.Filter)
  onlyLatestVersionVal := fmt.Sprintf("%v", p.OnlyLatestVersion)
  enableReadFromFollowerVal := fmt.Sprintf("%v", p.EnableReadFromFollower)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("ScanVertexRequest({SpaceID:%s Parts:%s ReturnColumns:%s Limit:%s StartTime:%s EndTime:%s Filter:%s OnlyLatestVersion:%s EnableReadFromFollower:%s Common:%s})", spaceIDVal, partsVal, returnColumnsVal, limitVal, startTimeVal, endTimeVal, filterVal, onlyLatestVersionVal, enableReadFromFollowerVal, commonVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
//  - Limit
//  - StartTime
//  - EndTime
//  - Filter
//  - OnlyLatestVersion
//  - EnableReadFromFollower
//  - Common
type ScanEdgeRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID]*ScanCursor `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnColumns []*EdgeProp `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
  Limit int64 `thrift:"limit,4" db:"limit" json:"limit"`
  StartTime *int64 `thrift:"start_time,5,optional" db:"start_time" json:"start_time,omitempty"`
  EndTime *int64 `thrift:"end_time,6,optional" db:"end_time" json:"end_time,omitempty"`
  Filter []byte `thrift:"filter,7,optional" db:"filter" json:"filter,omitempty"`
  OnlyLatestVersion bool `thrift:"only_latest_version,8" db:"only_latest_version" json:"only_latest_version"`
  EnableReadFromFollower bool `thrift:"enable_read_from_follower,9" db:"enable_read_from_follower" json:"enable_read_from_follower"`
  Common *RequestCommon `thrift:"common,10,optional" db:"common" json:"common,omitempty"`
}

func NewScanEdgeRequest() *ScanEdgeRequest {
  return &ScanEdgeRequest{
    EnableReadFromFollower: true,
  }
}


func (p *ScanEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanEdgeRequest) GetParts() map[nebula0.PartitionID]*ScanCursor {
  return p.Parts
}

func (p *ScanEdgeRequest) GetReturnColumns() []*EdgeProp {
  return p.ReturnColumns
}

func (p *ScanEdgeRequest) GetLimit() int64 {
  return p.Limit
}
var ScanEdgeRequest_StartTime_DEFAULT int64
func (p *ScanEdgeRequest) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return ScanEdgeRequest_StartTime_DEFAULT
  }
return *p.StartTime
}
var ScanEdgeRequest_EndTime_DEFAULT int64
func (p *ScanEdgeRequest) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return ScanEdgeRequest_EndTime_DEFAULT
  }
return *p.EndTime
}
var ScanEdgeRequest_Filter_DEFAULT []byte

func (p *ScanEdgeRequest) GetFilter() []byte {
  return p.Filter
}

func (p *ScanEdgeRequest) GetOnlyLatestVersion() bool {
  return p.OnlyLatestVersion
}

func (p *ScanEdgeRequest) GetEnableReadFromFollower() bool {
  return p.EnableReadFromFollower
}
var ScanEdgeRequest_Common_DEFAULT *RequestCommon
func (p *ScanEdgeRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return ScanEdgeRequest_Common_DEFAULT
  }
return p.Common
}
func (p *ScanEdgeRequest) IsSetStartTime() bool {
  return p != nil && p.StartTime != nil
}

func (p *ScanEdgeRequest) IsSetEndTime() bool {
  return p != nil && p.EndTime != nil
}

func (p *ScanEdgeRequest) IsSetFilter() bool {
  return p != nil && p.Filter != nil
}

func (p *ScanEdgeRequest) IsSetCommon() bool {
  return p != nil && p.Common != nil
}

type ScanEdgeRequestBuilder struct {
  obj *ScanEdgeRequest
}

func NewScanEdgeRequestBuilder() *ScanEdgeRequestBuilder{
  return &ScanEdgeRequestBuilder{
    obj: NewScanEdgeRequest(),
  }
}

func (p ScanEdgeRequestBuilder) Emit() *ScanEdgeRequest{
  return &ScanEdgeRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    ReturnColumns: p.obj.ReturnColumns,
    Limit: p.obj.Limit,
    StartTime: p.obj.StartTime,
    EndTime: p.obj.EndTime,
    Filter: p.obj.Filter,
    OnlyLatestVersion: p.obj.OnlyLatestVersion,
    EnableReadFromFollower: p.obj.EnableReadFromFollower,
    Common: p.obj.Common,
  }
}

func (s *ScanEdgeRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ScanEdgeRequestBuilder {
  s.obj.SpaceID = spaceID
  return s
}

func (s *ScanEdgeRequestBuilder) Parts(parts map[nebula0.PartitionID]*ScanCursor) *ScanEdgeRequestBuilder {
  s.obj.Parts = parts
  return s
}

func (s *ScanEdgeRequestBuilder) ReturnColumns(returnColumns []*EdgeProp) *ScanEdgeRequestBuilder {
  s.obj.ReturnColumns = returnColumns
  return s
}

func (s *ScanEdgeRequestBuilder) Limit(limit int64) *ScanEdgeRequestBuilder {
  s.obj.Limit = limit
  return s
}

func (s *ScanEdgeRequestBuilder) StartTime(startTime *int64) *ScanEdgeRequestBuilder {
  s.obj.StartTime = startTime
  return s
}

func (s *ScanEdgeRequestBuilder) EndTime(endTime *int64) *ScanEdgeRequestBuilder {
  s.obj.EndTime = endTime
  return s
}

func (s *ScanEdgeRequestBuilder) Filter(filter []byte) *ScanEdgeRequestBuilder {
  s.obj.Filter = filter
  return s
}

func (s *ScanEdgeRequestBuilder) OnlyLatestVersion(onlyLatestVersion bool) *ScanEdgeRequestBuilder {
  s.obj.OnlyLatestVersion = onlyLatestVersion
  return s
}

func (s *ScanEdgeRequestBuilder) EnableReadFromFollower(enableReadFromFollower bool) *ScanEdgeRequestBuilder {
  s.obj.EnableReadFromFollower = enableReadFromFollower
  return s
}

func (s *ScanEdgeRequestBuilder) Common(common *RequestCommon) *ScanEdgeRequestBuilder {
  s.obj.Common = common
  return s
}

func (s *ScanEdgeRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *ScanEdgeRequest {
  s.SpaceID = spaceID
  return s
}

func (s *ScanEdgeRequest) SetParts(parts map[nebula0.PartitionID]*ScanCursor) *ScanEdgeRequest {
  s.Parts = parts
  return s
}

func (s *ScanEdgeRequest) SetReturnColumns(returnColumns []*EdgeProp) *ScanEdgeRequest {
  s.ReturnColumns = returnColumns
  return s
}

func (s *ScanEdgeRequest) SetLimit(limit int64) *ScanEdgeRequest {
  s.Limit = limit
  return s
}

func (s *ScanEdgeRequest) SetStartTime(startTime *int64) *ScanEdgeRequest {
  s.StartTime = startTime
  return s
}

func (s *ScanEdgeRequest) SetEndTime(endTime *int64) *ScanEdgeRequest {
  s.EndTime = endTime
  return s
}

func (s *ScanEdgeRequest) SetFilter(filter []byte) *ScanEdgeRequest {
  s.Filter = filter
  return s
}

func (s *ScanEdgeRequest) SetOnlyLatestVersion(onlyLatestVersion bool) *ScanEdgeRequest {
  s.OnlyLatestVersion = onlyLatestVersion
  return s
}

func (s *ScanEdgeRequest) SetEnableReadFromFollower(enableReadFromFollower bool) *ScanEdgeRequest {
  s.EnableReadFromFollower = enableReadFromFollower
  return s
}

func (s *ScanEdgeRequest) SetCommon(common *RequestCommon) *ScanEdgeRequest {
  s.Common = common
  return s
}

func (p *ScanEdgeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]*ScanCursor, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key65 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key65 = temp
    }
    _val66 := NewScanCursor()
    if err := _val66.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val66), err)
    }
    p.Parts[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem67 := NewEdgeProp()
    if err := _elem67.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem67), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem67)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Limit = v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.StartTime = &v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.EndTime = &v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Filter = v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.OnlyLatestVersion = v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.EnableReadFromFollower = v
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField10(iprot thrift.Protocol) error {
  p.Common = NewRequestCommon()
  if err := p.Common.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *ScanEdgeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI64(int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin("end_time", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin("filter", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:filter: ", p), err) }
    if err := oprot.WriteBinary(p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:filter: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("only_latest_version", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:only_latest_version: ", p), err) }
  if err := oprot.WriteBool(bool(p.OnlyLatestVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.only_latest_version (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:only_latest_version: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("enable_read_from_follower", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:enable_read_from_follower: ", p), err) }
  if err := oprot.WriteBool(bool(p.EnableReadFromFollower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_read_from_follower (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:enable_read_from_follower: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField10(oprot thrift.Protocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin("common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  returnColumnsVal := fmt.Sprintf("%v", p.ReturnColumns)
  limitVal := fmt.Sprintf("%v", p.Limit)
  var startTimeVal string
  if p.StartTime == nil {
    startTimeVal = "<nil>"
  } else {
    startTimeVal = fmt.Sprintf("%v", *p.StartTime)
  }
  var endTimeVal string
  if p.EndTime == nil {
    endTimeVal = "<nil>"
  } else {
    endTimeVal = fmt.Sprintf("%v", *p.EndTime)
  }
  filterVal := fmt.Sprintf("%v", p.Filter)
  onlyLatestVersionVal := fmt.Sprintf("%v", p.OnlyLatestVersion)
  enableReadFromFollowerVal := fmt.Sprintf("%v", p.EnableReadFromFollower)
  var commonVal string
  if p.Common == nil {
    commonVal = "<nil>"
  } else {
    commonVal = fmt.Sprintf("%v", p.Common)
  }
  return fmt.Sprintf("ScanEdgeRequest({SpaceID:%s Parts:%s ReturnColumns:%s Limit:%s StartTime:%s EndTime:%s Filter:%s OnlyLatestVersion:%s EnableReadFromFollower:%s Common:%s})", spaceIDVal, partsVal, returnColumnsVal, limitVal, startTimeVal, endTimeVal, filterVal, onlyLatestVersionVal, enableReadFromFollowerVal, commonVal)
}

// Attributes:
//  - Result_
//  - Props
//  - Cursors
type ScanResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Props *nebula0.DataSet `thrift:"props,2,optional" db:"props" json:"props,omitempty"`
  Cursors map[nebula0.PartitionID]*ScanCursor `thrift:"cursors,3" db:"cursors" json:"cursors"`
}

func NewScanResponse() *ScanResponse {
  return &ScanResponse{
    Result_: NewResponseCommon(),
  }
}

var ScanResponse_Result__DEFAULT *ResponseCommon
func (p *ScanResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ScanResponse_Result__DEFAULT
  }
return p.Result_
}
var ScanResponse_Props_DEFAULT *nebula0.DataSet
func (p *ScanResponse) GetProps() *nebula0.DataSet {
  if !p.IsSetProps() {
    return ScanResponse_Props_DEFAULT
  }
return p.Props
}

func (p *ScanResponse) GetCursors() map[nebula0.PartitionID]*ScanCursor {
  return p.Cursors
}
func (p *ScanResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *ScanResponse) IsSetProps() bool {
  return p != nil && p.Props != nil
}

type ScanResponseBuilder struct {
  obj *ScanResponse
}

func NewScanResponseBuilder() *ScanResponseBuilder{
  return &ScanResponseBuilder{
    obj: NewScanResponse(),
  }
}

func (p ScanResponseBuilder) Emit() *ScanResponse{
  return &ScanResponse{
    Result_: p.obj.Result_,
    Props: p.obj.Props,
    Cursors: p.obj.Cursors,
  }
}

func (s *ScanResponseBuilder) Result_(result *ResponseCommon) *ScanResponseBuilder {
  s.obj.Result_ = result
  return s
}

func (s *ScanResponseBuilder) Props(props *nebula0.DataSet) *ScanResponseBuilder {
  s.obj.Props = props
  return s
}

func (s *ScanResponseBuilder) Cursors(cursors map[nebula0.PartitionID]*ScanCursor) *ScanResponseBuilder {
  s.obj.Cursors = cursors
  return s
}

func (s *ScanResponse) SetResult_(result *ResponseCommon) *ScanResponse {
  s.Result_ = result
  return s
}

func (s *ScanResponse) SetProps(props *nebula0.DataSet) *ScanResponse {
  s.Props = props
  return s
}

func (s *ScanResponse) SetCursors(cursors map[nebula0.PartitionID]*ScanCursor) *ScanResponse {
  s.Cursors = cursors
  return s
}

func (p *ScanResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ScanResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ScanResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Props = nebula0.NewDataSet()
  if err := p.Props.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *ScanResponse)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]*ScanCursor, size)
  p.Cursors =  tMap
  for i := 0; i < size; i ++ {
    var _key68 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key68 = temp
    }
    _val69 := NewScanCursor()
    if err := _val69.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val69), err)
    }
    p.Cursors[_key68] = _val69
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ScanResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin("props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *ScanResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cursors", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursors: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Cursors)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Cursors {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursors: ", p), err) }
  return err
}

func (p *ScanResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var propsVal string
  if p.Props == nil {
    propsVal = "<nil>"
  } else {
    propsVal = fmt.Sprintf("%v", p.Props)
  }
  cursorsVal := fmt.Sprintf("%v", p.Cursors)
  return fmt.Sprintf("ScanResponse({Result_:%s Props:%s Cursors:%s})", resultVal, propsVal, cursorsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - TaskSpecificParas
type TaskPara struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2,optional" db:"parts" json:"parts,omitempty"`
  TaskSpecificParas [][]byte `thrift:"task_specific_paras,3,optional" db:"task_specific_paras" json:"task_specific_paras,omitempty"`
}

func NewTaskPara() *TaskPara {
  return &TaskPara{}
}


func (p *TaskPara) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var TaskPara_Parts_DEFAULT []nebula0.PartitionID

func (p *TaskPara) GetParts() []nebula0.PartitionID {
  return p.Parts
}
var TaskPara_TaskSpecificParas_DEFAULT [][]byte

func (p *TaskPara) GetTaskSpecificParas() [][]byte {
  return p.TaskSpecificParas
}
func (p *TaskPara) IsSetParts() bool {
  return p != nil && p.Parts != nil
}

func (p *TaskPara) IsSetTaskSpecificParas() bool {
  return p != nil && p.TaskSpecificParas != nil
}

type TaskParaBuilder struct {
  obj *TaskPara
}

func NewTaskParaBuilder() *TaskParaBuilder{
  return &TaskParaBuilder{
    obj: NewTaskPara(),
  }
}

func (p TaskParaBuilder) Emit() *TaskPara{
  return &TaskPara{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    TaskSpecificParas: p.obj.TaskSpecificParas,
  }
}

func (t *TaskParaBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *TaskParaBuilder {
  t.obj.SpaceID = spaceID
  return t
}

func (t *TaskParaBuilder) Parts(parts []nebula0.PartitionID) *TaskParaBuilder {
  t.obj.Parts = parts
  return t
}

func (t *TaskParaBuilder) TaskSpecificParas(taskSpecificParas [][]byte) *TaskParaBuilder {
  t.obj.TaskSpecificParas = taskSpecificParas
  return t
}

func (t *TaskPara) SetSpaceID(spaceID nebula0.GraphSpaceID) *TaskPara {
  t.SpaceID = spaceID
  return t
}

func (t *TaskPara) SetParts(parts []nebula0.PartitionID) *TaskPara {
  t.Parts = parts
  return t
}

func (t *TaskPara) SetTaskSpecificParas(taskSpecificParas [][]byte) *TaskPara {
  t.TaskSpecificParas = taskSpecificParas
  return t
}

func (p *TaskPara) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskPara)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *TaskPara)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    var _elem70 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem70 = temp
    }
    p.Parts = append(p.Parts, _elem70)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskPara)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.TaskSpecificParas =  tSlice
  for i := 0; i < size; i ++ {
    var _elem71 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem71 = v
    }
    p.TaskSpecificParas = append(p.TaskSpecificParas, _elem71)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskPara) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TaskPara"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskPara) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TaskPara) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetParts() {
    if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Parts {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  }
  return err
}

func (p *TaskPara) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetTaskSpecificParas() {
    if err := oprot.WriteFieldBegin("task_specific_paras", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_specific_paras: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.TaskSpecificParas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskSpecificParas {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_specific_paras: ", p), err) }
  }
  return err
}

func (p *TaskPara) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  taskSpecificParasVal := fmt.Sprintf("%v", p.TaskSpecificParas)
  return fmt.Sprintf("TaskPara({SpaceID:%s Parts:%s TaskSpecificParas:%s})", spaceIDVal, partsVal, taskSpecificParasVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnPartly
type KVGetRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][][]byte `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnPartly bool `thrift:"return_partly,3" db:"return_partly" json:"return_partly"`
}

func NewKVGetRequest() *KVGetRequest {
  return &KVGetRequest{}
}


func (p *KVGetRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *KVGetRequest) GetParts() map[nebula0.PartitionID][][]byte {
  return p.Parts
}

func (p *KVGetRequest) GetReturnPartly() bool {
  return p.ReturnPartly
}
type KVGetRequestBuilder struct {
  obj *KVGetRequest
}

func NewKVGetRequestBuilder() *KVGetRequestBuilder{
  return &KVGetRequestBuilder{
    obj: NewKVGetRequest(),
  }
}

func (p KVGetRequestBuilder) Emit() *KVGetRequest{
  return &KVGetRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    ReturnPartly: p.obj.ReturnPartly,
  }
}

func (k *KVGetRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *KVGetRequestBuilder {
  k.obj.SpaceID = spaceID
  return k
}

func (k *KVGetRequestBuilder) Parts(parts map[nebula0.PartitionID][][]byte) *KVGetRequestBuilder {
  k.obj.Parts = parts
  return k
}

func (k *KVGetRequestBuilder) ReturnPartly(returnPartly bool) *KVGetRequestBuilder {
  k.obj.ReturnPartly = returnPartly
  return k
}

func (k *KVGetRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *KVGetRequest {
  k.SpaceID = spaceID
  return k
}

func (k *KVGetRequest) SetParts(parts map[nebula0.PartitionID][][]byte) *KVGetRequest {
  k.Parts = parts
  return k
}

func (k *KVGetRequest) SetReturnPartly(returnPartly bool) *KVGetRequest {
  k.ReturnPartly = returnPartly
  return k
}

func (p *KVGetRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVGetRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *KVGetRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][][]byte, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key72 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key72 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val73 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem74 []byte
      if v, err := iprot.ReadBinary(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _elem74 = v
      }
      _val73 = append(_val73, _elem74)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key72] = _val73
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVGetRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ReturnPartly = v
  }
  return nil
}

func (p *KVGetRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KVGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVGetRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVGetRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVGetRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_partly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_partly: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReturnPartly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_partly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_partly: ", p), err) }
  return err
}

func (p *KVGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  returnPartlyVal := fmt.Sprintf("%v", p.ReturnPartly)
  return fmt.Sprintf("KVGetRequest({SpaceID:%s Parts:%s ReturnPartly:%s})", spaceIDVal, partsVal, returnPartlyVal)
}

// Attributes:
//  - Result_
//  - KeyValues
type KVGetResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  KeyValues map[string][]byte `thrift:"key_values,2" db:"key_values" json:"key_values"`
}

func NewKVGetResponse() *KVGetResponse {
  return &KVGetResponse{
    Result_: NewResponseCommon(),
  }
}

var KVGetResponse_Result__DEFAULT *ResponseCommon
func (p *KVGetResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return KVGetResponse_Result__DEFAULT
  }
return p.Result_
}

func (p *KVGetResponse) GetKeyValues() map[string][]byte {
  return p.KeyValues
}
func (p *KVGetResponse) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

type KVGetResponseBuilder struct {
  obj *KVGetResponse
}

func NewKVGetResponseBuilder() *KVGetResponseBuilder{
  return &KVGetResponseBuilder{
    obj: NewKVGetResponse(),
  }
}

func (p KVGetResponseBuilder) Emit() *KVGetResponse{
  return &KVGetResponse{
    Result_: p.obj.Result_,
    KeyValues: p.obj.KeyValues,
  }
}

func (k *KVGetResponseBuilder) Result_(result *ResponseCommon) *KVGetResponseBuilder {
  k.obj.Result_ = result
  return k
}

func (k *KVGetResponseBuilder) KeyValues(keyValues map[string][]byte) *KVGetResponseBuilder {
  k.obj.KeyValues = keyValues
  return k
}

func (k *KVGetResponse) SetResult_(result *ResponseCommon) *KVGetResponse {
  k.Result_ = result
  return k
}

func (k *KVGetResponse) SetKeyValues(keyValues map[string][]byte) *KVGetResponse {
  k.KeyValues = keyValues
  return k
}

func (p *KVGetResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *KVGetResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *KVGetResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.KeyValues =  tMap
  for i := 0; i < size; i ++ {
    var _key75 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key75 = v
    }
    var _val76 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val76 = v
    }
    p.KeyValues[_key75] = _val76
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVGetResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KVGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVGetResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *KVGetResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key_values", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key_values: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KeyValues)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KeyValues {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key_values: ", p), err) }
  return err
}

func (p *KVGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  keyValuesVal := fmt.Sprintf("%v", p.KeyValues)
  return fmt.Sprintf("KVGetResponse({Result_:%s KeyValues:%s})", resultVal, keyValuesVal)
}

// Attributes:
//  - SpaceID
//  - Parts
type KVPutRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.KeyValue `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewKVPutRequest() *KVPutRequest {
  return &KVPutRequest{}
}


func (p *KVPutRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *KVPutRequest) GetParts() map[nebula0.PartitionID][]*nebula0.KeyValue {
  return p.Parts
}
type KVPutRequestBuilder struct {
  obj *KVPutRequest
}

func NewKVPutRequestBuilder() *KVPutRequestBuilder{
  return &KVPutRequestBuilder{
    obj: NewKVPutRequest(),
  }
}

func (p KVPutRequestBuilder) Emit() *KVPutRequest{
  return &KVPutRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
  }
}

func (k *KVPutRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *KVPutRequestBuilder {
  k.obj.SpaceID = spaceID
  return k
}

func (k *KVPutRequestBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.KeyValue) *KVPutRequestBuilder {
  k.obj.Parts = parts
  return k
}

func (k *KVPutRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *KVPutRequest {
  k.SpaceID = spaceID
  return k
}

func (k *KVPutRequest) SetParts(parts map[nebula0.PartitionID][]*nebula0.KeyValue) *KVPutRequest {
  k.Parts = parts
  return k
}

func (p *KVPutRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVPutRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *KVPutRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.KeyValue, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key77 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key77 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.KeyValue, 0, size)
    _val78 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem79 := nebula0.NewKeyValue()
      if err := _elem79.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem79), err)
      }
      _val78 = append(_val78, _elem79)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key77] = _val78
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVPutRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KVPutRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVPutRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVPutRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVPutRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  return fmt.Sprintf("KVPutRequest({SpaceID:%s Parts:%s})", spaceIDVal, partsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
type KVRemoveRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][][]byte `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewKVRemoveRequest() *KVRemoveRequest {
  return &KVRemoveRequest{}
}


func (p *KVRemoveRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *KVRemoveRequest) GetParts() map[nebula0.PartitionID][][]byte {
  return p.Parts
}
type KVRemoveRequestBuilder struct {
  obj *KVRemoveRequest
}

func NewKVRemoveRequestBuilder() *KVRemoveRequestBuilder{
  return &KVRemoveRequestBuilder{
    obj: NewKVRemoveRequest(),
  }
}

func (p KVRemoveRequestBuilder) Emit() *KVRemoveRequest{
  return &KVRemoveRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
  }
}

func (k *KVRemoveRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *KVRemoveRequestBuilder {
  k.obj.SpaceID = spaceID
  return k
}

func (k *KVRemoveRequestBuilder) Parts(parts map[nebula0.PartitionID][][]byte) *KVRemoveRequestBuilder {
  k.obj.Parts = parts
  return k
}

func (k *KVRemoveRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *KVRemoveRequest {
  k.SpaceID = spaceID
  return k
}

func (k *KVRemoveRequest) SetParts(parts map[nebula0.PartitionID][][]byte) *KVRemoveRequest {
  k.Parts = parts
  return k
}

func (p *KVRemoveRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVRemoveRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *KVRemoveRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][][]byte, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key80 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key80 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val81 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem82 []byte
      if v, err := iprot.ReadBinary(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _elem82 = v
      }
      _val81 = append(_val81, _elem82)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key80] = _val81
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVRemoveRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KVRemoveRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVRemoveRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVRemoveRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVRemoveRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  return fmt.Sprintf("KVRemoveRequest({SpaceID:%s Parts:%s})", spaceIDVal, partsVal)
}

// Attributes:
//  - Result_
//  - Stats
type AdminExecResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Stats *meta1.StatsItem `thrift:"stats,2,optional" db:"stats" json:"stats,omitempty"`
}

func NewAdminExecResp() *AdminExecResp {
  return &AdminExecResp{
    Result_: NewResponseCommon(),
  }
}

var AdminExecResp_Result__DEFAULT *ResponseCommon
func (p *AdminExecResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return AdminExecResp_Result__DEFAULT
  }
return p.Result_
}
var AdminExecResp_Stats_DEFAULT *meta1.StatsItem
func (p *AdminExecResp) GetStats() *meta1.StatsItem {
  if !p.IsSetStats() {
    return AdminExecResp_Stats_DEFAULT
  }
return p.Stats
}
func (p *AdminExecResp) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *AdminExecResp) IsSetStats() bool {
  return p != nil && p.Stats != nil
}

type AdminExecRespBuilder struct {
  obj *AdminExecResp
}

func NewAdminExecRespBuilder() *AdminExecRespBuilder{
  return &AdminExecRespBuilder{
    obj: NewAdminExecResp(),
  }
}

func (p AdminExecRespBuilder) Emit() *AdminExecResp{
  return &AdminExecResp{
    Result_: p.obj.Result_,
    Stats: p.obj.Stats,
  }
}

func (a *AdminExecRespBuilder) Result_(result *ResponseCommon) *AdminExecRespBuilder {
  a.obj.Result_ = result
  return a
}

func (a *AdminExecRespBuilder) Stats(stats *meta1.StatsItem) *AdminExecRespBuilder {
  a.obj.Stats = stats
  return a
}

func (a *AdminExecResp) SetResult_(result *ResponseCommon) *AdminExecResp {
  a.Result_ = result
  return a
}

func (a *AdminExecResp) SetStats(stats *meta1.StatsItem) *AdminExecResp {
  a.Stats = stats
  return a
}

func (p *AdminExecResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *AdminExecResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminExecResp)  ReadField2(iprot thrift.Protocol) error {
  p.Stats = meta1.NewStatsItem()
  if err := p.Stats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *AdminExecResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminExecResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AdminExecResp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetStats() {
    if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stats: ", p), err) }
    if err := p.Stats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stats: ", p), err) }
  }
  return err
}

func (p *AdminExecResp) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var statsVal string
  if p.Stats == nil {
    statsVal = "<nil>"
  } else {
    statsVal = fmt.Sprintf("%v", p.Stats)
  }
  return fmt.Sprintf("AdminExecResp({Result_:%s Stats:%s})", resultVal, statsVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - NewLeader_
type TransLeaderReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  NewLeader_ *nebula0.HostAddr `thrift:"new_leader,3" db:"new_leader" json:"new_leader"`
}

func NewTransLeaderReq() *TransLeaderReq {
  return &TransLeaderReq{
    NewLeader_: nebula0.NewHostAddr(),
  }
}


func (p *TransLeaderReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *TransLeaderReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var TransLeaderReq_NewLeader__DEFAULT *nebula0.HostAddr
func (p *TransLeaderReq) GetNewLeader_() *nebula0.HostAddr {
  if !p.IsSetNewLeader_() {
    return TransLeaderReq_NewLeader__DEFAULT
  }
return p.NewLeader_
}
func (p *TransLeaderReq) IsSetNewLeader_() bool {
  return p != nil && p.NewLeader_ != nil
}

type TransLeaderReqBuilder struct {
  obj *TransLeaderReq
}

func NewTransLeaderReqBuilder() *TransLeaderReqBuilder{
  return &TransLeaderReqBuilder{
    obj: NewTransLeaderReq(),
  }
}

func (p TransLeaderReqBuilder) Emit() *TransLeaderReq{
  return &TransLeaderReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    NewLeader_: p.obj.NewLeader_,
  }
}

func (t *TransLeaderReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *TransLeaderReqBuilder {
  t.obj.SpaceID = spaceID
  return t
}

func (t *TransLeaderReqBuilder) PartID(partID nebula0.PartitionID) *TransLeaderReqBuilder {
  t.obj.PartID = partID
  return t
}

func (t *TransLeaderReqBuilder) NewLeader_(newLeader *nebula0.HostAddr) *TransLeaderReqBuilder {
  t.obj.NewLeader_ = newLeader
  return t
}

func (t *TransLeaderReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *TransLeaderReq {
  t.SpaceID = spaceID
  return t
}

func (t *TransLeaderReq) SetPartID(partID nebula0.PartitionID) *TransLeaderReq {
  t.PartID = partID
  return t
}

func (t *TransLeaderReq) SetNewLeader_(newLeader *nebula0.HostAddr) *TransLeaderReq {
  t.NewLeader_ = newLeader
  return t
}

func (p *TransLeaderReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransLeaderReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *TransLeaderReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *TransLeaderReq)  ReadField3(iprot thrift.Protocol) error {
  p.NewLeader_ = nebula0.NewHostAddr()
  if err := p.NewLeader_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewLeader_), err)
  }
  return nil
}

func (p *TransLeaderReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TransLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransLeaderReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_leader: ", p), err) }
  if err := p.NewLeader_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewLeader_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_leader: ", p), err) }
  return err
}

func (p *TransLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var newLeaderVal string
  if p.NewLeader_ == nil {
    newLeaderVal = "<nil>"
  } else {
    newLeaderVal = fmt.Sprintf("%v", p.NewLeader_)
  }
  return fmt.Sprintf("TransLeaderReq({SpaceID:%s PartID:%s NewLeader_:%s})", spaceIDVal, partIDVal, newLeaderVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - AsLearner
//  - Peers
type AddPartReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  AsLearner bool `thrift:"as_learner,3" db:"as_learner" json:"as_learner"`
  Peers []*nebula0.HostAddr `thrift:"peers,4" db:"peers" json:"peers"`
}

func NewAddPartReq() *AddPartReq {
  return &AddPartReq{}
}


func (p *AddPartReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddPartReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *AddPartReq) GetAsLearner() bool {
  return p.AsLearner
}

func (p *AddPartReq) GetPeers() []*nebula0.HostAddr {
  return p.Peers
}
type AddPartReqBuilder struct {
  obj *AddPartReq
}

func NewAddPartReqBuilder() *AddPartReqBuilder{
  return &AddPartReqBuilder{
    obj: NewAddPartReq(),
  }
}

func (p AddPartReqBuilder) Emit() *AddPartReq{
  return &AddPartReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    AsLearner: p.obj.AsLearner,
    Peers: p.obj.Peers,
  }
}

func (a *AddPartReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AddPartReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AddPartReqBuilder) PartID(partID nebula0.PartitionID) *AddPartReqBuilder {
  a.obj.PartID = partID
  return a
}

func (a *AddPartReqBuilder) AsLearner(asLearner bool) *AddPartReqBuilder {
  a.obj.AsLearner = asLearner
  return a
}

func (a *AddPartReqBuilder) Peers(peers []*nebula0.HostAddr) *AddPartReqBuilder {
  a.obj.Peers = peers
  return a
}

func (a *AddPartReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AddPartReq {
  a.SpaceID = spaceID
  return a
}

func (a *AddPartReq) SetPartID(partID nebula0.PartitionID) *AddPartReq {
  a.PartID = partID
  return a
}

func (a *AddPartReq) SetAsLearner(asLearner bool) *AddPartReq {
  a.AsLearner = asLearner
  return a
}

func (a *AddPartReq) SetPeers(peers []*nebula0.HostAddr) *AddPartReq {
  a.Peers = peers
  return a
}

func (p *AddPartReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddPartReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AddPartReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *AddPartReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.AsLearner = v
  }
  return nil
}

func (p *AddPartReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem83 := nebula0.NewHostAddr()
    if err := _elem83.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
    }
    p.Peers = append(p.Peers, _elem83)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddPartReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddPartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPartReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("as_learner", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:as_learner: ", p), err) }
  if err := oprot.WriteBool(bool(p.AsLearner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_learner (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:as_learner: ", p), err) }
  return err
}

func (p *AddPartReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peers", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:peers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:peers: ", p), err) }
  return err
}

func (p *AddPartReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  asLearnerVal := fmt.Sprintf("%v", p.AsLearner)
  peersVal := fmt.Sprintf("%v", p.Peers)
  return fmt.Sprintf("AddPartReq({SpaceID:%s PartID:%s AsLearner:%s Peers:%s})", spaceIDVal, partIDVal, asLearnerVal, peersVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Learner
type AddLearnerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Learner *nebula0.HostAddr `thrift:"learner,3" db:"learner" json:"learner"`
}

func NewAddLearnerReq() *AddLearnerReq {
  return &AddLearnerReq{
    Learner: nebula0.NewHostAddr(),
  }
}


func (p *AddLearnerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddLearnerReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var AddLearnerReq_Learner_DEFAULT *nebula0.HostAddr
func (p *AddLearnerReq) GetLearner() *nebula0.HostAddr {
  if !p.IsSetLearner() {
    return AddLearnerReq_Learner_DEFAULT
  }
return p.Learner
}
func (p *AddLearnerReq) IsSetLearner() bool {
  return p != nil && p.Learner != nil
}

type AddLearnerReqBuilder struct {
  obj *AddLearnerReq
}

func NewAddLearnerReqBuilder() *AddLearnerReqBuilder{
  return &AddLearnerReqBuilder{
    obj: NewAddLearnerReq(),
  }
}

func (p AddLearnerReqBuilder) Emit() *AddLearnerReq{
  return &AddLearnerReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    Learner: p.obj.Learner,
  }
}

func (a *AddLearnerReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AddLearnerReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AddLearnerReqBuilder) PartID(partID nebula0.PartitionID) *AddLearnerReqBuilder {
  a.obj.PartID = partID
  return a
}

func (a *AddLearnerReqBuilder) Learner(learner *nebula0.HostAddr) *AddLearnerReqBuilder {
  a.obj.Learner = learner
  return a
}

func (a *AddLearnerReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AddLearnerReq {
  a.SpaceID = spaceID
  return a
}

func (a *AddLearnerReq) SetPartID(partID nebula0.PartitionID) *AddLearnerReq {
  a.PartID = partID
  return a
}

func (a *AddLearnerReq) SetLearner(learner *nebula0.HostAddr) *AddLearnerReq {
  a.Learner = learner
  return a
}

func (p *AddLearnerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddLearnerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AddLearnerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *AddLearnerReq)  ReadField3(iprot thrift.Protocol) error {
  p.Learner = nebula0.NewHostAddr()
  if err := p.Learner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Learner), err)
  }
  return nil
}

func (p *AddLearnerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddLearnerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddLearnerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("learner", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:learner: ", p), err) }
  if err := p.Learner.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Learner), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:learner: ", p), err) }
  return err
}

func (p *AddLearnerReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var learnerVal string
  if p.Learner == nil {
    learnerVal = "<nil>"
  } else {
    learnerVal = fmt.Sprintf("%v", p.Learner)
  }
  return fmt.Sprintf("AddLearnerReq({SpaceID:%s PartID:%s Learner:%s})", spaceIDVal, partIDVal, learnerVal)
}

// Attributes:
//  - SpaceID
//  - PartID
type RemovePartReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
}

func NewRemovePartReq() *RemovePartReq {
  return &RemovePartReq{}
}


func (p *RemovePartReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemovePartReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
type RemovePartReqBuilder struct {
  obj *RemovePartReq
}

func NewRemovePartReqBuilder() *RemovePartReqBuilder{
  return &RemovePartReqBuilder{
    obj: NewRemovePartReq(),
  }
}

func (p RemovePartReqBuilder) Emit() *RemovePartReq{
  return &RemovePartReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
  }
}

func (r *RemovePartReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *RemovePartReqBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *RemovePartReqBuilder) PartID(partID nebula0.PartitionID) *RemovePartReqBuilder {
  r.obj.PartID = partID
  return r
}

func (r *RemovePartReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *RemovePartReq {
  r.SpaceID = spaceID
  return r
}

func (r *RemovePartReq) SetPartID(partID nebula0.PartitionID) *RemovePartReq {
  r.PartID = partID
  return r
}

func (p *RemovePartReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemovePartReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *RemovePartReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *RemovePartReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemovePartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemovePartReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemovePartReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *RemovePartReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  return fmt.Sprintf("RemovePartReq({SpaceID:%s PartID:%s})", spaceIDVal, partIDVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Peer
//  - Add
type MemberChangeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peer *nebula0.HostAddr `thrift:"peer,3" db:"peer" json:"peer"`
  Add bool `thrift:"add,4" db:"add" json:"add"`
}

func NewMemberChangeReq() *MemberChangeReq {
  return &MemberChangeReq{
    Peer: nebula0.NewHostAddr(),
  }
}


func (p *MemberChangeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *MemberChangeReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var MemberChangeReq_Peer_DEFAULT *nebula0.HostAddr
func (p *MemberChangeReq) GetPeer() *nebula0.HostAddr {
  if !p.IsSetPeer() {
    return MemberChangeReq_Peer_DEFAULT
  }
return p.Peer
}

func (p *MemberChangeReq) GetAdd() bool {
  return p.Add
}
func (p *MemberChangeReq) IsSetPeer() bool {
  return p != nil && p.Peer != nil
}

type MemberChangeReqBuilder struct {
  obj *MemberChangeReq
}

func NewMemberChangeReqBuilder() *MemberChangeReqBuilder{
  return &MemberChangeReqBuilder{
    obj: NewMemberChangeReq(),
  }
}

func (p MemberChangeReqBuilder) Emit() *MemberChangeReq{
  return &MemberChangeReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    Peer: p.obj.Peer,
    Add: p.obj.Add,
  }
}

func (m *MemberChangeReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *MemberChangeReqBuilder {
  m.obj.SpaceID = spaceID
  return m
}

func (m *MemberChangeReqBuilder) PartID(partID nebula0.PartitionID) *MemberChangeReqBuilder {
  m.obj.PartID = partID
  return m
}

func (m *MemberChangeReqBuilder) Peer(peer *nebula0.HostAddr) *MemberChangeReqBuilder {
  m.obj.Peer = peer
  return m
}

func (m *MemberChangeReqBuilder) Add(add bool) *MemberChangeReqBuilder {
  m.obj.Add = add
  return m
}

func (m *MemberChangeReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *MemberChangeReq {
  m.SpaceID = spaceID
  return m
}

func (m *MemberChangeReq) SetPartID(partID nebula0.PartitionID) *MemberChangeReq {
  m.PartID = partID
  return m
}

func (m *MemberChangeReq) SetPeer(peer *nebula0.HostAddr) *MemberChangeReq {
  m.Peer = peer
  return m
}

func (m *MemberChangeReq) SetAdd(add bool) *MemberChangeReq {
  m.Add = add
  return m
}

func (p *MemberChangeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *MemberChangeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *MemberChangeReq)  ReadField3(iprot thrift.Protocol) error {
  p.Peer = nebula0.NewHostAddr()
  if err := p.Peer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Peer), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Add = v
  }
  return nil
}

func (p *MemberChangeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MemberChangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberChangeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peer", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peer: ", p), err) }
  if err := p.Peer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Peer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peer: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:add: ", p), err) }
  if err := oprot.WriteBool(bool(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:add: ", p), err) }
  return err
}

func (p *MemberChangeReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var peerVal string
  if p.Peer == nil {
    peerVal = "<nil>"
  } else {
    peerVal = fmt.Sprintf("%v", p.Peer)
  }
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("MemberChangeReq({SpaceID:%s PartID:%s Peer:%s Add:%s})", spaceIDVal, partIDVal, peerVal, addVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Target
type CatchUpDataReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Target *nebula0.HostAddr `thrift:"target,3" db:"target" json:"target"`
}

func NewCatchUpDataReq() *CatchUpDataReq {
  return &CatchUpDataReq{
    Target: nebula0.NewHostAddr(),
  }
}


func (p *CatchUpDataReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CatchUpDataReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var CatchUpDataReq_Target_DEFAULT *nebula0.HostAddr
func (p *CatchUpDataReq) GetTarget() *nebula0.HostAddr {
  if !p.IsSetTarget() {
    return CatchUpDataReq_Target_DEFAULT
  }
return p.Target
}
func (p *CatchUpDataReq) IsSetTarget() bool {
  return p != nil && p.Target != nil
}

type CatchUpDataReqBuilder struct {
  obj *CatchUpDataReq
}

func NewCatchUpDataReqBuilder() *CatchUpDataReqBuilder{
  return &CatchUpDataReqBuilder{
    obj: NewCatchUpDataReq(),
  }
}

func (p CatchUpDataReqBuilder) Emit() *CatchUpDataReq{
  return &CatchUpDataReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    Target: p.obj.Target,
  }
}

func (c *CatchUpDataReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CatchUpDataReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CatchUpDataReqBuilder) PartID(partID nebula0.PartitionID) *CatchUpDataReqBuilder {
  c.obj.PartID = partID
  return c
}

func (c *CatchUpDataReqBuilder) Target(target *nebula0.HostAddr) *CatchUpDataReqBuilder {
  c.obj.Target = target
  return c
}

func (c *CatchUpDataReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CatchUpDataReq {
  c.SpaceID = spaceID
  return c
}

func (c *CatchUpDataReq) SetPartID(partID nebula0.PartitionID) *CatchUpDataReq {
  c.PartID = partID
  return c
}

func (c *CatchUpDataReq) SetTarget(target *nebula0.HostAddr) *CatchUpDataReq {
  c.Target = target
  return c
}

func (p *CatchUpDataReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatchUpDataReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CatchUpDataReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *CatchUpDataReq)  ReadField3(iprot thrift.Protocol) error {
  p.Target = nebula0.NewHostAddr()
  if err := p.Target.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
  }
  return nil
}

func (p *CatchUpDataReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CatchUpDataReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatchUpDataReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("target", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := p.Target.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *CatchUpDataReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  var targetVal string
  if p.Target == nil {
    targetVal = "<nil>"
  } else {
    targetVal = fmt.Sprintf("%v", p.Target)
  }
  return fmt.Sprintf("CatchUpDataReq({SpaceID:%s PartID:%s Target:%s})", spaceIDVal, partIDVal, targetVal)
}

type GetLeaderReq struct {
}

func NewGetLeaderReq() *GetLeaderReq {
  return &GetLeaderReq{}
}

type GetLeaderReqBuilder struct {
  obj *GetLeaderReq
}

func NewGetLeaderReqBuilder() *GetLeaderReqBuilder{
  return &GetLeaderReqBuilder{
    obj: NewGetLeaderReq(),
  }
}

func (p GetLeaderReqBuilder) Emit() *GetLeaderReq{
  return &GetLeaderReq{
  }
}

func (p *GetLeaderReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLeaderReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetLeaderReq({})")
}

// Attributes:
//  - SpaceIds
//  - Name
type CreateCPRequest struct {
  SpaceIds []nebula0.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewCreateCPRequest() *CreateCPRequest {
  return &CreateCPRequest{}
}


func (p *CreateCPRequest) GetSpaceIds() []nebula0.GraphSpaceID {
  return p.SpaceIds
}

func (p *CreateCPRequest) GetName() []byte {
  return p.Name
}
type CreateCPRequestBuilder struct {
  obj *CreateCPRequest
}

func NewCreateCPRequestBuilder() *CreateCPRequestBuilder{
  return &CreateCPRequestBuilder{
    obj: NewCreateCPRequest(),
  }
}

func (p CreateCPRequestBuilder) Emit() *CreateCPRequest{
  return &CreateCPRequest{
    SpaceIds: p.obj.SpaceIds,
    Name: p.obj.Name,
  }
}

func (c *CreateCPRequestBuilder) SpaceIds(spaceIds []nebula0.GraphSpaceID) *CreateCPRequestBuilder {
  c.obj.SpaceIds = spaceIds
  return c
}

func (c *CreateCPRequestBuilder) Name(name []byte) *CreateCPRequestBuilder {
  c.obj.Name = name
  return c
}

func (c *CreateCPRequest) SetSpaceIds(spaceIds []nebula0.GraphSpaceID) *CreateCPRequest {
  c.SpaceIds = spaceIds
  return c
}

func (c *CreateCPRequest) SetName(name []byte) *CreateCPRequest {
  c.Name = name
  return c
}

func (p *CreateCPRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateCPRequest)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
    var _elem84 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _elem84 = temp
    }
    p.SpaceIds = append(p.SpaceIds, _elem84)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateCPRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *CreateCPRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateCPRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *CreateCPRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CreateCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIdsVal := fmt.Sprintf("%v", p.SpaceIds)
  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("CreateCPRequest({SpaceIds:%s Name:%s})", spaceIdsVal, nameVal)
}

// Attributes:
//  - Code
//  - Info
type CreateCPResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Info []*nebula0.CheckpointInfo `thrift:"info,2" db:"info" json:"info"`
}

func NewCreateCPResp() *CreateCPResp {
  return &CreateCPResp{}
}


func (p *CreateCPResp) GetCode() nebula0.ErrorCode {
  return p.Code
}

func (p *CreateCPResp) GetInfo() []*nebula0.CheckpointInfo {
  return p.Info
}
type CreateCPRespBuilder struct {
  obj *CreateCPResp
}

func NewCreateCPRespBuilder() *CreateCPRespBuilder{
  return &CreateCPRespBuilder{
    obj: NewCreateCPResp(),
  }
}

func (p CreateCPRespBuilder) Emit() *CreateCPResp{
  return &CreateCPResp{
    Code: p.obj.Code,
    Info: p.obj.Info,
  }
}

func (c *CreateCPRespBuilder) Code(code nebula0.ErrorCode) *CreateCPRespBuilder {
  c.obj.Code = code
  return c
}

func (c *CreateCPRespBuilder) Info(info []*nebula0.CheckpointInfo) *CreateCPRespBuilder {
  c.obj.Info = info
  return c
}

func (c *CreateCPResp) SetCode(code nebula0.ErrorCode) *CreateCPResp {
  c.Code = code
  return c
}

func (c *CreateCPResp) SetInfo(info []*nebula0.CheckpointInfo) *CreateCPResp {
  c.Info = info
  return c
}

func (p *CreateCPResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateCPResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *CreateCPResp)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.CheckpointInfo, 0, size)
  p.Info =  tSlice
  for i := 0; i < size; i ++ {
    _elem85 := nebula0.NewCheckpointInfo()
    if err := _elem85.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
    }
    p.Info = append(p.Info, _elem85)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateCPResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateCPResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateCPResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateCPResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Info)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Info {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *CreateCPResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  infoVal := fmt.Sprintf("%v", p.Info)
  return fmt.Sprintf("CreateCPResp({Code:%s Info:%s})", codeVal, infoVal)
}

// Attributes:
//  - SpaceIds
//  - Name
type DropCPRequest struct {
  SpaceIds []nebula0.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewDropCPRequest() *DropCPRequest {
  return &DropCPRequest{}
}


func (p *DropCPRequest) GetSpaceIds() []nebula0.GraphSpaceID {
  return p.SpaceIds
}

func (p *DropCPRequest) GetName() []byte {
  return p.Name
}
type DropCPRequestBuilder struct {
  obj *DropCPRequest
}

func NewDropCPRequestBuilder() *DropCPRequestBuilder{
  return &DropCPRequestBuilder{
    obj: NewDropCPRequest(),
  }
}

func (p DropCPRequestBuilder) Emit() *DropCPRequest{
  return &DropCPRequest{
    SpaceIds: p.obj.SpaceIds,
    Name: p.obj.Name,
  }
}

func (d *DropCPRequestBuilder) SpaceIds(spaceIds []nebula0.GraphSpaceID) *DropCPRequestBuilder {
  d.obj.SpaceIds = spaceIds
  return d
}

func (d *DropCPRequestBuilder) Name(name []byte) *DropCPRequestBuilder {
  d.obj.Name = name
  return d
}

func (d *DropCPRequest) SetSpaceIds(spaceIds []nebula0.GraphSpaceID) *DropCPRequest {
  d.SpaceIds = spaceIds
  return d
}

func (d *DropCPRequest) SetName(name []byte) *DropCPRequest {
  d.Name = name
  return d
}

func (p *DropCPRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropCPRequest)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
    var _elem86 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _elem86 = temp
    }
    p.SpaceIds = append(p.SpaceIds, _elem86)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropCPRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *DropCPRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropCPRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *DropCPRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *DropCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIdsVal := fmt.Sprintf("%v", p.SpaceIds)
  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("DropCPRequest({SpaceIds:%s Name:%s})", spaceIdsVal, nameVal)
}

// Attributes:
//  - Code
type DropCPResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewDropCPResp() *DropCPResp {
  return &DropCPResp{}
}


func (p *DropCPResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
type DropCPRespBuilder struct {
  obj *DropCPResp
}

func NewDropCPRespBuilder() *DropCPRespBuilder{
  return &DropCPRespBuilder{
    obj: NewDropCPResp(),
  }
}

func (p DropCPRespBuilder) Emit() *DropCPResp{
  return &DropCPResp{
    Code: p.obj.Code,
  }
}

func (d *DropCPRespBuilder) Code(code nebula0.ErrorCode) *DropCPRespBuilder {
  d.obj.Code = code
  return d
}

func (d *DropCPResp) SetCode(code nebula0.ErrorCode) *DropCPResp {
  d.Code = code
  return d
}

func (p *DropCPResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropCPResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *DropCPResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropCPResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropCPResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *DropCPResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("DropCPResp({Code:%s})", codeVal)
}

// Attributes:
//  - SpaceIds
//  - Sign
type BlockingSignRequest struct {
  SpaceIds []nebula0.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Sign EngineSignType `thrift:"sign,2,required" db:"sign" json:"sign"`
}

func NewBlockingSignRequest() *BlockingSignRequest {
  return &BlockingSignRequest{}
}


func (p *BlockingSignRequest) GetSpaceIds() []nebula0.GraphSpaceID {
  return p.SpaceIds
}

func (p *BlockingSignRequest) GetSign() EngineSignType {
  return p.Sign
}
type BlockingSignRequestBuilder struct {
  obj *BlockingSignRequest
}

func NewBlockingSignRequestBuilder() *BlockingSignRequestBuilder{
  return &BlockingSignRequestBuilder{
    obj: NewBlockingSignRequest(),
  }
}

func (p BlockingSignRequestBuilder) Emit() *BlockingSignRequest{
  return &BlockingSignRequest{
    SpaceIds: p.obj.SpaceIds,
    Sign: p.obj.Sign,
  }
}

func (b *BlockingSignRequestBuilder) SpaceIds(spaceIds []nebula0.GraphSpaceID) *BlockingSignRequestBuilder {
  b.obj.SpaceIds = spaceIds
  return b
}

func (b *BlockingSignRequestBuilder) Sign(sign EngineSignType) *BlockingSignRequestBuilder {
  b.obj.Sign = sign
  return b
}

func (b *BlockingSignRequest) SetSpaceIds(spaceIds []nebula0.GraphSpaceID) *BlockingSignRequest {
  b.SpaceIds = spaceIds
  return b
}

func (b *BlockingSignRequest) SetSign(sign EngineSignType) *BlockingSignRequest {
  b.Sign = sign
  return b
}

func (p *BlockingSignRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSign bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetSign = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSign{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sign is not set"));
  }
  return nil
}

func (p *BlockingSignRequest)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
    var _elem87 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _elem87 = temp
    }
    p.SpaceIds = append(p.SpaceIds, _elem87)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BlockingSignRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := EngineSignType(v)
    p.Sign = temp
  }
  return nil
}

func (p *BlockingSignRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BlockingSignRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlockingSignRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *BlockingSignRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sign: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sign: ", p), err) }
  return err
}

func (p *BlockingSignRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIdsVal := fmt.Sprintf("%v", p.SpaceIds)
  signVal := fmt.Sprintf("%v", p.Sign)
  return fmt.Sprintf("BlockingSignRequest({SpaceIds:%s Sign:%s})", spaceIdsVal, signVal)
}

// Attributes:
//  - Code
type BlockingSignResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewBlockingSignResp() *BlockingSignResp {
  return &BlockingSignResp{}
}


func (p *BlockingSignResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
type BlockingSignRespBuilder struct {
  obj *BlockingSignResp
}

func NewBlockingSignRespBuilder() *BlockingSignRespBuilder{
  return &BlockingSignRespBuilder{
    obj: NewBlockingSignResp(),
  }
}

func (p BlockingSignRespBuilder) Emit() *BlockingSignResp{
  return &BlockingSignResp{
    Code: p.obj.Code,
  }
}

func (b *BlockingSignRespBuilder) Code(code nebula0.ErrorCode) *BlockingSignRespBuilder {
  b.obj.Code = code
  return b
}

func (b *BlockingSignResp) SetCode(code nebula0.ErrorCode) *BlockingSignResp {
  b.Code = code
  return b
}

func (p *BlockingSignResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlockingSignResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *BlockingSignResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BlockingSignResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlockingSignResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *BlockingSignResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("BlockingSignResp({Code:%s})", codeVal)
}

// Attributes:
//  - Code
//  - LeaderParts
type GetLeaderPartsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  LeaderParts map[nebula0.GraphSpaceID][]nebula0.PartitionID `thrift:"leader_parts,2" db:"leader_parts" json:"leader_parts"`
}

func NewGetLeaderPartsResp() *GetLeaderPartsResp {
  return &GetLeaderPartsResp{}
}


func (p *GetLeaderPartsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}

func (p *GetLeaderPartsResp) GetLeaderParts() map[nebula0.GraphSpaceID][]nebula0.PartitionID {
  return p.LeaderParts
}
type GetLeaderPartsRespBuilder struct {
  obj *GetLeaderPartsResp
}

func NewGetLeaderPartsRespBuilder() *GetLeaderPartsRespBuilder{
  return &GetLeaderPartsRespBuilder{
    obj: NewGetLeaderPartsResp(),
  }
}

func (p GetLeaderPartsRespBuilder) Emit() *GetLeaderPartsResp{
  return &GetLeaderPartsResp{
    Code: p.obj.Code,
    LeaderParts: p.obj.LeaderParts,
  }
}

func (g *GetLeaderPartsRespBuilder) Code(code nebula0.ErrorCode) *GetLeaderPartsRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetLeaderPartsRespBuilder) LeaderParts(leaderParts map[nebula0.GraphSpaceID][]nebula0.PartitionID) *GetLeaderPartsRespBuilder {
  g.obj.LeaderParts = leaderParts
  return g
}

func (g *GetLeaderPartsResp) SetCode(code nebula0.ErrorCode) *GetLeaderPartsResp {
  g.Code = code
  return g
}

func (g *GetLeaderPartsResp) SetLeaderParts(leaderParts map[nebula0.GraphSpaceID][]nebula0.PartitionID) *GetLeaderPartsResp {
  g.LeaderParts = leaderParts
  return g
}

func (p *GetLeaderPartsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLeaderPartsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetLeaderPartsResp)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID][]nebula0.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
    var _key88 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _key88 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val89 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem90 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := nebula0.PartitionID(v)
        _elem90 = temp
      }
      _val89 = append(_val89, _elem90)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key88] = _val89
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetLeaderPartsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetLeaderPartsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderPartsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetLeaderPartsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader_parts: ", p), err) }
  return err
}

func (p *GetLeaderPartsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  leaderPartsVal := fmt.Sprintf("%v", p.LeaderParts)
  return fmt.Sprintf("GetLeaderPartsResp({Code:%s LeaderParts:%s})", codeVal, leaderPartsVal)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Peers
type CheckPeersReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peers []*nebula0.HostAddr `thrift:"peers,3" db:"peers" json:"peers"`
}

func NewCheckPeersReq() *CheckPeersReq {
  return &CheckPeersReq{}
}


func (p *CheckPeersReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CheckPeersReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *CheckPeersReq) GetPeers() []*nebula0.HostAddr {
  return p.Peers
}
type CheckPeersReqBuilder struct {
  obj *CheckPeersReq
}

func NewCheckPeersReqBuilder() *CheckPeersReqBuilder{
  return &CheckPeersReqBuilder{
    obj: NewCheckPeersReq(),
  }
}

func (p CheckPeersReqBuilder) Emit() *CheckPeersReq{
  return &CheckPeersReq{
    SpaceID: p.obj.SpaceID,
    PartID: p.obj.PartID,
    Peers: p.obj.Peers,
  }
}

func (c *CheckPeersReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CheckPeersReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CheckPeersReqBuilder) PartID(partID nebula0.PartitionID) *CheckPeersReqBuilder {
  c.obj.PartID = partID
  return c
}

func (c *CheckPeersReqBuilder) Peers(peers []*nebula0.HostAddr) *CheckPeersReqBuilder {
  c.obj.Peers = peers
  return c
}

func (c *CheckPeersReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CheckPeersReq {
  c.SpaceID = spaceID
  return c
}

func (c *CheckPeersReq) SetPartID(partID nebula0.PartitionID) *CheckPeersReq {
  c.PartID = partID
  return c
}

func (c *CheckPeersReq) SetPeers(peers []*nebula0.HostAddr) *CheckPeersReq {
  c.Peers = peers
  return c
}

func (p *CheckPeersReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPeersReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CheckPeersReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *CheckPeersReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem91 := nebula0.NewHostAddr()
    if err := _elem91.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem91), err)
    }
    p.Peers = append(p.Peers, _elem91)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CheckPeersReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CheckPeersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPeersReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *CheckPeersReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIDVal := fmt.Sprintf("%v", p.PartID)
  peersVal := fmt.Sprintf("%v", p.Peers)
  return fmt.Sprintf("CheckPeersReq({SpaceID:%s PartID:%s Peers:%s})", spaceIDVal, partIDVal, peersVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - IndexID
type RebuildIndexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2" db:"parts" json:"parts"`
  IndexID nebula0.IndexID `thrift:"index_id,3" db:"index_id" json:"index_id"`
}

func NewRebuildIndexRequest() *RebuildIndexRequest {
  return &RebuildIndexRequest{}
}


func (p *RebuildIndexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}

func (p *RebuildIndexRequest) GetIndexID() nebula0.IndexID {
  return p.IndexID
}
type RebuildIndexRequestBuilder struct {
  obj *RebuildIndexRequest
}

func NewRebuildIndexRequestBuilder() *RebuildIndexRequestBuilder{
  return &RebuildIndexRequestBuilder{
    obj: NewRebuildIndexRequest(),
  }
}

func (p RebuildIndexRequestBuilder) Emit() *RebuildIndexRequest{
  return &RebuildIndexRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    IndexID: p.obj.IndexID,
  }
}

func (r *RebuildIndexRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *RebuildIndexRequestBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *RebuildIndexRequestBuilder) Parts(parts []nebula0.PartitionID) *RebuildIndexRequestBuilder {
  r.obj.Parts = parts
  return r
}

func (r *RebuildIndexRequestBuilder) IndexID(indexID nebula0.IndexID) *RebuildIndexRequestBuilder {
  r.obj.IndexID = indexID
  return r
}

func (r *RebuildIndexRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *RebuildIndexRequest {
  r.SpaceID = spaceID
  return r
}

func (r *RebuildIndexRequest) SetParts(parts []nebula0.PartitionID) *RebuildIndexRequest {
  r.Parts = parts
  return r
}

func (r *RebuildIndexRequest) SetIndexID(indexID nebula0.IndexID) *RebuildIndexRequest {
  r.IndexID = indexID
  return r
}

func (p *RebuildIndexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    var _elem92 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem92 = temp
    }
    p.Parts = append(p.Parts, _elem92)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := nebula0.IndexID(v)
    p.IndexID = temp
  }
  return nil
}

func (p *RebuildIndexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RebuildIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  indexIDVal := fmt.Sprintf("%v", p.IndexID)
  return fmt.Sprintf("RebuildIndexRequest({SpaceID:%s Parts:%s IndexID:%s})", spaceIDVal, partsVal, indexIDVal)
}

// Attributes:
//  - Result_
//  - Dir
type ListClusterInfoResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Dir *nebula0.DirInfo `thrift:"dir,2" db:"dir" json:"dir"`
}

func NewListClusterInfoResp() *ListClusterInfoResp {
  return &ListClusterInfoResp{
    Result_: NewResponseCommon(),
    Dir: nebula0.NewDirInfo(),
  }
}

var ListClusterInfoResp_Result__DEFAULT *ResponseCommon
func (p *ListClusterInfoResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ListClusterInfoResp_Result__DEFAULT
  }
return p.Result_
}
var ListClusterInfoResp_Dir_DEFAULT *nebula0.DirInfo
func (p *ListClusterInfoResp) GetDir() *nebula0.DirInfo {
  if !p.IsSetDir() {
    return ListClusterInfoResp_Dir_DEFAULT
  }
return p.Dir
}
func (p *ListClusterInfoResp) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

func (p *ListClusterInfoResp) IsSetDir() bool {
  return p != nil && p.Dir != nil
}

type ListClusterInfoRespBuilder struct {
  obj *ListClusterInfoResp
}

func NewListClusterInfoRespBuilder() *ListClusterInfoRespBuilder{
  return &ListClusterInfoRespBuilder{
    obj: NewListClusterInfoResp(),
  }
}

func (p ListClusterInfoRespBuilder) Emit() *ListClusterInfoResp{
  return &ListClusterInfoResp{
    Result_: p.obj.Result_,
    Dir: p.obj.Dir,
  }
}

func (l *ListClusterInfoRespBuilder) Result_(result *ResponseCommon) *ListClusterInfoRespBuilder {
  l.obj.Result_ = result
  return l
}

func (l *ListClusterInfoRespBuilder) Dir(dir *nebula0.DirInfo) *ListClusterInfoRespBuilder {
  l.obj.Dir = dir
  return l
}

func (l *ListClusterInfoResp) SetResult_(result *ResponseCommon) *ListClusterInfoResp {
  l.Result_ = result
  return l
}

func (l *ListClusterInfoResp) SetDir(dir *nebula0.DirInfo) *ListClusterInfoResp {
  l.Dir = dir
  return l
}

func (p *ListClusterInfoResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField2(iprot thrift.Protocol) error {
  p.Dir = nebula0.NewDirInfo()
  if err := p.Dir.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *ListClusterInfoResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListClusterInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dir: ", p), err) }
  if err := p.Dir.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dir: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }

  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  var dirVal string
  if p.Dir == nil {
    dirVal = "<nil>"
  } else {
    dirVal = fmt.Sprintf("%v", p.Dir)
  }
  return fmt.Sprintf("ListClusterInfoResp({Result_:%s Dir:%s})", resultVal, dirVal)
}

type ListClusterInfoReq struct {
}

func NewListClusterInfoReq() *ListClusterInfoReq {
  return &ListClusterInfoReq{}
}

type ListClusterInfoReqBuilder struct {
  obj *ListClusterInfoReq
}

func NewListClusterInfoReqBuilder() *ListClusterInfoReqBuilder{
  return &ListClusterInfoReqBuilder{
    obj: NewListClusterInfoReq(),
  }
}

func (p ListClusterInfoReqBuilder) Emit() *ListClusterInfoReq{
  return &ListClusterInfoReq{
  }
}

func (p *ListClusterInfoReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListClusterInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListClusterInfoReq({})")
}

// Attributes:
//  - JobType
//  - JobID
//  - TaskID
//  - Para
type AddTaskRequest struct {
  JobType meta1.JobType `thrift:"job_type,1" db:"job_type" json:"job_type"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,3" db:"task_id" json:"task_id"`
  Para *TaskPara `thrift:"para,4" db:"para" json:"para"`
}

func NewAddTaskRequest() *AddTaskRequest {
  return &AddTaskRequest{
    Para: NewTaskPara(),
  }
}


func (p *AddTaskRequest) GetJobType() meta1.JobType {
  return p.JobType
}

func (p *AddTaskRequest) GetJobID() int32 {
  return p.JobID
}

func (p *AddTaskRequest) GetTaskID() int32 {
  return p.TaskID
}
var AddTaskRequest_Para_DEFAULT *TaskPara
func (p *AddTaskRequest) GetPara() *TaskPara {
  if !p.IsSetPara() {
    return AddTaskRequest_Para_DEFAULT
  }
return p.Para
}
func (p *AddTaskRequest) IsSetPara() bool {
  return p != nil && p.Para != nil
}

type AddTaskRequestBuilder struct {
  obj *AddTaskRequest
}

func NewAddTaskRequestBuilder() *AddTaskRequestBuilder{
  return &AddTaskRequestBuilder{
    obj: NewAddTaskRequest(),
  }
}

func (p AddTaskRequestBuilder) Emit() *AddTaskRequest{
  return &AddTaskRequest{
    JobType: p.obj.JobType,
    JobID: p.obj.JobID,
    TaskID: p.obj.TaskID,
    Para: p.obj.Para,
  }
}

func (a *AddTaskRequestBuilder) JobType(jobType meta1.JobType) *AddTaskRequestBuilder {
  a.obj.JobType = jobType
  return a
}

func (a *AddTaskRequestBuilder) JobID(jobID int32) *AddTaskRequestBuilder {
  a.obj.JobID = jobID
  return a
}

func (a *AddTaskRequestBuilder) TaskID(taskID int32) *AddTaskRequestBuilder {
  a.obj.TaskID = taskID
  return a
}

func (a *AddTaskRequestBuilder) Para(para *TaskPara) *AddTaskRequestBuilder {
  a.obj.Para = para
  return a
}

func (a *AddTaskRequest) SetJobType(jobType meta1.JobType) *AddTaskRequest {
  a.JobType = jobType
  return a
}

func (a *AddTaskRequest) SetJobID(jobID int32) *AddTaskRequest {
  a.JobID = jobID
  return a
}

func (a *AddTaskRequest) SetTaskID(taskID int32) *AddTaskRequest {
  a.TaskID = taskID
  return a
}

func (a *AddTaskRequest) SetPara(para *TaskPara) *AddTaskRequest {
  a.Para = para
  return a
}

func (p *AddTaskRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddTaskRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := meta1.JobType(v)
    p.JobType = temp
  }
  return nil
}

func (p *AddTaskRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.JobID = v
  }
  return nil
}

func (p *AddTaskRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TaskID = v
  }
  return nil
}

func (p *AddTaskRequest)  ReadField4(iprot thrift.Protocol) error {
  p.Para = NewTaskPara()
  if err := p.Para.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Para), err)
  }
  return nil
}

func (p *AddTaskRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddTaskRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_type: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("task_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_id: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("para", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:para: ", p), err) }
  if err := p.Para.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Para), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:para: ", p), err) }
  return err
}

func (p *AddTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  jobTypeVal := fmt.Sprintf("%v", p.JobType)
  jobIDVal := fmt.Sprintf("%v", p.JobID)
  taskIDVal := fmt.Sprintf("%v", p.TaskID)
  var paraVal string
  if p.Para == nil {
    paraVal = "<nil>"
  } else {
    paraVal = fmt.Sprintf("%v", p.Para)
  }
  return fmt.Sprintf("AddTaskRequest({JobType:%s JobID:%s TaskID:%s Para:%s})", jobTypeVal, jobIDVal, taskIDVal, paraVal)
}

// Attributes:
//  - Code
type AddTaskResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewAddTaskResp() *AddTaskResp {
  return &AddTaskResp{}
}


func (p *AddTaskResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
type AddTaskRespBuilder struct {
  obj *AddTaskResp
}

func NewAddTaskRespBuilder() *AddTaskRespBuilder{
  return &AddTaskRespBuilder{
    obj: NewAddTaskResp(),
  }
}

func (p AddTaskRespBuilder) Emit() *AddTaskResp{
  return &AddTaskResp{
    Code: p.obj.Code,
  }
}

func (a *AddTaskRespBuilder) Code(code nebula0.ErrorCode) *AddTaskRespBuilder {
  a.obj.Code = code
  return a
}

func (a *AddTaskResp) SetCode(code nebula0.ErrorCode) *AddTaskResp {
  a.Code = code
  return a
}

func (p *AddTaskResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddTaskResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *AddTaskResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddTaskResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddTaskResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AddTaskResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("AddTaskResp({Code:%s})", codeVal)
}

// Attributes:
//  - JobID
//  - TaskID
type StopTaskRequest struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,2" db:"task_id" json:"task_id"`
}

func NewStopTaskRequest() *StopTaskRequest {
  return &StopTaskRequest{}
}


func (p *StopTaskRequest) GetJobID() int32 {
  return p.JobID
}

func (p *StopTaskRequest) GetTaskID() int32 {
  return p.TaskID
}
type StopTaskRequestBuilder struct {
  obj *StopTaskRequest
}

func NewStopTaskRequestBuilder() *StopTaskRequestBuilder{
  return &StopTaskRequestBuilder{
    obj: NewStopTaskRequest(),
  }
}

func (p StopTaskRequestBuilder) Emit() *StopTaskRequest{
  return &StopTaskRequest{
    JobID: p.obj.JobID,
    TaskID: p.obj.TaskID,
  }
}

func (s *StopTaskRequestBuilder) JobID(jobID int32) *StopTaskRequestBuilder {
  s.obj.JobID = jobID
  return s
}

func (s *StopTaskRequestBuilder) TaskID(taskID int32) *StopTaskRequestBuilder {
  s.obj.TaskID = taskID
  return s
}

func (s *StopTaskRequest) SetJobID(jobID int32) *StopTaskRequest {
  s.JobID = jobID
  return s
}

func (s *StopTaskRequest) SetTaskID(taskID int32) *StopTaskRequest {
  s.TaskID = taskID
  return s
}

func (p *StopTaskRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StopTaskRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.JobID = v
  }
  return nil
}

func (p *StopTaskRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TaskID = v
  }
  return nil
}

func (p *StopTaskRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StopTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StopTaskRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *StopTaskRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("task_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task_id: ", p), err) }
  return err
}

func (p *StopTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  jobIDVal := fmt.Sprintf("%v", p.JobID)
  taskIDVal := fmt.Sprintf("%v", p.TaskID)
  return fmt.Sprintf("StopTaskRequest({JobID:%s TaskID:%s})", jobIDVal, taskIDVal)
}

// Attributes:
//  - Code
type StopTaskResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewStopTaskResp() *StopTaskResp {
  return &StopTaskResp{}
}


func (p *StopTaskResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
type StopTaskRespBuilder struct {
  obj *StopTaskResp
}

func NewStopTaskRespBuilder() *StopTaskRespBuilder{
  return &StopTaskRespBuilder{
    obj: NewStopTaskResp(),
  }
}

func (p StopTaskRespBuilder) Emit() *StopTaskResp{
  return &StopTaskResp{
    Code: p.obj.Code,
  }
}

func (s *StopTaskRespBuilder) Code(code nebula0.ErrorCode) *StopTaskRespBuilder {
  s.obj.Code = code
  return s
}

func (s *StopTaskResp) SetCode(code nebula0.ErrorCode) *StopTaskResp {
  s.Code = code
  return s
}

func (p *StopTaskResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StopTaskResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *StopTaskResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StopTaskResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StopTaskResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *StopTaskResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("StopTaskResp({Code:%s})", codeVal)
}

// Attributes:
//  - SpaceID
type ClearSpaceReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewClearSpaceReq() *ClearSpaceReq {
  return &ClearSpaceReq{}
}


func (p *ClearSpaceReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ClearSpaceReqBuilder struct {
  obj *ClearSpaceReq
}

func NewClearSpaceReqBuilder() *ClearSpaceReqBuilder{
  return &ClearSpaceReqBuilder{
    obj: NewClearSpaceReq(),
  }
}

func (p ClearSpaceReqBuilder) Emit() *ClearSpaceReq{
  return &ClearSpaceReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (c *ClearSpaceReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ClearSpaceReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *ClearSpaceReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ClearSpaceReq {
  c.SpaceID = spaceID
  return c
}

func (p *ClearSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ClearSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ClearSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ClearSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ClearSpaceReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
type ClearSpaceResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewClearSpaceResp() *ClearSpaceResp {
  return &ClearSpaceResp{}
}


func (p *ClearSpaceResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
type ClearSpaceRespBuilder struct {
  obj *ClearSpaceResp
}

func NewClearSpaceRespBuilder() *ClearSpaceRespBuilder{
  return &ClearSpaceRespBuilder{
    obj: NewClearSpaceResp(),
  }
}

func (p ClearSpaceRespBuilder) Emit() *ClearSpaceResp{
  return &ClearSpaceResp{
    Code: p.obj.Code,
  }
}

func (c *ClearSpaceRespBuilder) Code(code nebula0.ErrorCode) *ClearSpaceRespBuilder {
  c.obj.Code = code
  return c
}

func (c *ClearSpaceResp) SetCode(code nebula0.ErrorCode) *ClearSpaceResp {
  c.Code = code
  return c
}

func (p *ClearSpaceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ClearSpaceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ClearSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ClearSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("ClearSpaceResp({Code:%s})", codeVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - Term
//  - EdgeVersion
type ChainAddEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*NewEdge_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames [][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  Term int64 `thrift:"term,5" db:"term" json:"term"`
  EdgeVersion *int64 `thrift:"edge_version,6,optional" db:"edge_version" json:"edge_version,omitempty"`
}

func NewChainAddEdgesRequest() *ChainAddEdgesRequest {
  return &ChainAddEdgesRequest{}
}


func (p *ChainAddEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainAddEdgesRequest) GetParts() map[nebula0.PartitionID][]*NewEdge_ {
  return p.Parts
}

func (p *ChainAddEdgesRequest) GetPropNames() [][]byte {
  return p.PropNames
}

func (p *ChainAddEdgesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *ChainAddEdgesRequest) GetTerm() int64 {
  return p.Term
}
var ChainAddEdgesRequest_EdgeVersion_DEFAULT int64
func (p *ChainAddEdgesRequest) GetEdgeVersion() int64 {
  if !p.IsSetEdgeVersion() {
    return ChainAddEdgesRequest_EdgeVersion_DEFAULT
  }
return *p.EdgeVersion
}
func (p *ChainAddEdgesRequest) IsSetEdgeVersion() bool {
  return p != nil && p.EdgeVersion != nil
}

type ChainAddEdgesRequestBuilder struct {
  obj *ChainAddEdgesRequest
}

func NewChainAddEdgesRequestBuilder() *ChainAddEdgesRequestBuilder{
  return &ChainAddEdgesRequestBuilder{
    obj: NewChainAddEdgesRequest(),
  }
}

func (p ChainAddEdgesRequestBuilder) Emit() *ChainAddEdgesRequest{
  return &ChainAddEdgesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    PropNames: p.obj.PropNames,
    IfNotExists: p.obj.IfNotExists,
    Term: p.obj.Term,
    EdgeVersion: p.obj.EdgeVersion,
  }
}

func (c *ChainAddEdgesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ChainAddEdgesRequestBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *ChainAddEdgesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*NewEdge_) *ChainAddEdgesRequestBuilder {
  c.obj.Parts = parts
  return c
}

func (c *ChainAddEdgesRequestBuilder) PropNames(propNames [][]byte) *ChainAddEdgesRequestBuilder {
  c.obj.PropNames = propNames
  return c
}

func (c *ChainAddEdgesRequestBuilder) IfNotExists(ifNotExists bool) *ChainAddEdgesRequestBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *ChainAddEdgesRequestBuilder) Term(term int64) *ChainAddEdgesRequestBuilder {
  c.obj.Term = term
  return c
}

func (c *ChainAddEdgesRequestBuilder) EdgeVersion(edgeVersion *int64) *ChainAddEdgesRequestBuilder {
  c.obj.EdgeVersion = edgeVersion
  return c
}

func (c *ChainAddEdgesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *ChainAddEdgesRequest {
  c.SpaceID = spaceID
  return c
}

func (c *ChainAddEdgesRequest) SetParts(parts map[nebula0.PartitionID][]*NewEdge_) *ChainAddEdgesRequest {
  c.Parts = parts
  return c
}

func (c *ChainAddEdgesRequest) SetPropNames(propNames [][]byte) *ChainAddEdgesRequest {
  c.PropNames = propNames
  return c
}

func (c *ChainAddEdgesRequest) SetIfNotExists(ifNotExists bool) *ChainAddEdgesRequest {
  c.IfNotExists = ifNotExists
  return c
}

func (c *ChainAddEdgesRequest) SetTerm(term int64) *ChainAddEdgesRequest {
  c.Term = term
  return c
}

func (c *ChainAddEdgesRequest) SetEdgeVersion(edgeVersion *int64) *ChainAddEdgesRequest {
  c.EdgeVersion = edgeVersion
  return c
}

func (p *ChainAddEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*NewEdge_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key93 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key93 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewEdge_, 0, size)
    _val94 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem95 := NewNewEdge_()
      if err := _elem95.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
      }
      _val94 = append(_val94, _elem95)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key93] = _val94
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.PropNames =  tSlice
  for i := 0; i < size; i ++ {
    var _elem96 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem96 = v
    }
    p.PropNames = append(p.PropNames, _elem96)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Term = v
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.EdgeVersion = &v
  }
  return nil
}

func (p *ChainAddEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChainAddEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainAddEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PropNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:term: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeVersion() {
    if err := oprot.WriteFieldBegin("edge_version", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:edge_version: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EdgeVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_version (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:edge_version: ", p), err) }
  }
  return err
}

func (p *ChainAddEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  propNamesVal := fmt.Sprintf("%v", p.PropNames)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  termVal := fmt.Sprintf("%v", p.Term)
  var edgeVersionVal string
  if p.EdgeVersion == nil {
    edgeVersionVal = "<nil>"
  } else {
    edgeVersionVal = fmt.Sprintf("%v", *p.EdgeVersion)
  }
  return fmt.Sprintf("ChainAddEdgesRequest({SpaceID:%s Parts:%s PropNames:%s IfNotExists:%s Term:%s EdgeVersion:%s})", spaceIDVal, partsVal, propNamesVal, ifNotExistsVal, termVal, edgeVersionVal)
}

// Attributes:
//  - UpdateEdgeRequest
//  - Term
//  - EdgeVersion
//  - SpaceID
//  - Parts
type ChainUpdateEdgeRequest struct {
  UpdateEdgeRequest *UpdateEdgeRequest `thrift:"update_edge_request,1" db:"update_edge_request" json:"update_edge_request"`
  Term int64 `thrift:"term,2" db:"term" json:"term"`
  EdgeVersion *int64 `thrift:"edge_version,3,optional" db:"edge_version" json:"edge_version,omitempty"`
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,4" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,5,required" db:"parts" json:"parts"`
}

func NewChainUpdateEdgeRequest() *ChainUpdateEdgeRequest {
  return &ChainUpdateEdgeRequest{
    UpdateEdgeRequest: NewUpdateEdgeRequest(),
  }
}

var ChainUpdateEdgeRequest_UpdateEdgeRequest_DEFAULT *UpdateEdgeRequest
func (p *ChainUpdateEdgeRequest) GetUpdateEdgeRequest() *UpdateEdgeRequest {
  if !p.IsSetUpdateEdgeRequest() {
    return ChainUpdateEdgeRequest_UpdateEdgeRequest_DEFAULT
  }
return p.UpdateEdgeRequest
}

func (p *ChainUpdateEdgeRequest) GetTerm() int64 {
  return p.Term
}
var ChainUpdateEdgeRequest_EdgeVersion_DEFAULT int64
func (p *ChainUpdateEdgeRequest) GetEdgeVersion() int64 {
  if !p.IsSetEdgeVersion() {
    return ChainUpdateEdgeRequest_EdgeVersion_DEFAULT
  }
return *p.EdgeVersion
}

func (p *ChainUpdateEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainUpdateEdgeRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}
func (p *ChainUpdateEdgeRequest) IsSetUpdateEdgeRequest() bool {
  return p != nil && p.UpdateEdgeRequest != nil
}

func (p *ChainUpdateEdgeRequest) IsSetEdgeVersion() bool {
  return p != nil && p.EdgeVersion != nil
}

type ChainUpdateEdgeRequestBuilder struct {
  obj *ChainUpdateEdgeRequest
}

func NewChainUpdateEdgeRequestBuilder() *ChainUpdateEdgeRequestBuilder{
  return &ChainUpdateEdgeRequestBuilder{
    obj: NewChainUpdateEdgeRequest(),
  }
}

func (p ChainUpdateEdgeRequestBuilder) Emit() *ChainUpdateEdgeRequest{
  return &ChainUpdateEdgeRequest{
    UpdateEdgeRequest: p.obj.UpdateEdgeRequest,
    Term: p.obj.Term,
    EdgeVersion: p.obj.EdgeVersion,
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
  }
}

func (c *ChainUpdateEdgeRequestBuilder) UpdateEdgeRequest(updateEdgeRequest *UpdateEdgeRequest) *ChainUpdateEdgeRequestBuilder {
  c.obj.UpdateEdgeRequest = updateEdgeRequest
  return c
}

func (c *ChainUpdateEdgeRequestBuilder) Term(term int64) *ChainUpdateEdgeRequestBuilder {
  c.obj.Term = term
  return c
}

func (c *ChainUpdateEdgeRequestBuilder) EdgeVersion(edgeVersion *int64) *ChainUpdateEdgeRequestBuilder {
  c.obj.EdgeVersion = edgeVersion
  return c
}

func (c *ChainUpdateEdgeRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ChainUpdateEdgeRequestBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *ChainUpdateEdgeRequestBuilder) Parts(parts []nebula0.PartitionID) *ChainUpdateEdgeRequestBuilder {
  c.obj.Parts = parts
  return c
}

func (c *ChainUpdateEdgeRequest) SetUpdateEdgeRequest(updateEdgeRequest *UpdateEdgeRequest) *ChainUpdateEdgeRequest {
  c.UpdateEdgeRequest = updateEdgeRequest
  return c
}

func (c *ChainUpdateEdgeRequest) SetTerm(term int64) *ChainUpdateEdgeRequest {
  c.Term = term
  return c
}

func (c *ChainUpdateEdgeRequest) SetEdgeVersion(edgeVersion *int64) *ChainUpdateEdgeRequest {
  c.EdgeVersion = edgeVersion
  return c
}

func (c *ChainUpdateEdgeRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *ChainUpdateEdgeRequest {
  c.SpaceID = spaceID
  return c
}

func (c *ChainUpdateEdgeRequest) SetParts(parts []nebula0.PartitionID) *ChainUpdateEdgeRequest {
  c.Parts = parts
  return c
}

func (p *ChainUpdateEdgeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetParts = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetParts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField1(iprot thrift.Protocol) error {
  p.UpdateEdgeRequest = NewUpdateEdgeRequest()
  if err := p.UpdateEdgeRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateEdgeRequest), err)
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Term = v
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.EdgeVersion = &v
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    var _elem97 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem97 = temp
    }
    p.Parts = append(p.Parts, _elem97)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChainUpdateEdgeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChainUpdateEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainUpdateEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("update_edge_request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update_edge_request: ", p), err) }
  if err := p.UpdateEdgeRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateEdgeRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update_edge_request: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeVersion() {
    if err := oprot.WriteFieldBegin("edge_version", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_version: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EdgeVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_version (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_version: ", p), err) }
  }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_id: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parts: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  var updateEdgeRequestVal string
  if p.UpdateEdgeRequest == nil {
    updateEdgeRequestVal = "<nil>"
  } else {
    updateEdgeRequestVal = fmt.Sprintf("%v", p.UpdateEdgeRequest)
  }
  termVal := fmt.Sprintf("%v", p.Term)
  var edgeVersionVal string
  if p.EdgeVersion == nil {
    edgeVersionVal = "<nil>"
  } else {
    edgeVersionVal = fmt.Sprintf("%v", *p.EdgeVersion)
  }
  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  return fmt.Sprintf("ChainUpdateEdgeRequest({UpdateEdgeRequest:%s Term:%s EdgeVersion:%s SpaceID:%s Parts:%s})", updateEdgeRequestVal, termVal, edgeVersionVal, spaceIDVal, partsVal)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - TxnID
//  - Term
type ChainDeleteEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
  TxnID []byte `thrift:"txn_id,3" db:"txn_id" json:"txn_id"`
  Term int64 `thrift:"term,4" db:"term" json:"term"`
}

func NewChainDeleteEdgesRequest() *ChainDeleteEdgesRequest {
  return &ChainDeleteEdgesRequest{}
}


func (p *ChainDeleteEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainDeleteEdgesRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
  return p.Parts
}

func (p *ChainDeleteEdgesRequest) GetTxnID() []byte {
  return p.TxnID
}

func (p *ChainDeleteEdgesRequest) GetTerm() int64 {
  return p.Term
}
type ChainDeleteEdgesRequestBuilder struct {
  obj *ChainDeleteEdgesRequest
}

func NewChainDeleteEdgesRequestBuilder() *ChainDeleteEdgesRequestBuilder{
  return &ChainDeleteEdgesRequestBuilder{
    obj: NewChainDeleteEdgesRequest(),
  }
}

func (p ChainDeleteEdgesRequestBuilder) Emit() *ChainDeleteEdgesRequest{
  return &ChainDeleteEdgesRequest{
    SpaceID: p.obj.SpaceID,
    Parts: p.obj.Parts,
    TxnID: p.obj.TxnID,
    Term: p.obj.Term,
  }
}

func (c *ChainDeleteEdgesRequestBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ChainDeleteEdgesRequestBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *ChainDeleteEdgesRequestBuilder) Parts(parts map[nebula0.PartitionID][]*EdgeKey) *ChainDeleteEdgesRequestBuilder {
  c.obj.Parts = parts
  return c
}

func (c *ChainDeleteEdgesRequestBuilder) TxnID(txnID []byte) *ChainDeleteEdgesRequestBuilder {
  c.obj.TxnID = txnID
  return c
}

func (c *ChainDeleteEdgesRequestBuilder) Term(term int64) *ChainDeleteEdgesRequestBuilder {
  c.obj.Term = term
  return c
}

func (c *ChainDeleteEdgesRequest) SetSpaceID(spaceID nebula0.GraphSpaceID) *ChainDeleteEdgesRequest {
  c.SpaceID = spaceID
  return c
}

func (c *ChainDeleteEdgesRequest) SetParts(parts map[nebula0.PartitionID][]*EdgeKey) *ChainDeleteEdgesRequest {
  c.Parts = parts
  return c
}

func (c *ChainDeleteEdgesRequest) SetTxnID(txnID []byte) *ChainDeleteEdgesRequest {
  c.TxnID = txnID
  return c
}

func (c *ChainDeleteEdgesRequest) SetTerm(term int64) *ChainDeleteEdgesRequest {
  c.Term = term
  return c
}

func (p *ChainDeleteEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key98 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key98 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val99 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem100 := NewEdgeKey()
      if err := _elem100.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem100), err)
      }
      _val99 = append(_val99, _elem100)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key98] = _val99
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TxnID = v
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Term = v
  }
  return nil
}

func (p *ChainDeleteEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChainDeleteEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainDeleteEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("txn_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:txn_id: ", p), err) }
  if err := oprot.WriteBinary(p.TxnID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txn_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:txn_id: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:term: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partsVal := fmt.Sprintf("%v", p.Parts)
  txnIDVal := fmt.Sprintf("%v", p.TxnID)
  termVal := fmt.Sprintf("%v", p.Term)
  return fmt.Sprintf("ChainDeleteEdgesRequest({SpaceID:%s Parts:%s TxnID:%s Term:%s})", spaceIDVal, partsVal, txnIDVal, termVal)
}

