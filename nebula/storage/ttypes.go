// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_DISCONNECTED ErrorCode = -1
  ErrorCode_E_FAILED_TO_CONNECT ErrorCode = -2
  ErrorCode_E_RPC_FAILURE ErrorCode = -3
  ErrorCode_E_LEADER_CHANGED ErrorCode = -11
  ErrorCode_E_KEY_HAS_EXISTS ErrorCode = -12
  ErrorCode_E_SPACE_NOT_FOUND ErrorCode = -13
  ErrorCode_E_PART_NOT_FOUND ErrorCode = -14
  ErrorCode_E_KEY_NOT_FOUND ErrorCode = -15
  ErrorCode_E_CONSENSUS_ERROR ErrorCode = -16
  ErrorCode_E_EDGE_PROP_NOT_FOUND ErrorCode = -21
  ErrorCode_E_TAG_PROP_NOT_FOUND ErrorCode = -22
  ErrorCode_E_IMPROPER_DATA_TYPE ErrorCode = -23
  ErrorCode_E_EDGE_NOT_FOUND ErrorCode = -24
  ErrorCode_E_TAG_NOT_FOUND ErrorCode = -25
  ErrorCode_E_INDEX_NOT_FOUND ErrorCode = -26
  ErrorCode_E_INVALID_FILTER ErrorCode = -31
  ErrorCode_E_INVALID_UPDATER ErrorCode = -32
  ErrorCode_E_INVALID_STORE ErrorCode = -33
  ErrorCode_E_INVALID_PEER ErrorCode = -34
  ErrorCode_E_RETRY_EXHAUSTED ErrorCode = -35
  ErrorCode_E_TRANSFER_LEADER_FAILED ErrorCode = -36
  ErrorCode_E_LOAD_META_FAILED ErrorCode = -41
  ErrorCode_E_FAILED_TO_CHECKPOINT ErrorCode = -50
  ErrorCode_E_CHECKPOINT_BLOCKED ErrorCode = -51
  ErrorCode_E_FILTER_OUT ErrorCode = -60
  ErrorCode_E_PARTIAL_RESULT ErrorCode = -99
  ErrorCode_E_UNKNOWN ErrorCode = -100
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_DISCONNECTED: "E_DISCONNECTED",
  ErrorCode_E_FAILED_TO_CONNECT: "E_FAILED_TO_CONNECT",
  ErrorCode_E_RPC_FAILURE: "E_RPC_FAILURE",
  ErrorCode_E_LEADER_CHANGED: "E_LEADER_CHANGED",
  ErrorCode_E_KEY_HAS_EXISTS: "E_KEY_HAS_EXISTS",
  ErrorCode_E_SPACE_NOT_FOUND: "E_SPACE_NOT_FOUND",
  ErrorCode_E_PART_NOT_FOUND: "E_PART_NOT_FOUND",
  ErrorCode_E_KEY_NOT_FOUND: "E_KEY_NOT_FOUND",
  ErrorCode_E_CONSENSUS_ERROR: "E_CONSENSUS_ERROR",
  ErrorCode_E_EDGE_PROP_NOT_FOUND: "E_EDGE_PROP_NOT_FOUND",
  ErrorCode_E_TAG_PROP_NOT_FOUND: "E_TAG_PROP_NOT_FOUND",
  ErrorCode_E_IMPROPER_DATA_TYPE: "E_IMPROPER_DATA_TYPE",
  ErrorCode_E_EDGE_NOT_FOUND: "E_EDGE_NOT_FOUND",
  ErrorCode_E_TAG_NOT_FOUND: "E_TAG_NOT_FOUND",
  ErrorCode_E_INDEX_NOT_FOUND: "E_INDEX_NOT_FOUND",
  ErrorCode_E_INVALID_FILTER: "E_INVALID_FILTER",
  ErrorCode_E_INVALID_UPDATER: "E_INVALID_UPDATER",
  ErrorCode_E_INVALID_STORE: "E_INVALID_STORE",
  ErrorCode_E_INVALID_PEER: "E_INVALID_PEER",
  ErrorCode_E_RETRY_EXHAUSTED: "E_RETRY_EXHAUSTED",
  ErrorCode_E_TRANSFER_LEADER_FAILED: "E_TRANSFER_LEADER_FAILED",
  ErrorCode_E_LOAD_META_FAILED: "E_LOAD_META_FAILED",
  ErrorCode_E_FAILED_TO_CHECKPOINT: "E_FAILED_TO_CHECKPOINT",
  ErrorCode_E_CHECKPOINT_BLOCKED: "E_CHECKPOINT_BLOCKED",
  ErrorCode_E_FILTER_OUT: "E_FILTER_OUT",
  ErrorCode_E_PARTIAL_RESULT: "E_PARTIAL_RESULT",
  ErrorCode_E_UNKNOWN: "E_UNKNOWN",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_DISCONNECTED": ErrorCode_E_DISCONNECTED,
  "E_FAILED_TO_CONNECT": ErrorCode_E_FAILED_TO_CONNECT,
  "E_RPC_FAILURE": ErrorCode_E_RPC_FAILURE,
  "E_LEADER_CHANGED": ErrorCode_E_LEADER_CHANGED,
  "E_KEY_HAS_EXISTS": ErrorCode_E_KEY_HAS_EXISTS,
  "E_SPACE_NOT_FOUND": ErrorCode_E_SPACE_NOT_FOUND,
  "E_PART_NOT_FOUND": ErrorCode_E_PART_NOT_FOUND,
  "E_KEY_NOT_FOUND": ErrorCode_E_KEY_NOT_FOUND,
  "E_CONSENSUS_ERROR": ErrorCode_E_CONSENSUS_ERROR,
  "E_EDGE_PROP_NOT_FOUND": ErrorCode_E_EDGE_PROP_NOT_FOUND,
  "E_TAG_PROP_NOT_FOUND": ErrorCode_E_TAG_PROP_NOT_FOUND,
  "E_IMPROPER_DATA_TYPE": ErrorCode_E_IMPROPER_DATA_TYPE,
  "E_EDGE_NOT_FOUND": ErrorCode_E_EDGE_NOT_FOUND,
  "E_TAG_NOT_FOUND": ErrorCode_E_TAG_NOT_FOUND,
  "E_INDEX_NOT_FOUND": ErrorCode_E_INDEX_NOT_FOUND,
  "E_INVALID_FILTER": ErrorCode_E_INVALID_FILTER,
  "E_INVALID_UPDATER": ErrorCode_E_INVALID_UPDATER,
  "E_INVALID_STORE": ErrorCode_E_INVALID_STORE,
  "E_INVALID_PEER": ErrorCode_E_INVALID_PEER,
  "E_RETRY_EXHAUSTED": ErrorCode_E_RETRY_EXHAUSTED,
  "E_TRANSFER_LEADER_FAILED": ErrorCode_E_TRANSFER_LEADER_FAILED,
  "E_LOAD_META_FAILED": ErrorCode_E_LOAD_META_FAILED,
  "E_FAILED_TO_CHECKPOINT": ErrorCode_E_FAILED_TO_CHECKPOINT,
  "E_CHECKPOINT_BLOCKED": ErrorCode_E_CHECKPOINT_BLOCKED,
  "E_FILTER_OUT": ErrorCode_E_FILTER_OUT,
  "E_PARTIAL_RESULT": ErrorCode_E_PARTIAL_RESULT,
  "E_UNKNOWN": ErrorCode_E_UNKNOWN,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type PropOwner int64
const (
  PropOwner_SOURCE PropOwner = 1
  PropOwner_DEST PropOwner = 2
  PropOwner_EDGE PropOwner = 3
)

var PropOwnerToName = map[PropOwner]string {
  PropOwner_SOURCE: "SOURCE",
  PropOwner_DEST: "DEST",
  PropOwner_EDGE: "EDGE",
}

var PropOwnerToValue = map[string]PropOwner {
  "SOURCE": PropOwner_SOURCE,
  "DEST": PropOwner_DEST,
  "EDGE": PropOwner_EDGE,
}

func (p PropOwner) String() string {
  if v, ok := PropOwnerToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func PropOwnerFromString(s string) (PropOwner, error) {
  if v, ok := PropOwnerToValue[s]; ok {
    return v, nil
  }
  return PropOwner(0), fmt.Errorf("not a valid PropOwner string")
}

func PropOwnerPtr(v PropOwner) *PropOwner { return &v }

type EngineSignType int64
const (
  EngineSignType_BLOCK_ON EngineSignType = 1
  EngineSignType_BLOCK_OFF EngineSignType = 2
)

var EngineSignTypeToName = map[EngineSignType]string {
  EngineSignType_BLOCK_ON: "BLOCK_ON",
  EngineSignType_BLOCK_OFF: "BLOCK_OFF",
}

var EngineSignTypeToValue = map[string]EngineSignType {
  "BLOCK_ON": EngineSignType_BLOCK_ON,
  "BLOCK_OFF": EngineSignType_BLOCK_OFF,
}

func (p EngineSignType) String() string {
  if v, ok := EngineSignTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func EngineSignTypeFromString(s string) (EngineSignType, error) {
  if v, ok := EngineSignTypeToValue[s]; ok {
    return v, nil
  }
  return EngineSignType(0), fmt.Errorf("not a valid EngineSignType string")
}

func EngineSignTypePtr(v EngineSignType) *EngineSignType { return &v }

type StatType int64
const (
  StatType_SUM StatType = 1
  StatType_COUNT StatType = 2
  StatType_AVG StatType = 3
)

var StatTypeToName = map[StatType]string {
  StatType_SUM: "SUM",
  StatType_COUNT: "COUNT",
  StatType_AVG: "AVG",
}

var StatTypeToValue = map[string]StatType {
  "SUM": StatType_SUM,
  "COUNT": StatType_COUNT,
  "AVG": StatType_AVG,
}

func (p StatType) String() string {
  if v, ok := StatTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func StatTypeFromString(s string) (StatType, error) {
  if v, ok := StatTypeToValue[s]; ok {
    return v, nil
  }
  return StatType(0), fmt.Errorf("not a valid StatType string")
}

func StatTypePtr(v StatType) *StatType { return &v }

// Attributes:
//  - TagID
//  - EdgeType
type EntryId struct {
  TagID *nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula0.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type,omitempty"`
}

func NewEntryId() *EntryId {
  return &EntryId{}
}

var EntryId_TagID_DEFAULT nebula0.TagID
func (p *EntryId) GetTagID() nebula0.TagID {
  if !p.IsSetTagID() {
    return EntryId_TagID_DEFAULT
  }
return *p.TagID
}
var EntryId_EdgeType_DEFAULT nebula0.EdgeType
func (p *EntryId) GetEdgeType() nebula0.EdgeType {
  if !p.IsSetEdgeType() {
    return EntryId_EdgeType_DEFAULT
  }
return *p.EdgeType
}
func (p *EntryId) CountSetFieldsEntryId() int {
  count := 0
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  return count

}

func (p *EntryId) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *EntryId) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *EntryId) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EntryId)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *EntryId)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *EntryId) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsEntryId(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("EntryId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntryId) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  }
  return err
}

func (p *EntryId) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  }
  return err
}

func (p *EntryId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntryId(%+v)", *p)
}

// Attributes:
//  - Owner
//  - Id
//  - Name
//  - Stat
type PropDef struct {
  Owner PropOwner `thrift:"owner,1" db:"owner" json:"owner"`
  Id *EntryId `thrift:"id,2" db:"id" json:"id"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Stat StatType `thrift:"stat,4" db:"stat" json:"stat"`
}

func NewPropDef() *PropDef {
  return &PropDef{}
}


func (p *PropDef) GetOwner() PropOwner {
  return p.Owner
}
var PropDef_Id_DEFAULT *EntryId
func (p *PropDef) GetId() *EntryId {
  if !p.IsSetId() {
    return PropDef_Id_DEFAULT
  }
return p.Id
}

func (p *PropDef) GetName() string {
  return p.Name
}

func (p *PropDef) GetStat() StatType {
  return p.Stat
}
func (p *PropDef) IsSetId() bool {
  return p.Id != nil
}

func (p *PropDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PropDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PropOwner(v)
  p.Owner = temp
}
  return nil
}

func (p *PropDef)  ReadField2(iprot thrift.Protocol) error {
  p.Id = NewEntryId()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *PropDef)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *PropDef)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := StatType(v)
  p.Stat = temp
}
  return nil
}

func (p *PropDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PropDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PropDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("owner", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:owner: ", p), err) }
  if err := oprot.WriteI32(int32(p.Owner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:owner: ", p), err) }
  return err
}

func (p *PropDef) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *PropDef) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *PropDef) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stat", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stat: ", p), err) }
  if err := oprot.WriteI32(int32(p.Stat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stat (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stat: ", p), err) }
  return err
}

func (p *PropDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PropDef(%+v)", *p)
}

// Attributes:
//  - Code
//  - PartID
//  - Leader
type ResultCode struct {
  Code ErrorCode `thrift:"code,1,required" db:"code" json:"code"`
  PartID nebula0.PartitionID `thrift:"part_id,2,required" db:"part_id" json:"part_id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader,omitempty"`
}

func NewResultCode() *ResultCode {
  return &ResultCode{}
}


func (p *ResultCode) GetCode() ErrorCode {
  return p.Code
}

func (p *ResultCode) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var ResultCode_Leader_DEFAULT *nebula0.HostAddr
func (p *ResultCode) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ResultCode_Leader_DEFAULT
  }
return p.Leader
}
func (p *ResultCode) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ResultCode) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetPartID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetPartID = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetPartID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  return nil
}

func (p *ResultCode)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ResultCode)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *ResultCode)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ResultCode) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ResultCode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultCode) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ResultCode) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *ResultCode) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
    if err := p.Leader.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  }
  return err
}

func (p *ResultCode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultCode(%+v)", *p)
}

// Attributes:
//  - Src
//  - EdgeType
//  - Ranking
//  - Dst
type EdgeKey struct {
  Src nebula0.VertexID `thrift:"src,1" db:"src" json:"src"`
  EdgeType nebula0.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type"`
  Ranking nebula0.EdgeRanking `thrift:"ranking,3" db:"ranking" json:"ranking"`
  Dst nebula0.VertexID `thrift:"dst,4" db:"dst" json:"dst"`
}

func NewEdgeKey() *EdgeKey {
  return &EdgeKey{}
}


func (p *EdgeKey) GetSrc() nebula0.VertexID {
  return p.Src
}

func (p *EdgeKey) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgeKey) GetRanking() nebula0.EdgeRanking {
  return p.Ranking
}

func (p *EdgeKey) GetDst() nebula0.VertexID {
  return p.Dst
}
func (p *EdgeKey) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeKey)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Src = temp
}
  return nil
}

func (p *EdgeKey)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgeKey)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.EdgeRanking(v)
  p.Ranking = temp
}
  return nil
}

func (p *EdgeKey)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Dst = temp
}
  return nil
}

func (p *EdgeKey) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeKey) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("src", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := oprot.WriteI64(int64(p.Src)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.src (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *EdgeKey) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  return err
}

func (p *EdgeKey) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ranking", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ranking: ", p), err) }
  if err := oprot.WriteI64(int64(p.Ranking)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ranking (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ranking: ", p), err) }
  return err
}

func (p *EdgeKey) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dst: ", p), err) }
  if err := oprot.WriteI64(int64(p.Dst)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dst (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dst: ", p), err) }
  return err
}

func (p *EdgeKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeKey(%+v)", *p)
}

// Attributes:
//  - Key
//  - Props
type Edge struct {
  Key *EdgeKey `thrift:"key,1" db:"key" json:"key"`
  Props []byte `thrift:"props,2" db:"props" json:"props"`
}

func NewEdge() *Edge {
  return &Edge{}
}

var Edge_Key_DEFAULT *EdgeKey
func (p *Edge) GetKey() *EdgeKey {
  if !p.IsSetKey() {
    return Edge_Key_DEFAULT
  }
return p.Key
}

func (p *Edge) GetProps() []byte {
  return p.Props
}
func (p *Edge) IsSetKey() bool {
  return p.Key != nil
}

func (p *Edge) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Edge)  ReadField1(iprot thrift.Protocol) error {
  p.Key = NewEdgeKey()
  if err := p.Key.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *Edge)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Props = v
}
  return nil
}

func (p *Edge) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Edge"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Edge) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Edge) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteBinary(p.Props); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *Edge) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Edge(%+v)", *p)
}

// Attributes:
//  - Dst
//  - Props
type IdAndProp struct {
  Dst nebula0.VertexID `thrift:"dst,1" db:"dst" json:"dst"`
  Props []byte `thrift:"props,2" db:"props" json:"props"`
}

func NewIdAndProp() *IdAndProp {
  return &IdAndProp{}
}


func (p *IdAndProp) GetDst() nebula0.VertexID {
  return p.Dst
}

func (p *IdAndProp) GetProps() []byte {
  return p.Props
}
func (p *IdAndProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdAndProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Dst = temp
}
  return nil
}

func (p *IdAndProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Props = v
}
  return nil
}

func (p *IdAndProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IdAndProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdAndProp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dst: ", p), err) }
  if err := oprot.WriteI64(int64(p.Dst)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dst (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dst: ", p), err) }
  return err
}

func (p *IdAndProp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteBinary(p.Props); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *IdAndProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdAndProp(%+v)", *p)
}

// Attributes:
//  - Type
//  - Edges
type EdgeData struct {
  Type nebula0.EdgeType `thrift:"type,1" db:"type" json:"type"`
  // unused field # 2
  Edges []*IdAndProp `thrift:"edges,3" db:"edges" json:"edges"`
}

func NewEdgeData() *EdgeData {
  return &EdgeData{}
}


func (p *EdgeData) GetType() nebula0.EdgeType {
  return p.Type
}

func (p *EdgeData) GetEdges() []*IdAndProp {
  return p.Edges
}
func (p *EdgeData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.Type = temp
}
  return nil
}

func (p *EdgeData)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IdAndProp, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := NewIdAndProp()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Edges = append(p.Edges, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EdgeData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *EdgeData) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Edges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edges: ", p), err) }
  return err
}

func (p *EdgeData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeData(%+v)", *p)
}

// Attributes:
//  - TagID
//  - Data
type TagData struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Data []byte `thrift:"data,2" db:"data" json:"data"`
}

func NewTagData() *TagData {
  return &TagData{}
}


func (p *TagData) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *TagData) GetData() []byte {
  return p.Data
}
func (p *TagData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *TagData)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *TagData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TagData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TagData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagData(%+v)", *p)
}

// Attributes:
//  - VertexID
//  - TagData
//  - EdgeData
type VertexData struct {
  VertexID nebula0.VertexID `thrift:"vertex_id,1" db:"vertex_id" json:"vertex_id"`
  TagData []*TagData `thrift:"tag_data,2" db:"tag_data" json:"tag_data"`
  EdgeData []*EdgeData `thrift:"edge_data,3" db:"edge_data" json:"edge_data"`
}

func NewVertexData() *VertexData {
  return &VertexData{}
}


func (p *VertexData) GetVertexID() nebula0.VertexID {
  return p.VertexID
}

func (p *VertexData) GetTagData() []*TagData {
  return p.TagData
}

func (p *VertexData) GetEdgeData() []*EdgeData {
  return p.EdgeData
}
func (p *VertexData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VertexData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.VertexID = temp
}
  return nil
}

func (p *VertexData)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagData, 0, size)
  p.TagData =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := NewTagData()
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.TagData = append(p.TagData, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VertexData)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeData, 0, size)
  p.EdgeData =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := NewEdgeData()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.EdgeData = append(p.EdgeData, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VertexData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VertexData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VertexData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vertex_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.VertexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vertex_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vertex_id: ", p), err) }
  return err
}

func (p *VertexData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_data", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagData {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_data: ", p), err) }
  return err
}

func (p *VertexData) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeData {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_data: ", p), err) }
  return err
}

func (p *VertexData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VertexData(%+v)", *p)
}

// Attributes:
//  - VertexID
//  - Props
type VertexIndexData struct {
  VertexID nebula0.VertexID `thrift:"vertex_id,1" db:"vertex_id" json:"vertex_id"`
  Props []byte `thrift:"props,2" db:"props" json:"props"`
}

func NewVertexIndexData() *VertexIndexData {
  return &VertexIndexData{}
}


func (p *VertexIndexData) GetVertexID() nebula0.VertexID {
  return p.VertexID
}

func (p *VertexIndexData) GetProps() []byte {
  return p.Props
}
func (p *VertexIndexData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VertexIndexData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.VertexID = temp
}
  return nil
}

func (p *VertexIndexData)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Props = v
}
  return nil
}

func (p *VertexIndexData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VertexIndexData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VertexIndexData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vertex_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.VertexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vertex_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vertex_id: ", p), err) }
  return err
}

func (p *VertexIndexData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteBinary(p.Props); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *VertexIndexData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VertexIndexData(%+v)", *p)
}

// Attributes:
//  - FailedCodes
//  - LatencyInUs
type ResponseCommon struct {
  FailedCodes []*ResultCode `thrift:"failed_codes,1,required" db:"failed_codes" json:"failed_codes"`
  LatencyInUs int32 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
}

func NewResponseCommon() *ResponseCommon {
  return &ResponseCommon{}
}


func (p *ResponseCommon) GetFailedCodes() []*ResultCode {
  return p.FailedCodes
}

func (p *ResponseCommon) GetLatencyInUs() int32 {
  return p.LatencyInUs
}
func (p *ResponseCommon) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFailedCodes bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFailedCodes = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLatencyInUs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFailedCodes{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FailedCodes is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ResponseCommon)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ResultCode, 0, size)
  p.FailedCodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := NewResultCode()
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.FailedCodes = append(p.FailedCodes, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResponseCommon)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LatencyInUs = v
}
  return nil
}

func (p *ResponseCommon) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ResponseCommon"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseCommon) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("failed_codes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failed_codes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedCodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FailedCodes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failed_codes: ", p), err) }
  return err
}

func (p *ResponseCommon) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("latency_in_us", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ResponseCommon) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseCommon(%+v)", *p)
}

// Attributes:
//  - Result_
//  - VertexSchema
//  - EdgeSchema
//  - Vertices
//  - TotalEdges
type QueryResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  VertexSchema map[nebula0.TagID]*nebula0.Schema `thrift:"vertex_schema,2" db:"vertex_schema" json:"vertex_schema,omitempty"`
  EdgeSchema map[nebula0.EdgeType]*nebula0.Schema `thrift:"edge_schema,3" db:"edge_schema" json:"edge_schema,omitempty"`
  Vertices []*VertexData `thrift:"vertices,4" db:"vertices" json:"vertices,omitempty"`
  TotalEdges *int32 `thrift:"total_edges,5" db:"total_edges" json:"total_edges,omitempty"`
}

func NewQueryResponse() *QueryResponse {
  return &QueryResponse{}
}

var QueryResponse_Result__DEFAULT *ResponseCommon
func (p *QueryResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return QueryResponse_Result__DEFAULT
  }
return p.Result_
}
var QueryResponse_VertexSchema_DEFAULT map[nebula0.TagID]*nebula0.Schema

func (p *QueryResponse) GetVertexSchema() map[nebula0.TagID]*nebula0.Schema {
  return p.VertexSchema
}
var QueryResponse_EdgeSchema_DEFAULT map[nebula0.EdgeType]*nebula0.Schema

func (p *QueryResponse) GetEdgeSchema() map[nebula0.EdgeType]*nebula0.Schema {
  return p.EdgeSchema
}
var QueryResponse_Vertices_DEFAULT []*VertexData

func (p *QueryResponse) GetVertices() []*VertexData {
  return p.Vertices
}
var QueryResponse_TotalEdges_DEFAULT int32
func (p *QueryResponse) GetTotalEdges() int32 {
  if !p.IsSetTotalEdges() {
    return QueryResponse_TotalEdges_DEFAULT
  }
return *p.TotalEdges
}
func (p *QueryResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *QueryResponse) IsSetVertexSchema() bool {
  return p.VertexSchema != nil
}

func (p *QueryResponse) IsSetEdgeSchema() bool {
  return p.EdgeSchema != nil
}

func (p *QueryResponse) IsSetVertices() bool {
  return p.Vertices != nil
}

func (p *QueryResponse) IsSetTotalEdges() bool {
  return p.TotalEdges != nil
}

func (p *QueryResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *QueryResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *QueryResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.TagID]*nebula0.Schema, size)
  p.VertexSchema =  tMap
  for i := 0; i < size; i ++ {
var _key5 nebula0.TagID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.TagID(v)
    _key5 = temp
}
    _val6 := nebula0.NewSchema()
    if err := _val6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val6), err)
    }
    p.VertexSchema[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QueryResponse)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.EdgeType]*nebula0.Schema, size)
  p.EdgeSchema =  tMap
  for i := 0; i < size; i ++ {
var _key7 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.EdgeType(v)
    _key7 = temp
}
    _val8 := nebula0.NewSchema()
    if err := _val8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val8), err)
    }
    p.EdgeSchema[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QueryResponse)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexData, 0, size)
  p.Vertices =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := NewVertexData()
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Vertices = append(p.Vertices, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalEdges = &v
}
  return nil
}

func (p *QueryResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("QueryResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *QueryResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetVertexSchema() {
    if err := oprot.WriteFieldBegin("vertex_schema", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertex_schema: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.VertexSchema)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.VertexSchema {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertex_schema: ", p), err) }
  }
  return err
}

func (p *QueryResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeSchema() {
    if err := oprot.WriteFieldBegin("edge_schema", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_schema: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.EdgeSchema)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.EdgeSchema {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_schema: ", p), err) }
  }
  return err
}

func (p *QueryResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetVertices() {
    if err := oprot.WriteFieldBegin("vertices", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vertices: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Vertices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Vertices {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vertices: ", p), err) }
  }
  return err
}

func (p *QueryResponse) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetTotalEdges() {
    if err := oprot.WriteFieldBegin("total_edges", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:total_edges: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TotalEdges)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.total_edges (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:total_edges: ", p), err) }
  }
  return err
}

func (p *QueryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryResponse(%+v)", *p)
}

// Attributes:
//  - Result_
type ExecResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewExecResponse() *ExecResponse {
  return &ExecResponse{}
}

var ExecResponse_Result__DEFAULT *ResponseCommon
func (p *ExecResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ExecResponse_Result__DEFAULT
  }
return p.Result_
}
func (p *ExecResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ExecResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ExecResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ExecResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ExecResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecResponse(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
type EdgePropResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Schema *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
  Data []byte `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewEdgePropResponse() *EdgePropResponse {
  return &EdgePropResponse{}
}

var EdgePropResponse_Result__DEFAULT *ResponseCommon
func (p *EdgePropResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return EdgePropResponse_Result__DEFAULT
  }
return p.Result_
}
var EdgePropResponse_Schema_DEFAULT *nebula0.Schema
func (p *EdgePropResponse) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return EdgePropResponse_Schema_DEFAULT
  }
return p.Schema
}
var EdgePropResponse_Data_DEFAULT []byte

func (p *EdgePropResponse) GetData() []byte {
  return p.Data
}
func (p *EdgePropResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *EdgePropResponse) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *EdgePropResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *EdgePropResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *EdgePropResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *EdgePropResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *EdgePropResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *EdgePropResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgePropResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgePropResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *EdgePropResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetSchema() {
    if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
    if err := p.Schema.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  }
  return err
}

func (p *EdgePropResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *EdgePropResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgePropResponse(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
type QueryStatsResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Schema *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
  Data []byte `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewQueryStatsResponse() *QueryStatsResponse {
  return &QueryStatsResponse{}
}

var QueryStatsResponse_Result__DEFAULT *ResponseCommon
func (p *QueryStatsResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return QueryStatsResponse_Result__DEFAULT
  }
return p.Result_
}
var QueryStatsResponse_Schema_DEFAULT *nebula0.Schema
func (p *QueryStatsResponse) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return QueryStatsResponse_Schema_DEFAULT
  }
return p.Schema
}
var QueryStatsResponse_Data_DEFAULT []byte

func (p *QueryStatsResponse) GetData() []byte {
  return p.Data
}
func (p *QueryStatsResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *QueryStatsResponse) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *QueryStatsResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *QueryStatsResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *QueryStatsResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *QueryStatsResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *QueryStatsResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *QueryStatsResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("QueryStatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryStatsResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *QueryStatsResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetSchema() {
    if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
    if err := p.Schema.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  }
  return err
}

func (p *QueryStatsResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *QueryStatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryStatsResponse(%+v)", *p)
}

// Attributes:
//  - TagID
//  - Props
type Tag struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Props []byte `thrift:"props,2" db:"props" json:"props"`
}

func NewTag() *Tag {
  return &Tag{}
}


func (p *Tag) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *Tag) GetProps() []byte {
  return p.Props
}
func (p *Tag) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Tag)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *Tag)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Props = v
}
  return nil
}

func (p *Tag) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Tag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tag) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *Tag) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("props", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteBinary(p.Props); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.props (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *Tag) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tag(%+v)", *p)
}

// Attributes:
//  - Id
//  - Tags
type Vertex struct {
  Id nebula0.VertexID `thrift:"id,1" db:"id" json:"id"`
  Tags []*Tag `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewVertex() *Vertex {
  return &Vertex{}
}


func (p *Vertex) GetId() nebula0.VertexID {
  return p.Id
}

func (p *Vertex) GetTags() []*Tag {
  return p.Tags
}
func (p *Vertex) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Vertex)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Id = temp
}
  return nil
}

func (p *Vertex)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tag, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := NewTag()
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Tags = append(p.Tags, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Vertex) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Vertex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Vertex) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Vertex) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *Vertex) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Vertex(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeTypes
//  - Filter
//  - ReturnColumns
type GetNeighborsRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]nebula0.VertexID `thrift:"parts,2" db:"parts" json:"parts"`
  EdgeTypes []nebula0.EdgeType `thrift:"edge_types,3" db:"edge_types" json:"edge_types"`
  Filter []byte `thrift:"filter,4" db:"filter" json:"filter"`
  ReturnColumns []*PropDef `thrift:"return_columns,5" db:"return_columns" json:"return_columns"`
}

func NewGetNeighborsRequest() *GetNeighborsRequest {
  return &GetNeighborsRequest{}
}


func (p *GetNeighborsRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetNeighborsRequest) GetParts() map[nebula0.PartitionID][]nebula0.VertexID {
  return p.Parts
}

func (p *GetNeighborsRequest) GetEdgeTypes() []nebula0.EdgeType {
  return p.EdgeTypes
}

func (p *GetNeighborsRequest) GetFilter() []byte {
  return p.Filter
}

func (p *GetNeighborsRequest) GetReturnColumns() []*PropDef {
  return p.ReturnColumns
}
func (p *GetNeighborsRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetNeighborsRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]nebula0.VertexID, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key11 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key11 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.VertexID, 0, size)
    _val12 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem13 nebula0.VertexID
      if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.VertexID(v)
      _elem13 = temp
}
      _val12 = append(_val12, _elem13)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.EdgeType, 0, size)
  p.EdgeTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.EdgeType(v)
    _elem14 = temp
}
    p.EdgeTypes = append(p.EdgeTypes, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *GetNeighborsRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PropDef, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := NewPropDef()
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetNeighborsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetNeighborsRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_types", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_types: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.EdgeTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_types: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:return_columns: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNeighborsRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
type VertexPropRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]nebula0.VertexID `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnColumns []*PropDef `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
}

func NewVertexPropRequest() *VertexPropRequest {
  return &VertexPropRequest{}
}


func (p *VertexPropRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *VertexPropRequest) GetParts() map[nebula0.PartitionID][]nebula0.VertexID {
  return p.Parts
}

func (p *VertexPropRequest) GetReturnColumns() []*PropDef {
  return p.ReturnColumns
}
func (p *VertexPropRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VertexPropRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *VertexPropRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]nebula0.VertexID, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key16 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key16 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.VertexID, 0, size)
    _val17 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem18 nebula0.VertexID
      if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.VertexID(v)
      _elem18 = temp
}
      _val17 = append(_val17, _elem18)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *VertexPropRequest)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PropDef, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := NewPropDef()
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VertexPropRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VertexPropRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VertexPropRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *VertexPropRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *VertexPropRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err) }
  return err
}

func (p *VertexPropRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VertexPropRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeType
//  - Filter
//  - ReturnColumns
type EdgePropRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
  EdgeType nebula0.EdgeType `thrift:"edge_type,3" db:"edge_type" json:"edge_type"`
  Filter []byte `thrift:"filter,4" db:"filter" json:"filter"`
  ReturnColumns []*PropDef `thrift:"return_columns,5" db:"return_columns" json:"return_columns"`
}

func NewEdgePropRequest() *EdgePropRequest {
  return &EdgePropRequest{}
}


func (p *EdgePropRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *EdgePropRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
  return p.Parts
}

func (p *EdgePropRequest) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgePropRequest) GetFilter() []byte {
  return p.Filter
}

func (p *EdgePropRequest) GetReturnColumns() []*PropDef {
  return p.ReturnColumns
}
func (p *EdgePropRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgePropRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *EdgePropRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key20 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key20 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val21 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem22 := NewEdgeKey()
      if err := _elem22.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
      }
      _val21 = append(_val21, _elem22)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *EdgePropRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgePropRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *EdgePropRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PropDef, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := NewPropDef()
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EdgePropRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgePropRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgePropRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *EdgePropRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *EdgePropRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err) }
  return err
}

func (p *EdgePropRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err) }
  return err
}

func (p *EdgePropRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:return_columns: ", p), err) }
  return err
}

func (p *EdgePropRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgePropRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Overwritable
type AddVerticesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*Vertex `thrift:"parts,2" db:"parts" json:"parts"`
  Overwritable bool `thrift:"overwritable,3" db:"overwritable" json:"overwritable"`
}

func NewAddVerticesRequest() *AddVerticesRequest {
  return &AddVerticesRequest{}
}


func (p *AddVerticesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddVerticesRequest) GetParts() map[nebula0.PartitionID][]*Vertex {
  return p.Parts
}

func (p *AddVerticesRequest) GetOverwritable() bool {
  return p.Overwritable
}
func (p *AddVerticesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddVerticesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*Vertex, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key24 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key24 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Vertex, 0, size)
    _val25 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem26 := NewVertex()
      if err := _elem26.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
      }
      _val25 = append(_val25, _elem26)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Overwritable = v
}
  return nil
}

func (p *AddVerticesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddVerticesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("overwritable", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwritable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Overwritable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overwritable (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwritable: ", p), err) }
  return err
}

func (p *AddVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddVerticesRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - Overwritable
type AddEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*Edge `thrift:"parts,2" db:"parts" json:"parts"`
  Overwritable bool `thrift:"overwritable,3" db:"overwritable" json:"overwritable"`
}

func NewAddEdgesRequest() *AddEdgesRequest {
  return &AddEdgesRequest{}
}


func (p *AddEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddEdgesRequest) GetParts() map[nebula0.PartitionID][]*Edge {
  return p.Parts
}

func (p *AddEdgesRequest) GetOverwritable() bool {
  return p.Overwritable
}
func (p *AddEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*Edge, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key27 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key27 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Edge, 0, size)
    _val28 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem29 := NewEdge()
      if err := _elem29.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
      }
      _val28 = append(_val28, _elem29)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Overwritable = v
}
  return nil
}

func (p *AddEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("overwritable", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:overwritable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Overwritable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overwritable (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:overwritable: ", p), err) }
  return err
}

func (p *AddEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddEdgesRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type DeleteVerticesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]nebula0.VertexID `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewDeleteVerticesRequest() *DeleteVerticesRequest {
  return &DeleteVerticesRequest{}
}


func (p *DeleteVerticesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteVerticesRequest) GetParts() map[nebula0.PartitionID][]nebula0.VertexID {
  return p.Parts
}
func (p *DeleteVerticesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DeleteVerticesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]nebula0.VertexID, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key30 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key30 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.VertexID, 0, size)
    _val31 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem32 nebula0.VertexID
      if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.VertexID(v)
      _elem32 = temp
}
      _val31 = append(_val31, _elem32)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteVerticesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DeleteVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteVerticesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteVerticesRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type DeleteEdgesRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewDeleteEdgesRequest() *DeleteEdgesRequest {
  return &DeleteEdgesRequest{}
}


func (p *DeleteEdgesRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteEdgesRequest) GetParts() map[nebula0.PartitionID][]*EdgeKey {
  return p.Parts
}
func (p *DeleteEdgesRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DeleteEdgesRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key33 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key33 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val34 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem35 := NewEdgeKey()
      if err := _elem35.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem35), err)
      }
      _val34 = append(_val34, _elem35)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key33] = _val34
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteEdgesRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DeleteEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteEdgesRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteEdgesRequest(%+v)", *p)
}

// Attributes:
//  - Result_
type AdminExecResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewAdminExecResp() *AdminExecResp {
  return &AdminExecResp{}
}

var AdminExecResp_Result__DEFAULT *ResponseCommon
func (p *AdminExecResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return AdminExecResp_Result__DEFAULT
  }
return p.Result_
}
func (p *AdminExecResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AdminExecResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *AdminExecResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminExecResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminExecResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AdminExecResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminExecResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - AsLearner
type AddPartReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  AsLearner bool `thrift:"as_learner,3" db:"as_learner" json:"as_learner"`
}

func NewAddPartReq() *AddPartReq {
  return &AddPartReq{}
}


func (p *AddPartReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddPartReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *AddPartReq) GetAsLearner() bool {
  return p.AsLearner
}
func (p *AddPartReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddPartReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddPartReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *AddPartReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AsLearner = v
}
  return nil
}

func (p *AddPartReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddPartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPartReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("as_learner", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:as_learner: ", p), err) }
  if err := oprot.WriteBool(bool(p.AsLearner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_learner (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:as_learner: ", p), err) }
  return err
}

func (p *AddPartReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
type RemovePartReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
}

func NewRemovePartReq() *RemovePartReq {
  return &RemovePartReq{}
}


func (p *RemovePartReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemovePartReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
func (p *RemovePartReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemovePartReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemovePartReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *RemovePartReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemovePartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemovePartReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemovePartReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *RemovePartReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemovePartReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Peer
//  - Add
type MemberChangeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peer *nebula0.HostAddr `thrift:"peer,3" db:"peer" json:"peer"`
  Add bool `thrift:"add,4" db:"add" json:"add"`
}

func NewMemberChangeReq() *MemberChangeReq {
  return &MemberChangeReq{}
}


func (p *MemberChangeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *MemberChangeReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var MemberChangeReq_Peer_DEFAULT *nebula0.HostAddr
func (p *MemberChangeReq) GetPeer() *nebula0.HostAddr {
  if !p.IsSetPeer() {
    return MemberChangeReq_Peer_DEFAULT
  }
return p.Peer
}

func (p *MemberChangeReq) GetAdd() bool {
  return p.Add
}
func (p *MemberChangeReq) IsSetPeer() bool {
  return p.Peer != nil
}

func (p *MemberChangeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *MemberChangeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *MemberChangeReq)  ReadField3(iprot thrift.Protocol) error {
  p.Peer = nebula0.NewHostAddr()
  if err := p.Peer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Peer), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Add = v
}
  return nil
}

func (p *MemberChangeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MemberChangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberChangeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peer", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peer: ", p), err) }
  if err := p.Peer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Peer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peer: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:add: ", p), err) }
  if err := oprot.WriteBool(bool(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:add: ", p), err) }
  return err
}

func (p *MemberChangeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberChangeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - NewLeader_
type TransLeaderReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  NewLeader_ *nebula0.HostAddr `thrift:"new_leader,3" db:"new_leader" json:"new_leader"`
}

func NewTransLeaderReq() *TransLeaderReq {
  return &TransLeaderReq{}
}


func (p *TransLeaderReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *TransLeaderReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var TransLeaderReq_NewLeader__DEFAULT *nebula0.HostAddr
func (p *TransLeaderReq) GetNewLeader_() *nebula0.HostAddr {
  if !p.IsSetNewLeader_() {
    return TransLeaderReq_NewLeader__DEFAULT
  }
return p.NewLeader_
}
func (p *TransLeaderReq) IsSetNewLeader_() bool {
  return p.NewLeader_ != nil
}

func (p *TransLeaderReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransLeaderReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *TransLeaderReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *TransLeaderReq)  ReadField3(iprot thrift.Protocol) error {
  p.NewLeader_ = nebula0.NewHostAddr()
  if err := p.NewLeader_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewLeader_), err)
  }
  return nil
}

func (p *TransLeaderReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TransLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransLeaderReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_leader: ", p), err) }
  if err := p.NewLeader_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewLeader_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_leader: ", p), err) }
  return err
}

func (p *TransLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransLeaderReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Learner
type AddLearnerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Learner *nebula0.HostAddr `thrift:"learner,3" db:"learner" json:"learner"`
}

func NewAddLearnerReq() *AddLearnerReq {
  return &AddLearnerReq{}
}


func (p *AddLearnerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddLearnerReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var AddLearnerReq_Learner_DEFAULT *nebula0.HostAddr
func (p *AddLearnerReq) GetLearner() *nebula0.HostAddr {
  if !p.IsSetLearner() {
    return AddLearnerReq_Learner_DEFAULT
  }
return p.Learner
}
func (p *AddLearnerReq) IsSetLearner() bool {
  return p.Learner != nil
}

func (p *AddLearnerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddLearnerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddLearnerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *AddLearnerReq)  ReadField3(iprot thrift.Protocol) error {
  p.Learner = nebula0.NewHostAddr()
  if err := p.Learner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Learner), err)
  }
  return nil
}

func (p *AddLearnerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddLearnerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddLearnerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("learner", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:learner: ", p), err) }
  if err := p.Learner.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Learner), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:learner: ", p), err) }
  return err
}

func (p *AddLearnerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddLearnerReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Target
type CatchUpDataReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Target *nebula0.HostAddr `thrift:"target,3" db:"target" json:"target"`
}

func NewCatchUpDataReq() *CatchUpDataReq {
  return &CatchUpDataReq{}
}


func (p *CatchUpDataReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CatchUpDataReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var CatchUpDataReq_Target_DEFAULT *nebula0.HostAddr
func (p *CatchUpDataReq) GetTarget() *nebula0.HostAddr {
  if !p.IsSetTarget() {
    return CatchUpDataReq_Target_DEFAULT
  }
return p.Target
}
func (p *CatchUpDataReq) IsSetTarget() bool {
  return p.Target != nil
}

func (p *CatchUpDataReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatchUpDataReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CatchUpDataReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *CatchUpDataReq)  ReadField3(iprot thrift.Protocol) error {
  p.Target = nebula0.NewHostAddr()
  if err := p.Target.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
  }
  return nil
}

func (p *CatchUpDataReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CatchUpDataReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatchUpDataReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("target", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := p.Target.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *CatchUpDataReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatchUpDataReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Peers
type CheckPeersReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peers []*nebula0.HostAddr `thrift:"peers,3" db:"peers" json:"peers"`
}

func NewCheckPeersReq() *CheckPeersReq {
  return &CheckPeersReq{}
}


func (p *CheckPeersReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CheckPeersReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *CheckPeersReq) GetPeers() []*nebula0.HostAddr {
  return p.Peers
}
func (p *CheckPeersReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPeersReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CheckPeersReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *CheckPeersReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := nebula0.NewHostAddr()
    if err := _elem36.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.Peers = append(p.Peers, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CheckPeersReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CheckPeersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPeersReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *CheckPeersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckPeersReq(%+v)", *p)
}

type GetLeaderReq struct {
}

func NewGetLeaderReq() *GetLeaderReq {
  return &GetLeaderReq{}
}

func (p *GetLeaderReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLeaderReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLeaderReq(%+v)", *p)
}

// Attributes:
//  - Result_
//  - LeaderParts
type GetLeaderResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  LeaderParts map[nebula0.GraphSpaceID][]nebula0.PartitionID `thrift:"leader_parts,2" db:"leader_parts" json:"leader_parts"`
}

func NewGetLeaderResp() *GetLeaderResp {
  return &GetLeaderResp{}
}

var GetLeaderResp_Result__DEFAULT *ResponseCommon
func (p *GetLeaderResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetLeaderResp_Result__DEFAULT
  }
return p.Result_
}

func (p *GetLeaderResp) GetLeaderParts() map[nebula0.GraphSpaceID][]nebula0.PartitionID {
  return p.LeaderParts
}
func (p *GetLeaderResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetLeaderResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetLeaderResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetLeaderResp)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID][]nebula0.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
var _key37 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.GraphSpaceID(v)
    _key37 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val38 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem39 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem39 = temp
}
      _val38 = append(_val38, _elem39)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetLeaderResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetLeaderResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetLeaderResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader_parts: ", p), err) }
  return err
}

func (p *GetLeaderResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLeaderResp(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Data
//  - Upsert
type UpdateResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Schema *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
  Data []byte `thrift:"data,3" db:"data" json:"data,omitempty"`
  Upsert bool `thrift:"upsert,4" db:"upsert" json:"upsert,omitempty"`
}

func NewUpdateResponse() *UpdateResponse {
  return &UpdateResponse{}
}

var UpdateResponse_Result__DEFAULT *ResponseCommon
func (p *UpdateResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return UpdateResponse_Result__DEFAULT
  }
return p.Result_
}
var UpdateResponse_Schema_DEFAULT *nebula0.Schema
func (p *UpdateResponse) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return UpdateResponse_Schema_DEFAULT
  }
return p.Schema
}
var UpdateResponse_Data_DEFAULT []byte

func (p *UpdateResponse) GetData() []byte {
  return p.Data
}
var UpdateResponse_Upsert_DEFAULT bool = false

func (p *UpdateResponse) GetUpsert() bool {
  return p.Upsert
}
func (p *UpdateResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *UpdateResponse) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *UpdateResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *UpdateResponse) IsSetUpsert() bool {
  return p.Upsert != UpdateResponse_Upsert_DEFAULT
}

func (p *UpdateResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *UpdateResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *UpdateResponse)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *UpdateResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *UpdateResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Upsert = v
}
  return nil
}

func (p *UpdateResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetSchema() {
    if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
    if err := p.Schema.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  }
  return err
}

func (p *UpdateResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *UpdateResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetUpsert() {
    if err := oprot.WriteFieldBegin("upsert", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:upsert: ", p), err) }
    if err := oprot.WriteBool(bool(p.Upsert)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.upsert (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:upsert: ", p), err) }
  }
  return err
}

func (p *UpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

// Attributes:
//  - Name
//  - Prop
//  - Value
type UpdateItem struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Prop []byte `thrift:"prop,2,required" db:"prop" json:"prop"`
  Value []byte `thrift:"value,3,required" db:"value" json:"value"`
}

func NewUpdateItem() *UpdateItem {
  return &UpdateItem{}
}


func (p *UpdateItem) GetName() []byte {
  return p.Name
}

func (p *UpdateItem) GetProp() []byte {
  return p.Prop
}

func (p *UpdateItem) GetValue() []byte {
  return p.Value
}
func (p *UpdateItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetProp bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetProp = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetValue = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetProp{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Prop is not set"));
  }
  if !issetValue{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *UpdateItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *UpdateItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prop = v
}
  return nil
}

func (p *UpdateItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *UpdateItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *UpdateItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prop", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prop: ", p), err) }
  if err := oprot.WriteBinary(p.Prop); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prop (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prop: ", p), err) }
  return err
}

func (p *UpdateItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *UpdateItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateItem(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - VertexID
//  - PartID
//  - Filter
//  - UpdateItems
//  - ReturnColumns
//  - Insertable
type UpdateVertexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  VertexID nebula0.VertexID `thrift:"vertex_id,2" db:"vertex_id" json:"vertex_id"`
  PartID nebula0.PartitionID `thrift:"part_id,3" db:"part_id" json:"part_id"`
  Filter []byte `thrift:"filter,4" db:"filter" json:"filter"`
  UpdateItems []*UpdateItem `thrift:"update_items,5" db:"update_items" json:"update_items"`
  ReturnColumns [][]byte `thrift:"return_columns,6" db:"return_columns" json:"return_columns"`
  Insertable bool `thrift:"insertable,7" db:"insertable" json:"insertable"`
}

func NewUpdateVertexRequest() *UpdateVertexRequest {
  return &UpdateVertexRequest{}
}


func (p *UpdateVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *UpdateVertexRequest) GetVertexID() nebula0.VertexID {
  return p.VertexID
}

func (p *UpdateVertexRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *UpdateVertexRequest) GetFilter() []byte {
  return p.Filter
}

func (p *UpdateVertexRequest) GetUpdateItems() []*UpdateItem {
  return p.UpdateItems
}

func (p *UpdateVertexRequest) GetReturnColumns() [][]byte {
  return p.ReturnColumns
}

func (p *UpdateVertexRequest) GetInsertable() bool {
  return p.Insertable
}
func (p *UpdateVertexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.VertexID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdateItem, 0, size)
  p.UpdateItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := NewUpdateItem()
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.UpdateItems = append(p.UpdateItems, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.ReturnColumns = append(p.ReturnColumns, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Insertable = v
}
  return nil
}

func (p *UpdateVertexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertex_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.VertexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vertex_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertex_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("update_items", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdateItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdateItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_items: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_columns: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:insertable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insertable (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:insertable: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateVertexRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeKey
//  - PartID
//  - Filter
//  - UpdateItems
//  - ReturnColumns
//  - Insertable
type UpdateEdgeRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeKey *EdgeKey `thrift:"edge_key,2" db:"edge_key" json:"edge_key"`
  PartID nebula0.PartitionID `thrift:"part_id,3" db:"part_id" json:"part_id"`
  Filter []byte `thrift:"filter,4" db:"filter" json:"filter"`
  UpdateItems []*UpdateItem `thrift:"update_items,5" db:"update_items" json:"update_items"`
  ReturnColumns [][]byte `thrift:"return_columns,6" db:"return_columns" json:"return_columns"`
  Insertable bool `thrift:"insertable,7" db:"insertable" json:"insertable"`
}

func NewUpdateEdgeRequest() *UpdateEdgeRequest {
  return &UpdateEdgeRequest{}
}


func (p *UpdateEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var UpdateEdgeRequest_EdgeKey_DEFAULT *EdgeKey
func (p *UpdateEdgeRequest) GetEdgeKey() *EdgeKey {
  if !p.IsSetEdgeKey() {
    return UpdateEdgeRequest_EdgeKey_DEFAULT
  }
return p.EdgeKey
}

func (p *UpdateEdgeRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *UpdateEdgeRequest) GetFilter() []byte {
  return p.Filter
}

func (p *UpdateEdgeRequest) GetUpdateItems() []*UpdateItem {
  return p.UpdateItems
}

func (p *UpdateEdgeRequest) GetReturnColumns() [][]byte {
  return p.ReturnColumns
}

func (p *UpdateEdgeRequest) GetInsertable() bool {
  return p.Insertable
}
func (p *UpdateEdgeRequest) IsSetEdgeKey() bool {
  return p.EdgeKey != nil
}

func (p *UpdateEdgeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField2(iprot thrift.Protocol) error {
  p.EdgeKey = NewEdgeKey()
  if err := p.EdgeKey.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EdgeKey), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdateItem, 0, size)
  p.UpdateItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := NewUpdateItem()
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.UpdateItems = append(p.UpdateItems, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField6(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem43 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem43 = v
}
    p.ReturnColumns = append(p.ReturnColumns, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Insertable = v
}
  return nil
}

func (p *UpdateEdgeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_key", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_key: ", p), err) }
  if err := p.EdgeKey.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EdgeKey), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_key: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("update_items", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:update_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UpdateItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdateItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:update_items: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_columns: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("insertable", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:insertable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Insertable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.insertable (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:insertable: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateEdgeRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Cursor
//  - ReturnColumns
//  - AllColumns
//  - Limit
//  - StartTime
//  - EndTime
type ScanEdgeRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Cursor []byte `thrift:"cursor,3" db:"cursor" json:"cursor,omitempty"`
  ReturnColumns map[nebula0.EdgeType][]*PropDef `thrift:"return_columns,4" db:"return_columns" json:"return_columns"`
  AllColumns bool `thrift:"all_columns,5" db:"all_columns" json:"all_columns"`
  Limit int32 `thrift:"limit,6" db:"limit" json:"limit"`
  StartTime int64 `thrift:"start_time,7" db:"start_time" json:"start_time"`
  EndTime int64 `thrift:"end_time,8" db:"end_time" json:"end_time"`
}

func NewScanEdgeRequest() *ScanEdgeRequest {
  return &ScanEdgeRequest{}
}


func (p *ScanEdgeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanEdgeRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var ScanEdgeRequest_Cursor_DEFAULT []byte

func (p *ScanEdgeRequest) GetCursor() []byte {
  return p.Cursor
}

func (p *ScanEdgeRequest) GetReturnColumns() map[nebula0.EdgeType][]*PropDef {
  return p.ReturnColumns
}

func (p *ScanEdgeRequest) GetAllColumns() bool {
  return p.AllColumns
}

func (p *ScanEdgeRequest) GetLimit() int32 {
  return p.Limit
}

func (p *ScanEdgeRequest) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScanEdgeRequest) GetEndTime() int64 {
  return p.EndTime
}
func (p *ScanEdgeRequest) IsSetCursor() bool {
  return p.Cursor != nil
}

func (p *ScanEdgeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.EdgeType][]*PropDef, size)
  p.ReturnColumns =  tMap
  for i := 0; i < size; i ++ {
var _key44 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.EdgeType(v)
    _key44 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PropDef, 0, size)
    _val45 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem46 := NewPropDef()
      if err := _elem46.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
      }
      _val45 = append(_val45, _elem46)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.ReturnColumns[_key44] = _val45
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllColumns = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScanEdgeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanEdgeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetCursor() {
    if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err) }
    if err := oprot.WriteBinary(p.Cursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_columns: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ReturnColumns {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_columns: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_columns", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:all_columns: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllColumns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all_columns (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:all_columns: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:start_time: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:end_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:end_time: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanEdgeRequest(%+v)", *p)
}

// Attributes:
//  - Result_
//  - EdgeSchema
//  - EdgeData
//  - HasNext
//  - NextCursor
type ScanEdgeResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  EdgeSchema map[nebula0.EdgeType]*nebula0.Schema `thrift:"edge_schema,2" db:"edge_schema" json:"edge_schema"`
  EdgeData []*ScanEdge `thrift:"edge_data,3" db:"edge_data" json:"edge_data"`
  HasNext bool `thrift:"has_next,4" db:"has_next" json:"has_next"`
  NextCursor []byte `thrift:"next_cursor,5" db:"next_cursor" json:"next_cursor"`
}

func NewScanEdgeResponse() *ScanEdgeResponse {
  return &ScanEdgeResponse{}
}

var ScanEdgeResponse_Result__DEFAULT *ResponseCommon
func (p *ScanEdgeResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ScanEdgeResponse_Result__DEFAULT
  }
return p.Result_
}

func (p *ScanEdgeResponse) GetEdgeSchema() map[nebula0.EdgeType]*nebula0.Schema {
  return p.EdgeSchema
}

func (p *ScanEdgeResponse) GetEdgeData() []*ScanEdge {
  return p.EdgeData
}

func (p *ScanEdgeResponse) GetHasNext() bool {
  return p.HasNext
}

func (p *ScanEdgeResponse) GetNextCursor() []byte {
  return p.NextCursor
}
func (p *ScanEdgeResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ScanEdgeResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ScanEdgeResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ScanEdgeResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.EdgeType]*nebula0.Schema, size)
  p.EdgeSchema =  tMap
  for i := 0; i < size; i ++ {
var _key47 nebula0.EdgeType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.EdgeType(v)
    _key47 = temp
}
    _val48 := nebula0.NewSchema()
    if err := _val48.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val48), err)
    }
    p.EdgeSchema[_key47] = _val48
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanEdgeResponse)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ScanEdge, 0, size)
  p.EdgeData =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := NewScanEdge()
    if err := _elem49.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.EdgeData = append(p.EdgeData, _elem49)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanEdgeResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *ScanEdgeResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NextCursor = v
}
  return nil
}

func (p *ScanEdgeResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanEdgeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanEdgeResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ScanEdgeResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_schema", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_schema: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.EdgeSchema)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.EdgeSchema {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_schema: ", p), err) }
  return err
}

func (p *ScanEdgeResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeData {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_data: ", p), err) }
  return err
}

func (p *ScanEdgeResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("has_next", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:has_next: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_next (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:has_next: ", p), err) }
  return err
}

func (p *ScanEdgeResponse) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("next_cursor", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:next_cursor: ", p), err) }
  if err := oprot.WriteBinary(p.NextCursor); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.next_cursor (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:next_cursor: ", p), err) }
  return err
}

func (p *ScanEdgeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanEdgeResponse(%+v)", *p)
}

// Attributes:
//  - Src
//  - Type
//  - Dst
//  - Value
type ScanEdge struct {
  Src nebula0.VertexID `thrift:"src,1" db:"src" json:"src"`
  Type nebula0.EdgeType `thrift:"type,2" db:"type" json:"type"`
  Dst nebula0.VertexID `thrift:"dst,3" db:"dst" json:"dst"`
  Value []byte `thrift:"value,4" db:"value" json:"value"`
}

func NewScanEdge() *ScanEdge {
  return &ScanEdge{}
}


func (p *ScanEdge) GetSrc() nebula0.VertexID {
  return p.Src
}

func (p *ScanEdge) GetType() nebula0.EdgeType {
  return p.Type
}

func (p *ScanEdge) GetDst() nebula0.VertexID {
  return p.Dst
}

func (p *ScanEdge) GetValue() []byte {
  return p.Value
}
func (p *ScanEdge) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanEdge)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Src = temp
}
  return nil
}

func (p *ScanEdge)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.Type = temp
}
  return nil
}

func (p *ScanEdge)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Dst = temp
}
  return nil
}

func (p *ScanEdge)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ScanEdge) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanEdge"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanEdge) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("src", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := oprot.WriteI64(int64(p.Src)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.src (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *ScanEdge) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ScanEdge) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dst", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dst: ", p), err) }
  if err := oprot.WriteI64(int64(p.Dst)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dst (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dst: ", p), err) }
  return err
}

func (p *ScanEdge) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *ScanEdge) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanEdge(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Cursor
//  - ReturnColumns
//  - AllColumns
//  - Limit
//  - StartTime
//  - EndTime
type ScanVertexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Cursor []byte `thrift:"cursor,3" db:"cursor" json:"cursor,omitempty"`
  ReturnColumns map[nebula0.TagID][]*PropDef `thrift:"return_columns,4" db:"return_columns" json:"return_columns"`
  AllColumns bool `thrift:"all_columns,5" db:"all_columns" json:"all_columns"`
  Limit int32 `thrift:"limit,6" db:"limit" json:"limit"`
  StartTime int64 `thrift:"start_time,7" db:"start_time" json:"start_time"`
  EndTime int64 `thrift:"end_time,8" db:"end_time" json:"end_time"`
}

func NewScanVertexRequest() *ScanVertexRequest {
  return &ScanVertexRequest{}
}


func (p *ScanVertexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanVertexRequest) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var ScanVertexRequest_Cursor_DEFAULT []byte

func (p *ScanVertexRequest) GetCursor() []byte {
  return p.Cursor
}

func (p *ScanVertexRequest) GetReturnColumns() map[nebula0.TagID][]*PropDef {
  return p.ReturnColumns
}

func (p *ScanVertexRequest) GetAllColumns() bool {
  return p.AllColumns
}

func (p *ScanVertexRequest) GetLimit() int32 {
  return p.Limit
}

func (p *ScanVertexRequest) GetStartTime() int64 {
  return p.StartTime
}

func (p *ScanVertexRequest) GetEndTime() int64 {
  return p.EndTime
}
func (p *ScanVertexRequest) IsSetCursor() bool {
  return p.Cursor != nil
}

func (p *ScanVertexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ScanVertexRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *ScanVertexRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.TagID][]*PropDef, size)
  p.ReturnColumns =  tMap
  for i := 0; i < size; i ++ {
var _key50 nebula0.TagID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.TagID(v)
    _key50 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PropDef, 0, size)
    _val51 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem52 := NewPropDef()
      if err := _elem52.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
      }
      _val51 = append(_val51, _elem52)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.ReturnColumns[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllColumns = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *ScanVertexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanVertexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetCursor() {
    if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursor: ", p), err) }
    if err := oprot.WriteBinary(p.Cursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cursor (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursor: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_columns: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ReturnColumns {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_columns: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_columns", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:all_columns: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllColumns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all_columns (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:all_columns: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:start_time: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:end_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:end_time: ", p), err) }
  return err
}

func (p *ScanVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanVertexRequest(%+v)", *p)
}

// Attributes:
//  - VertexId
//  - TagId
//  - Value
type ScanVertex struct {
  VertexId nebula0.VertexID `thrift:"vertexId,1" db:"vertexId" json:"vertexId"`
  TagId nebula0.TagID `thrift:"tagId,2" db:"tagId" json:"tagId"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewScanVertex() *ScanVertex {
  return &ScanVertex{}
}


func (p *ScanVertex) GetVertexId() nebula0.VertexID {
  return p.VertexId
}

func (p *ScanVertex) GetTagId() nebula0.TagID {
  return p.TagId
}

func (p *ScanVertex) GetValue() []byte {
  return p.Value
}
func (p *ScanVertex) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanVertex)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.VertexId = temp
}
  return nil
}

func (p *ScanVertex)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagId = temp
}
  return nil
}

func (p *ScanVertex)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ScanVertex) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanVertex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanVertex) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertexId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vertexId: ", p), err) }
  if err := oprot.WriteI64(int64(p.VertexId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vertexId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vertexId: ", p), err) }
  return err
}

func (p *ScanVertex) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tagId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tagId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tagId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tagId: ", p), err) }
  return err
}

func (p *ScanVertex) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *ScanVertex) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanVertex(%+v)", *p)
}

// Attributes:
//  - Result_
//  - VertexSchema
//  - VertexData
//  - HasNext
//  - NextCursor
type ScanVertexResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  VertexSchema map[nebula0.TagID]*nebula0.Schema `thrift:"vertex_schema,2" db:"vertex_schema" json:"vertex_schema"`
  VertexData []*ScanVertex `thrift:"vertex_data,3" db:"vertex_data" json:"vertex_data"`
  HasNext bool `thrift:"has_next,4" db:"has_next" json:"has_next"`
  NextCursor []byte `thrift:"next_cursor,5" db:"next_cursor" json:"next_cursor"`
}

func NewScanVertexResponse() *ScanVertexResponse {
  return &ScanVertexResponse{}
}

var ScanVertexResponse_Result__DEFAULT *ResponseCommon
func (p *ScanVertexResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ScanVertexResponse_Result__DEFAULT
  }
return p.Result_
}

func (p *ScanVertexResponse) GetVertexSchema() map[nebula0.TagID]*nebula0.Schema {
  return p.VertexSchema
}

func (p *ScanVertexResponse) GetVertexData() []*ScanVertex {
  return p.VertexData
}

func (p *ScanVertexResponse) GetHasNext() bool {
  return p.HasNext
}

func (p *ScanVertexResponse) GetNextCursor() []byte {
  return p.NextCursor
}
func (p *ScanVertexResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ScanVertexResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ScanVertexResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ScanVertexResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.TagID]*nebula0.Schema, size)
  p.VertexSchema =  tMap
  for i := 0; i < size; i ++ {
var _key53 nebula0.TagID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.TagID(v)
    _key53 = temp
}
    _val54 := nebula0.NewSchema()
    if err := _val54.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val54), err)
    }
    p.VertexSchema[_key53] = _val54
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanVertexResponse)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ScanVertex, 0, size)
  p.VertexData =  tSlice
  for i := 0; i < size; i ++ {
    _elem55 := NewScanVertex()
    if err := _elem55.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem55), err)
    }
    p.VertexData = append(p.VertexData, _elem55)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanVertexResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *ScanVertexResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NextCursor = v
}
  return nil
}

func (p *ScanVertexResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanVertexResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanVertexResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ScanVertexResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_schema", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertex_schema: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.VertexSchema)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.VertexSchema {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertex_schema: ", p), err) }
  return err
}

func (p *ScanVertexResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vertex_data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertex_data: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VertexData)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VertexData {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertex_data: ", p), err) }
  return err
}

func (p *ScanVertexResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("has_next", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:has_next: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_next (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:has_next: ", p), err) }
  return err
}

func (p *ScanVertexResponse) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("next_cursor", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:next_cursor: ", p), err) }
  if err := oprot.WriteBinary(p.NextCursor); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.next_cursor (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:next_cursor: ", p), err) }
  return err
}

func (p *ScanVertexResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanVertexResponse(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type PutRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewPutRequest() *PutRequest {
  return &PutRequest{}
}


func (p *PutRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *PutRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Pair {
  return p.Parts
}
func (p *PutRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *PutRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Pair, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key56 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key56 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Pair, 0, size)
    _val57 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem58 := nebula0.NewPair()
      if err := _elem58.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
      }
      _val57 = append(_val57, _elem58)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key56] = _val57
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PutRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PutRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *PutRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *PutRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type RemoveRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]string `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewRemoveRequest() *RemoveRequest {
  return &RemoveRequest{}
}


func (p *RemoveRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemoveRequest) GetParts() map[nebula0.PartitionID][]string {
  return p.Parts
}
func (p *RemoveRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemoveRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]string, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key59 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key59 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _val60 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem61 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem61 = v
}
      _val60 = append(_val60, _elem61)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key59] = _val60
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RemoveRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemoveRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *RemoveRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type RemoveRangeRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewRemoveRangeRequest() *RemoveRangeRequest {
  return &RemoveRangeRequest{}
}


func (p *RemoveRangeRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemoveRangeRequest) GetParts() map[nebula0.PartitionID][]*nebula0.Pair {
  return p.Parts
}
func (p *RemoveRangeRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveRangeRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemoveRangeRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.Pair, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key62 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key62 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.Pair, 0, size)
    _val63 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem64 := nebula0.NewPair()
      if err := _elem64.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem64), err)
      }
      _val63 = append(_val63, _elem64)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key62] = _val63
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RemoveRangeRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveRangeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveRangeRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemoveRangeRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *RemoveRangeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveRangeRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnPartly
type GetRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID][]string `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnPartly bool `thrift:"return_partly,3" db:"return_partly" json:"return_partly"`
}

func NewGetRequest() *GetRequest {
  return &GetRequest{}
}


func (p *GetRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetRequest) GetParts() map[nebula0.PartitionID][]string {
  return p.Parts
}

func (p *GetRequest) GetReturnPartly() bool {
  return p.ReturnPartly
}
func (p *GetRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]string, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key65 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key65 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _val66 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem67 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem67 = v
}
      _val66 = append(_val66, _elem67)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReturnPartly = v
}
  return nil
}

func (p *GetRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_partly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_partly: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReturnPartly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_partly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_partly: ", p), err) }
  return err
}

func (p *GetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type PrefixRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID]string `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewPrefixRequest() *PrefixRequest {
  return &PrefixRequest{}
}


func (p *PrefixRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *PrefixRequest) GetParts() map[nebula0.PartitionID]string {
  return p.Parts
}
func (p *PrefixRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrefixRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *PrefixRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]string, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key68 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key68 = temp
}
var _val69 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val69 = v
}
    p.Parts[_key68] = _val69
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrefixRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PrefixRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrefixRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *PrefixRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *PrefixRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrefixRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
type ScanRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula0.PartitionID]*nebula0.Pair `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewScanRequest() *ScanRequest {
  return &ScanRequest{}
}


func (p *ScanRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanRequest) GetParts() map[nebula0.PartitionID]*nebula0.Pair {
  return p.Parts
}
func (p *ScanRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ScanRequest)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]*nebula0.Pair, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key70 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key70 = temp
}
    _val71 := nebula0.NewPair()
    if err := _val71.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val71), err)
    }
    p.Parts[_key70] = _val71
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ScanRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanRequest(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Values
type GeneralResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Values map[string]string `thrift:"values,2" db:"values" json:"values"`
}

func NewGeneralResponse() *GeneralResponse {
  return &GeneralResponse{}
}

var GeneralResponse_Result__DEFAULT *ResponseCommon
func (p *GeneralResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GeneralResponse_Result__DEFAULT
  }
return p.Result_
}

func (p *GeneralResponse) GetValues() map[string]string {
  return p.Values
}
func (p *GeneralResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GeneralResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GeneralResponse)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GeneralResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Values =  tMap
  for i := 0; i < size; i ++ {
var _key72 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key72 = v
}
var _val73 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val73 = v
}
    p.Values[_key72] = _val73
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GeneralResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GeneralResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeneralResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GeneralResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Values {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *GeneralResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeneralResponse(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartID
//  - Name
type GetUUIDReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula0.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Name string `thrift:"name,3" db:"name" json:"name"`
}

func NewGetUUIDReq() *GetUUIDReq {
  return &GetUUIDReq{}
}


func (p *GetUUIDReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetUUIDReq) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *GetUUIDReq) GetName() string {
  return p.Name
}
func (p *GetUUIDReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUUIDReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetUUIDReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *GetUUIDReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *GetUUIDReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUUIDReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *GetUUIDReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUUIDReq(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Id
type GetUUIDResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Id nebula0.VertexID `thrift:"id,2" db:"id" json:"id"`
}

func NewGetUUIDResp() *GetUUIDResp {
  return &GetUUIDResp{}
}

var GetUUIDResp_Result__DEFAULT *ResponseCommon
func (p *GetUUIDResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetUUIDResp_Result__DEFAULT
  }
return p.Result_
}

func (p *GetUUIDResp) GetId() nebula0.VertexID {
  return p.Id
}
func (p *GetUUIDResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetUUIDResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetUUIDResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetUUIDResp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.VertexID(v)
  p.Id = temp
}
  return nil
}

func (p *GetUUIDResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUUIDResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetUUIDResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *GetUUIDResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUUIDResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Sign
type BlockingSignRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Sign EngineSignType `thrift:"sign,2,required" db:"sign" json:"sign"`
}

func NewBlockingSignRequest() *BlockingSignRequest {
  return &BlockingSignRequest{}
}


func (p *BlockingSignRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *BlockingSignRequest) GetSign() EngineSignType {
  return p.Sign
}
func (p *BlockingSignRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSign bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetSign = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSign{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sign is not set"));
  }
  return nil
}

func (p *BlockingSignRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *BlockingSignRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EngineSignType(v)
  p.Sign = temp
}
  return nil
}

func (p *BlockingSignRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BlockingSignRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlockingSignRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *BlockingSignRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sign", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sign: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sign: ", p), err) }
  return err
}

func (p *BlockingSignRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlockingSignRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Name
type CreateCPRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewCreateCPRequest() *CreateCPRequest {
  return &CreateCPRequest{}
}


func (p *CreateCPRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateCPRequest) GetName() string {
  return p.Name
}
func (p *CreateCPRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateCPRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateCPRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateCPRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateCPRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateCPRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CreateCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateCPRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Name
type DropCPRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewDropCPRequest() *DropCPRequest {
  return &DropCPRequest{}
}


func (p *DropCPRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropCPRequest) GetName() string {
  return p.Name
}
func (p *DropCPRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropCPRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropCPRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *DropCPRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropCPRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropCPRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *DropCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropCPRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - IndexID
//  - IsOffline
type RebuildIndexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2" db:"parts" json:"parts"`
  IndexID nebula0.IndexID `thrift:"index_id,3" db:"index_id" json:"index_id"`
  IsOffline bool `thrift:"is_offline,4" db:"is_offline" json:"is_offline"`
}

func NewRebuildIndexRequest() *RebuildIndexRequest {
  return &RebuildIndexRequest{}
}


func (p *RebuildIndexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}

func (p *RebuildIndexRequest) GetIndexID() nebula0.IndexID {
  return p.IndexID
}

func (p *RebuildIndexRequest) GetIsOffline() bool {
  return p.IsOffline
}
func (p *RebuildIndexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RebuildIndexRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem74 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _elem74 = temp
}
    p.Parts = append(p.Parts, _elem74)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *RebuildIndexRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsOffline = v
}
  return nil
}

func (p *RebuildIndexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RebuildIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_offline", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_offline: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsOffline)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_offline (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_offline: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RebuildIndexRequest(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Parts
//  - IndexID
//  - Filter
//  - ReturnColumns
//  - IsEdge
type LookUpIndexRequest struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula0.PartitionID `thrift:"parts,2" db:"parts" json:"parts"`
  IndexID nebula0.IndexID `thrift:"index_id,3" db:"index_id" json:"index_id"`
  Filter []byte `thrift:"filter,4" db:"filter" json:"filter"`
  ReturnColumns []string `thrift:"return_columns,5" db:"return_columns" json:"return_columns"`
  IsEdge bool `thrift:"is_edge,6" db:"is_edge" json:"is_edge"`
}

func NewLookUpIndexRequest() *LookUpIndexRequest {
  return &LookUpIndexRequest{}
}


func (p *LookUpIndexRequest) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *LookUpIndexRequest) GetParts() []nebula0.PartitionID {
  return p.Parts
}

func (p *LookUpIndexRequest) GetIndexID() nebula0.IndexID {
  return p.IndexID
}

func (p *LookUpIndexRequest) GetFilter() []byte {
  return p.Filter
}

func (p *LookUpIndexRequest) GetReturnColumns() []string {
  return p.ReturnColumns
}

func (p *LookUpIndexRequest) GetIsEdge() bool {
  return p.IsEdge
}
func (p *LookUpIndexRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LookUpIndexRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *LookUpIndexRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem75 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _elem75 = temp
}
    p.Parts = append(p.Parts, _elem75)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookUpIndexRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *LookUpIndexRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *LookUpIndexRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem76 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem76 = v
}
    p.ReturnColumns = append(p.ReturnColumns, _elem76)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookUpIndexRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsEdge = v
}
  return nil
}

func (p *LookUpIndexRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LookUpIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookUpIndexRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_id: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("filter", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err) }
  if err := oprot.WriteBinary(p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_columns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:return_columns: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_edge", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:is_edge: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsEdge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_edge (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:is_edge: ", p), err) }
  return err
}

func (p *LookUpIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LookUpIndexRequest(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Schema
//  - Vertices
//  - Edges
type LookUpIndexResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Schema *nebula0.Schema `thrift:"schema,2" db:"schema" json:"schema,omitempty"`
  Vertices []*VertexIndexData `thrift:"vertices,3" db:"vertices" json:"vertices,omitempty"`
  Edges []*Edge `thrift:"edges,4" db:"edges" json:"edges,omitempty"`
}

func NewLookUpIndexResp() *LookUpIndexResp {
  return &LookUpIndexResp{}
}

var LookUpIndexResp_Result__DEFAULT *ResponseCommon
func (p *LookUpIndexResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return LookUpIndexResp_Result__DEFAULT
  }
return p.Result_
}
var LookUpIndexResp_Schema_DEFAULT *nebula0.Schema
func (p *LookUpIndexResp) GetSchema() *nebula0.Schema {
  if !p.IsSetSchema() {
    return LookUpIndexResp_Schema_DEFAULT
  }
return p.Schema
}
var LookUpIndexResp_Vertices_DEFAULT []*VertexIndexData

func (p *LookUpIndexResp) GetVertices() []*VertexIndexData {
  return p.Vertices
}
var LookUpIndexResp_Edges_DEFAULT []*Edge

func (p *LookUpIndexResp) GetEdges() []*Edge {
  return p.Edges
}
func (p *LookUpIndexResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *LookUpIndexResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *LookUpIndexResp) IsSetVertices() bool {
  return p.Vertices != nil
}

func (p *LookUpIndexResp) IsSetEdges() bool {
  return p.Edges != nil
}

func (p *LookUpIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResult_ = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *LookUpIndexResp)  ReadField1(iprot thrift.Protocol) error {
  p.Result_ = NewResponseCommon()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *LookUpIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = nebula0.NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *LookUpIndexResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexIndexData, 0, size)
  p.Vertices =  tSlice
  for i := 0; i < size; i ++ {
    _elem77 := NewVertexIndexData()
    if err := _elem77.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem77), err)
    }
    p.Vertices = append(p.Vertices, _elem77)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookUpIndexResp)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Edge, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem78 := NewEdge()
    if err := _elem78.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem78), err)
    }
    p.Edges = append(p.Edges, _elem78)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookUpIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LookUpIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookUpIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *LookUpIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetSchema() {
    if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
    if err := p.Schema.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  }
  return err
}

func (p *LookUpIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetVertices() {
    if err := oprot.WriteFieldBegin("vertices", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertices: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Vertices)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Vertices {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertices: ", p), err) }
  }
  return err
}

func (p *LookUpIndexResp) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEdges() {
    if err := oprot.WriteFieldBegin("edges", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:edges: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Edges {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:edges: ", p), err) }
  }
  return err
}

func (p *LookUpIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LookUpIndexResp(%+v)", *p)
}

