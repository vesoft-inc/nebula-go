// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package storage

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/vesoft-inc/nebula-go/v3/nebula"
	"github.com/vesoft-inc/nebula-go/v3/nebula/meta"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = nebula.GoUnusedProtection__
var _ = meta.GoUnusedProtection__
type StatType int64
const (
  StatType_SUM StatType = 1
  StatType_COUNT StatType = 2
  StatType_AVG StatType = 3
  StatType_MAX StatType = 4
  StatType_MIN StatType = 5
)

func (p StatType) String() string {
  switch p {
  case StatType_SUM: return "SUM"
  case StatType_COUNT: return "COUNT"
  case StatType_AVG: return "AVG"
  case StatType_MAX: return "MAX"
  case StatType_MIN: return "MIN"
  }
  return "<UNSET>"
}

func StatTypeFromString(s string) (StatType, error) {
  switch s {
  case "SUM": return StatType_SUM, nil 
  case "COUNT": return StatType_COUNT, nil 
  case "AVG": return StatType_AVG, nil 
  case "MAX": return StatType_MAX, nil 
  case "MIN": return StatType_MIN, nil 
  }
  return StatType(0), fmt.Errorf("not a valid StatType string")
}


func StatTypePtr(v StatType) *StatType { return &v }

func (p StatType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatType) UnmarshalText(text []byte) error {
q, err := StatTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatType(v)
return nil
}

func (p * StatType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OrderDirection int64
const (
  OrderDirection_ASCENDING OrderDirection = 1
  OrderDirection_DESCENDING OrderDirection = 2
)

func (p OrderDirection) String() string {
  switch p {
  case OrderDirection_ASCENDING: return "ASCENDING"
  case OrderDirection_DESCENDING: return "DESCENDING"
  }
  return "<UNSET>"
}

func OrderDirectionFromString(s string) (OrderDirection, error) {
  switch s {
  case "ASCENDING": return OrderDirection_ASCENDING, nil 
  case "DESCENDING": return OrderDirection_DESCENDING, nil 
  }
  return OrderDirection(0), fmt.Errorf("not a valid OrderDirection string")
}


func OrderDirectionPtr(v OrderDirection) *OrderDirection { return &v }

func (p OrderDirection) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OrderDirection) UnmarshalText(text []byte) error {
q, err := OrderDirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OrderDirection) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OrderDirection(v)
return nil
}

func (p * OrderDirection) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EdgeDirection int64
const (
  EdgeDirection_BOTH EdgeDirection = 1
  EdgeDirection_IN_EDGE EdgeDirection = 2
  EdgeDirection_OUT_EDGE EdgeDirection = 3
)

func (p EdgeDirection) String() string {
  switch p {
  case EdgeDirection_BOTH: return "BOTH"
  case EdgeDirection_IN_EDGE: return "IN_EDGE"
  case EdgeDirection_OUT_EDGE: return "OUT_EDGE"
  }
  return "<UNSET>"
}

func EdgeDirectionFromString(s string) (EdgeDirection, error) {
  switch s {
  case "BOTH": return EdgeDirection_BOTH, nil 
  case "IN_EDGE": return EdgeDirection_IN_EDGE, nil 
  case "OUT_EDGE": return EdgeDirection_OUT_EDGE, nil 
  }
  return EdgeDirection(0), fmt.Errorf("not a valid EdgeDirection string")
}


func EdgeDirectionPtr(v EdgeDirection) *EdgeDirection { return &v }

func (p EdgeDirection) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EdgeDirection) UnmarshalText(text []byte) error {
q, err := EdgeDirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EdgeDirection) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EdgeDirection(v)
return nil
}

func (p * EdgeDirection) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ScanType int64
const (
  ScanType_PREFIX ScanType = 1
  ScanType_RANGE ScanType = 2
)

func (p ScanType) String() string {
  switch p {
  case ScanType_PREFIX: return "PREFIX"
  case ScanType_RANGE: return "RANGE"
  }
  return "<UNSET>"
}

func ScanTypeFromString(s string) (ScanType, error) {
  switch s {
  case "PREFIX": return ScanType_PREFIX, nil 
  case "RANGE": return ScanType_RANGE, nil 
  }
  return ScanType(0), fmt.Errorf("not a valid ScanType string")
}


func ScanTypePtr(v ScanType) *ScanType { return &v }

func (p ScanType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ScanType) UnmarshalText(text []byte) error {
q, err := ScanTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ScanType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ScanType(v)
return nil
}

func (p * ScanType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EngineSignType int64
const (
  EngineSignType_BLOCK_ON EngineSignType = 1
  EngineSignType_BLOCK_OFF EngineSignType = 2
)

func (p EngineSignType) String() string {
  switch p {
  case EngineSignType_BLOCK_ON: return "BLOCK_ON"
  case EngineSignType_BLOCK_OFF: return "BLOCK_OFF"
  }
  return "<UNSET>"
}

func EngineSignTypeFromString(s string) (EngineSignType, error) {
  switch s {
  case "BLOCK_ON": return EngineSignType_BLOCK_ON, nil 
  case "BLOCK_OFF": return EngineSignType_BLOCK_OFF, nil 
  }
  return EngineSignType(0), fmt.Errorf("not a valid EngineSignType string")
}


func EngineSignTypePtr(v EngineSignType) *EngineSignType { return &v }

func (p EngineSignType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EngineSignType) UnmarshalText(text []byte) error {
q, err := EngineSignTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EngineSignType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EngineSignType(v)
return nil
}

func (p * EngineSignType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - SessionID
//  - PlanID
//  - ProfileDetail
type RequestCommon struct {
  SessionID *nebula.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id,omitempty"`
  PlanID *nebula.ExecutionPlanID `thrift:"plan_id,2" db:"plan_id" json:"plan_id,omitempty"`
  ProfileDetail *bool `thrift:"profile_detail,3" db:"profile_detail" json:"profile_detail,omitempty"`
}

func NewRequestCommon() *RequestCommon {
  return &RequestCommon{}
}

var RequestCommon_SessionID_DEFAULT nebula.SessionID
func (p *RequestCommon) GetSessionID() nebula.SessionID {
  if !p.IsSetSessionID() {
    return RequestCommon_SessionID_DEFAULT
  }
return *p.SessionID
}
var RequestCommon_PlanID_DEFAULT nebula.ExecutionPlanID
func (p *RequestCommon) GetPlanID() nebula.ExecutionPlanID {
  if !p.IsSetPlanID() {
    return RequestCommon_PlanID_DEFAULT
  }
return *p.PlanID
}
var RequestCommon_ProfileDetail_DEFAULT bool
func (p *RequestCommon) GetProfileDetail() bool {
  if !p.IsSetProfileDetail() {
    return RequestCommon_ProfileDetail_DEFAULT
  }
return *p.ProfileDetail
}
func (p *RequestCommon) IsSetSessionID() bool {
  return p.SessionID != nil
}

func (p *RequestCommon) IsSetPlanID() bool {
  return p.PlanID != nil
}

func (p *RequestCommon) IsSetProfileDetail() bool {
  return p.ProfileDetail != nil
}

func (p *RequestCommon) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestCommon)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.SessionID(v)
  p.SessionID = &temp
}
  return nil
}

func (p *RequestCommon)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.ExecutionPlanID(v)
  p.PlanID = &temp
}
  return nil
}

func (p *RequestCommon)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProfileDetail = &v
}
  return nil
}

func (p *RequestCommon) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestCommon"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestCommon) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin(ctx, "session_id", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  }
  return err
}

func (p *RequestCommon) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPlanID() {
    if err := oprot.WriteFieldBegin(ctx, "plan_id", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plan_id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PlanID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.plan_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plan_id: ", p), err) }
  }
  return err
}

func (p *RequestCommon) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProfileDetail() {
    if err := oprot.WriteFieldBegin(ctx, "profile_detail", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profile_detail: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.ProfileDetail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.profile_detail (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profile_detail: ", p), err) }
  }
  return err
}

func (p *RequestCommon) Equals(other *RequestCommon) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SessionID != other.SessionID {
    if p.SessionID == nil || other.SessionID == nil {
      return false
    }
    if (*p.SessionID) != (*other.SessionID) { return false }
  }
  if p.PlanID != other.PlanID {
    if p.PlanID == nil || other.PlanID == nil {
      return false
    }
    if (*p.PlanID) != (*other.PlanID) { return false }
  }
  if p.ProfileDetail != other.ProfileDetail {
    if p.ProfileDetail == nil || other.ProfileDetail == nil {
      return false
    }
    if (*p.ProfileDetail) != (*other.ProfileDetail) { return false }
  }
  return true
}

func (p *RequestCommon) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestCommon(%+v)", *p)
}

func (p *RequestCommon) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - PartID
//  - Leader
type PartitionResult_ struct {
  Code nebula.ErrorCode `thrift:"code,1,required" db:"code" json:"code"`
  PartID nebula.PartitionID `thrift:"part_id,2,required" db:"part_id" json:"part_id"`
  Leader *nebula.HostAddr `thrift:"leader,3" db:"leader" json:"leader,omitempty"`
}

func NewPartitionResult_() *PartitionResult_ {
  return &PartitionResult_{}
}


func (p *PartitionResult_) GetCode() nebula.ErrorCode {
  return p.Code
}

func (p *PartitionResult_) GetPartID() nebula.PartitionID {
  return p.PartID
}
var PartitionResult__Leader_DEFAULT *nebula.HostAddr
func (p *PartitionResult_) GetLeader() *nebula.HostAddr {
  if !p.IsSetLeader() {
    return PartitionResult__Leader_DEFAULT
  }
return p.Leader
}
func (p *PartitionResult_) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *PartitionResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetPartID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetPartID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetPartID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  return nil
}

func (p *PartitionResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *PartitionResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *PartitionResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Leader = &nebula.HostAddr{}
  if err := p.Leader.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *PartitionResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PartitionResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *PartitionResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *PartitionResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin(ctx, "leader", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
    if err := p.Leader.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  }
  return err
}

func (p *PartitionResult_) Equals(other *PartitionResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.PartID != other.PartID { return false }
  if !p.Leader.Equals(other.Leader) { return false }
  return true
}

func (p *PartitionResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionResult_(%+v)", *p)
}

func (p *PartitionResult_) Validate() error {
  return nil
}
// Attributes:
//  - FailedParts
//  - LatencyInUs
//  - LatencyDetailUs
type ResponseCommon struct {
  FailedParts []*PartitionResult_ `thrift:"failed_parts,1,required" db:"failed_parts" json:"failed_parts"`
  LatencyInUs int64 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  LatencyDetailUs map[string]int32 `thrift:"latency_detail_us,3" db:"latency_detail_us" json:"latency_detail_us,omitempty"`
}

func NewResponseCommon() *ResponseCommon {
  return &ResponseCommon{}
}


func (p *ResponseCommon) GetFailedParts() []*PartitionResult_ {
  return p.FailedParts
}

func (p *ResponseCommon) GetLatencyInUs() int64 {
  return p.LatencyInUs
}
var ResponseCommon_LatencyDetailUs_DEFAULT map[string]int32

func (p *ResponseCommon) GetLatencyDetailUs() map[string]int32 {
  return p.LatencyDetailUs
}
func (p *ResponseCommon) IsSetLatencyDetailUs() bool {
  return p.LatencyDetailUs != nil
}

func (p *ResponseCommon) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFailedParts bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFailedParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLatencyInUs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFailedParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FailedParts is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ResponseCommon)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartitionResult_, 0, size)
  p.FailedParts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &PartitionResult_{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.FailedParts = append(p.FailedParts, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ResponseCommon)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LatencyInUs = v
}
  return nil
}

func (p *ResponseCommon)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.LatencyDetailUs =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.LatencyDetailUs[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ResponseCommon) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResponseCommon"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResponseCommon) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "failed_parts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failed_parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FailedParts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FailedParts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failed_parts: ", p), err) }
  return err
}

func (p *ResponseCommon) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latency_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ResponseCommon) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLatencyDetailUs() {
    if err := oprot.WriteFieldBegin(ctx, "latency_detail_us", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latency_detail_us: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I32, len(p.LatencyDetailUs)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.LatencyDetailUs {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latency_detail_us: ", p), err) }
  }
  return err
}

func (p *ResponseCommon) Equals(other *ResponseCommon) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.FailedParts) != len(other.FailedParts) { return false }
  for i, _tgt := range p.FailedParts {
    _src3 := other.FailedParts[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if p.LatencyInUs != other.LatencyInUs { return false }
  if len(p.LatencyDetailUs) != len(other.LatencyDetailUs) { return false }
  for k, _tgt := range p.LatencyDetailUs {
    _src4 := other.LatencyDetailUs[k]
    if _tgt != _src4 { return false }
  }
  return true
}

func (p *ResponseCommon) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResponseCommon(%+v)", *p)
}

func (p *ResponseCommon) Validate() error {
  return nil
}
// Attributes:
//  - Alias
//  - Prop
//  - Stat
type StatProp struct {
  Alias []byte `thrift:"alias,1" db:"alias" json:"alias"`
  Prop []byte `thrift:"prop,2" db:"prop" json:"prop"`
  Stat StatType `thrift:"stat,3" db:"stat" json:"stat"`
}

func NewStatProp() *StatProp {
  return &StatProp{}
}


func (p *StatProp) GetAlias() []byte {
  return p.Alias
}

func (p *StatProp) GetProp() []byte {
  return p.Prop
}

func (p *StatProp) GetStat() StatType {
  return p.Stat
}
func (p *StatProp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatProp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Alias = v
}
  return nil
}

func (p *StatProp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Prop = v
}
  return nil
}

func (p *StatProp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := StatType(v)
  p.Stat = temp
}
  return nil
}

func (p *StatProp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StatProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatProp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "alias", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alias: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Alias); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alias (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alias: ", p), err) }
  return err
}

func (p *StatProp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prop", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prop: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Prop); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prop (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prop: ", p), err) }
  return err
}

func (p *StatProp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stat", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stat: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Stat)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stat (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stat: ", p), err) }
  return err
}

func (p *StatProp) Equals(other *StatProp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Alias, other.Alias) != 0 { return false }
  if bytes.Compare(p.Prop, other.Prop) != 0 { return false }
  if p.Stat != other.Stat { return false }
  return true
}

func (p *StatProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatProp(%+v)", *p)
}

func (p *StatProp) Validate() error {
  return nil
}
// Attributes:
//  - Alias
//  - Expr
type Expr struct {
  Alias []byte `thrift:"alias,1" db:"alias" json:"alias"`
  Expr []byte `thrift:"expr,2" db:"expr" json:"expr"`
}

func NewExpr() *Expr {
  return &Expr{}
}


func (p *Expr) GetAlias() []byte {
  return p.Alias
}

func (p *Expr) GetExpr() []byte {
  return p.Expr
}
func (p *Expr) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Expr)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Alias = v
}
  return nil
}

func (p *Expr)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Expr = v
}
  return nil
}

func (p *Expr) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Expr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Expr) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "alias", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alias: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Alias); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alias (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alias: ", p), err) }
  return err
}

func (p *Expr) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:expr: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Expr); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:expr: ", p), err) }
  return err
}

func (p *Expr) Equals(other *Expr) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Alias, other.Alias) != 0 { return false }
  if bytes.Compare(p.Expr, other.Expr) != 0 { return false }
  return true
}

func (p *Expr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Expr(%+v)", *p)
}

func (p *Expr) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - Props
type EdgeProp struct {
  Type nebula.EdgeType `thrift:"type,1" db:"type" json:"type"`
  Props [][]byte `thrift:"props,2" db:"props" json:"props"`
}

func NewEdgeProp() *EdgeProp {
  return &EdgeProp{}
}


func (p *EdgeProp) GetType() nebula.EdgeType {
  return p.Type
}

func (p *EdgeProp) GetProps() [][]byte {
  return p.Props
}
func (p *EdgeProp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeProp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.EdgeType(v)
  p.Type = temp
}
  return nil
}

func (p *EdgeProp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Props = append(p.Props, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EdgeProp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EdgeProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeProp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *EdgeProp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *EdgeProp) Equals(other *EdgeProp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if len(p.Props) != len(other.Props) { return false }
  for i, _tgt := range p.Props {
    _src6 := other.Props[i]
    if bytes.Compare(_tgt, _src6) != 0 { return false }
  }
  return true
}

func (p *EdgeProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeProp(%+v)", *p)
}

func (p *EdgeProp) Validate() error {
  return nil
}
// Attributes:
//  - Tag
//  - Props
type VertexProp struct {
  Tag nebula.TagID `thrift:"tag,1" db:"tag" json:"tag"`
  Props [][]byte `thrift:"props,2" db:"props" json:"props"`
}

func NewVertexProp() *VertexProp {
  return &VertexProp{}
}


func (p *VertexProp) GetTag() nebula.TagID {
  return p.Tag
}

func (p *VertexProp) GetProps() [][]byte {
  return p.Props
}
func (p *VertexProp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VertexProp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.TagID(v)
  p.Tag = temp
}
  return nil
}

func (p *VertexProp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.Props = append(p.Props, _elem7)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VertexProp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VertexProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VertexProp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err) }
  return err
}

func (p *VertexProp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *VertexProp) Equals(other *VertexProp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Tag != other.Tag { return false }
  if len(p.Props) != len(other.Props) { return false }
  for i, _tgt := range p.Props {
    _src8 := other.Props[i]
    if bytes.Compare(_tgt, _src8) != 0 { return false }
  }
  return true
}

func (p *VertexProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VertexProp(%+v)", *p)
}

func (p *VertexProp) Validate() error {
  return nil
}
// Attributes:
//  - Prop
//  - Direction
type OrderBy struct {
  Prop []byte `thrift:"prop,1" db:"prop" json:"prop"`
  Direction OrderDirection `thrift:"direction,2" db:"direction" json:"direction"`
}

func NewOrderBy() *OrderBy {
  return &OrderBy{}
}


func (p *OrderBy) GetProp() []byte {
  return p.Prop
}

func (p *OrderBy) GetDirection() OrderDirection {
  return p.Direction
}
func (p *OrderBy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OrderBy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Prop = v
}
  return nil
}

func (p *OrderBy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := OrderDirection(v)
  p.Direction = temp
}
  return nil
}

func (p *OrderBy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OrderBy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OrderBy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prop", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prop: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Prop); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prop (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prop: ", p), err) }
  return err
}

func (p *OrderBy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "direction", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:direction: ", p), err) }
  return err
}

func (p *OrderBy) Equals(other *OrderBy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Prop, other.Prop) != 0 { return false }
  if p.Direction != other.Direction { return false }
  return true
}

func (p *OrderBy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OrderBy(%+v)", *p)
}

func (p *OrderBy) Validate() error {
  return nil
}
// Attributes:
//  - EdgeTypes
//  - EdgeDirection
//  - Dedup
//  - StatProps
//  - VertexProps
//  - EdgeProps
//  - Expressions
//  - OrderBy
//  - Random
//  - Limit
//  - Filter
//  - TagFilter
type TraverseSpec struct {
  EdgeTypes []nebula.EdgeType `thrift:"edge_types,1" db:"edge_types" json:"edge_types"`
  EdgeDirection EdgeDirection `thrift:"edge_direction,2" db:"edge_direction" json:"edge_direction"`
  Dedup bool `thrift:"dedup,3" db:"dedup" json:"dedup"`
  StatProps []*StatProp `thrift:"stat_props,4" db:"stat_props" json:"stat_props,omitempty"`
  VertexProps []*VertexProp `thrift:"vertex_props,5" db:"vertex_props" json:"vertex_props,omitempty"`
  EdgeProps []*EdgeProp `thrift:"edge_props,6" db:"edge_props" json:"edge_props,omitempty"`
  Expressions []*Expr `thrift:"expressions,7" db:"expressions" json:"expressions,omitempty"`
  OrderBy []*OrderBy `thrift:"order_by,8" db:"order_by" json:"order_by,omitempty"`
  Random *bool `thrift:"random,9" db:"random" json:"random,omitempty"`
  Limit *int64 `thrift:"limit,10" db:"limit" json:"limit,omitempty"`
  Filter []byte `thrift:"filter,11" db:"filter" json:"filter,omitempty"`
  TagFilter []byte `thrift:"tag_filter,12" db:"tag_filter" json:"tag_filter,omitempty"`
}

func NewTraverseSpec() *TraverseSpec {
  return &TraverseSpec{
EdgeDirection: 1,
}
}


func (p *TraverseSpec) GetEdgeTypes() []nebula.EdgeType {
  return p.EdgeTypes
}

func (p *TraverseSpec) GetEdgeDirection() EdgeDirection {
  return p.EdgeDirection
}

func (p *TraverseSpec) GetDedup() bool {
  return p.Dedup
}
var TraverseSpec_StatProps_DEFAULT []*StatProp

func (p *TraverseSpec) GetStatProps() []*StatProp {
  return p.StatProps
}
var TraverseSpec_VertexProps_DEFAULT []*VertexProp

func (p *TraverseSpec) GetVertexProps() []*VertexProp {
  return p.VertexProps
}
var TraverseSpec_EdgeProps_DEFAULT []*EdgeProp

func (p *TraverseSpec) GetEdgeProps() []*EdgeProp {
  return p.EdgeProps
}
var TraverseSpec_Expressions_DEFAULT []*Expr

func (p *TraverseSpec) GetExpressions() []*Expr {
  return p.Expressions
}
var TraverseSpec_OrderBy_DEFAULT []*OrderBy

func (p *TraverseSpec) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var TraverseSpec_Random_DEFAULT bool
func (p *TraverseSpec) GetRandom() bool {
  if !p.IsSetRandom() {
    return TraverseSpec_Random_DEFAULT
  }
return *p.Random
}
var TraverseSpec_Limit_DEFAULT int64
func (p *TraverseSpec) GetLimit() int64 {
  if !p.IsSetLimit() {
    return TraverseSpec_Limit_DEFAULT
  }
return *p.Limit
}
var TraverseSpec_Filter_DEFAULT []byte

func (p *TraverseSpec) GetFilter() []byte {
  return p.Filter
}
var TraverseSpec_TagFilter_DEFAULT []byte

func (p *TraverseSpec) GetTagFilter() []byte {
  return p.TagFilter
}
func (p *TraverseSpec) IsSetStatProps() bool {
  return p.StatProps != nil
}

func (p *TraverseSpec) IsSetVertexProps() bool {
  return p.VertexProps != nil
}

func (p *TraverseSpec) IsSetEdgeProps() bool {
  return p.EdgeProps != nil
}

func (p *TraverseSpec) IsSetExpressions() bool {
  return p.Expressions != nil
}

func (p *TraverseSpec) IsSetOrderBy() bool {
  return p.OrderBy != nil
}

func (p *TraverseSpec) IsSetRandom() bool {
  return p.Random != nil
}

func (p *TraverseSpec) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *TraverseSpec) IsSetFilter() bool {
  return p.Filter != nil
}

func (p *TraverseSpec) IsSetTagFilter() bool {
  return p.TagFilter != nil
}

func (p *TraverseSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.EdgeType, 0, size)
  p.EdgeTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 nebula.EdgeType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.EdgeType(v)
    _elem9 = temp
}
    p.EdgeTypes = append(p.EdgeTypes, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EdgeDirection(v)
  p.EdgeDirection = temp
}
  return nil
}

func (p *TraverseSpec)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dedup = v
}
  return nil
}

func (p *TraverseSpec)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*StatProp, 0, size)
  p.StatProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &StatProp{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.StatProps = append(p.StatProps, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.VertexProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &VertexProp{}
    if err := _elem11.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.VertexProps = append(p.VertexProps, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.EdgeProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &EdgeProp{}
    if err := _elem12.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.EdgeProps = append(p.EdgeProps, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Expr, 0, size)
  p.Expressions =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &Expr{}
    if err := _elem13.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Expressions = append(p.Expressions, _elem13)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &OrderBy{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.OrderBy = append(p.OrderBy, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TraverseSpec)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Random = &v
}
  return nil
}

func (p *TraverseSpec)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *TraverseSpec)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *TraverseSpec)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TagFilter = v
}
  return nil
}

func (p *TraverseSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TraverseSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TraverseSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_types", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.EdgeTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_types: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_direction", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_direction: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EdgeDirection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_direction (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_direction: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dedup", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dedup: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Dedup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dedup (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dedup: ", p), err) }
  return err
}

func (p *TraverseSpec) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatProps() {
    if err := oprot.WriteFieldBegin(ctx, "stat_props", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stat_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StatProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StatProps {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stat_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVertexProps() {
    if err := oprot.WriteFieldBegin(ctx, "vertex_props", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vertex_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.VertexProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VertexProps {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vertex_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEdgeProps() {
    if err := oprot.WriteFieldBegin(ctx, "edge_props", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:edge_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.EdgeProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EdgeProps {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:edge_props: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExpressions() {
    if err := oprot.WriteFieldBegin(ctx, "expressions", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:expressions: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Expressions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Expressions {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:expressions: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin(ctx, "order_by", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:order_by: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:order_by: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRandom() {
    if err := oprot.WriteFieldBegin(ctx, "random", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:random: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Random)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.random (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:random: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:limit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:limit: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:filter: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:filter: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTagFilter() {
    if err := oprot.WriteFieldBegin(ctx, "tag_filter", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tag_filter: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.TagFilter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_filter (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tag_filter: ", p), err) }
  }
  return err
}

func (p *TraverseSpec) Equals(other *TraverseSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.EdgeTypes) != len(other.EdgeTypes) { return false }
  for i, _tgt := range p.EdgeTypes {
    _src15 := other.EdgeTypes[i]
    if _tgt != _src15 { return false }
  }
  if p.EdgeDirection != other.EdgeDirection { return false }
  if p.Dedup != other.Dedup { return false }
  if len(p.StatProps) != len(other.StatProps) { return false }
  for i, _tgt := range p.StatProps {
    _src16 := other.StatProps[i]
    if !_tgt.Equals(_src16) { return false }
  }
  if len(p.VertexProps) != len(other.VertexProps) { return false }
  for i, _tgt := range p.VertexProps {
    _src17 := other.VertexProps[i]
    if !_tgt.Equals(_src17) { return false }
  }
  if len(p.EdgeProps) != len(other.EdgeProps) { return false }
  for i, _tgt := range p.EdgeProps {
    _src18 := other.EdgeProps[i]
    if !_tgt.Equals(_src18) { return false }
  }
  if len(p.Expressions) != len(other.Expressions) { return false }
  for i, _tgt := range p.Expressions {
    _src19 := other.Expressions[i]
    if !_tgt.Equals(_src19) { return false }
  }
  if len(p.OrderBy) != len(other.OrderBy) { return false }
  for i, _tgt := range p.OrderBy {
    _src20 := other.OrderBy[i]
    if !_tgt.Equals(_src20) { return false }
  }
  if p.Random != other.Random {
    if p.Random == nil || other.Random == nil {
      return false
    }
    if (*p.Random) != (*other.Random) { return false }
  }
  if p.Limit != other.Limit {
    if p.Limit == nil || other.Limit == nil {
      return false
    }
    if (*p.Limit) != (*other.Limit) { return false }
  }
  if bytes.Compare(p.Filter, other.Filter) != 0 { return false }
  if bytes.Compare(p.TagFilter, other.TagFilter) != 0 { return false }
  return true
}

func (p *TraverseSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TraverseSpec(%+v)", *p)
}

func (p *TraverseSpec) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - ColumnNames
//  - Parts
//  - TraverseSpec
//  - Common
type GetNeighborsRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  ColumnNames [][]byte `thrift:"column_names,2" db:"column_names" json:"column_names"`
  Parts map[nebula.PartitionID][]*nebula.Value `thrift:"parts,3" db:"parts" json:"parts"`
  TraverseSpec *TraverseSpec `thrift:"traverse_spec,4" db:"traverse_spec" json:"traverse_spec"`
  Common *RequestCommon `thrift:"common,5" db:"common" json:"common,omitempty"`
}

func NewGetNeighborsRequest() *GetNeighborsRequest {
  return &GetNeighborsRequest{}
}


func (p *GetNeighborsRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetNeighborsRequest) GetColumnNames() [][]byte {
  return p.ColumnNames
}

func (p *GetNeighborsRequest) GetParts() map[nebula.PartitionID][]*nebula.Value {
  return p.Parts
}
var GetNeighborsRequest_TraverseSpec_DEFAULT *TraverseSpec
func (p *GetNeighborsRequest) GetTraverseSpec() *TraverseSpec {
  if !p.IsSetTraverseSpec() {
    return GetNeighborsRequest_TraverseSpec_DEFAULT
  }
return p.TraverseSpec
}
var GetNeighborsRequest_Common_DEFAULT *RequestCommon
func (p *GetNeighborsRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetNeighborsRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetNeighborsRequest) IsSetTraverseSpec() bool {
  return p.TraverseSpec != nil
}

func (p *GetNeighborsRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *GetNeighborsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetNeighborsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ColumnNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.ColumnNames = append(p.ColumnNames, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key22 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key22 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.Value, 0, size)
    _val23 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem24 := &nebula.Value{}
      if err := _elem24.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
      }
      _val23 = append(_val23, _elem24)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.TraverseSpec = &TraverseSpec{
  EdgeDirection: 1,
}
  if err := p.TraverseSpec.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TraverseSpec), err)
  }
  return nil
}

func (p *GetNeighborsRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetNeighborsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetNeighborsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetNeighborsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ColumnNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnNames {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_names: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "traverse_spec", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:traverse_spec: ", p), err) }
  if err := p.TraverseSpec.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TraverseSpec), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:traverse_spec: ", p), err) }
  return err
}

func (p *GetNeighborsRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *GetNeighborsRequest) Equals(other *GetNeighborsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.ColumnNames) != len(other.ColumnNames) { return false }
  for i, _tgt := range p.ColumnNames {
    _src25 := other.ColumnNames[i]
    if bytes.Compare(_tgt, _src25) != 0 { return false }
  }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src26 := other.Parts[k]
    if len(_tgt) != len(_src26) { return false }
    for i, _tgt := range _tgt {
      _src27 := _src26[i]
      if !_tgt.Equals(_src27) { return false }
    }
  }
  if !p.TraverseSpec.Equals(other.TraverseSpec) { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *GetNeighborsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNeighborsRequest(%+v)", *p)
}

func (p *GetNeighborsRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Vertices
type GetNeighborsResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Vertices *nebula.DataSet `thrift:"vertices,2" db:"vertices" json:"vertices,omitempty"`
}

func NewGetNeighborsResponse() *GetNeighborsResponse {
  return &GetNeighborsResponse{}
}

var GetNeighborsResponse_Result__DEFAULT *ResponseCommon
func (p *GetNeighborsResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetNeighborsResponse_Result__DEFAULT
  }
return p.Result_
}
var GetNeighborsResponse_Vertices_DEFAULT *nebula.DataSet
func (p *GetNeighborsResponse) GetVertices() *nebula.DataSet {
  if !p.IsSetVertices() {
    return GetNeighborsResponse_Vertices_DEFAULT
  }
return p.Vertices
}
func (p *GetNeighborsResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetNeighborsResponse) IsSetVertices() bool {
  return p.Vertices != nil
}

func (p *GetNeighborsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetNeighborsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetNeighborsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Vertices = &nebula.DataSet{}
  if err := p.Vertices.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vertices), err)
  }
  return nil
}

func (p *GetNeighborsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetNeighborsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetNeighborsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetNeighborsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVertices() {
    if err := oprot.WriteFieldBegin(ctx, "vertices", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vertices: ", p), err) }
    if err := p.Vertices.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vertices), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vertices: ", p), err) }
  }
  return err
}

func (p *GetNeighborsResponse) Equals(other *GetNeighborsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Vertices.Equals(other.Vertices) { return false }
  return true
}

func (p *GetNeighborsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetNeighborsResponse(%+v)", *p)
}

func (p *GetNeighborsResponse) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - EdgeTypes
//  - Common
type GetDstBySrcRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*nebula.Value `thrift:"parts,2" db:"parts" json:"parts"`
  EdgeTypes []nebula.EdgeType `thrift:"edge_types,3" db:"edge_types" json:"edge_types"`
  Common *RequestCommon `thrift:"common,4" db:"common" json:"common,omitempty"`
}

func NewGetDstBySrcRequest() *GetDstBySrcRequest {
  return &GetDstBySrcRequest{}
}


func (p *GetDstBySrcRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetDstBySrcRequest) GetParts() map[nebula.PartitionID][]*nebula.Value {
  return p.Parts
}

func (p *GetDstBySrcRequest) GetEdgeTypes() []nebula.EdgeType {
  return p.EdgeTypes
}
var GetDstBySrcRequest_Common_DEFAULT *RequestCommon
func (p *GetDstBySrcRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetDstBySrcRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetDstBySrcRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *GetDstBySrcRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetDstBySrcRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key28 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key28 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.Value, 0, size)
    _val29 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem30 := &nebula.Value{}
      if err := _elem30.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
      }
      _val29 = append(_val29, _elem30)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key28] = _val29
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.EdgeType, 0, size)
  p.EdgeTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 nebula.EdgeType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.EdgeType(v)
    _elem31 = temp
}
    p.EdgeTypes = append(p.EdgeTypes, _elem31)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetDstBySrcRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetDstBySrcRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetDstBySrcRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetDstBySrcRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_types", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_types: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.EdgeTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_types: ", p), err) }
  return err
}

func (p *GetDstBySrcRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err) }
  }
  return err
}

func (p *GetDstBySrcRequest) Equals(other *GetDstBySrcRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src32 := other.Parts[k]
    if len(_tgt) != len(_src32) { return false }
    for i, _tgt := range _tgt {
      _src33 := _src32[i]
      if !_tgt.Equals(_src33) { return false }
    }
  }
  if len(p.EdgeTypes) != len(other.EdgeTypes) { return false }
  for i, _tgt := range p.EdgeTypes {
    _src34 := other.EdgeTypes[i]
    if _tgt != _src34 { return false }
  }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *GetDstBySrcRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDstBySrcRequest(%+v)", *p)
}

func (p *GetDstBySrcRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Dsts
type GetDstBySrcResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Dsts *nebula.DataSet `thrift:"dsts,2" db:"dsts" json:"dsts,omitempty"`
}

func NewGetDstBySrcResponse() *GetDstBySrcResponse {
  return &GetDstBySrcResponse{}
}

var GetDstBySrcResponse_Result__DEFAULT *ResponseCommon
func (p *GetDstBySrcResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetDstBySrcResponse_Result__DEFAULT
  }
return p.Result_
}
var GetDstBySrcResponse_Dsts_DEFAULT *nebula.DataSet
func (p *GetDstBySrcResponse) GetDsts() *nebula.DataSet {
  if !p.IsSetDsts() {
    return GetDstBySrcResponse_Dsts_DEFAULT
  }
return p.Dsts
}
func (p *GetDstBySrcResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetDstBySrcResponse) IsSetDsts() bool {
  return p.Dsts != nil
}

func (p *GetDstBySrcResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetDstBySrcResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetDstBySrcResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dsts = &nebula.DataSet{}
  if err := p.Dsts.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dsts), err)
  }
  return nil
}

func (p *GetDstBySrcResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetDstBySrcResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetDstBySrcResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetDstBySrcResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDsts() {
    if err := oprot.WriteFieldBegin(ctx, "dsts", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dsts: ", p), err) }
    if err := p.Dsts.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dsts), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dsts: ", p), err) }
  }
  return err
}

func (p *GetDstBySrcResponse) Equals(other *GetDstBySrcResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Dsts.Equals(other.Dsts) { return false }
  return true
}

func (p *GetDstBySrcResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetDstBySrcResponse(%+v)", *p)
}

func (p *GetDstBySrcResponse) Validate() error {
  return nil
}
// Attributes:
//  - Result_
type ExecResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
}

func NewExecResponse() *ExecResponse {
  return &ExecResponse{}
}

var ExecResponse_Result__DEFAULT *ResponseCommon
func (p *ExecResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ExecResponse_Result__DEFAULT
  }
return p.Result_
}
func (p *ExecResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ExecResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ExecResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ExecResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ExecResponse) Equals(other *ExecResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  return true
}

func (p *ExecResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecResponse(%+v)", *p)
}

func (p *ExecResponse) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - VertexProps
//  - EdgeProps
//  - Expressions
//  - Dedup
//  - OrderBy
//  - Limit
//  - Filter
//  - Common
type GetPropRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*nebula.Row `thrift:"parts,2" db:"parts" json:"parts"`
  VertexProps []*VertexProp `thrift:"vertex_props,3" db:"vertex_props" json:"vertex_props,omitempty"`
  EdgeProps []*EdgeProp `thrift:"edge_props,4" db:"edge_props" json:"edge_props,omitempty"`
  Expressions []*Expr `thrift:"expressions,5" db:"expressions" json:"expressions,omitempty"`
  Dedup bool `thrift:"dedup,6" db:"dedup" json:"dedup"`
  OrderBy []*OrderBy `thrift:"order_by,7" db:"order_by" json:"order_by,omitempty"`
  Limit *int64 `thrift:"limit,8" db:"limit" json:"limit,omitempty"`
  Filter []byte `thrift:"filter,9" db:"filter" json:"filter,omitempty"`
  Common *RequestCommon `thrift:"common,10" db:"common" json:"common,omitempty"`
}

func NewGetPropRequest() *GetPropRequest {
  return &GetPropRequest{}
}


func (p *GetPropRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetPropRequest) GetParts() map[nebula.PartitionID][]*nebula.Row {
  return p.Parts
}
var GetPropRequest_VertexProps_DEFAULT []*VertexProp

func (p *GetPropRequest) GetVertexProps() []*VertexProp {
  return p.VertexProps
}
var GetPropRequest_EdgeProps_DEFAULT []*EdgeProp

func (p *GetPropRequest) GetEdgeProps() []*EdgeProp {
  return p.EdgeProps
}
var GetPropRequest_Expressions_DEFAULT []*Expr

func (p *GetPropRequest) GetExpressions() []*Expr {
  return p.Expressions
}

func (p *GetPropRequest) GetDedup() bool {
  return p.Dedup
}
var GetPropRequest_OrderBy_DEFAULT []*OrderBy

func (p *GetPropRequest) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var GetPropRequest_Limit_DEFAULT int64
func (p *GetPropRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return GetPropRequest_Limit_DEFAULT
  }
return *p.Limit
}
var GetPropRequest_Filter_DEFAULT []byte

func (p *GetPropRequest) GetFilter() []byte {
  return p.Filter
}
var GetPropRequest_Common_DEFAULT *RequestCommon
func (p *GetPropRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetPropRequest_Common_DEFAULT
  }
return p.Common
}
func (p *GetPropRequest) IsSetVertexProps() bool {
  return p.VertexProps != nil
}

func (p *GetPropRequest) IsSetEdgeProps() bool {
  return p.EdgeProps != nil
}

func (p *GetPropRequest) IsSetExpressions() bool {
  return p.Expressions != nil
}

func (p *GetPropRequest) IsSetOrderBy() bool {
  return p.OrderBy != nil
}

func (p *GetPropRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *GetPropRequest) IsSetFilter() bool {
  return p.Filter != nil
}

func (p *GetPropRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *GetPropRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetPropRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.Row, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key35 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key35 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.Row, 0, size)
    _val36 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem37 := &nebula.Row{}
      if err := _elem37.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
      }
      _val36 = append(_val36, _elem37)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.VertexProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &VertexProp{}
    if err := _elem38.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.VertexProps = append(p.VertexProps, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.EdgeProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &EdgeProp{}
    if err := _elem39.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.EdgeProps = append(p.EdgeProps, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Expr, 0, size)
  p.Expressions =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &Expr{}
    if err := _elem40.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Expressions = append(p.Expressions, _elem40)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Dedup = v
}
  return nil
}

func (p *GetPropRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &OrderBy{}
    if err := _elem41.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.OrderBy = append(p.OrderBy, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetPropRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *GetPropRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *GetPropRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetPropRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPropRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPropRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVertexProps() {
    if err := oprot.WriteFieldBegin(ctx, "vertex_props", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertex_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.VertexProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VertexProps {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertex_props: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEdgeProps() {
    if err := oprot.WriteFieldBegin(ctx, "edge_props", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:edge_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.EdgeProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EdgeProps {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:edge_props: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExpressions() {
    if err := oprot.WriteFieldBegin(ctx, "expressions", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:expressions: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Expressions)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Expressions {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:expressions: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dedup", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dedup: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Dedup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dedup (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dedup: ", p), err) }
  return err
}

func (p *GetPropRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin(ctx, "order_by", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order_by: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order_by: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:limit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:limit: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:filter: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:filter: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *GetPropRequest) Equals(other *GetPropRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src42 := other.Parts[k]
    if len(_tgt) != len(_src42) { return false }
    for i, _tgt := range _tgt {
      _src43 := _src42[i]
      if !_tgt.Equals(_src43) { return false }
    }
  }
  if len(p.VertexProps) != len(other.VertexProps) { return false }
  for i, _tgt := range p.VertexProps {
    _src44 := other.VertexProps[i]
    if !_tgt.Equals(_src44) { return false }
  }
  if len(p.EdgeProps) != len(other.EdgeProps) { return false }
  for i, _tgt := range p.EdgeProps {
    _src45 := other.EdgeProps[i]
    if !_tgt.Equals(_src45) { return false }
  }
  if len(p.Expressions) != len(other.Expressions) { return false }
  for i, _tgt := range p.Expressions {
    _src46 := other.Expressions[i]
    if !_tgt.Equals(_src46) { return false }
  }
  if p.Dedup != other.Dedup { return false }
  if len(p.OrderBy) != len(other.OrderBy) { return false }
  for i, _tgt := range p.OrderBy {
    _src47 := other.OrderBy[i]
    if !_tgt.Equals(_src47) { return false }
  }
  if p.Limit != other.Limit {
    if p.Limit == nil || other.Limit == nil {
      return false
    }
    if (*p.Limit) != (*other.Limit) { return false }
  }
  if bytes.Compare(p.Filter, other.Filter) != 0 { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *GetPropRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPropRequest(%+v)", *p)
}

func (p *GetPropRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Props
type GetPropResponse struct {
  Result_ *ResponseCommon `thrift:"result,1" db:"result" json:"result"`
  Props *nebula.DataSet `thrift:"props,2" db:"props" json:"props,omitempty"`
}

func NewGetPropResponse() *GetPropResponse {
  return &GetPropResponse{}
}

var GetPropResponse_Result__DEFAULT *ResponseCommon
func (p *GetPropResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetPropResponse_Result__DEFAULT
  }
return p.Result_
}
var GetPropResponse_Props_DEFAULT *nebula.DataSet
func (p *GetPropResponse) GetProps() *nebula.DataSet {
  if !p.IsSetProps() {
    return GetPropResponse_Props_DEFAULT
  }
return p.Props
}
func (p *GetPropResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetPropResponse) IsSetProps() bool {
  return p.Props != nil
}

func (p *GetPropResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPropResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetPropResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Props = &nebula.DataSet{}
  if err := p.Props.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *GetPropResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetPropResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPropResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetPropResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin(ctx, "props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *GetPropResponse) Equals(other *GetPropResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Props.Equals(other.Props) { return false }
  return true
}

func (p *GetPropResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPropResponse(%+v)", *p)
}

func (p *GetPropResponse) Validate() error {
  return nil
}
// Attributes:
//  - TagID
//  - Props
type NewTag_ struct {
  TagID nebula.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  Props []*nebula.Value `thrift:"props,2" db:"props" json:"props"`
}

func NewNewTag_() *NewTag_ {
  return &NewTag_{}
}


func (p *NewTag_) GetTagID() nebula.TagID {
  return p.TagID
}

func (p *NewTag_) GetProps() []*nebula.Value {
  return p.Props
}
func (p *NewTag_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewTag_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *NewTag_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.Value, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := &nebula.Value{}
    if err := _elem48.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.Props = append(p.Props, _elem48)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewTag_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NewTag"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewTag_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *NewTag_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *NewTag_) Equals(other *NewTag_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TagID != other.TagID { return false }
  if len(p.Props) != len(other.Props) { return false }
  for i, _tgt := range p.Props {
    _src49 := other.Props[i]
    if !_tgt.Equals(_src49) { return false }
  }
  return true
}

func (p *NewTag_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NewTag_(%+v)", *p)
}

func (p *NewTag_) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Tags
type NewVertex_ struct {
  ID *nebula.Value `thrift:"id,1" db:"id" json:"id"`
  Tags []*NewTag_ `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewNewVertex_() *NewVertex_ {
  return &NewVertex_{}
}

var NewVertex__ID_DEFAULT *nebula.Value
func (p *NewVertex_) GetID() *nebula.Value {
  if !p.IsSetID() {
    return NewVertex__ID_DEFAULT
  }
return p.ID
}

func (p *NewVertex_) GetTags() []*NewTag_ {
  return p.Tags
}
func (p *NewVertex_) IsSetID() bool {
  return p.ID != nil
}

func (p *NewVertex_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewVertex_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &nebula.Value{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *NewVertex_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NewTag_, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := &NewTag_{}
    if err := _elem50.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.Tags = append(p.Tags, _elem50)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewVertex_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NewVertex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewVertex_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *NewVertex_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *NewVertex_) Equals(other *NewVertex_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ID.Equals(other.ID) { return false }
  if len(p.Tags) != len(other.Tags) { return false }
  for i, _tgt := range p.Tags {
    _src51 := other.Tags[i]
    if !_tgt.Equals(_src51) { return false }
  }
  return true
}

func (p *NewVertex_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NewVertex_(%+v)", *p)
}

func (p *NewVertex_) Validate() error {
  return nil
}
// Attributes:
//  - Src
//  - EdgeType
//  - Ranking
//  - Dst
type EdgeKey struct {
  Src *nebula.Value `thrift:"src,1" db:"src" json:"src"`
  EdgeType nebula.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type"`
  Ranking nebula.EdgeRanking `thrift:"ranking,3" db:"ranking" json:"ranking"`
  Dst *nebula.Value `thrift:"dst,4" db:"dst" json:"dst"`
}

func NewEdgeKey() *EdgeKey {
  return &EdgeKey{}
}

var EdgeKey_Src_DEFAULT *nebula.Value
func (p *EdgeKey) GetSrc() *nebula.Value {
  if !p.IsSetSrc() {
    return EdgeKey_Src_DEFAULT
  }
return p.Src
}

func (p *EdgeKey) GetEdgeType() nebula.EdgeType {
  return p.EdgeType
}

func (p *EdgeKey) GetRanking() nebula.EdgeRanking {
  return p.Ranking
}
var EdgeKey_Dst_DEFAULT *nebula.Value
func (p *EdgeKey) GetDst() *nebula.Value {
  if !p.IsSetDst() {
    return EdgeKey_Dst_DEFAULT
  }
return p.Dst
}
func (p *EdgeKey) IsSetSrc() bool {
  return p.Src != nil
}

func (p *EdgeKey) IsSetDst() bool {
  return p.Dst != nil
}

func (p *EdgeKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Src = &nebula.Value{}
  if err := p.Src.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Src), err)
  }
  return nil
}

func (p *EdgeKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgeKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula.EdgeRanking(v)
  p.Ranking = temp
}
  return nil
}

func (p *EdgeKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dst = &nebula.Value{}
  if err := p.Dst.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dst), err)
  }
  return nil
}

func (p *EdgeKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EdgeKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "src", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:src: ", p), err) }
  if err := p.Src.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Src), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:src: ", p), err) }
  return err
}

func (p *EdgeKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  return err
}

func (p *EdgeKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ranking", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ranking: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ranking)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ranking (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ranking: ", p), err) }
  return err
}

func (p *EdgeKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dst", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dst: ", p), err) }
  if err := p.Dst.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dst), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dst: ", p), err) }
  return err
}

func (p *EdgeKey) Equals(other *EdgeKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Src.Equals(other.Src) { return false }
  if p.EdgeType != other.EdgeType { return false }
  if p.Ranking != other.Ranking { return false }
  if !p.Dst.Equals(other.Dst) { return false }
  return true
}

func (p *EdgeKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeKey(%+v)", *p)
}

func (p *EdgeKey) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Props
type NewEdge_ struct {
  Key *EdgeKey `thrift:"key,1" db:"key" json:"key"`
  Props []*nebula.Value `thrift:"props,2" db:"props" json:"props"`
}

func NewNewEdge_() *NewEdge_ {
  return &NewEdge_{}
}

var NewEdge__Key_DEFAULT *EdgeKey
func (p *NewEdge_) GetKey() *EdgeKey {
  if !p.IsSetKey() {
    return NewEdge__Key_DEFAULT
  }
return p.Key
}

func (p *NewEdge_) GetProps() []*nebula.Value {
  return p.Props
}
func (p *NewEdge_) IsSetKey() bool {
  return p.Key != nil
}

func (p *NewEdge_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewEdge_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Key = &EdgeKey{}
  if err := p.Key.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
  }
  return nil
}

func (p *NewEdge_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.Value, 0, size)
  p.Props =  tSlice
  for i := 0; i < size; i ++ {
    _elem52 := &nebula.Value{}
    if err := _elem52.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
    }
    p.Props = append(p.Props, _elem52)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NewEdge_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NewEdge"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewEdge_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := p.Key.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *NewEdge_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "props", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Props)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Props {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  return err
}

func (p *NewEdge_) Equals(other *NewEdge_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Key.Equals(other.Key) { return false }
  if len(p.Props) != len(other.Props) { return false }
  for i, _tgt := range p.Props {
    _src53 := other.Props[i]
    if !_tgt.Equals(_src53) { return false }
  }
  return true
}

func (p *NewEdge_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NewEdge_(%+v)", *p)
}

func (p *NewEdge_) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - IgnoreExistedIndex
//  - Common
type AddVerticesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*NewVertex_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames map[nebula.TagID][][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  IgnoreExistedIndex bool `thrift:"ignore_existed_index,5" db:"ignore_existed_index" json:"ignore_existed_index"`
  Common *RequestCommon `thrift:"common,6" db:"common" json:"common,omitempty"`
}

func NewAddVerticesRequest() *AddVerticesRequest {
  return &AddVerticesRequest{}
}


func (p *AddVerticesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AddVerticesRequest) GetParts() map[nebula.PartitionID][]*NewVertex_ {
  return p.Parts
}

func (p *AddVerticesRequest) GetPropNames() map[nebula.TagID][][]byte {
  return p.PropNames
}

func (p *AddVerticesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *AddVerticesRequest) GetIgnoreExistedIndex() bool {
  return p.IgnoreExistedIndex
}
var AddVerticesRequest_Common_DEFAULT *RequestCommon
func (p *AddVerticesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return AddVerticesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *AddVerticesRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *AddVerticesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddVerticesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*NewVertex_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key54 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key54 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewVertex_, 0, size)
    _val55 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem56 := &NewVertex_{}
      if err := _elem56.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
      }
      _val55 = append(_val55, _elem56)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.TagID][][]byte, size)
  p.PropNames =  tMap
  for i := 0; i < size; i ++ {
var _key57 nebula.TagID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.TagID(v)
    _key57 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val58 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem59 []byte
      if v, err := iprot.ReadBinary(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem59 = v
}
      _val58 = append(_val58, _elem59)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PropNames[_key57] = _val58
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddVerticesRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *AddVerticesRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IgnoreExistedIndex = v
}
  return nil
}

func (p *AddVerticesRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *AddVerticesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddVerticesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prop_names", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PropNames {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ignore_existed_index", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ignore_existed_index: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IgnoreExistedIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignore_existed_index (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ignore_existed_index: ", p), err) }
  return err
}

func (p *AddVerticesRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:common: ", p), err) }
  }
  return err
}

func (p *AddVerticesRequest) Equals(other *AddVerticesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src60 := other.Parts[k]
    if len(_tgt) != len(_src60) { return false }
    for i, _tgt := range _tgt {
      _src61 := _src60[i]
      if !_tgt.Equals(_src61) { return false }
    }
  }
  if len(p.PropNames) != len(other.PropNames) { return false }
  for k, _tgt := range p.PropNames {
    _src62 := other.PropNames[k]
    if len(_tgt) != len(_src62) { return false }
    for i, _tgt := range _tgt {
      _src63 := _src62[i]
      if bytes.Compare(_tgt, _src63) != 0 { return false }
    }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if p.IgnoreExistedIndex != other.IgnoreExistedIndex { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *AddVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddVerticesRequest(%+v)", *p)
}

func (p *AddVerticesRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - IgnoreExistedIndex
//  - Common
type AddEdgesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*NewEdge_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames [][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  IgnoreExistedIndex bool `thrift:"ignore_existed_index,5" db:"ignore_existed_index" json:"ignore_existed_index"`
  Common *RequestCommon `thrift:"common,6" db:"common" json:"common,omitempty"`
}

func NewAddEdgesRequest() *AddEdgesRequest {
  return &AddEdgesRequest{}
}


func (p *AddEdgesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AddEdgesRequest) GetParts() map[nebula.PartitionID][]*NewEdge_ {
  return p.Parts
}

func (p *AddEdgesRequest) GetPropNames() [][]byte {
  return p.PropNames
}

func (p *AddEdgesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *AddEdgesRequest) GetIgnoreExistedIndex() bool {
  return p.IgnoreExistedIndex
}
var AddEdgesRequest_Common_DEFAULT *RequestCommon
func (p *AddEdgesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return AddEdgesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *AddEdgesRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *AddEdgesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddEdgesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*NewEdge_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key64 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key64 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewEdge_, 0, size)
    _val65 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem66 := &NewEdge_{}
      if err := _elem66.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem66), err)
      }
      _val65 = append(_val65, _elem66)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key64] = _val65
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.PropNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem67 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem67 = v
}
    p.PropNames = append(p.PropNames, _elem67)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddEdgesRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *AddEdgesRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IgnoreExistedIndex = v
}
  return nil
}

func (p *AddEdgesRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *AddEdgesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddEdgesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prop_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PropNames {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ignore_existed_index", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ignore_existed_index: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IgnoreExistedIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignore_existed_index (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ignore_existed_index: ", p), err) }
  return err
}

func (p *AddEdgesRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:common: ", p), err) }
  }
  return err
}

func (p *AddEdgesRequest) Equals(other *AddEdgesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src68 := other.Parts[k]
    if len(_tgt) != len(_src68) { return false }
    for i, _tgt := range _tgt {
      _src69 := _src68[i]
      if !_tgt.Equals(_src69) { return false }
    }
  }
  if len(p.PropNames) != len(other.PropNames) { return false }
  for i, _tgt := range p.PropNames {
    _src70 := other.PropNames[i]
    if bytes.Compare(_tgt, _src70) != 0 { return false }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if p.IgnoreExistedIndex != other.IgnoreExistedIndex { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *AddEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddEdgesRequest(%+v)", *p)
}

func (p *AddEdgesRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteVerticesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*nebula.Value `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3" db:"common" json:"common,omitempty"`
}

func NewDeleteVerticesRequest() *DeleteVerticesRequest {
  return &DeleteVerticesRequest{}
}


func (p *DeleteVerticesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteVerticesRequest) GetParts() map[nebula.PartitionID][]*nebula.Value {
  return p.Parts
}
var DeleteVerticesRequest_Common_DEFAULT *RequestCommon
func (p *DeleteVerticesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteVerticesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteVerticesRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *DeleteVerticesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DeleteVerticesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.Value, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key71 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key71 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.Value, 0, size)
    _val72 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem73 := &nebula.Value{}
      if err := _elem73.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
      }
      _val72 = append(_val72, _elem73)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key71] = _val72
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteVerticesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteVerticesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteVerticesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteVerticesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteVerticesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteVerticesRequest) Equals(other *DeleteVerticesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src74 := other.Parts[k]
    if len(_tgt) != len(_src74) { return false }
    for i, _tgt := range _tgt {
      _src75 := _src74[i]
      if !_tgt.Equals(_src75) { return false }
    }
  }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *DeleteVerticesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteVerticesRequest(%+v)", *p)
}

func (p *DeleteVerticesRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteEdgesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3" db:"common" json:"common,omitempty"`
}

func NewDeleteEdgesRequest() *DeleteEdgesRequest {
  return &DeleteEdgesRequest{}
}


func (p *DeleteEdgesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteEdgesRequest) GetParts() map[nebula.PartitionID][]*EdgeKey {
  return p.Parts
}
var DeleteEdgesRequest_Common_DEFAULT *RequestCommon
func (p *DeleteEdgesRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteEdgesRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteEdgesRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *DeleteEdgesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DeleteEdgesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key76 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key76 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val77 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem78 := &EdgeKey{}
      if err := _elem78.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem78), err)
      }
      _val77 = append(_val77, _elem78)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key76] = _val77
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteEdgesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteEdgesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteEdgesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteEdgesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteEdgesRequest) Equals(other *DeleteEdgesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src79 := other.Parts[k]
    if len(_tgt) != len(_src79) { return false }
    for i, _tgt := range _tgt {
      _src80 := _src79[i]
      if !_tgt.Equals(_src80) { return false }
    }
  }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *DeleteEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteEdgesRequest(%+v)", *p)
}

func (p *DeleteEdgesRequest) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - Tags
type DelTags struct {
  ID *nebula.Value `thrift:"id,1" db:"id" json:"id"`
  Tags []nebula.TagID `thrift:"tags,2" db:"tags" json:"tags"`
}

func NewDelTags() *DelTags {
  return &DelTags{}
}

var DelTags_ID_DEFAULT *nebula.Value
func (p *DelTags) GetID() *nebula.Value {
  if !p.IsSetID() {
    return DelTags_ID_DEFAULT
  }
return p.ID
}

func (p *DelTags) GetTags() []nebula.TagID {
  return p.Tags
}
func (p *DelTags) IsSetID() bool {
  return p.ID != nil
}

func (p *DelTags) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DelTags)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &nebula.Value{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *DelTags)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.TagID, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
var _elem81 nebula.TagID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.TagID(v)
    _elem81 = temp
}
    p.Tags = append(p.Tags, _elem81)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DelTags) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DelTags"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DelTags) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DelTags) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tags", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tags: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tags: ", p), err) }
  return err
}

func (p *DelTags) Equals(other *DelTags) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.ID.Equals(other.ID) { return false }
  if len(p.Tags) != len(other.Tags) { return false }
  for i, _tgt := range p.Tags {
    _src82 := other.Tags[i]
    if _tgt != _src82 { return false }
  }
  return true
}

func (p *DelTags) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DelTags(%+v)", *p)
}

func (p *DelTags) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - Common
type DeleteTagsRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*DelTags `thrift:"parts,2" db:"parts" json:"parts"`
  Common *RequestCommon `thrift:"common,3" db:"common" json:"common,omitempty"`
}

func NewDeleteTagsRequest() *DeleteTagsRequest {
  return &DeleteTagsRequest{}
}


func (p *DeleteTagsRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *DeleteTagsRequest) GetParts() map[nebula.PartitionID][]*DelTags {
  return p.Parts
}
var DeleteTagsRequest_Common_DEFAULT *RequestCommon
func (p *DeleteTagsRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return DeleteTagsRequest_Common_DEFAULT
  }
return p.Common
}
func (p *DeleteTagsRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *DeleteTagsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteTagsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DeleteTagsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*DelTags, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key83 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key83 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*DelTags, 0, size)
    _val84 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem85 := &DelTags{}
      if err := _elem85.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
      }
      _val84 = append(_val84, _elem85)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key83] = _val84
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DeleteTagsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *DeleteTagsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteTagsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteTagsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DeleteTagsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *DeleteTagsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:common: ", p), err) }
  }
  return err
}

func (p *DeleteTagsRequest) Equals(other *DeleteTagsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src86 := other.Parts[k]
    if len(_tgt) != len(_src86) { return false }
    for i, _tgt := range _tgt {
      _src87 := _src86[i]
      if !_tgt.Equals(_src87) { return false }
    }
  }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *DeleteTagsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteTagsRequest(%+v)", *p)
}

func (p *DeleteTagsRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Props
type UpdateResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Props *nebula.DataSet `thrift:"props,2" db:"props" json:"props,omitempty"`
}

func NewUpdateResponse() *UpdateResponse {
  return &UpdateResponse{}
}

var UpdateResponse_Result__DEFAULT *ResponseCommon
func (p *UpdateResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return UpdateResponse_Result__DEFAULT
  }
return p.Result_
}
var UpdateResponse_Props_DEFAULT *nebula.DataSet
func (p *UpdateResponse) GetProps() *nebula.DataSet {
  if !p.IsSetProps() {
    return UpdateResponse_Props_DEFAULT
  }
return p.Props
}
func (p *UpdateResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *UpdateResponse) IsSetProps() bool {
  return p.Props != nil
}

func (p *UpdateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *UpdateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *UpdateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Props = &nebula.DataSet{}
  if err := p.Props.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *UpdateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *UpdateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin(ctx, "props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *UpdateResponse) Equals(other *UpdateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Props.Equals(other.Props) { return false }
  return true
}

func (p *UpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

func (p *UpdateResponse) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Value
type UpdatedProp struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewUpdatedProp() *UpdatedProp {
  return &UpdatedProp{}
}


func (p *UpdatedProp) GetName() []byte {
  return p.Name
}

func (p *UpdatedProp) GetValue() []byte {
  return p.Value
}
func (p *UpdatedProp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *UpdatedProp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *UpdatedProp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *UpdatedProp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdatedProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatedProp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *UpdatedProp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *UpdatedProp) Equals(other *UpdatedProp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *UpdatedProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatedProp(%+v)", *p)
}

func (p *UpdatedProp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - VertexID
//  - TagID
//  - UpdatedProps
//  - Insertable
//  - ReturnProps
//  - Condition
//  - Common
type UpdateVertexRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  VertexID *nebula.Value `thrift:"vertex_id,3" db:"vertex_id" json:"vertex_id"`
  TagID nebula.TagID `thrift:"tag_id,4,required" db:"tag_id" json:"tag_id"`
  UpdatedProps []*UpdatedProp `thrift:"updated_props,5" db:"updated_props" json:"updated_props"`
  Insertable bool `thrift:"insertable,6" db:"insertable" json:"insertable"`
  ReturnProps [][]byte `thrift:"return_props,7" db:"return_props" json:"return_props,omitempty"`
  Condition []byte `thrift:"condition,8" db:"condition" json:"condition,omitempty"`
  Common *RequestCommon `thrift:"common,9" db:"common" json:"common,omitempty"`
}

func NewUpdateVertexRequest() *UpdateVertexRequest {
  return &UpdateVertexRequest{}
}


func (p *UpdateVertexRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *UpdateVertexRequest) GetPartID() nebula.PartitionID {
  return p.PartID
}
var UpdateVertexRequest_VertexID_DEFAULT *nebula.Value
func (p *UpdateVertexRequest) GetVertexID() *nebula.Value {
  if !p.IsSetVertexID() {
    return UpdateVertexRequest_VertexID_DEFAULT
  }
return p.VertexID
}

func (p *UpdateVertexRequest) GetTagID() nebula.TagID {
  return p.TagID
}

func (p *UpdateVertexRequest) GetUpdatedProps() []*UpdatedProp {
  return p.UpdatedProps
}
var UpdateVertexRequest_Insertable_DEFAULT bool = false

func (p *UpdateVertexRequest) GetInsertable() bool {
  return p.Insertable
}
var UpdateVertexRequest_ReturnProps_DEFAULT [][]byte

func (p *UpdateVertexRequest) GetReturnProps() [][]byte {
  return p.ReturnProps
}
var UpdateVertexRequest_Condition_DEFAULT []byte

func (p *UpdateVertexRequest) GetCondition() []byte {
  return p.Condition
}
var UpdateVertexRequest_Common_DEFAULT *RequestCommon
func (p *UpdateVertexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return UpdateVertexRequest_Common_DEFAULT
  }
return p.Common
}
func (p *UpdateVertexRequest) IsSetVertexID() bool {
  return p.VertexID != nil
}

func (p *UpdateVertexRequest) IsSetInsertable() bool {
  return p.Insertable != UpdateVertexRequest_Insertable_DEFAULT
}

func (p *UpdateVertexRequest) IsSetReturnProps() bool {
  return p.ReturnProps != nil
}

func (p *UpdateVertexRequest) IsSetCondition() bool {
  return p.Condition != nil
}

func (p *UpdateVertexRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *UpdateVertexRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTagID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTagID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTagID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TagID is not set"));
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.VertexID = &nebula.Value{}
  if err := p.VertexID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VertexID), err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdatedProp, 0, size)
  p.UpdatedProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem88 := &UpdatedProp{}
    if err := _elem88.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem88), err)
    }
    p.UpdatedProps = append(p.UpdatedProps, _elem88)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Insertable = v
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnProps =  tSlice
  for i := 0; i < size; i ++ {
var _elem89 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem89 = v
}
    p.ReturnProps = append(p.ReturnProps, _elem89)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateVertexRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Condition = v
}
  return nil
}

func (p *UpdateVertexRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *UpdateVertexRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateVertexRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vertex_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vertex_id: ", p), err) }
  if err := p.VertexID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VertexID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vertex_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tag_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag_id: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updated_props", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updated_props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UpdatedProps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdatedProps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updated_props: ", p), err) }
  return err
}

func (p *UpdateVertexRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInsertable() {
    if err := oprot.WriteFieldBegin(ctx, "insertable", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:insertable: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Insertable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.insertable (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:insertable: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnProps() {
    if err := oprot.WriteFieldBegin(ctx, "return_props", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:return_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ReturnProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnProps {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:return_props: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCondition() {
    if err := oprot.WriteFieldBegin(ctx, "condition", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:condition: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Condition); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.condition (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:condition: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:common: ", p), err) }
  }
  return err
}

func (p *UpdateVertexRequest) Equals(other *UpdateVertexRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.VertexID.Equals(other.VertexID) { return false }
  if p.TagID != other.TagID { return false }
  if len(p.UpdatedProps) != len(other.UpdatedProps) { return false }
  for i, _tgt := range p.UpdatedProps {
    _src90 := other.UpdatedProps[i]
    if !_tgt.Equals(_src90) { return false }
  }
  if p.Insertable != other.Insertable { return false }
  if len(p.ReturnProps) != len(other.ReturnProps) { return false }
  for i, _tgt := range p.ReturnProps {
    _src91 := other.ReturnProps[i]
    if bytes.Compare(_tgt, _src91) != 0 { return false }
  }
  if bytes.Compare(p.Condition, other.Condition) != 0 { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *UpdateVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateVertexRequest(%+v)", *p)
}

func (p *UpdateVertexRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - EdgeKey
//  - UpdatedProps
//  - Insertable
//  - ReturnProps
//  - Condition
//  - Common
type UpdateEdgeRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  EdgeKey *EdgeKey `thrift:"edge_key,3" db:"edge_key" json:"edge_key"`
  UpdatedProps []*UpdatedProp `thrift:"updated_props,4" db:"updated_props" json:"updated_props"`
  Insertable bool `thrift:"insertable,5" db:"insertable" json:"insertable"`
  ReturnProps [][]byte `thrift:"return_props,6" db:"return_props" json:"return_props,omitempty"`
  Condition []byte `thrift:"condition,7" db:"condition" json:"condition,omitempty"`
  Common *RequestCommon `thrift:"common,8" db:"common" json:"common,omitempty"`
}

func NewUpdateEdgeRequest() *UpdateEdgeRequest {
  return &UpdateEdgeRequest{}
}


func (p *UpdateEdgeRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *UpdateEdgeRequest) GetPartID() nebula.PartitionID {
  return p.PartID
}
var UpdateEdgeRequest_EdgeKey_DEFAULT *EdgeKey
func (p *UpdateEdgeRequest) GetEdgeKey() *EdgeKey {
  if !p.IsSetEdgeKey() {
    return UpdateEdgeRequest_EdgeKey_DEFAULT
  }
return p.EdgeKey
}

func (p *UpdateEdgeRequest) GetUpdatedProps() []*UpdatedProp {
  return p.UpdatedProps
}
var UpdateEdgeRequest_Insertable_DEFAULT bool = false

func (p *UpdateEdgeRequest) GetInsertable() bool {
  return p.Insertable
}
var UpdateEdgeRequest_ReturnProps_DEFAULT [][]byte

func (p *UpdateEdgeRequest) GetReturnProps() [][]byte {
  return p.ReturnProps
}
var UpdateEdgeRequest_Condition_DEFAULT []byte

func (p *UpdateEdgeRequest) GetCondition() []byte {
  return p.Condition
}
var UpdateEdgeRequest_Common_DEFAULT *RequestCommon
func (p *UpdateEdgeRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return UpdateEdgeRequest_Common_DEFAULT
  }
return p.Common
}
func (p *UpdateEdgeRequest) IsSetEdgeKey() bool {
  return p.EdgeKey != nil
}

func (p *UpdateEdgeRequest) IsSetInsertable() bool {
  return p.Insertable != UpdateEdgeRequest_Insertable_DEFAULT
}

func (p *UpdateEdgeRequest) IsSetReturnProps() bool {
  return p.ReturnProps != nil
}

func (p *UpdateEdgeRequest) IsSetCondition() bool {
  return p.Condition != nil
}

func (p *UpdateEdgeRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *UpdateEdgeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.EdgeKey = &EdgeKey{}
  if err := p.EdgeKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EdgeKey), err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UpdatedProp, 0, size)
  p.UpdatedProps =  tSlice
  for i := 0; i < size; i ++ {
    _elem92 := &UpdatedProp{}
    if err := _elem92.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem92), err)
    }
    p.UpdatedProps = append(p.UpdatedProps, _elem92)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Insertable = v
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnProps =  tSlice
  for i := 0; i < size; i ++ {
var _elem93 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem93 = v
}
    p.ReturnProps = append(p.ReturnProps, _elem93)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateEdgeRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Condition = v
}
  return nil
}

func (p *UpdateEdgeRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *UpdateEdgeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateEdgeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "edge_key", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_key: ", p), err) }
  if err := p.EdgeKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EdgeKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_key: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updated_props", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updated_props: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.UpdatedProps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UpdatedProps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updated_props: ", p), err) }
  return err
}

func (p *UpdateEdgeRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInsertable() {
    if err := oprot.WriteFieldBegin(ctx, "insertable", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:insertable: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Insertable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.insertable (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:insertable: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnProps() {
    if err := oprot.WriteFieldBegin(ctx, "return_props", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:return_props: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ReturnProps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnProps {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:return_props: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCondition() {
    if err := oprot.WriteFieldBegin(ctx, "condition", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:condition: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Condition); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.condition (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:condition: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:common: ", p), err) }
  }
  return err
}

func (p *UpdateEdgeRequest) Equals(other *UpdateEdgeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.EdgeKey.Equals(other.EdgeKey) { return false }
  if len(p.UpdatedProps) != len(other.UpdatedProps) { return false }
  for i, _tgt := range p.UpdatedProps {
    _src94 := other.UpdatedProps[i]
    if !_tgt.Equals(_src94) { return false }
  }
  if p.Insertable != other.Insertable { return false }
  if len(p.ReturnProps) != len(other.ReturnProps) { return false }
  for i, _tgt := range p.ReturnProps {
    _src95 := other.ReturnProps[i]
    if bytes.Compare(_tgt, _src95) != 0 { return false }
  }
  if bytes.Compare(p.Condition, other.Condition) != 0 { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *UpdateEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateEdgeRequest(%+v)", *p)
}

func (p *UpdateEdgeRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - Name
//  - Common
type GetUUIDReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Name []byte `thrift:"name,3" db:"name" json:"name"`
  Common *RequestCommon `thrift:"common,4" db:"common" json:"common,omitempty"`
}

func NewGetUUIDReq() *GetUUIDReq {
  return &GetUUIDReq{}
}


func (p *GetUUIDReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *GetUUIDReq) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *GetUUIDReq) GetName() []byte {
  return p.Name
}
var GetUUIDReq_Common_DEFAULT *RequestCommon
func (p *GetUUIDReq) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return GetUUIDReq_Common_DEFAULT
  }
return p.Common
}
func (p *GetUUIDReq) IsSetCommon() bool {
  return p.Common != nil
}

func (p *GetUUIDReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUUIDReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetUUIDReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *GetUUIDReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *GetUUIDReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *GetUUIDReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUUIDReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *GetUUIDReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:common: ", p), err) }
  }
  return err
}

func (p *GetUUIDReq) Equals(other *GetUUIDReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *GetUUIDReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUUIDReq(%+v)", *p)
}

func (p *GetUUIDReq) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - ID
type GetUUIDResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  ID *nebula.Value `thrift:"id,2" db:"id" json:"id"`
}

func NewGetUUIDResp() *GetUUIDResp {
  return &GetUUIDResp{}
}

var GetUUIDResp_Result__DEFAULT *ResponseCommon
func (p *GetUUIDResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return GetUUIDResp_Result__DEFAULT
  }
return p.Result_
}
var GetUUIDResp_ID_DEFAULT *nebula.Value
func (p *GetUUIDResp) GetID() *nebula.Value {
  if !p.IsSetID() {
    return GetUUIDResp_ID_DEFAULT
  }
return p.ID
}
func (p *GetUUIDResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *GetUUIDResp) IsSetID() bool {
  return p.ID != nil
}

func (p *GetUUIDResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *GetUUIDResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *GetUUIDResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ID = &nebula.Value{}
  if err := p.ID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ID), err)
  }
  return nil
}

func (p *GetUUIDResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetUUIDResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUUIDResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *GetUUIDResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.ID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *GetUUIDResp) Equals(other *GetUUIDResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.ID.Equals(other.ID) { return false }
  return true
}

func (p *GetUUIDResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUUIDResp(%+v)", *p)
}

func (p *GetUUIDResp) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Data
//  - StatData
type LookupIndexResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Data *nebula.DataSet `thrift:"data,2" db:"data" json:"data,omitempty"`
  StatData *nebula.DataSet `thrift:"stat_data,3" db:"stat_data" json:"stat_data,omitempty"`
}

func NewLookupIndexResp() *LookupIndexResp {
  return &LookupIndexResp{}
}

var LookupIndexResp_Result__DEFAULT *ResponseCommon
func (p *LookupIndexResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return LookupIndexResp_Result__DEFAULT
  }
return p.Result_
}
var LookupIndexResp_Data_DEFAULT *nebula.DataSet
func (p *LookupIndexResp) GetData() *nebula.DataSet {
  if !p.IsSetData() {
    return LookupIndexResp_Data_DEFAULT
  }
return p.Data
}
var LookupIndexResp_StatData_DEFAULT *nebula.DataSet
func (p *LookupIndexResp) GetStatData() *nebula.DataSet {
  if !p.IsSetStatData() {
    return LookupIndexResp_StatData_DEFAULT
  }
return p.StatData
}
func (p *LookupIndexResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *LookupIndexResp) IsSetData() bool {
  return p.Data != nil
}

func (p *LookupIndexResp) IsSetStatData() bool {
  return p.StatData != nil
}

func (p *LookupIndexResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *LookupIndexResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *LookupIndexResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &nebula.DataSet{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *LookupIndexResp)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.StatData = &nebula.DataSet{}
  if err := p.StatData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StatData), err)
  }
  return nil
}

func (p *LookupIndexResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LookupIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupIndexResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *LookupIndexResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *LookupIndexResp) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatData() {
    if err := oprot.WriteFieldBegin(ctx, "stat_data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stat_data: ", p), err) }
    if err := p.StatData.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StatData), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stat_data: ", p), err) }
  }
  return err
}

func (p *LookupIndexResp) Equals(other *LookupIndexResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Data.Equals(other.Data) { return false }
  if !p.StatData.Equals(other.StatData) { return false }
  return true
}

func (p *LookupIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LookupIndexResp(%+v)", *p)
}

func (p *LookupIndexResp) Validate() error {
  return nil
}
// Attributes:
//  - ColumnName
//  - ScanType
//  - BeginValue
//  - EndValue
//  - IncludeBegin
//  - IncludeEnd
type IndexColumnHint struct {
  ColumnName []byte `thrift:"column_name,1" db:"column_name" json:"column_name"`
  ScanType ScanType `thrift:"scan_type,2" db:"scan_type" json:"scan_type"`
  BeginValue *nebula.Value `thrift:"begin_value,3" db:"begin_value" json:"begin_value"`
  EndValue *nebula.Value `thrift:"end_value,4" db:"end_value" json:"end_value"`
  IncludeBegin bool `thrift:"include_begin,5" db:"include_begin" json:"include_begin"`
  IncludeEnd bool `thrift:"include_end,6" db:"include_end" json:"include_end"`
}

func NewIndexColumnHint() *IndexColumnHint {
  return &IndexColumnHint{
IncludeBegin: true,
}
}


func (p *IndexColumnHint) GetColumnName() []byte {
  return p.ColumnName
}

func (p *IndexColumnHint) GetScanType() ScanType {
  return p.ScanType
}
var IndexColumnHint_BeginValue_DEFAULT *nebula.Value
func (p *IndexColumnHint) GetBeginValue() *nebula.Value {
  if !p.IsSetBeginValue() {
    return IndexColumnHint_BeginValue_DEFAULT
  }
return p.BeginValue
}
var IndexColumnHint_EndValue_DEFAULT *nebula.Value
func (p *IndexColumnHint) GetEndValue() *nebula.Value {
  if !p.IsSetEndValue() {
    return IndexColumnHint_EndValue_DEFAULT
  }
return p.EndValue
}

func (p *IndexColumnHint) GetIncludeBegin() bool {
  return p.IncludeBegin
}

func (p *IndexColumnHint) GetIncludeEnd() bool {
  return p.IncludeEnd
}
func (p *IndexColumnHint) IsSetBeginValue() bool {
  return p.BeginValue != nil
}

func (p *IndexColumnHint) IsSetEndValue() bool {
  return p.EndValue != nil
}

func (p *IndexColumnHint) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ColumnName = v
}
  return nil
}

func (p *IndexColumnHint)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ScanType(v)
  p.ScanType = temp
}
  return nil
}

func (p *IndexColumnHint)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.BeginValue = &nebula.Value{}
  if err := p.BeginValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BeginValue), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.EndValue = &nebula.Value{}
  if err := p.EndValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EndValue), err)
  }
  return nil
}

func (p *IndexColumnHint)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IncludeBegin = v
}
  return nil
}

func (p *IndexColumnHint)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncludeEnd = v
}
  return nil
}

func (p *IndexColumnHint) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexColumnHint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexColumnHint) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:column_name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ColumnName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:column_name: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "scan_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scan_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ScanType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scan_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scan_type: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "begin_value", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:begin_value: ", p), err) }
  if err := p.BeginValue.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BeginValue), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:begin_value: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "end_value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:end_value: ", p), err) }
  if err := p.EndValue.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EndValue), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:end_value: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "include_begin", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:include_begin: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IncludeBegin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.include_begin (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:include_begin: ", p), err) }
  return err
}

func (p *IndexColumnHint) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "include_end", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:include_end: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IncludeEnd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.include_end (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:include_end: ", p), err) }
  return err
}

func (p *IndexColumnHint) Equals(other *IndexColumnHint) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ColumnName, other.ColumnName) != 0 { return false }
  if p.ScanType != other.ScanType { return false }
  if !p.BeginValue.Equals(other.BeginValue) { return false }
  if !p.EndValue.Equals(other.EndValue) { return false }
  if p.IncludeBegin != other.IncludeBegin { return false }
  if p.IncludeEnd != other.IncludeEnd { return false }
  return true
}

func (p *IndexColumnHint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexColumnHint(%+v)", *p)
}

func (p *IndexColumnHint) Validate() error {
  return nil
}
// Attributes:
//  - IndexID
//  - Filter
//  - ColumnHints
type IndexQueryContext struct {
  IndexID nebula.IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  Filter []byte `thrift:"filter,2" db:"filter" json:"filter"`
  ColumnHints []*IndexColumnHint `thrift:"column_hints,3" db:"column_hints" json:"column_hints"`
}

func NewIndexQueryContext() *IndexQueryContext {
  return &IndexQueryContext{}
}


func (p *IndexQueryContext) GetIndexID() nebula.IndexID {
  return p.IndexID
}

func (p *IndexQueryContext) GetFilter() []byte {
  return p.Filter
}

func (p *IndexQueryContext) GetColumnHints() []*IndexColumnHint {
  return p.ColumnHints
}
func (p *IndexQueryContext) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexQueryContext)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *IndexQueryContext)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *IndexQueryContext)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexColumnHint, 0, size)
  p.ColumnHints =  tSlice
  for i := 0; i < size; i ++ {
    _elem96 := &IndexColumnHint{
    IncludeBegin: true,
}
    if err := _elem96.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem96), err)
    }
    p.ColumnHints = append(p.ColumnHints, _elem96)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexQueryContext) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexQueryContext"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexQueryContext) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexQueryContext) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Filter); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filter (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err) }
  return err
}

func (p *IndexQueryContext) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "column_hints", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column_hints: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ColumnHints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnHints {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column_hints: ", p), err) }
  return err
}

func (p *IndexQueryContext) Equals(other *IndexQueryContext) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IndexID != other.IndexID { return false }
  if bytes.Compare(p.Filter, other.Filter) != 0 { return false }
  if len(p.ColumnHints) != len(other.ColumnHints) { return false }
  for i, _tgt := range p.ColumnHints {
    _src97 := other.ColumnHints[i]
    if !_tgt.Equals(_src97) { return false }
  }
  return true
}

func (p *IndexQueryContext) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexQueryContext(%+v)", *p)
}

func (p *IndexQueryContext) Validate() error {
  return nil
}
// Attributes:
//  - Contexts
//  - SchemaID
type IndexSpec struct {
  Contexts []*IndexQueryContext `thrift:"contexts,1,required" db:"contexts" json:"contexts"`
  SchemaID *nebula.SchemaID `thrift:"schema_id,2" db:"schema_id" json:"schema_id"`
}

func NewIndexSpec() *IndexSpec {
  return &IndexSpec{}
}


func (p *IndexSpec) GetContexts() []*IndexQueryContext {
  return p.Contexts
}
var IndexSpec_SchemaID_DEFAULT *nebula.SchemaID
func (p *IndexSpec) GetSchemaID() *nebula.SchemaID {
  if !p.IsSetSchemaID() {
    return IndexSpec_SchemaID_DEFAULT
  }
return p.SchemaID
}
func (p *IndexSpec) IsSetSchemaID() bool {
  return p.SchemaID != nil
}

func (p *IndexSpec) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetContexts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetContexts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetContexts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Contexts is not set"));
  }
  return nil
}

func (p *IndexSpec)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexQueryContext, 0, size)
  p.Contexts =  tSlice
  for i := 0; i < size; i ++ {
    _elem98 := &IndexQueryContext{}
    if err := _elem98.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem98), err)
    }
    p.Contexts = append(p.Contexts, _elem98)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexSpec)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SchemaID = &nebula.SchemaID{}
  if err := p.SchemaID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexSpec) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndexSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexSpec) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contexts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contexts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Contexts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contexts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contexts: ", p), err) }
  return err
}

func (p *IndexSpec) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema_id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_id: ", p), err) }
  if err := p.SchemaID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_id: ", p), err) }
  return err
}

func (p *IndexSpec) Equals(other *IndexSpec) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Contexts) != len(other.Contexts) { return false }
  for i, _tgt := range p.Contexts {
    _src99 := other.Contexts[i]
    if !_tgt.Equals(_src99) { return false }
  }
  if !p.SchemaID.Equals(other.SchemaID) { return false }
  return true
}

func (p *IndexSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexSpec(%+v)", *p)
}

func (p *IndexSpec) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - Indices
//  - ReturnColumns
//  - Common
//  - Limit
//  - OrderBy
//  - StatColumns
type LookupIndexRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1,required" db:"space_id" json:"space_id"`
  Parts []nebula.PartitionID `thrift:"parts,2,required" db:"parts" json:"parts"`
  Indices *IndexSpec `thrift:"indices,3" db:"indices" json:"indices"`
  ReturnColumns [][]byte `thrift:"return_columns,4" db:"return_columns" json:"return_columns,omitempty"`
  Common *RequestCommon `thrift:"common,5" db:"common" json:"common,omitempty"`
  Limit *int64 `thrift:"limit,6" db:"limit" json:"limit,omitempty"`
  OrderBy []*OrderBy `thrift:"order_by,7" db:"order_by" json:"order_by,omitempty"`
  StatColumns []*StatProp `thrift:"stat_columns,8" db:"stat_columns" json:"stat_columns,omitempty"`
}

func NewLookupIndexRequest() *LookupIndexRequest {
  return &LookupIndexRequest{}
}


func (p *LookupIndexRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *LookupIndexRequest) GetParts() []nebula.PartitionID {
  return p.Parts
}
var LookupIndexRequest_Indices_DEFAULT *IndexSpec
func (p *LookupIndexRequest) GetIndices() *IndexSpec {
  if !p.IsSetIndices() {
    return LookupIndexRequest_Indices_DEFAULT
  }
return p.Indices
}
var LookupIndexRequest_ReturnColumns_DEFAULT [][]byte

func (p *LookupIndexRequest) GetReturnColumns() [][]byte {
  return p.ReturnColumns
}
var LookupIndexRequest_Common_DEFAULT *RequestCommon
func (p *LookupIndexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return LookupIndexRequest_Common_DEFAULT
  }
return p.Common
}
var LookupIndexRequest_Limit_DEFAULT int64
func (p *LookupIndexRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return LookupIndexRequest_Limit_DEFAULT
  }
return *p.Limit
}
var LookupIndexRequest_OrderBy_DEFAULT []*OrderBy

func (p *LookupIndexRequest) GetOrderBy() []*OrderBy {
  return p.OrderBy
}
var LookupIndexRequest_StatColumns_DEFAULT []*StatProp

func (p *LookupIndexRequest) GetStatColumns() []*StatProp {
  return p.StatColumns
}
func (p *LookupIndexRequest) IsSetIndices() bool {
  return p.Indices != nil
}

func (p *LookupIndexRequest) IsSetReturnColumns() bool {
  return p.ReturnColumns != nil
}

func (p *LookupIndexRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *LookupIndexRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *LookupIndexRequest) IsSetOrderBy() bool {
  return p.OrderBy != nil
}

func (p *LookupIndexRequest) IsSetStatColumns() bool {
  return p.StatColumns != nil
}

func (p *LookupIndexRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSpaceID bool = false;
  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSpaceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSpaceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpaceID is not set"));
  }
  if !issetParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *LookupIndexRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem100 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem100 = temp
}
    p.Parts = append(p.Parts, _elem100)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Indices = &IndexSpec{}
  if err := p.Indices.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Indices), err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem101 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem101 = v
}
    p.ReturnColumns = append(p.ReturnColumns, _elem101)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *LookupIndexRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OrderBy, 0, size)
  p.OrderBy =  tSlice
  for i := 0; i < size; i ++ {
    _elem102 := &OrderBy{}
    if err := _elem102.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem102), err)
    }
    p.OrderBy = append(p.OrderBy, _elem102)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*StatProp, 0, size)
  p.StatColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem103 := &StatProp{}
    if err := _elem103.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
    }
    p.StatColumns = append(p.StatColumns, _elem103)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupIndexRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LookupIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupIndexRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indices", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indices: ", p), err) }
  if err := p.Indices.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Indices), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indices: ", p), err) }
  return err
}

func (p *LookupIndexRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReturnColumns() {
    if err := oprot.WriteFieldBegin(ctx, "return_columns", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_columns: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ReturnColumns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReturnColumns {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_columns: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOrderBy() {
    if err := oprot.WriteFieldBegin(ctx, "order_by", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:order_by: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OrderBy)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OrderBy {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:order_by: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatColumns() {
    if err := oprot.WriteFieldBegin(ctx, "stat_columns", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stat_columns: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StatColumns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StatColumns {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stat_columns: ", p), err) }
  }
  return err
}

func (p *LookupIndexRequest) Equals(other *LookupIndexRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src104 := other.Parts[i]
    if _tgt != _src104 { return false }
  }
  if !p.Indices.Equals(other.Indices) { return false }
  if len(p.ReturnColumns) != len(other.ReturnColumns) { return false }
  for i, _tgt := range p.ReturnColumns {
    _src105 := other.ReturnColumns[i]
    if bytes.Compare(_tgt, _src105) != 0 { return false }
  }
  if !p.Common.Equals(other.Common) { return false }
  if p.Limit != other.Limit {
    if p.Limit == nil || other.Limit == nil {
      return false
    }
    if (*p.Limit) != (*other.Limit) { return false }
  }
  if len(p.OrderBy) != len(other.OrderBy) { return false }
  for i, _tgt := range p.OrderBy {
    _src106 := other.OrderBy[i]
    if !_tgt.Equals(_src106) { return false }
  }
  if len(p.StatColumns) != len(other.StatColumns) { return false }
  for i, _tgt := range p.StatColumns {
    _src107 := other.StatColumns[i]
    if !_tgt.Equals(_src107) { return false }
  }
  return true
}

func (p *LookupIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LookupIndexRequest(%+v)", *p)
}

func (p *LookupIndexRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - Indices
//  - TraverseSpec
//  - Common
type LookupAndTraverseRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1,required" db:"space_id" json:"space_id"`
  Parts []nebula.PartitionID `thrift:"parts,2,required" db:"parts" json:"parts"`
  Indices *IndexSpec `thrift:"indices,3" db:"indices" json:"indices"`
  TraverseSpec *TraverseSpec `thrift:"traverse_spec,4" db:"traverse_spec" json:"traverse_spec"`
  Common *RequestCommon `thrift:"common,5" db:"common" json:"common,omitempty"`
}

func NewLookupAndTraverseRequest() *LookupAndTraverseRequest {
  return &LookupAndTraverseRequest{}
}


func (p *LookupAndTraverseRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *LookupAndTraverseRequest) GetParts() []nebula.PartitionID {
  return p.Parts
}
var LookupAndTraverseRequest_Indices_DEFAULT *IndexSpec
func (p *LookupAndTraverseRequest) GetIndices() *IndexSpec {
  if !p.IsSetIndices() {
    return LookupAndTraverseRequest_Indices_DEFAULT
  }
return p.Indices
}
var LookupAndTraverseRequest_TraverseSpec_DEFAULT *TraverseSpec
func (p *LookupAndTraverseRequest) GetTraverseSpec() *TraverseSpec {
  if !p.IsSetTraverseSpec() {
    return LookupAndTraverseRequest_TraverseSpec_DEFAULT
  }
return p.TraverseSpec
}
var LookupAndTraverseRequest_Common_DEFAULT *RequestCommon
func (p *LookupAndTraverseRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return LookupAndTraverseRequest_Common_DEFAULT
  }
return p.Common
}
func (p *LookupAndTraverseRequest) IsSetIndices() bool {
  return p.Indices != nil
}

func (p *LookupAndTraverseRequest) IsSetTraverseSpec() bool {
  return p.TraverseSpec != nil
}

func (p *LookupAndTraverseRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *LookupAndTraverseRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSpaceID bool = false;
  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSpaceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSpaceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpaceID is not set"));
  }
  if !issetParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem108 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem108 = temp
}
    p.Parts = append(p.Parts, _elem108)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Indices = &IndexSpec{}
  if err := p.Indices.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Indices), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.TraverseSpec = &TraverseSpec{
  EdgeDirection: 1,
}
  if err := p.TraverseSpec.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TraverseSpec), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *LookupAndTraverseRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LookupAndTraverseRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LookupAndTraverseRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "indices", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indices: ", p), err) }
  if err := p.Indices.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Indices), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indices: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "traverse_spec", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:traverse_spec: ", p), err) }
  if err := p.TraverseSpec.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TraverseSpec), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:traverse_spec: ", p), err) }
  return err
}

func (p *LookupAndTraverseRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common: ", p), err) }
  }
  return err
}

func (p *LookupAndTraverseRequest) Equals(other *LookupAndTraverseRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src109 := other.Parts[i]
    if _tgt != _src109 { return false }
  }
  if !p.Indices.Equals(other.Indices) { return false }
  if !p.TraverseSpec.Equals(other.TraverseSpec) { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *LookupAndTraverseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LookupAndTraverseRequest(%+v)", *p)
}

func (p *LookupAndTraverseRequest) Validate() error {
  return nil
}
// Attributes:
//  - NextCursor
type ScanCursor struct {
  NextCursor []byte `thrift:"next_cursor,1" db:"next_cursor" json:"next_cursor,omitempty"`
}

func NewScanCursor() *ScanCursor {
  return &ScanCursor{}
}

var ScanCursor_NextCursor_DEFAULT []byte

func (p *ScanCursor) GetNextCursor() []byte {
  return p.NextCursor
}
func (p *ScanCursor) IsSetNextCursor() bool {
  return p.NextCursor != nil
}

func (p *ScanCursor) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanCursor)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NextCursor = v
}
  return nil
}

func (p *ScanCursor) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ScanCursor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanCursor) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNextCursor() {
    if err := oprot.WriteFieldBegin(ctx, "next_cursor", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:next_cursor: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.NextCursor); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.next_cursor (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:next_cursor: ", p), err) }
  }
  return err
}

func (p *ScanCursor) Equals(other *ScanCursor) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.NextCursor, other.NextCursor) != 0 { return false }
  return true
}

func (p *ScanCursor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanCursor(%+v)", *p)
}

func (p *ScanCursor) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
//  - Limit
//  - StartTime
//  - EndTime
//  - Filter
//  - OnlyLatestVersion
//  - EnableReadFromFollower
//  - Common
type ScanVertexRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID]*ScanCursor `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnColumns []*VertexProp `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
  Limit int64 `thrift:"limit,4" db:"limit" json:"limit"`
  StartTime *int64 `thrift:"start_time,5" db:"start_time" json:"start_time,omitempty"`
  EndTime *int64 `thrift:"end_time,6" db:"end_time" json:"end_time,omitempty"`
  Filter []byte `thrift:"filter,7" db:"filter" json:"filter,omitempty"`
  OnlyLatestVersion bool `thrift:"only_latest_version,8" db:"only_latest_version" json:"only_latest_version"`
  EnableReadFromFollower bool `thrift:"enable_read_from_follower,9" db:"enable_read_from_follower" json:"enable_read_from_follower"`
  Common *RequestCommon `thrift:"common,10" db:"common" json:"common,omitempty"`
}

func NewScanVertexRequest() *ScanVertexRequest {
  return &ScanVertexRequest{
EnableReadFromFollower: true,
}
}


func (p *ScanVertexRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanVertexRequest) GetParts() map[nebula.PartitionID]*ScanCursor {
  return p.Parts
}

func (p *ScanVertexRequest) GetReturnColumns() []*VertexProp {
  return p.ReturnColumns
}

func (p *ScanVertexRequest) GetLimit() int64 {
  return p.Limit
}
var ScanVertexRequest_StartTime_DEFAULT int64
func (p *ScanVertexRequest) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return ScanVertexRequest_StartTime_DEFAULT
  }
return *p.StartTime
}
var ScanVertexRequest_EndTime_DEFAULT int64
func (p *ScanVertexRequest) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return ScanVertexRequest_EndTime_DEFAULT
  }
return *p.EndTime
}
var ScanVertexRequest_Filter_DEFAULT []byte

func (p *ScanVertexRequest) GetFilter() []byte {
  return p.Filter
}

func (p *ScanVertexRequest) GetOnlyLatestVersion() bool {
  return p.OnlyLatestVersion
}

func (p *ScanVertexRequest) GetEnableReadFromFollower() bool {
  return p.EnableReadFromFollower
}
var ScanVertexRequest_Common_DEFAULT *RequestCommon
func (p *ScanVertexRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return ScanVertexRequest_Common_DEFAULT
  }
return p.Common
}
func (p *ScanVertexRequest) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *ScanVertexRequest) IsSetEndTime() bool {
  return p.EndTime != nil
}

func (p *ScanVertexRequest) IsSetFilter() bool {
  return p.Filter != nil
}

func (p *ScanVertexRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *ScanVertexRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ScanVertexRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID]*ScanCursor, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key110 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key110 = temp
}
    _val111 := &ScanCursor{}
    if err := _val111.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val111), err)
    }
    p.Parts[_key110] = _val111
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VertexProp, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem112 := &VertexProp{}
    if err := _elem112.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem112), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem112)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanVertexRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = &v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OnlyLatestVersion = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EnableReadFromFollower = v
}
  return nil
}

func (p *ScanVertexRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *ScanVertexRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ScanVertexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanVertexRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "return_columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin(ctx, "end_time", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:filter: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:filter: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "only_latest_version", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:only_latest_version: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.OnlyLatestVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.only_latest_version (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:only_latest_version: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_read_from_follower", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:enable_read_from_follower: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableReadFromFollower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_read_from_follower (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:enable_read_from_follower: ", p), err) }
  return err
}

func (p *ScanVertexRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *ScanVertexRequest) Equals(other *ScanVertexRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src113 := other.Parts[k]
    if !_tgt.Equals(_src113) { return false }
  }
  if len(p.ReturnColumns) != len(other.ReturnColumns) { return false }
  for i, _tgt := range p.ReturnColumns {
    _src114 := other.ReturnColumns[i]
    if !_tgt.Equals(_src114) { return false }
  }
  if p.Limit != other.Limit { return false }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if p.EndTime != other.EndTime {
    if p.EndTime == nil || other.EndTime == nil {
      return false
    }
    if (*p.EndTime) != (*other.EndTime) { return false }
  }
  if bytes.Compare(p.Filter, other.Filter) != 0 { return false }
  if p.OnlyLatestVersion != other.OnlyLatestVersion { return false }
  if p.EnableReadFromFollower != other.EnableReadFromFollower { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *ScanVertexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanVertexRequest(%+v)", *p)
}

func (p *ScanVertexRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnColumns
//  - Limit
//  - StartTime
//  - EndTime
//  - Filter
//  - OnlyLatestVersion
//  - EnableReadFromFollower
//  - Common
type ScanEdgeRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID]*ScanCursor `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnColumns []*EdgeProp `thrift:"return_columns,3" db:"return_columns" json:"return_columns"`
  Limit int64 `thrift:"limit,4" db:"limit" json:"limit"`
  StartTime *int64 `thrift:"start_time,5" db:"start_time" json:"start_time,omitempty"`
  EndTime *int64 `thrift:"end_time,6" db:"end_time" json:"end_time,omitempty"`
  Filter []byte `thrift:"filter,7" db:"filter" json:"filter,omitempty"`
  OnlyLatestVersion bool `thrift:"only_latest_version,8" db:"only_latest_version" json:"only_latest_version"`
  EnableReadFromFollower bool `thrift:"enable_read_from_follower,9" db:"enable_read_from_follower" json:"enable_read_from_follower"`
  Common *RequestCommon `thrift:"common,10" db:"common" json:"common,omitempty"`
}

func NewScanEdgeRequest() *ScanEdgeRequest {
  return &ScanEdgeRequest{
EnableReadFromFollower: true,
}
}


func (p *ScanEdgeRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ScanEdgeRequest) GetParts() map[nebula.PartitionID]*ScanCursor {
  return p.Parts
}

func (p *ScanEdgeRequest) GetReturnColumns() []*EdgeProp {
  return p.ReturnColumns
}

func (p *ScanEdgeRequest) GetLimit() int64 {
  return p.Limit
}
var ScanEdgeRequest_StartTime_DEFAULT int64
func (p *ScanEdgeRequest) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return ScanEdgeRequest_StartTime_DEFAULT
  }
return *p.StartTime
}
var ScanEdgeRequest_EndTime_DEFAULT int64
func (p *ScanEdgeRequest) GetEndTime() int64 {
  if !p.IsSetEndTime() {
    return ScanEdgeRequest_EndTime_DEFAULT
  }
return *p.EndTime
}
var ScanEdgeRequest_Filter_DEFAULT []byte

func (p *ScanEdgeRequest) GetFilter() []byte {
  return p.Filter
}

func (p *ScanEdgeRequest) GetOnlyLatestVersion() bool {
  return p.OnlyLatestVersion
}

func (p *ScanEdgeRequest) GetEnableReadFromFollower() bool {
  return p.EnableReadFromFollower
}
var ScanEdgeRequest_Common_DEFAULT *RequestCommon
func (p *ScanEdgeRequest) GetCommon() *RequestCommon {
  if !p.IsSetCommon() {
    return ScanEdgeRequest_Common_DEFAULT
  }
return p.Common
}
func (p *ScanEdgeRequest) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *ScanEdgeRequest) IsSetEndTime() bool {
  return p.EndTime != nil
}

func (p *ScanEdgeRequest) IsSetFilter() bool {
  return p.Filter != nil
}

func (p *ScanEdgeRequest) IsSetCommon() bool {
  return p.Common != nil
}

func (p *ScanEdgeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID]*ScanCursor, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key115 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key115 = temp
}
    _val116 := &ScanCursor{}
    if err := _val116.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val116), err)
    }
    p.Parts[_key115] = _val116
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeProp, 0, size)
  p.ReturnColumns =  tSlice
  for i := 0; i < size; i ++ {
    _elem117 := &EdgeProp{}
    if err := _elem117.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem117), err)
    }
    p.ReturnColumns = append(p.ReturnColumns, _elem117)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanEdgeRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = &v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Filter = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OnlyLatestVersion = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EnableReadFromFollower = v
}
  return nil
}

func (p *ScanEdgeRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Common = &RequestCommon{}
  if err := p.Common.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Common), err)
  }
  return nil
}

func (p *ScanEdgeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ScanEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanEdgeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "return_columns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_columns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ReturnColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReturnColumns {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_columns: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "start_time", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTime() {
    if err := oprot.WriteFieldBegin(ctx, "end_time", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EndTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFilter() {
    if err := oprot.WriteFieldBegin(ctx, "filter", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:filter: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Filter); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filter (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:filter: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "only_latest_version", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:only_latest_version: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.OnlyLatestVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.only_latest_version (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:only_latest_version: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enable_read_from_follower", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:enable_read_from_follower: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnableReadFromFollower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable_read_from_follower (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:enable_read_from_follower: ", p), err) }
  return err
}

func (p *ScanEdgeRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCommon() {
    if err := oprot.WriteFieldBegin(ctx, "common", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:common: ", p), err) }
    if err := p.Common.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Common), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:common: ", p), err) }
  }
  return err
}

func (p *ScanEdgeRequest) Equals(other *ScanEdgeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src118 := other.Parts[k]
    if !_tgt.Equals(_src118) { return false }
  }
  if len(p.ReturnColumns) != len(other.ReturnColumns) { return false }
  for i, _tgt := range p.ReturnColumns {
    _src119 := other.ReturnColumns[i]
    if !_tgt.Equals(_src119) { return false }
  }
  if p.Limit != other.Limit { return false }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if p.EndTime != other.EndTime {
    if p.EndTime == nil || other.EndTime == nil {
      return false
    }
    if (*p.EndTime) != (*other.EndTime) { return false }
  }
  if bytes.Compare(p.Filter, other.Filter) != 0 { return false }
  if p.OnlyLatestVersion != other.OnlyLatestVersion { return false }
  if p.EnableReadFromFollower != other.EnableReadFromFollower { return false }
  if !p.Common.Equals(other.Common) { return false }
  return true
}

func (p *ScanEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanEdgeRequest(%+v)", *p)
}

func (p *ScanEdgeRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Props
//  - Cursors
type ScanResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Props *nebula.DataSet `thrift:"props,2" db:"props" json:"props,omitempty"`
  Cursors map[nebula.PartitionID]*ScanCursor `thrift:"cursors,3" db:"cursors" json:"cursors"`
}

func NewScanResponse() *ScanResponse {
  return &ScanResponse{}
}

var ScanResponse_Result__DEFAULT *ResponseCommon
func (p *ScanResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ScanResponse_Result__DEFAULT
  }
return p.Result_
}
var ScanResponse_Props_DEFAULT *nebula.DataSet
func (p *ScanResponse) GetProps() *nebula.DataSet {
  if !p.IsSetProps() {
    return ScanResponse_Props_DEFAULT
  }
return p.Props
}

func (p *ScanResponse) GetCursors() map[nebula.PartitionID]*ScanCursor {
  return p.Cursors
}
func (p *ScanResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ScanResponse) IsSetProps() bool {
  return p.Props != nil
}

func (p *ScanResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ScanResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ScanResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Props = &nebula.DataSet{}
  if err := p.Props.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Props), err)
  }
  return nil
}

func (p *ScanResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID]*ScanCursor, size)
  p.Cursors =  tMap
  for i := 0; i < size; i ++ {
var _key120 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key120 = temp
}
    _val121 := &ScanCursor{}
    if err := _val121.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val121), err)
    }
    p.Cursors[_key120] = _val121
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ScanResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ScanResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ScanResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProps() {
    if err := oprot.WriteFieldBegin(ctx, "props", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:props: ", p), err) }
    if err := p.Props.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Props), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:props: ", p), err) }
  }
  return err
}

func (p *ScanResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cursors", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cursors: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Cursors)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Cursors {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cursors: ", p), err) }
  return err
}

func (p *ScanResponse) Equals(other *ScanResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Props.Equals(other.Props) { return false }
  if len(p.Cursors) != len(other.Cursors) { return false }
  for k, _tgt := range p.Cursors {
    _src122 := other.Cursors[k]
    if !_tgt.Equals(_src122) { return false }
  }
  return true
}

func (p *ScanResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanResponse(%+v)", *p)
}

func (p *ScanResponse) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - TaskSpecificParas
type TaskPara struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula.PartitionID `thrift:"parts,2" db:"parts" json:"parts,omitempty"`
  TaskSpecificParas [][]byte `thrift:"task_specific_paras,3" db:"task_specific_paras" json:"task_specific_paras,omitempty"`
}

func NewTaskPara() *TaskPara {
  return &TaskPara{}
}


func (p *TaskPara) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
var TaskPara_Parts_DEFAULT []nebula.PartitionID

func (p *TaskPara) GetParts() []nebula.PartitionID {
  return p.Parts
}
var TaskPara_TaskSpecificParas_DEFAULT [][]byte

func (p *TaskPara) GetTaskSpecificParas() [][]byte {
  return p.TaskSpecificParas
}
func (p *TaskPara) IsSetParts() bool {
  return p.Parts != nil
}

func (p *TaskPara) IsSetTaskSpecificParas() bool {
  return p.TaskSpecificParas != nil
}

func (p *TaskPara) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskPara)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *TaskPara)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem123 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem123 = temp
}
    p.Parts = append(p.Parts, _elem123)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskPara)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.TaskSpecificParas =  tSlice
  for i := 0; i < size; i ++ {
var _elem124 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem124 = v
}
    p.TaskSpecificParas = append(p.TaskSpecificParas, _elem124)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TaskPara) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TaskPara"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskPara) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TaskPara) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParts() {
    if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Parts)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Parts {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  }
  return err
}

func (p *TaskPara) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskSpecificParas() {
    if err := oprot.WriteFieldBegin(ctx, "task_specific_paras", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_specific_paras: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TaskSpecificParas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskSpecificParas {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_specific_paras: ", p), err) }
  }
  return err
}

func (p *TaskPara) Equals(other *TaskPara) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src125 := other.Parts[i]
    if _tgt != _src125 { return false }
  }
  if len(p.TaskSpecificParas) != len(other.TaskSpecificParas) { return false }
  for i, _tgt := range p.TaskSpecificParas {
    _src126 := other.TaskSpecificParas[i]
    if bytes.Compare(_tgt, _src126) != 0 { return false }
  }
  return true
}

func (p *TaskPara) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskPara(%+v)", *p)
}

func (p *TaskPara) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - ReturnPartly
type KVGetRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][][]byte `thrift:"parts,2" db:"parts" json:"parts"`
  ReturnPartly bool `thrift:"return_partly,3" db:"return_partly" json:"return_partly"`
}

func NewKVGetRequest() *KVGetRequest {
  return &KVGetRequest{}
}


func (p *KVGetRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *KVGetRequest) GetParts() map[nebula.PartitionID][][]byte {
  return p.Parts
}

func (p *KVGetRequest) GetReturnPartly() bool {
  return p.ReturnPartly
}
func (p *KVGetRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVGetRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *KVGetRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][][]byte, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key127 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key127 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val128 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem129 []byte
      if v, err := iprot.ReadBinary(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem129 = v
}
      _val128 = append(_val128, _elem129)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key127] = _val128
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVGetRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReturnPartly = v
}
  return nil
}

func (p *KVGetRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "KVGetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVGetRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVGetRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVGetRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "return_partly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_partly: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ReturnPartly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_partly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_partly: ", p), err) }
  return err
}

func (p *KVGetRequest) Equals(other *KVGetRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src130 := other.Parts[k]
    if len(_tgt) != len(_src130) { return false }
    for i, _tgt := range _tgt {
      _src131 := _src130[i]
      if bytes.Compare(_tgt, _src131) != 0 { return false }
    }
  }
  if p.ReturnPartly != other.ReturnPartly { return false }
  return true
}

func (p *KVGetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVGetRequest(%+v)", *p)
}

func (p *KVGetRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - KeyValues
type KVGetResponse struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  KeyValues map[string][]byte `thrift:"key_values,2" db:"key_values" json:"key_values"`
}

func NewKVGetResponse() *KVGetResponse {
  return &KVGetResponse{}
}

var KVGetResponse_Result__DEFAULT *ResponseCommon
func (p *KVGetResponse) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return KVGetResponse_Result__DEFAULT
  }
return p.Result_
}

func (p *KVGetResponse) GetKeyValues() map[string][]byte {
  return p.KeyValues
}
func (p *KVGetResponse) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *KVGetResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *KVGetResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *KVGetResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.KeyValues =  tMap
  for i := 0; i < size; i ++ {
var _key132 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key132 = v
}
var _val133 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val133 = v
}
    p.KeyValues[_key132] = _val133
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVGetResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "KVGetResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVGetResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *KVGetResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key_values", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key_values: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.KeyValues)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KeyValues {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key_values: ", p), err) }
  return err
}

func (p *KVGetResponse) Equals(other *KVGetResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if len(p.KeyValues) != len(other.KeyValues) { return false }
  for k, _tgt := range p.KeyValues {
    _src134 := other.KeyValues[k]
    if bytes.Compare(_tgt, _src134) != 0 { return false }
  }
  return true
}

func (p *KVGetResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVGetResponse(%+v)", *p)
}

func (p *KVGetResponse) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
type KVPutRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*nebula.KeyValue `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewKVPutRequest() *KVPutRequest {
  return &KVPutRequest{}
}


func (p *KVPutRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *KVPutRequest) GetParts() map[nebula.PartitionID][]*nebula.KeyValue {
  return p.Parts
}
func (p *KVPutRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVPutRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *KVPutRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*nebula.KeyValue, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key135 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key135 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula.KeyValue, 0, size)
    _val136 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem137 := &nebula.KeyValue{}
      if err := _elem137.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem137), err)
      }
      _val136 = append(_val136, _elem137)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key135] = _val136
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVPutRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "KVPutRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVPutRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVPutRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVPutRequest) Equals(other *KVPutRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src138 := other.Parts[k]
    if len(_tgt) != len(_src138) { return false }
    for i, _tgt := range _tgt {
      _src139 := _src138[i]
      if !_tgt.Equals(_src139) { return false }
    }
  }
  return true
}

func (p *KVPutRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVPutRequest(%+v)", *p)
}

func (p *KVPutRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
type KVRemoveRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][][]byte `thrift:"parts,2" db:"parts" json:"parts"`
}

func NewKVRemoveRequest() *KVRemoveRequest {
  return &KVRemoveRequest{}
}


func (p *KVRemoveRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *KVRemoveRequest) GetParts() map[nebula.PartitionID][][]byte {
  return p.Parts
}
func (p *KVRemoveRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KVRemoveRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *KVRemoveRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][][]byte, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key140 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key140 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([][]byte, 0, size)
    _val141 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem142 []byte
      if v, err := iprot.ReadBinary(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem142 = v
}
      _val141 = append(_val141, _elem142)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key140] = _val141
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KVRemoveRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "KVRemoveRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KVRemoveRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *KVRemoveRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *KVRemoveRequest) Equals(other *KVRemoveRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src143 := other.Parts[k]
    if len(_tgt) != len(_src143) { return false }
    for i, _tgt := range _tgt {
      _src144 := _src143[i]
      if bytes.Compare(_tgt, _src144) != 0 { return false }
    }
  }
  return true
}

func (p *KVRemoveRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KVRemoveRequest(%+v)", *p)
}

func (p *KVRemoveRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Stats
type AdminExecResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Stats *meta.StatsItem `thrift:"stats,2" db:"stats" json:"stats,omitempty"`
}

func NewAdminExecResp() *AdminExecResp {
  return &AdminExecResp{}
}

var AdminExecResp_Result__DEFAULT *ResponseCommon
func (p *AdminExecResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return AdminExecResp_Result__DEFAULT
  }
return p.Result_
}
var AdminExecResp_Stats_DEFAULT *meta.StatsItem
func (p *AdminExecResp) GetStats() *meta.StatsItem {
  if !p.IsSetStats() {
    return AdminExecResp_Stats_DEFAULT
  }
return p.Stats
}
func (p *AdminExecResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AdminExecResp) IsSetStats() bool {
  return p.Stats != nil
}

func (p *AdminExecResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *AdminExecResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminExecResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Stats = &meta.StatsItem{}
  if err := p.Stats.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *AdminExecResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdminExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminExecResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AdminExecResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStats() {
    if err := oprot.WriteFieldBegin(ctx, "stats", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stats: ", p), err) }
    if err := p.Stats.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stats: ", p), err) }
  }
  return err
}

func (p *AdminExecResp) Equals(other *AdminExecResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Stats.Equals(other.Stats) { return false }
  return true
}

func (p *AdminExecResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminExecResp(%+v)", *p)
}

func (p *AdminExecResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - NewLeader_
type TransLeaderReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  NewLeader_ *nebula.HostAddr `thrift:"new_leader,3" db:"new_leader" json:"new_leader"`
}

func NewTransLeaderReq() *TransLeaderReq {
  return &TransLeaderReq{}
}


func (p *TransLeaderReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *TransLeaderReq) GetPartID() nebula.PartitionID {
  return p.PartID
}
var TransLeaderReq_NewLeader__DEFAULT *nebula.HostAddr
func (p *TransLeaderReq) GetNewLeader_() *nebula.HostAddr {
  if !p.IsSetNewLeader_() {
    return TransLeaderReq_NewLeader__DEFAULT
  }
return p.NewLeader_
}
func (p *TransLeaderReq) IsSetNewLeader_() bool {
  return p.NewLeader_ != nil
}

func (p *TransLeaderReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransLeaderReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *TransLeaderReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *TransLeaderReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.NewLeader_ = &nebula.HostAddr{}
  if err := p.NewLeader_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewLeader_), err)
  }
  return nil
}

func (p *TransLeaderReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransLeaderReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *TransLeaderReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:new_leader: ", p), err) }
  if err := p.NewLeader_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewLeader_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:new_leader: ", p), err) }
  return err
}

func (p *TransLeaderReq) Equals(other *TransLeaderReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.NewLeader_.Equals(other.NewLeader_) { return false }
  return true
}

func (p *TransLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransLeaderReq(%+v)", *p)
}

func (p *TransLeaderReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - AsLearner
//  - Peers
type AddPartReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  AsLearner bool `thrift:"as_learner,3" db:"as_learner" json:"as_learner"`
  Peers []*nebula.HostAddr `thrift:"peers,4" db:"peers" json:"peers"`
}

func NewAddPartReq() *AddPartReq {
  return &AddPartReq{}
}


func (p *AddPartReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AddPartReq) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *AddPartReq) GetAsLearner() bool {
  return p.AsLearner
}

func (p *AddPartReq) GetPeers() []*nebula.HostAddr {
  return p.Peers
}
func (p *AddPartReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddPartReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddPartReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *AddPartReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AsLearner = v
}
  return nil
}

func (p *AddPartReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem145 := &nebula.HostAddr{}
    if err := _elem145.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem145), err)
    }
    p.Peers = append(p.Peers, _elem145)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddPartReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddPartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddPartReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddPartReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "as_learner", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:as_learner: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AsLearner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.as_learner (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:as_learner: ", p), err) }
  return err
}

func (p *AddPartReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peers", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:peers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:peers: ", p), err) }
  return err
}

func (p *AddPartReq) Equals(other *AddPartReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if p.AsLearner != other.AsLearner { return false }
  if len(p.Peers) != len(other.Peers) { return false }
  for i, _tgt := range p.Peers {
    _src146 := other.Peers[i]
    if !_tgt.Equals(_src146) { return false }
  }
  return true
}

func (p *AddPartReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddPartReq(%+v)", *p)
}

func (p *AddPartReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - Learner
type AddLearnerReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Learner *nebula.HostAddr `thrift:"learner,3" db:"learner" json:"learner"`
}

func NewAddLearnerReq() *AddLearnerReq {
  return &AddLearnerReq{}
}


func (p *AddLearnerReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *AddLearnerReq) GetPartID() nebula.PartitionID {
  return p.PartID
}
var AddLearnerReq_Learner_DEFAULT *nebula.HostAddr
func (p *AddLearnerReq) GetLearner() *nebula.HostAddr {
  if !p.IsSetLearner() {
    return AddLearnerReq_Learner_DEFAULT
  }
return p.Learner
}
func (p *AddLearnerReq) IsSetLearner() bool {
  return p.Learner != nil
}

func (p *AddLearnerReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddLearnerReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddLearnerReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *AddLearnerReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Learner = &nebula.HostAddr{}
  if err := p.Learner.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Learner), err)
  }
  return nil
}

func (p *AddLearnerReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddLearnerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddLearnerReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *AddLearnerReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "learner", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:learner: ", p), err) }
  if err := p.Learner.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Learner), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:learner: ", p), err) }
  return err
}

func (p *AddLearnerReq) Equals(other *AddLearnerReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.Learner.Equals(other.Learner) { return false }
  return true
}

func (p *AddLearnerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddLearnerReq(%+v)", *p)
}

func (p *AddLearnerReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
type RemovePartReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
}

func NewRemovePartReq() *RemovePartReq {
  return &RemovePartReq{}
}


func (p *RemovePartReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *RemovePartReq) GetPartID() nebula.PartitionID {
  return p.PartID
}
func (p *RemovePartReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemovePartReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemovePartReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *RemovePartReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RemovePartReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemovePartReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemovePartReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *RemovePartReq) Equals(other *RemovePartReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  return true
}

func (p *RemovePartReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemovePartReq(%+v)", *p)
}

func (p *RemovePartReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - Peer
//  - Add
type MemberChangeReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peer *nebula.HostAddr `thrift:"peer,3" db:"peer" json:"peer"`
  Add bool `thrift:"add,4" db:"add" json:"add"`
}

func NewMemberChangeReq() *MemberChangeReq {
  return &MemberChangeReq{}
}


func (p *MemberChangeReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *MemberChangeReq) GetPartID() nebula.PartitionID {
  return p.PartID
}
var MemberChangeReq_Peer_DEFAULT *nebula.HostAddr
func (p *MemberChangeReq) GetPeer() *nebula.HostAddr {
  if !p.IsSetPeer() {
    return MemberChangeReq_Peer_DEFAULT
  }
return p.Peer
}

func (p *MemberChangeReq) GetAdd() bool {
  return p.Add
}
func (p *MemberChangeReq) IsSetPeer() bool {
  return p.Peer != nil
}

func (p *MemberChangeReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *MemberChangeReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *MemberChangeReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Peer = &nebula.HostAddr{}
  if err := p.Peer.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Peer), err)
  }
  return nil
}

func (p *MemberChangeReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Add = v
}
  return nil
}

func (p *MemberChangeReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "MemberChangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MemberChangeReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peer", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peer: ", p), err) }
  if err := p.Peer.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Peer), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peer: ", p), err) }
  return err
}

func (p *MemberChangeReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "add", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:add: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Add)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.add (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:add: ", p), err) }
  return err
}

func (p *MemberChangeReq) Equals(other *MemberChangeReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.Peer.Equals(other.Peer) { return false }
  if p.Add != other.Add { return false }
  return true
}

func (p *MemberChangeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MemberChangeReq(%+v)", *p)
}

func (p *MemberChangeReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - Target
type CatchUpDataReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Target *nebula.HostAddr `thrift:"target,3" db:"target" json:"target"`
}

func NewCatchUpDataReq() *CatchUpDataReq {
  return &CatchUpDataReq{}
}


func (p *CatchUpDataReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CatchUpDataReq) GetPartID() nebula.PartitionID {
  return p.PartID
}
var CatchUpDataReq_Target_DEFAULT *nebula.HostAddr
func (p *CatchUpDataReq) GetTarget() *nebula.HostAddr {
  if !p.IsSetTarget() {
    return CatchUpDataReq_Target_DEFAULT
  }
return p.Target
}
func (p *CatchUpDataReq) IsSetTarget() bool {
  return p.Target != nil
}

func (p *CatchUpDataReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatchUpDataReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CatchUpDataReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *CatchUpDataReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Target = &nebula.HostAddr{}
  if err := p.Target.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
  }
  return nil
}

func (p *CatchUpDataReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CatchUpDataReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatchUpDataReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CatchUpDataReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := p.Target.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *CatchUpDataReq) Equals(other *CatchUpDataReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if !p.Target.Equals(other.Target) { return false }
  return true
}

func (p *CatchUpDataReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatchUpDataReq(%+v)", *p)
}

func (p *CatchUpDataReq) Validate() error {
  return nil
}
type GetLeaderReq struct {
}

func NewGetLeaderReq() *GetLeaderReq {
  return &GetLeaderReq{}
}

func (p *GetLeaderReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLeaderReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLeaderReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderReq) Equals(other *GetLeaderReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *GetLeaderReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLeaderReq(%+v)", *p)
}

func (p *GetLeaderReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceIds
//  - Name
type CreateCPRequest struct {
  SpaceIds []nebula.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewCreateCPRequest() *CreateCPRequest {
  return &CreateCPRequest{}
}


func (p *CreateCPRequest) GetSpaceIds() []nebula.GraphSpaceID {
  return p.SpaceIds
}

func (p *CreateCPRequest) GetName() []byte {
  return p.Name
}
func (p *CreateCPRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateCPRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem147 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _elem147 = temp
}
    p.SpaceIds = append(p.SpaceIds, _elem147)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateCPRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateCPRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateCPRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *CreateCPRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *CreateCPRequest) Equals(other *CreateCPRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SpaceIds) != len(other.SpaceIds) { return false }
  for i, _tgt := range p.SpaceIds {
    _src148 := other.SpaceIds[i]
    if _tgt != _src148 { return false }
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  return true
}

func (p *CreateCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateCPRequest(%+v)", *p)
}

func (p *CreateCPRequest) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Info
type CreateCPResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Info []*nebula.CheckpointInfo `thrift:"info,2" db:"info" json:"info"`
}

func NewCreateCPResp() *CreateCPResp {
  return &CreateCPResp{}
}


func (p *CreateCPResp) GetCode() nebula.ErrorCode {
  return p.Code
}

func (p *CreateCPResp) GetInfo() []*nebula.CheckpointInfo {
  return p.Info
}
func (p *CreateCPResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateCPResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *CreateCPResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.CheckpointInfo, 0, size)
  p.Info =  tSlice
  for i := 0; i < size; i ++ {
    _elem149 := &nebula.CheckpointInfo{}
    if err := _elem149.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem149), err)
    }
    p.Info = append(p.Info, _elem149)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateCPResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateCPResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateCPResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateCPResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Info)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Info {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *CreateCPResp) Equals(other *CreateCPResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if len(p.Info) != len(other.Info) { return false }
  for i, _tgt := range p.Info {
    _src150 := other.Info[i]
    if !_tgt.Equals(_src150) { return false }
  }
  return true
}

func (p *CreateCPResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateCPResp(%+v)", *p)
}

func (p *CreateCPResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceIds
//  - Name
type DropCPRequest struct {
  SpaceIds []nebula.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewDropCPRequest() *DropCPRequest {
  return &DropCPRequest{}
}


func (p *DropCPRequest) GetSpaceIds() []nebula.GraphSpaceID {
  return p.SpaceIds
}

func (p *DropCPRequest) GetName() []byte {
  return p.Name
}
func (p *DropCPRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropCPRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem151 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _elem151 = temp
}
    p.SpaceIds = append(p.SpaceIds, _elem151)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropCPRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *DropCPRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropCPRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropCPRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *DropCPRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *DropCPRequest) Equals(other *DropCPRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SpaceIds) != len(other.SpaceIds) { return false }
  for i, _tgt := range p.SpaceIds {
    _src152 := other.SpaceIds[i]
    if _tgt != _src152 { return false }
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  return true
}

func (p *DropCPRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropCPRequest(%+v)", *p)
}

func (p *DropCPRequest) Validate() error {
  return nil
}
// Attributes:
//  - Code
type DropCPResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewDropCPResp() *DropCPResp {
  return &DropCPResp{}
}


func (p *DropCPResp) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *DropCPResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropCPResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *DropCPResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DropCPResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropCPResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *DropCPResp) Equals(other *DropCPResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  return true
}

func (p *DropCPResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropCPResp(%+v)", *p)
}

func (p *DropCPResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceIds
//  - Sign
type BlockingSignRequest struct {
  SpaceIds []nebula.GraphSpaceID `thrift:"space_ids,1" db:"space_ids" json:"space_ids"`
  Sign EngineSignType `thrift:"sign,2,required" db:"sign" json:"sign"`
}

func NewBlockingSignRequest() *BlockingSignRequest {
  return &BlockingSignRequest{}
}


func (p *BlockingSignRequest) GetSpaceIds() []nebula.GraphSpaceID {
  return p.SpaceIds
}

func (p *BlockingSignRequest) GetSign() EngineSignType {
  return p.Sign
}
func (p *BlockingSignRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSign bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSign = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSign{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sign is not set"));
  }
  return nil
}

func (p *BlockingSignRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.GraphSpaceID, 0, size)
  p.SpaceIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem153 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _elem153 = temp
}
    p.SpaceIds = append(p.SpaceIds, _elem153)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BlockingSignRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EngineSignType(v)
  p.Sign = temp
}
  return nil
}

func (p *BlockingSignRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockingSignRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlockingSignRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.SpaceIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpaceIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_ids: ", p), err) }
  return err
}

func (p *BlockingSignRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sign", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sign: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Sign)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sign (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sign: ", p), err) }
  return err
}

func (p *BlockingSignRequest) Equals(other *BlockingSignRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SpaceIds) != len(other.SpaceIds) { return false }
  for i, _tgt := range p.SpaceIds {
    _src154 := other.SpaceIds[i]
    if _tgt != _src154 { return false }
  }
  if p.Sign != other.Sign { return false }
  return true
}

func (p *BlockingSignRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlockingSignRequest(%+v)", *p)
}

func (p *BlockingSignRequest) Validate() error {
  return nil
}
// Attributes:
//  - Code
type BlockingSignResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewBlockingSignResp() *BlockingSignResp {
  return &BlockingSignResp{}
}


func (p *BlockingSignResp) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *BlockingSignResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlockingSignResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *BlockingSignResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockingSignResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlockingSignResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *BlockingSignResp) Equals(other *BlockingSignResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  return true
}

func (p *BlockingSignResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlockingSignResp(%+v)", *p)
}

func (p *BlockingSignResp) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - LeaderParts
type GetLeaderPartsResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  LeaderParts map[nebula.GraphSpaceID][]nebula.PartitionID `thrift:"leader_parts,2" db:"leader_parts" json:"leader_parts"`
}

func NewGetLeaderPartsResp() *GetLeaderPartsResp {
  return &GetLeaderPartsResp{}
}


func (p *GetLeaderPartsResp) GetCode() nebula.ErrorCode {
  return p.Code
}

func (p *GetLeaderPartsResp) GetLeaderParts() map[nebula.GraphSpaceID][]nebula.PartitionID {
  return p.LeaderParts
}
func (p *GetLeaderPartsResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLeaderPartsResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetLeaderPartsResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.GraphSpaceID][]nebula.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
var _key155 nebula.GraphSpaceID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.GraphSpaceID(v)
    _key155 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula.PartitionID, 0, size)
    _val156 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem157 nebula.PartitionID
      if v, err := iprot.ReadI32(ctx); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula.PartitionID(v)
      _elem157 = temp
}
      _val156 = append(_val156, _elem157)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key155] = _val156
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetLeaderPartsResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLeaderPartsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLeaderPartsResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetLeaderPartsResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leader_parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader_parts: ", p), err) }
  return err
}

func (p *GetLeaderPartsResp) Equals(other *GetLeaderPartsResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if len(p.LeaderParts) != len(other.LeaderParts) { return false }
  for k, _tgt := range p.LeaderParts {
    _src158 := other.LeaderParts[k]
    if len(_tgt) != len(_src158) { return false }
    for i, _tgt := range _tgt {
      _src159 := _src158[i]
      if _tgt != _src159 { return false }
    }
  }
  return true
}

func (p *GetLeaderPartsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLeaderPartsResp(%+v)", *p)
}

func (p *GetLeaderPartsResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - PartID
//  - Peers
type CheckPeersReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartID nebula.PartitionID `thrift:"part_id,2" db:"part_id" json:"part_id"`
  Peers []*nebula.HostAddr `thrift:"peers,3" db:"peers" json:"peers"`
}

func NewCheckPeersReq() *CheckPeersReq {
  return &CheckPeersReq{}
}


func (p *CheckPeersReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *CheckPeersReq) GetPartID() nebula.PartitionID {
  return p.PartID
}

func (p *CheckPeersReq) GetPeers() []*nebula.HostAddr {
  return p.Peers
}
func (p *CheckPeersReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPeersReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CheckPeersReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *CheckPeersReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem160 := &nebula.HostAddr{}
    if err := _elem160.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem160), err)
    }
    p.Peers = append(p.Peers, _elem160)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CheckPeersReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CheckPeersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPeersReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "part_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_id: ", p), err) }
  return err
}

func (p *CheckPeersReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *CheckPeersReq) Equals(other *CheckPeersReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if p.PartID != other.PartID { return false }
  if len(p.Peers) != len(other.Peers) { return false }
  for i, _tgt := range p.Peers {
    _src161 := other.Peers[i]
    if !_tgt.Equals(_src161) { return false }
  }
  return true
}

func (p *CheckPeersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckPeersReq(%+v)", *p)
}

func (p *CheckPeersReq) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - IndexID
type RebuildIndexRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts []nebula.PartitionID `thrift:"parts,2" db:"parts" json:"parts"`
  IndexID nebula.IndexID `thrift:"index_id,3" db:"index_id" json:"index_id"`
}

func NewRebuildIndexRequest() *RebuildIndexRequest {
  return &RebuildIndexRequest{}
}


func (p *RebuildIndexRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexRequest) GetParts() []nebula.PartitionID {
  return p.Parts
}

func (p *RebuildIndexRequest) GetIndexID() nebula.IndexID {
  return p.IndexID
}
func (p *RebuildIndexRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RebuildIndexRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem162 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem162 = temp
}
    p.Parts = append(p.Parts, _elem162)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RebuildIndexRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *RebuildIndexRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RebuildIndexRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index_id: ", p), err) }
  return err
}

func (p *RebuildIndexRequest) Equals(other *RebuildIndexRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src163 := other.Parts[i]
    if _tgt != _src163 { return false }
  }
  if p.IndexID != other.IndexID { return false }
  return true
}

func (p *RebuildIndexRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RebuildIndexRequest(%+v)", *p)
}

func (p *RebuildIndexRequest) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - Dir
type ListClusterInfoResp struct {
  Result_ *ResponseCommon `thrift:"result,1,required" db:"result" json:"result"`
  Dir *nebula.DirInfo `thrift:"dir,2" db:"dir" json:"dir"`
}

func NewListClusterInfoResp() *ListClusterInfoResp {
  return &ListClusterInfoResp{}
}

var ListClusterInfoResp_Result__DEFAULT *ResponseCommon
func (p *ListClusterInfoResp) GetResult_() *ResponseCommon {
  if !p.IsSetResult_() {
    return ListClusterInfoResp_Result__DEFAULT
  }
return p.Result_
}
var ListClusterInfoResp_Dir_DEFAULT *nebula.DirInfo
func (p *ListClusterInfoResp) GetDir() *nebula.DirInfo {
  if !p.IsSetDir() {
    return ListClusterInfoResp_Dir_DEFAULT
  }
return p.Dir
}
func (p *ListClusterInfoResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ListClusterInfoResp) IsSetDir() bool {
  return p.Dir != nil
}

func (p *ListClusterInfoResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &ResponseCommon{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Dir = &nebula.DirInfo{}
  if err := p.Dir.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *ListClusterInfoResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListClusterInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dir", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dir: ", p), err) }
  if err := p.Dir.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dir: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) Equals(other *ListClusterInfoResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.Dir.Equals(other.Dir) { return false }
  return true
}

func (p *ListClusterInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListClusterInfoResp(%+v)", *p)
}

func (p *ListClusterInfoResp) Validate() error {
  return nil
}
type ListClusterInfoReq struct {
}

func NewListClusterInfoReq() *ListClusterInfoReq {
  return &ListClusterInfoReq{}
}

func (p *ListClusterInfoReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ListClusterInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoReq) Equals(other *ListClusterInfoReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ListClusterInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListClusterInfoReq(%+v)", *p)
}

func (p *ListClusterInfoReq) Validate() error {
  return nil
}
// Attributes:
//  - JobType
//  - JobID
//  - TaskID
//  - Para
type AddTaskRequest struct {
  JobType meta.JobType `thrift:"job_type,1" db:"job_type" json:"job_type"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,3" db:"task_id" json:"task_id"`
  Para *TaskPara `thrift:"para,4" db:"para" json:"para"`
}

func NewAddTaskRequest() *AddTaskRequest {
  return &AddTaskRequest{}
}


func (p *AddTaskRequest) GetJobType() meta.JobType {
  return p.JobType
}

func (p *AddTaskRequest) GetJobID() int32 {
  return p.JobID
}

func (p *AddTaskRequest) GetTaskID() int32 {
  return p.TaskID
}
var AddTaskRequest_Para_DEFAULT *TaskPara
func (p *AddTaskRequest) GetPara() *TaskPara {
  if !p.IsSetPara() {
    return AddTaskRequest_Para_DEFAULT
  }
return p.Para
}
func (p *AddTaskRequest) IsSetPara() bool {
  return p.Para != nil
}

func (p *AddTaskRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddTaskRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := meta.JobType(v)
  p.JobType = temp
}
  return nil
}

func (p *AddTaskRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *AddTaskRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TaskID = v
}
  return nil
}

func (p *AddTaskRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Para = &TaskPara{}
  if err := p.Para.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Para), err)
  }
  return nil
}

func (p *AddTaskRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddTaskRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_type: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "task_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_id: ", p), err) }
  return err
}

func (p *AddTaskRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "para", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:para: ", p), err) }
  if err := p.Para.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Para), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:para: ", p), err) }
  return err
}

func (p *AddTaskRequest) Equals(other *AddTaskRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobType != other.JobType { return false }
  if p.JobID != other.JobID { return false }
  if p.TaskID != other.TaskID { return false }
  if !p.Para.Equals(other.Para) { return false }
  return true
}

func (p *AddTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddTaskRequest(%+v)", *p)
}

func (p *AddTaskRequest) Validate() error {
  return nil
}
// Attributes:
//  - Code
type AddTaskResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewAddTaskResp() *AddTaskResp {
  return &AddTaskResp{}
}


func (p *AddTaskResp) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *AddTaskResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddTaskResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *AddTaskResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AddTaskResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddTaskResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AddTaskResp) Equals(other *AddTaskResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  return true
}

func (p *AddTaskResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddTaskResp(%+v)", *p)
}

func (p *AddTaskResp) Validate() error {
  return nil
}
// Attributes:
//  - JobID
//  - TaskID
type StopTaskRequest struct {
  JobID int32 `thrift:"job_id,1" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,2" db:"task_id" json:"task_id"`
}

func NewStopTaskRequest() *StopTaskRequest {
  return &StopTaskRequest{}
}


func (p *StopTaskRequest) GetJobID() int32 {
  return p.JobID
}

func (p *StopTaskRequest) GetTaskID() int32 {
  return p.TaskID
}
func (p *StopTaskRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StopTaskRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *StopTaskRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TaskID = v
}
  return nil
}

func (p *StopTaskRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StopTaskRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StopTaskRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "job_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  return err
}

func (p *StopTaskRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "task_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task_id: ", p), err) }
  return err
}

func (p *StopTaskRequest) Equals(other *StopTaskRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JobID != other.JobID { return false }
  if p.TaskID != other.TaskID { return false }
  return true
}

func (p *StopTaskRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StopTaskRequest(%+v)", *p)
}

func (p *StopTaskRequest) Validate() error {
  return nil
}
// Attributes:
//  - Code
type StopTaskResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewStopTaskResp() *StopTaskResp {
  return &StopTaskResp{}
}


func (p *StopTaskResp) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *StopTaskResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StopTaskResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *StopTaskResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StopTaskResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StopTaskResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *StopTaskResp) Equals(other *StopTaskResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  return true
}

func (p *StopTaskResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StopTaskResp(%+v)", *p)
}

func (p *StopTaskResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
type ClearSpaceReq struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewClearSpaceReq() *ClearSpaceReq {
  return &ClearSpaceReq{}
}


func (p *ClearSpaceReq) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}
func (p *ClearSpaceReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ClearSpaceReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ClearSpaceReq) Equals(other *ClearSpaceReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  return true
}

func (p *ClearSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSpaceReq(%+v)", *p)
}

func (p *ClearSpaceReq) Validate() error {
  return nil
}
// Attributes:
//  - Code
type ClearSpaceResp struct {
  Code nebula.ErrorCode `thrift:"code,1" db:"code" json:"code"`
}

func NewClearSpaceResp() *ClearSpaceResp {
  return &ClearSpaceResp{}
}


func (p *ClearSpaceResp) GetCode() nebula.ErrorCode {
  return p.Code
}
func (p *ClearSpaceResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ClearSpaceResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ClearSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ClearSpaceResp) Equals(other *ClearSpaceResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  return true
}

func (p *ClearSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClearSpaceResp(%+v)", *p)
}

func (p *ClearSpaceResp) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - PropNames
//  - IfNotExists
//  - Term
//  - EdgeVersion
type ChainAddEdgesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*NewEdge_ `thrift:"parts,2" db:"parts" json:"parts"`
  PropNames [][]byte `thrift:"prop_names,3" db:"prop_names" json:"prop_names"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
  Term int64 `thrift:"term,5" db:"term" json:"term"`
  EdgeVersion *int64 `thrift:"edge_version,6" db:"edge_version" json:"edge_version,omitempty"`
}

func NewChainAddEdgesRequest() *ChainAddEdgesRequest {
  return &ChainAddEdgesRequest{}
}


func (p *ChainAddEdgesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainAddEdgesRequest) GetParts() map[nebula.PartitionID][]*NewEdge_ {
  return p.Parts
}

func (p *ChainAddEdgesRequest) GetPropNames() [][]byte {
  return p.PropNames
}

func (p *ChainAddEdgesRequest) GetIfNotExists() bool {
  return p.IfNotExists
}

func (p *ChainAddEdgesRequest) GetTerm() int64 {
  return p.Term
}
var ChainAddEdgesRequest_EdgeVersion_DEFAULT int64
func (p *ChainAddEdgesRequest) GetEdgeVersion() int64 {
  if !p.IsSetEdgeVersion() {
    return ChainAddEdgesRequest_EdgeVersion_DEFAULT
  }
return *p.EdgeVersion
}
func (p *ChainAddEdgesRequest) IsSetEdgeVersion() bool {
  return p.EdgeVersion != nil
}

func (p *ChainAddEdgesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*NewEdge_, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key164 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key164 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*NewEdge_, 0, size)
    _val165 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem166 := &NewEdge_{}
      if err := _elem166.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem166), err)
      }
      _val165 = append(_val165, _elem166)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key164] = _val165
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.PropNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem167 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem167 = v
}
    p.PropNames = append(p.PropNames, _elem167)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *ChainAddEdgesRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EdgeVersion = &v
}
  return nil
}

func (p *ChainAddEdgesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChainAddEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainAddEdgesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prop_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prop_names: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PropNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PropNames {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prop_names: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:term: ", p), err) }
  return err
}

func (p *ChainAddEdgesRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEdgeVersion() {
    if err := oprot.WriteFieldBegin(ctx, "edge_version", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:edge_version: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EdgeVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_version (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:edge_version: ", p), err) }
  }
  return err
}

func (p *ChainAddEdgesRequest) Equals(other *ChainAddEdgesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src168 := other.Parts[k]
    if len(_tgt) != len(_src168) { return false }
    for i, _tgt := range _tgt {
      _src169 := _src168[i]
      if !_tgt.Equals(_src169) { return false }
    }
  }
  if len(p.PropNames) != len(other.PropNames) { return false }
  for i, _tgt := range p.PropNames {
    _src170 := other.PropNames[i]
    if bytes.Compare(_tgt, _src170) != 0 { return false }
  }
  if p.IfNotExists != other.IfNotExists { return false }
  if p.Term != other.Term { return false }
  if p.EdgeVersion != other.EdgeVersion {
    if p.EdgeVersion == nil || other.EdgeVersion == nil {
      return false
    }
    if (*p.EdgeVersion) != (*other.EdgeVersion) { return false }
  }
  return true
}

func (p *ChainAddEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChainAddEdgesRequest(%+v)", *p)
}

func (p *ChainAddEdgesRequest) Validate() error {
  return nil
}
// Attributes:
//  - UpdateEdgeRequest
//  - Term
//  - EdgeVersion
//  - SpaceID
//  - Parts
type ChainUpdateEdgeRequest struct {
  UpdateEdgeRequest *UpdateEdgeRequest `thrift:"update_edge_request,1" db:"update_edge_request" json:"update_edge_request"`
  Term int64 `thrift:"term,2" db:"term" json:"term"`
  EdgeVersion *int64 `thrift:"edge_version,3" db:"edge_version" json:"edge_version,omitempty"`
  SpaceID nebula.GraphSpaceID `thrift:"space_id,4" db:"space_id" json:"space_id"`
  Parts []nebula.PartitionID `thrift:"parts,5,required" db:"parts" json:"parts"`
}

func NewChainUpdateEdgeRequest() *ChainUpdateEdgeRequest {
  return &ChainUpdateEdgeRequest{}
}

var ChainUpdateEdgeRequest_UpdateEdgeRequest_DEFAULT *UpdateEdgeRequest
func (p *ChainUpdateEdgeRequest) GetUpdateEdgeRequest() *UpdateEdgeRequest {
  if !p.IsSetUpdateEdgeRequest() {
    return ChainUpdateEdgeRequest_UpdateEdgeRequest_DEFAULT
  }
return p.UpdateEdgeRequest
}

func (p *ChainUpdateEdgeRequest) GetTerm() int64 {
  return p.Term
}
var ChainUpdateEdgeRequest_EdgeVersion_DEFAULT int64
func (p *ChainUpdateEdgeRequest) GetEdgeVersion() int64 {
  if !p.IsSetEdgeVersion() {
    return ChainUpdateEdgeRequest_EdgeVersion_DEFAULT
  }
return *p.EdgeVersion
}

func (p *ChainUpdateEdgeRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainUpdateEdgeRequest) GetParts() []nebula.PartitionID {
  return p.Parts
}
func (p *ChainUpdateEdgeRequest) IsSetUpdateEdgeRequest() bool {
  return p.UpdateEdgeRequest != nil
}

func (p *ChainUpdateEdgeRequest) IsSetEdgeVersion() bool {
  return p.EdgeVersion != nil
}

func (p *ChainUpdateEdgeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetParts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetParts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetParts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parts is not set"));
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.UpdateEdgeRequest = &UpdateEdgeRequest{}
  if err := p.UpdateEdgeRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateEdgeRequest), err)
  }
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EdgeVersion = &v
}
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ChainUpdateEdgeRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula.PartitionID, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
var _elem171 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _elem171 = temp
}
    p.Parts = append(p.Parts, _elem171)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChainUpdateEdgeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChainUpdateEdgeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainUpdateEdgeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "update_edge_request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:update_edge_request: ", p), err) }
  if err := p.UpdateEdgeRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateEdgeRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:update_edge_request: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEdgeVersion() {
    if err := oprot.WriteFieldBegin(ctx, "edge_version", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_version: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EdgeVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_version (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_version: ", p), err) }
  }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_id: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:parts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:parts: ", p), err) }
  return err
}

func (p *ChainUpdateEdgeRequest) Equals(other *ChainUpdateEdgeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.UpdateEdgeRequest.Equals(other.UpdateEdgeRequest) { return false }
  if p.Term != other.Term { return false }
  if p.EdgeVersion != other.EdgeVersion {
    if p.EdgeVersion == nil || other.EdgeVersion == nil {
      return false
    }
    if (*p.EdgeVersion) != (*other.EdgeVersion) { return false }
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for i, _tgt := range p.Parts {
    _src172 := other.Parts[i]
    if _tgt != _src172 { return false }
  }
  return true
}

func (p *ChainUpdateEdgeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChainUpdateEdgeRequest(%+v)", *p)
}

func (p *ChainUpdateEdgeRequest) Validate() error {
  return nil
}
// Attributes:
//  - SpaceID
//  - Parts
//  - TxnID
//  - Term
type ChainDeleteEdgesRequest struct {
  SpaceID nebula.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Parts map[nebula.PartitionID][]*EdgeKey `thrift:"parts,2" db:"parts" json:"parts"`
  TxnID []byte `thrift:"txn_id,3" db:"txn_id" json:"txn_id"`
  Term int64 `thrift:"term,4" db:"term" json:"term"`
}

func NewChainDeleteEdgesRequest() *ChainDeleteEdgesRequest {
  return &ChainDeleteEdgesRequest{}
}


func (p *ChainDeleteEdgesRequest) GetSpaceID() nebula.GraphSpaceID {
  return p.SpaceID
}

func (p *ChainDeleteEdgesRequest) GetParts() map[nebula.PartitionID][]*EdgeKey {
  return p.Parts
}

func (p *ChainDeleteEdgesRequest) GetTxnID() []byte {
  return p.TxnID
}

func (p *ChainDeleteEdgesRequest) GetTerm() int64 {
  return p.Term
}
func (p *ChainDeleteEdgesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula.PartitionID][]*EdgeKey, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key173 nebula.PartitionID
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula.PartitionID(v)
    _key173 = temp
}
    _, size, err := iprot.ReadListBegin(ctx)
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*EdgeKey, 0, size)
    _val174 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem175 := &EdgeKey{}
      if err := _elem175.Read(ctx, iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem175), err)
      }
      _val174 = append(_val174, _elem175)
    }
    if err := iprot.ReadListEnd(ctx); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key173] = _val174
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TxnID = v
}
  return nil
}

func (p *ChainDeleteEdgesRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *ChainDeleteEdgesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChainDeleteEdgesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChainDeleteEdgesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parts", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parts: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "txn_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:txn_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TxnID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txn_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:txn_id: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:term: ", p), err) }
  return err
}

func (p *ChainDeleteEdgesRequest) Equals(other *ChainDeleteEdgesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpaceID != other.SpaceID { return false }
  if len(p.Parts) != len(other.Parts) { return false }
  for k, _tgt := range p.Parts {
    _src176 := other.Parts[k]
    if len(_tgt) != len(_src176) { return false }
    for i, _tgt := range _tgt {
      _src177 := _src176[i]
      if !_tgt.Equals(_src177) { return false }
    }
  }
  if bytes.Compare(p.TxnID, other.TxnID) != 0 { return false }
  if p.Term != other.Term { return false }
  return true
}

func (p *ChainDeleteEdgesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChainDeleteEdgesRequest(%+v)", *p)
}

func (p *ChainDeleteEdgesRequest) Validate() error {
  return nil
}
type GraphStorageService interface {
  // Parameters:
  //  - Req
  GetNeighbors(ctx context.Context, req *GetNeighborsRequest) (_r *GetNeighborsResponse, _err error)
  // Parameters:
  //  - Req
  GetDstBySrc(ctx context.Context, req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, _err error)
  // Parameters:
  //  - Req
  GetProps(ctx context.Context, req *GetPropRequest) (_r *GetPropResponse, _err error)
  // Parameters:
  //  - Req
  AddVertices(ctx context.Context, req *AddVerticesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  AddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  DeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  DeleteVertices(ctx context.Context, req *DeleteVerticesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  DeleteTags(ctx context.Context, req *DeleteTagsRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  UpdateVertex(ctx context.Context, req *UpdateVertexRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Req
  UpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Req
  ScanVertex(ctx context.Context, req *ScanVertexRequest) (_r *ScanResponse, _err error)
  // Parameters:
  //  - Req
  ScanEdge(ctx context.Context, req *ScanEdgeRequest) (_r *ScanResponse, _err error)
  // Parameters:
  //  - Req
  GetUUID(ctx context.Context, req *GetUUIDReq) (_r *GetUUIDResp, _err error)
  // Parameters:
  //  - Req
  LookupIndex(ctx context.Context, req *LookupIndexRequest) (_r *LookupIndexResp, _err error)
  // Parameters:
  //  - Req
  LookupAndTraverse(ctx context.Context, req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, _err error)
  // Parameters:
  //  - Req
  ChainUpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Req
  ChainAddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  ChainDeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  Get(ctx context.Context, req *KVGetRequest) (_r *KVGetResponse, _err error)
  // Parameters:
  //  - Req
  Put(ctx context.Context, req *KVPutRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  Remove(ctx context.Context, req *KVRemoveRequest) (_r *ExecResponse, _err error)
}

type GraphStorageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewGraphStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GraphStorageServiceClient {
  return &GraphStorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGraphStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GraphStorageServiceClient {
  return &GraphStorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGraphStorageServiceClient(c thrift.TClient) *GraphStorageServiceClient {
  return &GraphStorageServiceClient{
    c: c,
  }
}

func (p *GraphStorageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *GraphStorageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *GraphStorageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetNeighbors(ctx context.Context, req *GetNeighborsRequest) (_r *GetNeighborsResponse, _err error) {
  var _args178 GraphStorageServiceGetNeighborsArgs
  _args178.Req = req
  var _result180 GraphStorageServiceGetNeighborsResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "getNeighbors", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  if _ret181 := _result180.GetSuccess(); _ret181 != nil {
    return _ret181, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getNeighbors failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetDstBySrc(ctx context.Context, req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, _err error) {
  var _args182 GraphStorageServiceGetDstBySrcArgs
  _args182.Req = req
  var _result184 GraphStorageServiceGetDstBySrcResult
  var _meta183 thrift.ResponseMeta
  _meta183, _err = p.Client_().Call(ctx, "getDstBySrc", &_args182, &_result184)
  p.SetLastResponseMeta_(_meta183)
  if _err != nil {
    return
  }
  if _ret185 := _result184.GetSuccess(); _ret185 != nil {
    return _ret185, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getDstBySrc failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetProps(ctx context.Context, req *GetPropRequest) (_r *GetPropResponse, _err error) {
  var _args186 GraphStorageServiceGetPropsArgs
  _args186.Req = req
  var _result188 GraphStorageServiceGetPropsResult
  var _meta187 thrift.ResponseMeta
  _meta187, _err = p.Client_().Call(ctx, "getProps", &_args186, &_result188)
  p.SetLastResponseMeta_(_meta187)
  if _err != nil {
    return
  }
  if _ret189 := _result188.GetSuccess(); _ret189 != nil {
    return _ret189, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getProps failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) AddVertices(ctx context.Context, req *AddVerticesRequest) (_r *ExecResponse, _err error) {
  var _args190 GraphStorageServiceAddVerticesArgs
  _args190.Req = req
  var _result192 GraphStorageServiceAddVerticesResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "addVertices", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  if _ret193 := _result192.GetSuccess(); _ret193 != nil {
    return _ret193, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addVertices failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) AddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, _err error) {
  var _args194 GraphStorageServiceAddEdgesArgs
  _args194.Req = req
  var _result196 GraphStorageServiceAddEdgesResult
  var _meta195 thrift.ResponseMeta
  _meta195, _err = p.Client_().Call(ctx, "addEdges", &_args194, &_result196)
  p.SetLastResponseMeta_(_meta195)
  if _err != nil {
    return
  }
  if _ret197 := _result196.GetSuccess(); _ret197 != nil {
    return _ret197, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, _err error) {
  var _args198 GraphStorageServiceDeleteEdgesArgs
  _args198.Req = req
  var _result200 GraphStorageServiceDeleteEdgesResult
  var _meta199 thrift.ResponseMeta
  _meta199, _err = p.Client_().Call(ctx, "deleteEdges", &_args198, &_result200)
  p.SetLastResponseMeta_(_meta199)
  if _err != nil {
    return
  }
  if _ret201 := _result200.GetSuccess(); _ret201 != nil {
    return _ret201, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "deleteEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteVertices(ctx context.Context, req *DeleteVerticesRequest) (_r *ExecResponse, _err error) {
  var _args202 GraphStorageServiceDeleteVerticesArgs
  _args202.Req = req
  var _result204 GraphStorageServiceDeleteVerticesResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "deleteVertices", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  if _ret205 := _result204.GetSuccess(); _ret205 != nil {
    return _ret205, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "deleteVertices failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteTags(ctx context.Context, req *DeleteTagsRequest) (_r *ExecResponse, _err error) {
  var _args206 GraphStorageServiceDeleteTagsArgs
  _args206.Req = req
  var _result208 GraphStorageServiceDeleteTagsResult
  var _meta207 thrift.ResponseMeta
  _meta207, _err = p.Client_().Call(ctx, "deleteTags", &_args206, &_result208)
  p.SetLastResponseMeta_(_meta207)
  if _err != nil {
    return
  }
  if _ret209 := _result208.GetSuccess(); _ret209 != nil {
    return _ret209, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "deleteTags failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) UpdateVertex(ctx context.Context, req *UpdateVertexRequest) (_r *UpdateResponse, _err error) {
  var _args210 GraphStorageServiceUpdateVertexArgs
  _args210.Req = req
  var _result212 GraphStorageServiceUpdateVertexResult
  var _meta211 thrift.ResponseMeta
  _meta211, _err = p.Client_().Call(ctx, "updateVertex", &_args210, &_result212)
  p.SetLastResponseMeta_(_meta211)
  if _err != nil {
    return
  }
  if _ret213 := _result212.GetSuccess(); _ret213 != nil {
    return _ret213, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateVertex failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) UpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, _err error) {
  var _args214 GraphStorageServiceUpdateEdgeArgs
  _args214.Req = req
  var _result216 GraphStorageServiceUpdateEdgeResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "updateEdge", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  if _ret217 := _result216.GetSuccess(); _ret217 != nil {
    return _ret217, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ScanVertex(ctx context.Context, req *ScanVertexRequest) (_r *ScanResponse, _err error) {
  var _args218 GraphStorageServiceScanVertexArgs
  _args218.Req = req
  var _result220 GraphStorageServiceScanVertexResult
  var _meta219 thrift.ResponseMeta
  _meta219, _err = p.Client_().Call(ctx, "scanVertex", &_args218, &_result220)
  p.SetLastResponseMeta_(_meta219)
  if _err != nil {
    return
  }
  if _ret221 := _result220.GetSuccess(); _ret221 != nil {
    return _ret221, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scanVertex failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ScanEdge(ctx context.Context, req *ScanEdgeRequest) (_r *ScanResponse, _err error) {
  var _args222 GraphStorageServiceScanEdgeArgs
  _args222.Req = req
  var _result224 GraphStorageServiceScanEdgeResult
  var _meta223 thrift.ResponseMeta
  _meta223, _err = p.Client_().Call(ctx, "scanEdge", &_args222, &_result224)
  p.SetLastResponseMeta_(_meta223)
  if _err != nil {
    return
  }
  if _ret225 := _result224.GetSuccess(); _ret225 != nil {
    return _ret225, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "scanEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetUUID(ctx context.Context, req *GetUUIDReq) (_r *GetUUIDResp, _err error) {
  var _args226 GraphStorageServiceGetUUIDArgs
  _args226.Req = req
  var _result228 GraphStorageServiceGetUUIDResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "getUUID", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  if _ret229 := _result228.GetSuccess(); _ret229 != nil {
    return _ret229, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getUUID failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) LookupIndex(ctx context.Context, req *LookupIndexRequest) (_r *LookupIndexResp, _err error) {
  var _args230 GraphStorageServiceLookupIndexArgs
  _args230.Req = req
  var _result232 GraphStorageServiceLookupIndexResult
  var _meta231 thrift.ResponseMeta
  _meta231, _err = p.Client_().Call(ctx, "lookupIndex", &_args230, &_result232)
  p.SetLastResponseMeta_(_meta231)
  if _err != nil {
    return
  }
  if _ret233 := _result232.GetSuccess(); _ret233 != nil {
    return _ret233, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "lookupIndex failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) LookupAndTraverse(ctx context.Context, req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, _err error) {
  var _args234 GraphStorageServiceLookupAndTraverseArgs
  _args234.Req = req
  var _result236 GraphStorageServiceLookupAndTraverseResult
  var _meta235 thrift.ResponseMeta
  _meta235, _err = p.Client_().Call(ctx, "lookupAndTraverse", &_args234, &_result236)
  p.SetLastResponseMeta_(_meta235)
  if _err != nil {
    return
  }
  if _ret237 := _result236.GetSuccess(); _ret237 != nil {
    return _ret237, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "lookupAndTraverse failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainUpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, _err error) {
  var _args238 GraphStorageServiceChainUpdateEdgeArgs
  _args238.Req = req
  var _result240 GraphStorageServiceChainUpdateEdgeResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "chainUpdateEdge", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  if _ret241 := _result240.GetSuccess(); _ret241 != nil {
    return _ret241, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainUpdateEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainAddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, _err error) {
  var _args242 GraphStorageServiceChainAddEdgesArgs
  _args242.Req = req
  var _result244 GraphStorageServiceChainAddEdgesResult
  var _meta243 thrift.ResponseMeta
  _meta243, _err = p.Client_().Call(ctx, "chainAddEdges", &_args242, &_result244)
  p.SetLastResponseMeta_(_meta243)
  if _err != nil {
    return
  }
  if _ret245 := _result244.GetSuccess(); _ret245 != nil {
    return _ret245, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainAddEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainDeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, _err error) {
  var _args246 GraphStorageServiceChainDeleteEdgesArgs
  _args246.Req = req
  var _result248 GraphStorageServiceChainDeleteEdgesResult
  var _meta247 thrift.ResponseMeta
  _meta247, _err = p.Client_().Call(ctx, "chainDeleteEdges", &_args246, &_result248)
  p.SetLastResponseMeta_(_meta247)
  if _err != nil {
    return
  }
  if _ret249 := _result248.GetSuccess(); _ret249 != nil {
    return _ret249, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainDeleteEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Get(ctx context.Context, req *KVGetRequest) (_r *KVGetResponse, _err error) {
  var _args250 GraphStorageServiceGetArgs
  _args250.Req = req
  var _result252 GraphStorageServiceGetResult
  var _meta251 thrift.ResponseMeta
  _meta251, _err = p.Client_().Call(ctx, "get", &_args250, &_result252)
  p.SetLastResponseMeta_(_meta251)
  if _err != nil {
    return
  }
  if _ret253 := _result252.GetSuccess(); _ret253 != nil {
    return _ret253, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Put(ctx context.Context, req *KVPutRequest) (_r *ExecResponse, _err error) {
  var _args254 GraphStorageServicePutArgs
  _args254.Req = req
  var _result256 GraphStorageServicePutResult
  var _meta255 thrift.ResponseMeta
  _meta255, _err = p.Client_().Call(ctx, "put", &_args254, &_result256)
  p.SetLastResponseMeta_(_meta255)
  if _err != nil {
    return
  }
  if _ret257 := _result256.GetSuccess(); _ret257 != nil {
    return _ret257, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "put failed: unknown result")
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Remove(ctx context.Context, req *KVRemoveRequest) (_r *ExecResponse, _err error) {
  var _args258 GraphStorageServiceRemoveArgs
  _args258.Req = req
  var _result260 GraphStorageServiceRemoveResult
  var _meta259 thrift.ResponseMeta
  _meta259, _err = p.Client_().Call(ctx, "remove", &_args258, &_result260)
  p.SetLastResponseMeta_(_meta259)
  if _err != nil {
    return
  }
  if _ret261 := _result260.GetSuccess(); _ret261 != nil {
    return _ret261, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "remove failed: unknown result")
}

type GraphStorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler GraphStorageService
}

func (p *GraphStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GraphStorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GraphStorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGraphStorageServiceProcessor(handler GraphStorageService) *GraphStorageServiceProcessor {

  self262 := &GraphStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self262.processorMap["getNeighbors"] = &graphStorageServiceProcessorGetNeighbors{handler:handler}
  self262.processorMap["getDstBySrc"] = &graphStorageServiceProcessorGetDstBySrc{handler:handler}
  self262.processorMap["getProps"] = &graphStorageServiceProcessorGetProps{handler:handler}
  self262.processorMap["addVertices"] = &graphStorageServiceProcessorAddVertices{handler:handler}
  self262.processorMap["addEdges"] = &graphStorageServiceProcessorAddEdges{handler:handler}
  self262.processorMap["deleteEdges"] = &graphStorageServiceProcessorDeleteEdges{handler:handler}
  self262.processorMap["deleteVertices"] = &graphStorageServiceProcessorDeleteVertices{handler:handler}
  self262.processorMap["deleteTags"] = &graphStorageServiceProcessorDeleteTags{handler:handler}
  self262.processorMap["updateVertex"] = &graphStorageServiceProcessorUpdateVertex{handler:handler}
  self262.processorMap["updateEdge"] = &graphStorageServiceProcessorUpdateEdge{handler:handler}
  self262.processorMap["scanVertex"] = &graphStorageServiceProcessorScanVertex{handler:handler}
  self262.processorMap["scanEdge"] = &graphStorageServiceProcessorScanEdge{handler:handler}
  self262.processorMap["getUUID"] = &graphStorageServiceProcessorGetUUID{handler:handler}
  self262.processorMap["lookupIndex"] = &graphStorageServiceProcessorLookupIndex{handler:handler}
  self262.processorMap["lookupAndTraverse"] = &graphStorageServiceProcessorLookupAndTraverse{handler:handler}
  self262.processorMap["chainUpdateEdge"] = &graphStorageServiceProcessorChainUpdateEdge{handler:handler}
  self262.processorMap["chainAddEdges"] = &graphStorageServiceProcessorChainAddEdges{handler:handler}
  self262.processorMap["chainDeleteEdges"] = &graphStorageServiceProcessorChainDeleteEdges{handler:handler}
  self262.processorMap["get"] = &graphStorageServiceProcessorGet{handler:handler}
  self262.processorMap["put"] = &graphStorageServiceProcessorPut{handler:handler}
  self262.processorMap["remove"] = &graphStorageServiceProcessorRemove{handler:handler}
return self262
}

func (p *GraphStorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x263 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x263.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x263

}

type graphStorageServiceProcessorGetNeighbors struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorGetNeighbors) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err264 error
  args := GraphStorageServiceGetNeighborsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getNeighbors", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceGetNeighborsResult{}
  if retval, err2 := p.handler.GetNeighbors(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc265 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNeighbors: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getNeighbors", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err264 = thrift.WrapTException(err2)
    }
    if err2 := _exc265.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
      _write_err264 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
      _write_err264 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
      _write_err264 = thrift.WrapTException(err2)
    }
    if _write_err264 != nil {
      return false, thrift.WrapTException(_write_err264)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getNeighbors", thrift.REPLY, seqId); err2 != nil {
    _write_err264 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
    _write_err264 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
    _write_err264 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
    _write_err264 = thrift.WrapTException(err2)
  }
  if _write_err264 != nil {
    return false, thrift.WrapTException(_write_err264)
  }
  return true, err
}

type graphStorageServiceProcessorGetDstBySrc struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorGetDstBySrc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err266 error
  args := GraphStorageServiceGetDstBySrcArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getDstBySrc", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceGetDstBySrcResult{}
  if retval, err2 := p.handler.GetDstBySrc(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc267 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDstBySrc: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getDstBySrc", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err266 = thrift.WrapTException(err2)
    }
    if err2 := _exc267.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
      _write_err266 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
      _write_err266 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
      _write_err266 = thrift.WrapTException(err2)
    }
    if _write_err266 != nil {
      return false, thrift.WrapTException(_write_err266)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getDstBySrc", thrift.REPLY, seqId); err2 != nil {
    _write_err266 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
    _write_err266 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
    _write_err266 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
    _write_err266 = thrift.WrapTException(err2)
  }
  if _write_err266 != nil {
    return false, thrift.WrapTException(_write_err266)
  }
  return true, err
}

type graphStorageServiceProcessorGetProps struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorGetProps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err268 error
  args := GraphStorageServiceGetPropsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getProps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceGetPropsResult{}
  if retval, err2 := p.handler.GetProps(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc269 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProps: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getProps", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err268 = thrift.WrapTException(err2)
    }
    if err2 := _exc269.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
      _write_err268 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
      _write_err268 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
      _write_err268 = thrift.WrapTException(err2)
    }
    if _write_err268 != nil {
      return false, thrift.WrapTException(_write_err268)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getProps", thrift.REPLY, seqId); err2 != nil {
    _write_err268 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
    _write_err268 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
    _write_err268 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
    _write_err268 = thrift.WrapTException(err2)
  }
  if _write_err268 != nil {
    return false, thrift.WrapTException(_write_err268)
  }
  return true, err
}

type graphStorageServiceProcessorAddVertices struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorAddVertices) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err270 error
  args := GraphStorageServiceAddVerticesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addVertices", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceAddVerticesResult{}
  if retval, err2 := p.handler.AddVertices(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc271 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addVertices: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addVertices", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err270 = thrift.WrapTException(err2)
    }
    if err2 := _exc271.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
      _write_err270 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
      _write_err270 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
      _write_err270 = thrift.WrapTException(err2)
    }
    if _write_err270 != nil {
      return false, thrift.WrapTException(_write_err270)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addVertices", thrift.REPLY, seqId); err2 != nil {
    _write_err270 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
    _write_err270 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
    _write_err270 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
    _write_err270 = thrift.WrapTException(err2)
  }
  if _write_err270 != nil {
    return false, thrift.WrapTException(_write_err270)
  }
  return true, err
}

type graphStorageServiceProcessorAddEdges struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorAddEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err272 error
  args := GraphStorageServiceAddEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceAddEdgesResult{}
  if retval, err2 := p.handler.AddEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc273 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err272 = thrift.WrapTException(err2)
    }
    if err2 := _exc273.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
      _write_err272 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
      _write_err272 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
      _write_err272 = thrift.WrapTException(err2)
    }
    if _write_err272 != nil {
      return false, thrift.WrapTException(_write_err272)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err272 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
    _write_err272 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
    _write_err272 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
    _write_err272 = thrift.WrapTException(err2)
  }
  if _write_err272 != nil {
    return false, thrift.WrapTException(_write_err272)
  }
  return true, err
}

type graphStorageServiceProcessorDeleteEdges struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorDeleteEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err274 error
  args := GraphStorageServiceDeleteEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceDeleteEdgesResult{}
  if retval, err2 := p.handler.DeleteEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc275 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "deleteEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err274 = thrift.WrapTException(err2)
    }
    if err2 := _exc275.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
      _write_err274 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
      _write_err274 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
      _write_err274 = thrift.WrapTException(err2)
    }
    if _write_err274 != nil {
      return false, thrift.WrapTException(_write_err274)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "deleteEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err274 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
    _write_err274 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
    _write_err274 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
    _write_err274 = thrift.WrapTException(err2)
  }
  if _write_err274 != nil {
    return false, thrift.WrapTException(_write_err274)
  }
  return true, err
}

type graphStorageServiceProcessorDeleteVertices struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorDeleteVertices) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err276 error
  args := GraphStorageServiceDeleteVerticesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteVertices", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceDeleteVerticesResult{}
  if retval, err2 := p.handler.DeleteVertices(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc277 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteVertices: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "deleteVertices", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err276 = thrift.WrapTException(err2)
    }
    if err2 := _exc277.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
      _write_err276 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
      _write_err276 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
      _write_err276 = thrift.WrapTException(err2)
    }
    if _write_err276 != nil {
      return false, thrift.WrapTException(_write_err276)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "deleteVertices", thrift.REPLY, seqId); err2 != nil {
    _write_err276 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
    _write_err276 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
    _write_err276 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
    _write_err276 = thrift.WrapTException(err2)
  }
  if _write_err276 != nil {
    return false, thrift.WrapTException(_write_err276)
  }
  return true, err
}

type graphStorageServiceProcessorDeleteTags struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorDeleteTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err278 error
  args := GraphStorageServiceDeleteTagsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteTags", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceDeleteTagsResult{}
  if retval, err2 := p.handler.DeleteTags(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc279 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTags: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "deleteTags", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err278 = thrift.WrapTException(err2)
    }
    if err2 := _exc279.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
      _write_err278 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
      _write_err278 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
      _write_err278 = thrift.WrapTException(err2)
    }
    if _write_err278 != nil {
      return false, thrift.WrapTException(_write_err278)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "deleteTags", thrift.REPLY, seqId); err2 != nil {
    _write_err278 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
    _write_err278 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
    _write_err278 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
    _write_err278 = thrift.WrapTException(err2)
  }
  if _write_err278 != nil {
    return false, thrift.WrapTException(_write_err278)
  }
  return true, err
}

type graphStorageServiceProcessorUpdateVertex struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorUpdateVertex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err280 error
  args := GraphStorageServiceUpdateVertexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateVertex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceUpdateVertexResult{}
  if retval, err2 := p.handler.UpdateVertex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc281 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateVertex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "updateVertex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err280 = thrift.WrapTException(err2)
    }
    if err2 := _exc281.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
      _write_err280 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
      _write_err280 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
      _write_err280 = thrift.WrapTException(err2)
    }
    if _write_err280 != nil {
      return false, thrift.WrapTException(_write_err280)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "updateVertex", thrift.REPLY, seqId); err2 != nil {
    _write_err280 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
    _write_err280 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
    _write_err280 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
    _write_err280 = thrift.WrapTException(err2)
  }
  if _write_err280 != nil {
    return false, thrift.WrapTException(_write_err280)
  }
  return true, err
}

type graphStorageServiceProcessorUpdateEdge struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorUpdateEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err282 error
  args := GraphStorageServiceUpdateEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceUpdateEdgeResult{}
  if retval, err2 := p.handler.UpdateEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc283 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "updateEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err282 = thrift.WrapTException(err2)
    }
    if err2 := _exc283.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
      _write_err282 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
      _write_err282 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
      _write_err282 = thrift.WrapTException(err2)
    }
    if _write_err282 != nil {
      return false, thrift.WrapTException(_write_err282)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "updateEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err282 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
    _write_err282 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
    _write_err282 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
    _write_err282 = thrift.WrapTException(err2)
  }
  if _write_err282 != nil {
    return false, thrift.WrapTException(_write_err282)
  }
  return true, err
}

type graphStorageServiceProcessorScanVertex struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorScanVertex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err284 error
  args := GraphStorageServiceScanVertexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "scanVertex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceScanVertexResult{}
  if retval, err2 := p.handler.ScanVertex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc285 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scanVertex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "scanVertex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err284 = thrift.WrapTException(err2)
    }
    if err2 := _exc285.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
      _write_err284 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
      _write_err284 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
      _write_err284 = thrift.WrapTException(err2)
    }
    if _write_err284 != nil {
      return false, thrift.WrapTException(_write_err284)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "scanVertex", thrift.REPLY, seqId); err2 != nil {
    _write_err284 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
    _write_err284 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
    _write_err284 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
    _write_err284 = thrift.WrapTException(err2)
  }
  if _write_err284 != nil {
    return false, thrift.WrapTException(_write_err284)
  }
  return true, err
}

type graphStorageServiceProcessorScanEdge struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorScanEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err286 error
  args := GraphStorageServiceScanEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "scanEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceScanEdgeResult{}
  if retval, err2 := p.handler.ScanEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc287 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scanEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "scanEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err286 = thrift.WrapTException(err2)
    }
    if err2 := _exc287.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
      _write_err286 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
      _write_err286 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
      _write_err286 = thrift.WrapTException(err2)
    }
    if _write_err286 != nil {
      return false, thrift.WrapTException(_write_err286)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "scanEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err286 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
    _write_err286 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
    _write_err286 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
    _write_err286 = thrift.WrapTException(err2)
  }
  if _write_err286 != nil {
    return false, thrift.WrapTException(_write_err286)
  }
  return true, err
}

type graphStorageServiceProcessorGetUUID struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorGetUUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err288 error
  args := GraphStorageServiceGetUUIDArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getUUID", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceGetUUIDResult{}
  if retval, err2 := p.handler.GetUUID(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc289 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUUID: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getUUID", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err288 = thrift.WrapTException(err2)
    }
    if err2 := _exc289.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
      _write_err288 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
      _write_err288 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
      _write_err288 = thrift.WrapTException(err2)
    }
    if _write_err288 != nil {
      return false, thrift.WrapTException(_write_err288)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getUUID", thrift.REPLY, seqId); err2 != nil {
    _write_err288 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
    _write_err288 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
    _write_err288 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
    _write_err288 = thrift.WrapTException(err2)
  }
  if _write_err288 != nil {
    return false, thrift.WrapTException(_write_err288)
  }
  return true, err
}

type graphStorageServiceProcessorLookupIndex struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorLookupIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err290 error
  args := GraphStorageServiceLookupIndexArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "lookupIndex", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceLookupIndexResult{}
  if retval, err2 := p.handler.LookupIndex(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc291 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupIndex: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "lookupIndex", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err290 = thrift.WrapTException(err2)
    }
    if err2 := _exc291.Write(ctx, oprot); _write_err290 == nil && err2 != nil {
      _write_err290 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err290 == nil && err2 != nil {
      _write_err290 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err290 == nil && err2 != nil {
      _write_err290 = thrift.WrapTException(err2)
    }
    if _write_err290 != nil {
      return false, thrift.WrapTException(_write_err290)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "lookupIndex", thrift.REPLY, seqId); err2 != nil {
    _write_err290 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err290 == nil && err2 != nil {
    _write_err290 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err290 == nil && err2 != nil {
    _write_err290 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err290 == nil && err2 != nil {
    _write_err290 = thrift.WrapTException(err2)
  }
  if _write_err290 != nil {
    return false, thrift.WrapTException(_write_err290)
  }
  return true, err
}

type graphStorageServiceProcessorLookupAndTraverse struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorLookupAndTraverse) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err292 error
  args := GraphStorageServiceLookupAndTraverseArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "lookupAndTraverse", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceLookupAndTraverseResult{}
  if retval, err2 := p.handler.LookupAndTraverse(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc293 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupAndTraverse: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "lookupAndTraverse", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err292 = thrift.WrapTException(err2)
    }
    if err2 := _exc293.Write(ctx, oprot); _write_err292 == nil && err2 != nil {
      _write_err292 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err292 == nil && err2 != nil {
      _write_err292 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err292 == nil && err2 != nil {
      _write_err292 = thrift.WrapTException(err2)
    }
    if _write_err292 != nil {
      return false, thrift.WrapTException(_write_err292)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "lookupAndTraverse", thrift.REPLY, seqId); err2 != nil {
    _write_err292 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err292 == nil && err2 != nil {
    _write_err292 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err292 == nil && err2 != nil {
    _write_err292 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err292 == nil && err2 != nil {
    _write_err292 = thrift.WrapTException(err2)
  }
  if _write_err292 != nil {
    return false, thrift.WrapTException(_write_err292)
  }
  return true, err
}

type graphStorageServiceProcessorChainUpdateEdge struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorChainUpdateEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err294 error
  args := GraphStorageServiceChainUpdateEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceChainUpdateEdgeResult{}
  if retval, err2 := p.handler.ChainUpdateEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc295 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainUpdateEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err294 = thrift.WrapTException(err2)
    }
    if err2 := _exc295.Write(ctx, oprot); _write_err294 == nil && err2 != nil {
      _write_err294 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err294 == nil && err2 != nil {
      _write_err294 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err294 == nil && err2 != nil {
      _write_err294 = thrift.WrapTException(err2)
    }
    if _write_err294 != nil {
      return false, thrift.WrapTException(_write_err294)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err294 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err294 == nil && err2 != nil {
    _write_err294 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err294 == nil && err2 != nil {
    _write_err294 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err294 == nil && err2 != nil {
    _write_err294 = thrift.WrapTException(err2)
  }
  if _write_err294 != nil {
    return false, thrift.WrapTException(_write_err294)
  }
  return true, err
}

type graphStorageServiceProcessorChainAddEdges struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorChainAddEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err296 error
  args := GraphStorageServiceChainAddEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceChainAddEdgesResult{}
  if retval, err2 := p.handler.ChainAddEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc297 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainAddEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err296 = thrift.WrapTException(err2)
    }
    if err2 := _exc297.Write(ctx, oprot); _write_err296 == nil && err2 != nil {
      _write_err296 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err296 == nil && err2 != nil {
      _write_err296 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err296 == nil && err2 != nil {
      _write_err296 = thrift.WrapTException(err2)
    }
    if _write_err296 != nil {
      return false, thrift.WrapTException(_write_err296)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err296 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err296 == nil && err2 != nil {
    _write_err296 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err296 == nil && err2 != nil {
    _write_err296 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err296 == nil && err2 != nil {
    _write_err296 = thrift.WrapTException(err2)
  }
  if _write_err296 != nil {
    return false, thrift.WrapTException(_write_err296)
  }
  return true, err
}

type graphStorageServiceProcessorChainDeleteEdges struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorChainDeleteEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err298 error
  args := GraphStorageServiceChainDeleteEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceChainDeleteEdgesResult{}
  if retval, err2 := p.handler.ChainDeleteEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc299 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainDeleteEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err298 = thrift.WrapTException(err2)
    }
    if err2 := _exc299.Write(ctx, oprot); _write_err298 == nil && err2 != nil {
      _write_err298 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err298 == nil && err2 != nil {
      _write_err298 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err298 == nil && err2 != nil {
      _write_err298 = thrift.WrapTException(err2)
    }
    if _write_err298 != nil {
      return false, thrift.WrapTException(_write_err298)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err298 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err298 == nil && err2 != nil {
    _write_err298 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err298 == nil && err2 != nil {
    _write_err298 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err298 == nil && err2 != nil {
    _write_err298 = thrift.WrapTException(err2)
  }
  if _write_err298 != nil {
    return false, thrift.WrapTException(_write_err298)
  }
  return true, err
}

type graphStorageServiceProcessorGet struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err300 error
  args := GraphStorageServiceGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceGetResult{}
  if retval, err2 := p.handler.Get(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc301 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err300 = thrift.WrapTException(err2)
    }
    if err2 := _exc301.Write(ctx, oprot); _write_err300 == nil && err2 != nil {
      _write_err300 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err300 == nil && err2 != nil {
      _write_err300 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err300 == nil && err2 != nil {
      _write_err300 = thrift.WrapTException(err2)
    }
    if _write_err300 != nil {
      return false, thrift.WrapTException(_write_err300)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get", thrift.REPLY, seqId); err2 != nil {
    _write_err300 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err300 == nil && err2 != nil {
    _write_err300 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err300 == nil && err2 != nil {
    _write_err300 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err300 == nil && err2 != nil {
    _write_err300 = thrift.WrapTException(err2)
  }
  if _write_err300 != nil {
    return false, thrift.WrapTException(_write_err300)
  }
  return true, err
}

type graphStorageServiceProcessorPut struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err302 error
  args := GraphStorageServicePutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServicePutResult{}
  if retval, err2 := p.handler.Put(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc303 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err302 = thrift.WrapTException(err2)
    }
    if err2 := _exc303.Write(ctx, oprot); _write_err302 == nil && err2 != nil {
      _write_err302 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err302 == nil && err2 != nil {
      _write_err302 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err302 == nil && err2 != nil {
      _write_err302 = thrift.WrapTException(err2)
    }
    if _write_err302 != nil {
      return false, thrift.WrapTException(_write_err302)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "put", thrift.REPLY, seqId); err2 != nil {
    _write_err302 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err302 == nil && err2 != nil {
    _write_err302 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err302 == nil && err2 != nil {
    _write_err302 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err302 == nil && err2 != nil {
    _write_err302 = thrift.WrapTException(err2)
  }
  if _write_err302 != nil {
    return false, thrift.WrapTException(_write_err302)
  }
  return true, err
}

type graphStorageServiceProcessorRemove struct {
  handler GraphStorageService
}

func (p *graphStorageServiceProcessorRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err304 error
  args := GraphStorageServiceRemoveArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphStorageServiceRemoveResult{}
  if retval, err2 := p.handler.Remove(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc305 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err304 = thrift.WrapTException(err2)
    }
    if err2 := _exc305.Write(ctx, oprot); _write_err304 == nil && err2 != nil {
      _write_err304 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err304 == nil && err2 != nil {
      _write_err304 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err304 == nil && err2 != nil {
      _write_err304 = thrift.WrapTException(err2)
    }
    if _write_err304 != nil {
      return false, thrift.WrapTException(_write_err304)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "remove", thrift.REPLY, seqId); err2 != nil {
    _write_err304 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err304 == nil && err2 != nil {
    _write_err304 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err304 == nil && err2 != nil {
    _write_err304 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err304 == nil && err2 != nil {
    _write_err304 = thrift.WrapTException(err2)
  }
  if _write_err304 != nil {
    return false, thrift.WrapTException(_write_err304)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type GraphStorageServiceGetNeighborsArgs struct {
  Req *GetNeighborsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetNeighborsArgs() *GraphStorageServiceGetNeighborsArgs {
  return &GraphStorageServiceGetNeighborsArgs{}
}

var GraphStorageServiceGetNeighborsArgs_Req_DEFAULT *GetNeighborsRequest
func (p *GraphStorageServiceGetNeighborsArgs) GetReq() *GetNeighborsRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetNeighborsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetNeighborsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceGetNeighborsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetNeighborsRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getNeighbors_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetNeighborsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetNeighborsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceGetNeighborsResult struct {
  Success *GetNeighborsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetNeighborsResult() *GraphStorageServiceGetNeighborsResult {
  return &GraphStorageServiceGetNeighborsResult{}
}

var GraphStorageServiceGetNeighborsResult_Success_DEFAULT *GetNeighborsResponse
func (p *GraphStorageServiceGetNeighborsResult) GetSuccess() *GetNeighborsResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetNeighborsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetNeighborsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceGetNeighborsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetNeighborsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getNeighbors_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetNeighborsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetNeighborsResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceGetDstBySrcArgs struct {
  Req *GetDstBySrcRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetDstBySrcArgs() *GraphStorageServiceGetDstBySrcArgs {
  return &GraphStorageServiceGetDstBySrcArgs{}
}

var GraphStorageServiceGetDstBySrcArgs_Req_DEFAULT *GetDstBySrcRequest
func (p *GraphStorageServiceGetDstBySrcArgs) GetReq() *GetDstBySrcRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetDstBySrcArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetDstBySrcArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceGetDstBySrcArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetDstBySrcRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDstBySrc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetDstBySrcArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetDstBySrcArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceGetDstBySrcResult struct {
  Success *GetDstBySrcResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetDstBySrcResult() *GraphStorageServiceGetDstBySrcResult {
  return &GraphStorageServiceGetDstBySrcResult{}
}

var GraphStorageServiceGetDstBySrcResult_Success_DEFAULT *GetDstBySrcResponse
func (p *GraphStorageServiceGetDstBySrcResult) GetSuccess() *GetDstBySrcResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetDstBySrcResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetDstBySrcResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceGetDstBySrcResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetDstBySrcResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDstBySrc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetDstBySrcResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetDstBySrcResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceGetPropsArgs struct {
  Req *GetPropRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetPropsArgs() *GraphStorageServiceGetPropsArgs {
  return &GraphStorageServiceGetPropsArgs{}
}

var GraphStorageServiceGetPropsArgs_Req_DEFAULT *GetPropRequest
func (p *GraphStorageServiceGetPropsArgs) GetReq() *GetPropRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetPropsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetPropsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceGetPropsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetPropRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetPropsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetPropsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceGetPropsResult struct {
  Success *GetPropResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetPropsResult() *GraphStorageServiceGetPropsResult {
  return &GraphStorageServiceGetPropsResult{}
}

var GraphStorageServiceGetPropsResult_Success_DEFAULT *GetPropResponse
func (p *GraphStorageServiceGetPropsResult) GetSuccess() *GetPropResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetPropsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetPropsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceGetPropsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetPropResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetPropsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetPropsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetPropsResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceAddVerticesArgs struct {
  Req *AddVerticesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceAddVerticesArgs() *GraphStorageServiceAddVerticesArgs {
  return &GraphStorageServiceAddVerticesArgs{}
}

var GraphStorageServiceAddVerticesArgs_Req_DEFAULT *AddVerticesRequest
func (p *GraphStorageServiceAddVerticesArgs) GetReq() *AddVerticesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceAddVerticesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceAddVerticesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceAddVerticesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddVerticesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addVertices_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceAddVerticesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceAddVerticesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceAddVerticesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceAddVerticesResult() *GraphStorageServiceAddVerticesResult {
  return &GraphStorageServiceAddVerticesResult{}
}

var GraphStorageServiceAddVerticesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceAddVerticesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceAddVerticesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceAddVerticesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceAddVerticesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addVertices_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceAddVerticesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceAddVerticesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceAddEdgesArgs struct {
  Req *AddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceAddEdgesArgs() *GraphStorageServiceAddEdgesArgs {
  return &GraphStorageServiceAddEdgesArgs{}
}

var GraphStorageServiceAddEdgesArgs_Req_DEFAULT *AddEdgesRequest
func (p *GraphStorageServiceAddEdgesArgs) GetReq() *AddEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceAddEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceAddEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceAddEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceAddEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceAddEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceAddEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceAddEdgesResult() *GraphStorageServiceAddEdgesResult {
  return &GraphStorageServiceAddEdgesResult{}
}

var GraphStorageServiceAddEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceAddEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceAddEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceAddEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceAddEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceAddEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceAddEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteEdgesArgs struct {
  Req *DeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteEdgesArgs() *GraphStorageServiceDeleteEdgesArgs {
  return &GraphStorageServiceDeleteEdgesArgs{}
}

var GraphStorageServiceDeleteEdgesArgs_Req_DEFAULT *DeleteEdgesRequest
func (p *GraphStorageServiceDeleteEdgesArgs) GetReq() *DeleteEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceDeleteEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DeleteEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteEdgesResult() *GraphStorageServiceDeleteEdgesResult {
  return &GraphStorageServiceDeleteEdgesResult{}
}

var GraphStorageServiceDeleteEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceDeleteEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteVerticesArgs struct {
  Req *DeleteVerticesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteVerticesArgs() *GraphStorageServiceDeleteVerticesArgs {
  return &GraphStorageServiceDeleteVerticesArgs{}
}

var GraphStorageServiceDeleteVerticesArgs_Req_DEFAULT *DeleteVerticesRequest
func (p *GraphStorageServiceDeleteVerticesArgs) GetReq() *DeleteVerticesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteVerticesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteVerticesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceDeleteVerticesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DeleteVerticesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteVertices_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteVerticesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteVerticesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteVerticesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteVerticesResult() *GraphStorageServiceDeleteVerticesResult {
  return &GraphStorageServiceDeleteVerticesResult{}
}

var GraphStorageServiceDeleteVerticesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteVerticesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteVerticesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteVerticesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceDeleteVerticesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteVertices_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteVerticesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteVerticesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteTagsArgs struct {
  Req *DeleteTagsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteTagsArgs() *GraphStorageServiceDeleteTagsArgs {
  return &GraphStorageServiceDeleteTagsArgs{}
}

var GraphStorageServiceDeleteTagsArgs_Req_DEFAULT *DeleteTagsRequest
func (p *GraphStorageServiceDeleteTagsArgs) GetReq() *DeleteTagsRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteTagsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceDeleteTagsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DeleteTagsRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteTagsResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteTagsResult() *GraphStorageServiceDeleteTagsResult {
  return &GraphStorageServiceDeleteTagsResult{}
}

var GraphStorageServiceDeleteTagsResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteTagsResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteTagsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceDeleteTagsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceDeleteTagsResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceUpdateVertexArgs struct {
  Req *UpdateVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceUpdateVertexArgs() *GraphStorageServiceUpdateVertexArgs {
  return &GraphStorageServiceUpdateVertexArgs{}
}

var GraphStorageServiceUpdateVertexArgs_Req_DEFAULT *UpdateVertexRequest
func (p *GraphStorageServiceUpdateVertexArgs) GetReq() *UpdateVertexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceUpdateVertexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceUpdateVertexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceUpdateVertexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &UpdateVertexRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateVertex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceUpdateVertexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceUpdateVertexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceUpdateVertexResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceUpdateVertexResult() *GraphStorageServiceUpdateVertexResult {
  return &GraphStorageServiceUpdateVertexResult{}
}

var GraphStorageServiceUpdateVertexResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceUpdateVertexResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceUpdateVertexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceUpdateVertexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceUpdateVertexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateVertex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceUpdateVertexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceUpdateVertexResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceUpdateEdgeArgs struct {
  Req *UpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceUpdateEdgeArgs() *GraphStorageServiceUpdateEdgeArgs {
  return &GraphStorageServiceUpdateEdgeArgs{}
}

var GraphStorageServiceUpdateEdgeArgs_Req_DEFAULT *UpdateEdgeRequest
func (p *GraphStorageServiceUpdateEdgeArgs) GetReq() *UpdateEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceUpdateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceUpdateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceUpdateEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &UpdateEdgeRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceUpdateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceUpdateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceUpdateEdgeResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceUpdateEdgeResult() *GraphStorageServiceUpdateEdgeResult {
  return &GraphStorageServiceUpdateEdgeResult{}
}

var GraphStorageServiceUpdateEdgeResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceUpdateEdgeResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceUpdateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceUpdateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceUpdateEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceUpdateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceUpdateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceScanVertexArgs struct {
  Req *ScanVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceScanVertexArgs() *GraphStorageServiceScanVertexArgs {
  return &GraphStorageServiceScanVertexArgs{}
}

var GraphStorageServiceScanVertexArgs_Req_DEFAULT *ScanVertexRequest
func (p *GraphStorageServiceScanVertexArgs) GetReq() *ScanVertexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceScanVertexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceScanVertexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceScanVertexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ScanVertexRequest{
  EnableReadFromFollower: true,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scanVertex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceScanVertexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceScanVertexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceScanVertexResult struct {
  Success *ScanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceScanVertexResult() *GraphStorageServiceScanVertexResult {
  return &GraphStorageServiceScanVertexResult{}
}

var GraphStorageServiceScanVertexResult_Success_DEFAULT *ScanResponse
func (p *GraphStorageServiceScanVertexResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceScanVertexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceScanVertexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceScanVertexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ScanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scanVertex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanVertexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceScanVertexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceScanVertexResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceScanEdgeArgs struct {
  Req *ScanEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceScanEdgeArgs() *GraphStorageServiceScanEdgeArgs {
  return &GraphStorageServiceScanEdgeArgs{}
}

var GraphStorageServiceScanEdgeArgs_Req_DEFAULT *ScanEdgeRequest
func (p *GraphStorageServiceScanEdgeArgs) GetReq() *ScanEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceScanEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceScanEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceScanEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ScanEdgeRequest{
  EnableReadFromFollower: true,
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scanEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceScanEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceScanEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceScanEdgeResult struct {
  Success *ScanResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceScanEdgeResult() *GraphStorageServiceScanEdgeResult {
  return &GraphStorageServiceScanEdgeResult{}
}

var GraphStorageServiceScanEdgeResult_Success_DEFAULT *ScanResponse
func (p *GraphStorageServiceScanEdgeResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceScanEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceScanEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceScanEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ScanResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "scanEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceScanEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceScanEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceGetUUIDArgs struct {
  Req *GetUUIDReq `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetUUIDArgs() *GraphStorageServiceGetUUIDArgs {
  return &GraphStorageServiceGetUUIDArgs{}
}

var GraphStorageServiceGetUUIDArgs_Req_DEFAULT *GetUUIDReq
func (p *GraphStorageServiceGetUUIDArgs) GetReq() *GetUUIDReq {
  if !p.IsSetReq() {
    return GraphStorageServiceGetUUIDArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetUUIDArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceGetUUIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetUUIDReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceGetUUIDResult struct {
  Success *GetUUIDResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetUUIDResult() *GraphStorageServiceGetUUIDResult {
  return &GraphStorageServiceGetUUIDResult{}
}

var GraphStorageServiceGetUUIDResult_Success_DEFAULT *GetUUIDResp
func (p *GraphStorageServiceGetUUIDResult) GetSuccess() *GetUUIDResp {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetUUIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceGetUUIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetUUIDResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetUUIDResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceLookupIndexArgs struct {
  Req *LookupIndexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceLookupIndexArgs() *GraphStorageServiceLookupIndexArgs {
  return &GraphStorageServiceLookupIndexArgs{}
}

var GraphStorageServiceLookupIndexArgs_Req_DEFAULT *LookupIndexRequest
func (p *GraphStorageServiceLookupIndexArgs) GetReq() *LookupIndexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceLookupIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceLookupIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceLookupIndexArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &LookupIndexRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lookupIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceLookupIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceLookupIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceLookupIndexResult struct {
  Success *LookupIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceLookupIndexResult() *GraphStorageServiceLookupIndexResult {
  return &GraphStorageServiceLookupIndexResult{}
}

var GraphStorageServiceLookupIndexResult_Success_DEFAULT *LookupIndexResp
func (p *GraphStorageServiceLookupIndexResult) GetSuccess() *LookupIndexResp {
  if !p.IsSetSuccess() {
    return GraphStorageServiceLookupIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceLookupIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceLookupIndexResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &LookupIndexResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lookupIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceLookupIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceLookupIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceLookupAndTraverseArgs struct {
  Req *LookupAndTraverseRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceLookupAndTraverseArgs() *GraphStorageServiceLookupAndTraverseArgs {
  return &GraphStorageServiceLookupAndTraverseArgs{}
}

var GraphStorageServiceLookupAndTraverseArgs_Req_DEFAULT *LookupAndTraverseRequest
func (p *GraphStorageServiceLookupAndTraverseArgs) GetReq() *LookupAndTraverseRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceLookupAndTraverseArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceLookupAndTraverseArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &LookupAndTraverseRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lookupAndTraverse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceLookupAndTraverseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceLookupAndTraverseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceLookupAndTraverseResult struct {
  Success *GetNeighborsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceLookupAndTraverseResult() *GraphStorageServiceLookupAndTraverseResult {
  return &GraphStorageServiceLookupAndTraverseResult{}
}

var GraphStorageServiceLookupAndTraverseResult_Success_DEFAULT *GetNeighborsResponse
func (p *GraphStorageServiceLookupAndTraverseResult) GetSuccess() *GetNeighborsResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceLookupAndTraverseResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceLookupAndTraverseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceLookupAndTraverseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetNeighborsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "lookupAndTraverse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceLookupAndTraverseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceLookupAndTraverseResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceChainUpdateEdgeArgs struct {
  Req *UpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainUpdateEdgeArgs() *GraphStorageServiceChainUpdateEdgeArgs {
  return &GraphStorageServiceChainUpdateEdgeArgs{}
}

var GraphStorageServiceChainUpdateEdgeArgs_Req_DEFAULT *UpdateEdgeRequest
func (p *GraphStorageServiceChainUpdateEdgeArgs) GetReq() *UpdateEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainUpdateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainUpdateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &UpdateEdgeRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainUpdateEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainUpdateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceChainUpdateEdgeResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainUpdateEdgeResult() *GraphStorageServiceChainUpdateEdgeResult {
  return &GraphStorageServiceChainUpdateEdgeResult{}
}

var GraphStorageServiceChainUpdateEdgeResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceChainUpdateEdgeResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainUpdateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainUpdateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainUpdateEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainUpdateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainUpdateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceChainAddEdgesArgs struct {
  Req *AddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainAddEdgesArgs() *GraphStorageServiceChainAddEdgesArgs {
  return &GraphStorageServiceChainAddEdgesArgs{}
}

var GraphStorageServiceChainAddEdgesArgs_Req_DEFAULT *AddEdgesRequest
func (p *GraphStorageServiceChainAddEdgesArgs) GetReq() *AddEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainAddEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainAddEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceChainAddEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainAddEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainAddEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainAddEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceChainAddEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainAddEdgesResult() *GraphStorageServiceChainAddEdgesResult {
  return &GraphStorageServiceChainAddEdgesResult{}
}

var GraphStorageServiceChainAddEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceChainAddEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainAddEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainAddEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceChainAddEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainAddEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainAddEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainAddEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceChainDeleteEdgesArgs struct {
  Req *DeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainDeleteEdgesArgs() *GraphStorageServiceChainDeleteEdgesArgs {
  return &GraphStorageServiceChainDeleteEdgesArgs{}
}

var GraphStorageServiceChainDeleteEdgesArgs_Req_DEFAULT *DeleteEdgesRequest
func (p *GraphStorageServiceChainDeleteEdgesArgs) GetReq() *DeleteEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainDeleteEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainDeleteEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DeleteEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainDeleteEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainDeleteEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceChainDeleteEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainDeleteEdgesResult() *GraphStorageServiceChainDeleteEdgesResult {
  return &GraphStorageServiceChainDeleteEdgesResult{}
}

var GraphStorageServiceChainDeleteEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceChainDeleteEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainDeleteEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainDeleteEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainDeleteEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainDeleteEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceChainDeleteEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceGetArgs struct {
  Req *KVGetRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetArgs() *GraphStorageServiceGetArgs {
  return &GraphStorageServiceGetArgs{}
}

var GraphStorageServiceGetArgs_Req_DEFAULT *KVGetRequest
func (p *GraphStorageServiceGetArgs) GetReq() *KVGetRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &KVGetRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceGetResult struct {
  Success *KVGetResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetResult() *GraphStorageServiceGetResult {
  return &GraphStorageServiceGetResult{}
}

var GraphStorageServiceGetResult_Success_DEFAULT *KVGetResponse
func (p *GraphStorageServiceGetResult) GetSuccess() *KVGetResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &KVGetResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServicePutArgs struct {
  Req *KVPutRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServicePutArgs() *GraphStorageServicePutArgs {
  return &GraphStorageServicePutArgs{}
}

var GraphStorageServicePutArgs_Req_DEFAULT *KVPutRequest
func (p *GraphStorageServicePutArgs) GetReq() *KVPutRequest {
  if !p.IsSetReq() {
    return GraphStorageServicePutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServicePutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServicePutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServicePutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &KVPutRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServicePutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServicePutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServicePutResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServicePutResult() *GraphStorageServicePutResult {
  return &GraphStorageServicePutResult{}
}

var GraphStorageServicePutResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServicePutResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServicePutResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServicePutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServicePutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServicePutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServicePutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServicePutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServicePutResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphStorageServiceRemoveArgs struct {
  Req *KVRemoveRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceRemoveArgs() *GraphStorageServiceRemoveArgs {
  return &GraphStorageServiceRemoveArgs{}
}

var GraphStorageServiceRemoveArgs_Req_DEFAULT *KVRemoveRequest
func (p *GraphStorageServiceRemoveArgs) GetReq() *KVRemoveRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceRemoveArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceRemoveArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphStorageServiceRemoveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &KVRemoveRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceRemoveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphStorageServiceRemoveResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceRemoveResult() *GraphStorageServiceRemoveResult {
  return &GraphStorageServiceRemoveResult{}
}

var GraphStorageServiceRemoveResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceRemoveResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphStorageServiceRemoveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceRemoveResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphStorageServiceRemoveResult(%+v)", *p)
}


type StorageAdminService interface {
  // Parameters:
  //  - Req
  TransLeader(ctx context.Context, req *TransLeaderReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  AddPart(ctx context.Context, req *AddPartReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  AddLearner(ctx context.Context, req *AddLearnerReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  RemovePart(ctx context.Context, req *RemovePartReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  MemberChange(ctx context.Context, req *MemberChangeReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  WaitingForCatchUpData(ctx context.Context, req *CatchUpDataReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  CreateCheckpoint(ctx context.Context, req *CreateCPRequest) (_r *CreateCPResp, _err error)
  // Parameters:
  //  - Req
  DropCheckpoint(ctx context.Context, req *DropCPRequest) (_r *DropCPResp, _err error)
  // Parameters:
  //  - Req
  BlockingWrites(ctx context.Context, req *BlockingSignRequest) (_r *BlockingSignResp, _err error)
  // Parameters:
  //  - Req
  GetLeaderParts(ctx context.Context, req *GetLeaderReq) (_r *GetLeaderPartsResp, _err error)
  // Parameters:
  //  - Req
  CheckPeers(ctx context.Context, req *CheckPeersReq) (_r *AdminExecResp, _err error)
  // Parameters:
  //  - Req
  AddAdminTask(ctx context.Context, req *AddTaskRequest) (_r *AddTaskResp, _err error)
  // Parameters:
  //  - Req
  StopAdminTask(ctx context.Context, req *StopTaskRequest) (_r *StopTaskResp, _err error)
  // Parameters:
  //  - Req
  ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ClearSpaceResp, _err error)
}

type StorageAdminServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewStorageAdminServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StorageAdminServiceClient {
  return &StorageAdminServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewStorageAdminServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StorageAdminServiceClient {
  return &StorageAdminServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStorageAdminServiceClient(c thrift.TClient) *StorageAdminServiceClient {
  return &StorageAdminServiceClient{
    c: c,
  }
}

func (p *StorageAdminServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *StorageAdminServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *StorageAdminServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) TransLeader(ctx context.Context, req *TransLeaderReq) (_r *AdminExecResp, _err error) {
  var _args432 StorageAdminServiceTransLeaderArgs
  _args432.Req = req
  var _result434 StorageAdminServiceTransLeaderResult
  var _meta433 thrift.ResponseMeta
  _meta433, _err = p.Client_().Call(ctx, "transLeader", &_args432, &_result434)
  p.SetLastResponseMeta_(_meta433)
  if _err != nil {
    return
  }
  if _ret435 := _result434.GetSuccess(); _ret435 != nil {
    return _ret435, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "transLeader failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddPart(ctx context.Context, req *AddPartReq) (_r *AdminExecResp, _err error) {
  var _args436 StorageAdminServiceAddPartArgs
  _args436.Req = req
  var _result438 StorageAdminServiceAddPartResult
  var _meta437 thrift.ResponseMeta
  _meta437, _err = p.Client_().Call(ctx, "addPart", &_args436, &_result438)
  p.SetLastResponseMeta_(_meta437)
  if _err != nil {
    return
  }
  if _ret439 := _result438.GetSuccess(); _ret439 != nil {
    return _ret439, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addPart failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddLearner(ctx context.Context, req *AddLearnerReq) (_r *AdminExecResp, _err error) {
  var _args440 StorageAdminServiceAddLearnerArgs
  _args440.Req = req
  var _result442 StorageAdminServiceAddLearnerResult
  var _meta441 thrift.ResponseMeta
  _meta441, _err = p.Client_().Call(ctx, "addLearner", &_args440, &_result442)
  p.SetLastResponseMeta_(_meta441)
  if _err != nil {
    return
  }
  if _ret443 := _result442.GetSuccess(); _ret443 != nil {
    return _ret443, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addLearner failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) RemovePart(ctx context.Context, req *RemovePartReq) (_r *AdminExecResp, _err error) {
  var _args444 StorageAdminServiceRemovePartArgs
  _args444.Req = req
  var _result446 StorageAdminServiceRemovePartResult
  var _meta445 thrift.ResponseMeta
  _meta445, _err = p.Client_().Call(ctx, "removePart", &_args444, &_result446)
  p.SetLastResponseMeta_(_meta445)
  if _err != nil {
    return
  }
  if _ret447 := _result446.GetSuccess(); _ret447 != nil {
    return _ret447, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removePart failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) MemberChange(ctx context.Context, req *MemberChangeReq) (_r *AdminExecResp, _err error) {
  var _args448 StorageAdminServiceMemberChangeArgs
  _args448.Req = req
  var _result450 StorageAdminServiceMemberChangeResult
  var _meta449 thrift.ResponseMeta
  _meta449, _err = p.Client_().Call(ctx, "memberChange", &_args448, &_result450)
  p.SetLastResponseMeta_(_meta449)
  if _err != nil {
    return
  }
  if _ret451 := _result450.GetSuccess(); _ret451 != nil {
    return _ret451, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "memberChange failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) WaitingForCatchUpData(ctx context.Context, req *CatchUpDataReq) (_r *AdminExecResp, _err error) {
  var _args452 StorageAdminServiceWaitingForCatchUpDataArgs
  _args452.Req = req
  var _result454 StorageAdminServiceWaitingForCatchUpDataResult
  var _meta453 thrift.ResponseMeta
  _meta453, _err = p.Client_().Call(ctx, "waitingForCatchUpData", &_args452, &_result454)
  p.SetLastResponseMeta_(_meta453)
  if _err != nil {
    return
  }
  if _ret455 := _result454.GetSuccess(); _ret455 != nil {
    return _ret455, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "waitingForCatchUpData failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) CreateCheckpoint(ctx context.Context, req *CreateCPRequest) (_r *CreateCPResp, _err error) {
  var _args456 StorageAdminServiceCreateCheckpointArgs
  _args456.Req = req
  var _result458 StorageAdminServiceCreateCheckpointResult
  var _meta457 thrift.ResponseMeta
  _meta457, _err = p.Client_().Call(ctx, "createCheckpoint", &_args456, &_result458)
  p.SetLastResponseMeta_(_meta457)
  if _err != nil {
    return
  }
  if _ret459 := _result458.GetSuccess(); _ret459 != nil {
    return _ret459, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createCheckpoint failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) DropCheckpoint(ctx context.Context, req *DropCPRequest) (_r *DropCPResp, _err error) {
  var _args460 StorageAdminServiceDropCheckpointArgs
  _args460.Req = req
  var _result462 StorageAdminServiceDropCheckpointResult
  var _meta461 thrift.ResponseMeta
  _meta461, _err = p.Client_().Call(ctx, "dropCheckpoint", &_args460, &_result462)
  p.SetLastResponseMeta_(_meta461)
  if _err != nil {
    return
  }
  if _ret463 := _result462.GetSuccess(); _ret463 != nil {
    return _ret463, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "dropCheckpoint failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) BlockingWrites(ctx context.Context, req *BlockingSignRequest) (_r *BlockingSignResp, _err error) {
  var _args464 StorageAdminServiceBlockingWritesArgs
  _args464.Req = req
  var _result466 StorageAdminServiceBlockingWritesResult
  var _meta465 thrift.ResponseMeta
  _meta465, _err = p.Client_().Call(ctx, "blockingWrites", &_args464, &_result466)
  p.SetLastResponseMeta_(_meta465)
  if _err != nil {
    return
  }
  if _ret467 := _result466.GetSuccess(); _ret467 != nil {
    return _ret467, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "blockingWrites failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) GetLeaderParts(ctx context.Context, req *GetLeaderReq) (_r *GetLeaderPartsResp, _err error) {
  var _args468 StorageAdminServiceGetLeaderPartsArgs
  _args468.Req = req
  var _result470 StorageAdminServiceGetLeaderPartsResult
  var _meta469 thrift.ResponseMeta
  _meta469, _err = p.Client_().Call(ctx, "getLeaderParts", &_args468, &_result470)
  p.SetLastResponseMeta_(_meta469)
  if _err != nil {
    return
  }
  if _ret471 := _result470.GetSuccess(); _ret471 != nil {
    return _ret471, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getLeaderParts failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) CheckPeers(ctx context.Context, req *CheckPeersReq) (_r *AdminExecResp, _err error) {
  var _args472 StorageAdminServiceCheckPeersArgs
  _args472.Req = req
  var _result474 StorageAdminServiceCheckPeersResult
  var _meta473 thrift.ResponseMeta
  _meta473, _err = p.Client_().Call(ctx, "checkPeers", &_args472, &_result474)
  p.SetLastResponseMeta_(_meta473)
  if _err != nil {
    return
  }
  if _ret475 := _result474.GetSuccess(); _ret475 != nil {
    return _ret475, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "checkPeers failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddAdminTask(ctx context.Context, req *AddTaskRequest) (_r *AddTaskResp, _err error) {
  var _args476 StorageAdminServiceAddAdminTaskArgs
  _args476.Req = req
  var _result478 StorageAdminServiceAddAdminTaskResult
  var _meta477 thrift.ResponseMeta
  _meta477, _err = p.Client_().Call(ctx, "addAdminTask", &_args476, &_result478)
  p.SetLastResponseMeta_(_meta477)
  if _err != nil {
    return
  }
  if _ret479 := _result478.GetSuccess(); _ret479 != nil {
    return _ret479, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addAdminTask failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) StopAdminTask(ctx context.Context, req *StopTaskRequest) (_r *StopTaskResp, _err error) {
  var _args480 StorageAdminServiceStopAdminTaskArgs
  _args480.Req = req
  var _result482 StorageAdminServiceStopAdminTaskResult
  var _meta481 thrift.ResponseMeta
  _meta481, _err = p.Client_().Call(ctx, "stopAdminTask", &_args480, &_result482)
  p.SetLastResponseMeta_(_meta481)
  if _err != nil {
    return
  }
  if _ret483 := _result482.GetSuccess(); _ret483 != nil {
    return _ret483, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "stopAdminTask failed: unknown result")
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ClearSpaceResp, _err error) {
  var _args484 StorageAdminServiceClearSpaceArgs
  _args484.Req = req
  var _result486 StorageAdminServiceClearSpaceResult
  var _meta485 thrift.ResponseMeta
  _meta485, _err = p.Client_().Call(ctx, "clearSpace", &_args484, &_result486)
  p.SetLastResponseMeta_(_meta485)
  if _err != nil {
    return
  }
  if _ret487 := _result486.GetSuccess(); _ret487 != nil {
    return _ret487, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "clearSpace failed: unknown result")
}

type StorageAdminServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StorageAdminService
}

func (p *StorageAdminServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StorageAdminServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StorageAdminServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStorageAdminServiceProcessor(handler StorageAdminService) *StorageAdminServiceProcessor {

  self488 := &StorageAdminServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self488.processorMap["transLeader"] = &storageAdminServiceProcessorTransLeader{handler:handler}
  self488.processorMap["addPart"] = &storageAdminServiceProcessorAddPart{handler:handler}
  self488.processorMap["addLearner"] = &storageAdminServiceProcessorAddLearner{handler:handler}
  self488.processorMap["removePart"] = &storageAdminServiceProcessorRemovePart{handler:handler}
  self488.processorMap["memberChange"] = &storageAdminServiceProcessorMemberChange{handler:handler}
  self488.processorMap["waitingForCatchUpData"] = &storageAdminServiceProcessorWaitingForCatchUpData{handler:handler}
  self488.processorMap["createCheckpoint"] = &storageAdminServiceProcessorCreateCheckpoint{handler:handler}
  self488.processorMap["dropCheckpoint"] = &storageAdminServiceProcessorDropCheckpoint{handler:handler}
  self488.processorMap["blockingWrites"] = &storageAdminServiceProcessorBlockingWrites{handler:handler}
  self488.processorMap["getLeaderParts"] = &storageAdminServiceProcessorGetLeaderParts{handler:handler}
  self488.processorMap["checkPeers"] = &storageAdminServiceProcessorCheckPeers{handler:handler}
  self488.processorMap["addAdminTask"] = &storageAdminServiceProcessorAddAdminTask{handler:handler}
  self488.processorMap["stopAdminTask"] = &storageAdminServiceProcessorStopAdminTask{handler:handler}
  self488.processorMap["clearSpace"] = &storageAdminServiceProcessorClearSpace{handler:handler}
return self488
}

func (p *StorageAdminServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x489 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x489.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x489

}

type storageAdminServiceProcessorTransLeader struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorTransLeader) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err490 error
  args := StorageAdminServiceTransLeaderArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "transLeader", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceTransLeaderResult{}
  if retval, err2 := p.handler.TransLeader(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc491 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transLeader: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "transLeader", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err490 = thrift.WrapTException(err2)
    }
    if err2 := _exc491.Write(ctx, oprot); _write_err490 == nil && err2 != nil {
      _write_err490 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err490 == nil && err2 != nil {
      _write_err490 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err490 == nil && err2 != nil {
      _write_err490 = thrift.WrapTException(err2)
    }
    if _write_err490 != nil {
      return false, thrift.WrapTException(_write_err490)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "transLeader", thrift.REPLY, seqId); err2 != nil {
    _write_err490 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err490 == nil && err2 != nil {
    _write_err490 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err490 == nil && err2 != nil {
    _write_err490 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err490 == nil && err2 != nil {
    _write_err490 = thrift.WrapTException(err2)
  }
  if _write_err490 != nil {
    return false, thrift.WrapTException(_write_err490)
  }
  return true, err
}

type storageAdminServiceProcessorAddPart struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorAddPart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err492 error
  args := StorageAdminServiceAddPartArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addPart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceAddPartResult{}
  if retval, err2 := p.handler.AddPart(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc493 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPart: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addPart", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err492 = thrift.WrapTException(err2)
    }
    if err2 := _exc493.Write(ctx, oprot); _write_err492 == nil && err2 != nil {
      _write_err492 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err492 == nil && err2 != nil {
      _write_err492 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err492 == nil && err2 != nil {
      _write_err492 = thrift.WrapTException(err2)
    }
    if _write_err492 != nil {
      return false, thrift.WrapTException(_write_err492)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addPart", thrift.REPLY, seqId); err2 != nil {
    _write_err492 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err492 == nil && err2 != nil {
    _write_err492 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err492 == nil && err2 != nil {
    _write_err492 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err492 == nil && err2 != nil {
    _write_err492 = thrift.WrapTException(err2)
  }
  if _write_err492 != nil {
    return false, thrift.WrapTException(_write_err492)
  }
  return true, err
}

type storageAdminServiceProcessorAddLearner struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorAddLearner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err494 error
  args := StorageAdminServiceAddLearnerArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addLearner", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceAddLearnerResult{}
  if retval, err2 := p.handler.AddLearner(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc495 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLearner: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addLearner", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err494 = thrift.WrapTException(err2)
    }
    if err2 := _exc495.Write(ctx, oprot); _write_err494 == nil && err2 != nil {
      _write_err494 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err494 == nil && err2 != nil {
      _write_err494 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err494 == nil && err2 != nil {
      _write_err494 = thrift.WrapTException(err2)
    }
    if _write_err494 != nil {
      return false, thrift.WrapTException(_write_err494)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addLearner", thrift.REPLY, seqId); err2 != nil {
    _write_err494 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err494 == nil && err2 != nil {
    _write_err494 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err494 == nil && err2 != nil {
    _write_err494 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err494 == nil && err2 != nil {
    _write_err494 = thrift.WrapTException(err2)
  }
  if _write_err494 != nil {
    return false, thrift.WrapTException(_write_err494)
  }
  return true, err
}

type storageAdminServiceProcessorRemovePart struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorRemovePart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err496 error
  args := StorageAdminServiceRemovePartArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removePart", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceRemovePartResult{}
  if retval, err2 := p.handler.RemovePart(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc497 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removePart: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "removePart", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err496 = thrift.WrapTException(err2)
    }
    if err2 := _exc497.Write(ctx, oprot); _write_err496 == nil && err2 != nil {
      _write_err496 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err496 == nil && err2 != nil {
      _write_err496 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err496 == nil && err2 != nil {
      _write_err496 = thrift.WrapTException(err2)
    }
    if _write_err496 != nil {
      return false, thrift.WrapTException(_write_err496)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "removePart", thrift.REPLY, seqId); err2 != nil {
    _write_err496 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err496 == nil && err2 != nil {
    _write_err496 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err496 == nil && err2 != nil {
    _write_err496 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err496 == nil && err2 != nil {
    _write_err496 = thrift.WrapTException(err2)
  }
  if _write_err496 != nil {
    return false, thrift.WrapTException(_write_err496)
  }
  return true, err
}

type storageAdminServiceProcessorMemberChange struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorMemberChange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err498 error
  args := StorageAdminServiceMemberChangeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "memberChange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceMemberChangeResult{}
  if retval, err2 := p.handler.MemberChange(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc499 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing memberChange: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "memberChange", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err498 = thrift.WrapTException(err2)
    }
    if err2 := _exc499.Write(ctx, oprot); _write_err498 == nil && err2 != nil {
      _write_err498 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err498 == nil && err2 != nil {
      _write_err498 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err498 == nil && err2 != nil {
      _write_err498 = thrift.WrapTException(err2)
    }
    if _write_err498 != nil {
      return false, thrift.WrapTException(_write_err498)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "memberChange", thrift.REPLY, seqId); err2 != nil {
    _write_err498 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err498 == nil && err2 != nil {
    _write_err498 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err498 == nil && err2 != nil {
    _write_err498 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err498 == nil && err2 != nil {
    _write_err498 = thrift.WrapTException(err2)
  }
  if _write_err498 != nil {
    return false, thrift.WrapTException(_write_err498)
  }
  return true, err
}

type storageAdminServiceProcessorWaitingForCatchUpData struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorWaitingForCatchUpData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err500 error
  args := StorageAdminServiceWaitingForCatchUpDataArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "waitingForCatchUpData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceWaitingForCatchUpDataResult{}
  if retval, err2 := p.handler.WaitingForCatchUpData(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc501 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing waitingForCatchUpData: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "waitingForCatchUpData", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err500 = thrift.WrapTException(err2)
    }
    if err2 := _exc501.Write(ctx, oprot); _write_err500 == nil && err2 != nil {
      _write_err500 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err500 == nil && err2 != nil {
      _write_err500 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err500 == nil && err2 != nil {
      _write_err500 = thrift.WrapTException(err2)
    }
    if _write_err500 != nil {
      return false, thrift.WrapTException(_write_err500)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "waitingForCatchUpData", thrift.REPLY, seqId); err2 != nil {
    _write_err500 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err500 == nil && err2 != nil {
    _write_err500 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err500 == nil && err2 != nil {
    _write_err500 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err500 == nil && err2 != nil {
    _write_err500 = thrift.WrapTException(err2)
  }
  if _write_err500 != nil {
    return false, thrift.WrapTException(_write_err500)
  }
  return true, err
}

type storageAdminServiceProcessorCreateCheckpoint struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorCreateCheckpoint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err502 error
  args := StorageAdminServiceCreateCheckpointArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createCheckpoint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceCreateCheckpointResult{}
  if retval, err2 := p.handler.CreateCheckpoint(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc503 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createCheckpoint: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "createCheckpoint", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err502 = thrift.WrapTException(err2)
    }
    if err2 := _exc503.Write(ctx, oprot); _write_err502 == nil && err2 != nil {
      _write_err502 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err502 == nil && err2 != nil {
      _write_err502 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err502 == nil && err2 != nil {
      _write_err502 = thrift.WrapTException(err2)
    }
    if _write_err502 != nil {
      return false, thrift.WrapTException(_write_err502)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "createCheckpoint", thrift.REPLY, seqId); err2 != nil {
    _write_err502 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err502 == nil && err2 != nil {
    _write_err502 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err502 == nil && err2 != nil {
    _write_err502 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err502 == nil && err2 != nil {
    _write_err502 = thrift.WrapTException(err2)
  }
  if _write_err502 != nil {
    return false, thrift.WrapTException(_write_err502)
  }
  return true, err
}

type storageAdminServiceProcessorDropCheckpoint struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorDropCheckpoint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err504 error
  args := StorageAdminServiceDropCheckpointArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dropCheckpoint", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceDropCheckpointResult{}
  if retval, err2 := p.handler.DropCheckpoint(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc505 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropCheckpoint: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dropCheckpoint", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err504 = thrift.WrapTException(err2)
    }
    if err2 := _exc505.Write(ctx, oprot); _write_err504 == nil && err2 != nil {
      _write_err504 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err504 == nil && err2 != nil {
      _write_err504 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err504 == nil && err2 != nil {
      _write_err504 = thrift.WrapTException(err2)
    }
    if _write_err504 != nil {
      return false, thrift.WrapTException(_write_err504)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dropCheckpoint", thrift.REPLY, seqId); err2 != nil {
    _write_err504 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err504 == nil && err2 != nil {
    _write_err504 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err504 == nil && err2 != nil {
    _write_err504 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err504 == nil && err2 != nil {
    _write_err504 = thrift.WrapTException(err2)
  }
  if _write_err504 != nil {
    return false, thrift.WrapTException(_write_err504)
  }
  return true, err
}

type storageAdminServiceProcessorBlockingWrites struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorBlockingWrites) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err506 error
  args := StorageAdminServiceBlockingWritesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockingWrites", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceBlockingWritesResult{}
  if retval, err2 := p.handler.BlockingWrites(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc507 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockingWrites: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "blockingWrites", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err506 = thrift.WrapTException(err2)
    }
    if err2 := _exc507.Write(ctx, oprot); _write_err506 == nil && err2 != nil {
      _write_err506 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err506 == nil && err2 != nil {
      _write_err506 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err506 == nil && err2 != nil {
      _write_err506 = thrift.WrapTException(err2)
    }
    if _write_err506 != nil {
      return false, thrift.WrapTException(_write_err506)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "blockingWrites", thrift.REPLY, seqId); err2 != nil {
    _write_err506 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err506 == nil && err2 != nil {
    _write_err506 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err506 == nil && err2 != nil {
    _write_err506 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err506 == nil && err2 != nil {
    _write_err506 = thrift.WrapTException(err2)
  }
  if _write_err506 != nil {
    return false, thrift.WrapTException(_write_err506)
  }
  return true, err
}

type storageAdminServiceProcessorGetLeaderParts struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorGetLeaderParts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err508 error
  args := StorageAdminServiceGetLeaderPartsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLeaderParts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceGetLeaderPartsResult{}
  if retval, err2 := p.handler.GetLeaderParts(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc509 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLeaderParts: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "getLeaderParts", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err508 = thrift.WrapTException(err2)
    }
    if err2 := _exc509.Write(ctx, oprot); _write_err508 == nil && err2 != nil {
      _write_err508 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err508 == nil && err2 != nil {
      _write_err508 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err508 == nil && err2 != nil {
      _write_err508 = thrift.WrapTException(err2)
    }
    if _write_err508 != nil {
      return false, thrift.WrapTException(_write_err508)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "getLeaderParts", thrift.REPLY, seqId); err2 != nil {
    _write_err508 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err508 == nil && err2 != nil {
    _write_err508 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err508 == nil && err2 != nil {
    _write_err508 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err508 == nil && err2 != nil {
    _write_err508 = thrift.WrapTException(err2)
  }
  if _write_err508 != nil {
    return false, thrift.WrapTException(_write_err508)
  }
  return true, err
}

type storageAdminServiceProcessorCheckPeers struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorCheckPeers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err510 error
  args := StorageAdminServiceCheckPeersArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "checkPeers", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceCheckPeersResult{}
  if retval, err2 := p.handler.CheckPeers(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc511 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPeers: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "checkPeers", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err510 = thrift.WrapTException(err2)
    }
    if err2 := _exc511.Write(ctx, oprot); _write_err510 == nil && err2 != nil {
      _write_err510 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err510 == nil && err2 != nil {
      _write_err510 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err510 == nil && err2 != nil {
      _write_err510 = thrift.WrapTException(err2)
    }
    if _write_err510 != nil {
      return false, thrift.WrapTException(_write_err510)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "checkPeers", thrift.REPLY, seqId); err2 != nil {
    _write_err510 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err510 == nil && err2 != nil {
    _write_err510 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err510 == nil && err2 != nil {
    _write_err510 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err510 == nil && err2 != nil {
    _write_err510 = thrift.WrapTException(err2)
  }
  if _write_err510 != nil {
    return false, thrift.WrapTException(_write_err510)
  }
  return true, err
}

type storageAdminServiceProcessorAddAdminTask struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorAddAdminTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err512 error
  args := StorageAdminServiceAddAdminTaskArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addAdminTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceAddAdminTaskResult{}
  if retval, err2 := p.handler.AddAdminTask(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc513 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addAdminTask: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "addAdminTask", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err512 = thrift.WrapTException(err2)
    }
    if err2 := _exc513.Write(ctx, oprot); _write_err512 == nil && err2 != nil {
      _write_err512 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err512 == nil && err2 != nil {
      _write_err512 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err512 == nil && err2 != nil {
      _write_err512 = thrift.WrapTException(err2)
    }
    if _write_err512 != nil {
      return false, thrift.WrapTException(_write_err512)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "addAdminTask", thrift.REPLY, seqId); err2 != nil {
    _write_err512 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err512 == nil && err2 != nil {
    _write_err512 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err512 == nil && err2 != nil {
    _write_err512 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err512 == nil && err2 != nil {
    _write_err512 = thrift.WrapTException(err2)
  }
  if _write_err512 != nil {
    return false, thrift.WrapTException(_write_err512)
  }
  return true, err
}

type storageAdminServiceProcessorStopAdminTask struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorStopAdminTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err514 error
  args := StorageAdminServiceStopAdminTaskArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "stopAdminTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceStopAdminTaskResult{}
  if retval, err2 := p.handler.StopAdminTask(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc515 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stopAdminTask: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "stopAdminTask", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err514 = thrift.WrapTException(err2)
    }
    if err2 := _exc515.Write(ctx, oprot); _write_err514 == nil && err2 != nil {
      _write_err514 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err514 == nil && err2 != nil {
      _write_err514 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err514 == nil && err2 != nil {
      _write_err514 = thrift.WrapTException(err2)
    }
    if _write_err514 != nil {
      return false, thrift.WrapTException(_write_err514)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "stopAdminTask", thrift.REPLY, seqId); err2 != nil {
    _write_err514 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err514 == nil && err2 != nil {
    _write_err514 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err514 == nil && err2 != nil {
    _write_err514 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err514 == nil && err2 != nil {
    _write_err514 = thrift.WrapTException(err2)
  }
  if _write_err514 != nil {
    return false, thrift.WrapTException(_write_err514)
  }
  return true, err
}

type storageAdminServiceProcessorClearSpace struct {
  handler StorageAdminService
}

func (p *storageAdminServiceProcessorClearSpace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err516 error
  args := StorageAdminServiceClearSpaceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clearSpace", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := StorageAdminServiceClearSpaceResult{}
  if retval, err2 := p.handler.ClearSpace(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc517 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearSpace: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "clearSpace", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err516 = thrift.WrapTException(err2)
    }
    if err2 := _exc517.Write(ctx, oprot); _write_err516 == nil && err2 != nil {
      _write_err516 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err516 == nil && err2 != nil {
      _write_err516 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err516 == nil && err2 != nil {
      _write_err516 = thrift.WrapTException(err2)
    }
    if _write_err516 != nil {
      return false, thrift.WrapTException(_write_err516)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "clearSpace", thrift.REPLY, seqId); err2 != nil {
    _write_err516 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err516 == nil && err2 != nil {
    _write_err516 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err516 == nil && err2 != nil {
    _write_err516 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err516 == nil && err2 != nil {
    _write_err516 = thrift.WrapTException(err2)
  }
  if _write_err516 != nil {
    return false, thrift.WrapTException(_write_err516)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type StorageAdminServiceTransLeaderArgs struct {
  Req *TransLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceTransLeaderArgs() *StorageAdminServiceTransLeaderArgs {
  return &StorageAdminServiceTransLeaderArgs{}
}

var StorageAdminServiceTransLeaderArgs_Req_DEFAULT *TransLeaderReq
func (p *StorageAdminServiceTransLeaderArgs) GetReq() *TransLeaderReq {
  if !p.IsSetReq() {
    return StorageAdminServiceTransLeaderArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceTransLeaderArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceTransLeaderArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &TransLeaderReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "transLeader_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceTransLeaderArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceTransLeaderArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceTransLeaderResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceTransLeaderResult() *StorageAdminServiceTransLeaderResult {
  return &StorageAdminServiceTransLeaderResult{}
}

var StorageAdminServiceTransLeaderResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceTransLeaderResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceTransLeaderResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceTransLeaderResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceTransLeaderResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "transLeader_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceTransLeaderResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceTransLeaderResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceAddPartArgs struct {
  Req *AddPartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddPartArgs() *StorageAdminServiceAddPartArgs {
  return &StorageAdminServiceAddPartArgs{}
}

var StorageAdminServiceAddPartArgs_Req_DEFAULT *AddPartReq
func (p *StorageAdminServiceAddPartArgs) GetReq() *AddPartReq {
  if !p.IsSetReq() {
    return StorageAdminServiceAddPartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddPartArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceAddPartArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddPartReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addPart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddPartArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddPartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddPartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceAddPartResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddPartResult() *StorageAdminServiceAddPartResult {
  return &StorageAdminServiceAddPartResult{}
}

var StorageAdminServiceAddPartResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceAddPartResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddPartResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddPartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceAddPartResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addPart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddPartResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddPartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddPartResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceAddLearnerArgs struct {
  Req *AddLearnerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddLearnerArgs() *StorageAdminServiceAddLearnerArgs {
  return &StorageAdminServiceAddLearnerArgs{}
}

var StorageAdminServiceAddLearnerArgs_Req_DEFAULT *AddLearnerReq
func (p *StorageAdminServiceAddLearnerArgs) GetReq() *AddLearnerReq {
  if !p.IsSetReq() {
    return StorageAdminServiceAddLearnerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddLearnerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceAddLearnerArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddLearnerReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addLearner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddLearnerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddLearnerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceAddLearnerResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddLearnerResult() *StorageAdminServiceAddLearnerResult {
  return &StorageAdminServiceAddLearnerResult{}
}

var StorageAdminServiceAddLearnerResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceAddLearnerResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddLearnerResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddLearnerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceAddLearnerResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addLearner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddLearnerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddLearnerResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceRemovePartArgs struct {
  Req *RemovePartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceRemovePartArgs() *StorageAdminServiceRemovePartArgs {
  return &StorageAdminServiceRemovePartArgs{}
}

var StorageAdminServiceRemovePartArgs_Req_DEFAULT *RemovePartReq
func (p *StorageAdminServiceRemovePartArgs) GetReq() *RemovePartReq {
  if !p.IsSetReq() {
    return StorageAdminServiceRemovePartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceRemovePartArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceRemovePartArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RemovePartReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removePart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceRemovePartArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceRemovePartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceRemovePartResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceRemovePartResult() *StorageAdminServiceRemovePartResult {
  return &StorageAdminServiceRemovePartResult{}
}

var StorageAdminServiceRemovePartResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceRemovePartResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceRemovePartResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceRemovePartResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceRemovePartResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removePart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceRemovePartResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceRemovePartResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceRemovePartResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceMemberChangeArgs struct {
  Req *MemberChangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceMemberChangeArgs() *StorageAdminServiceMemberChangeArgs {
  return &StorageAdminServiceMemberChangeArgs{}
}

var StorageAdminServiceMemberChangeArgs_Req_DEFAULT *MemberChangeReq
func (p *StorageAdminServiceMemberChangeArgs) GetReq() *MemberChangeReq {
  if !p.IsSetReq() {
    return StorageAdminServiceMemberChangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceMemberChangeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceMemberChangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &MemberChangeReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "memberChange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceMemberChangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceMemberChangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceMemberChangeResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceMemberChangeResult() *StorageAdminServiceMemberChangeResult {
  return &StorageAdminServiceMemberChangeResult{}
}

var StorageAdminServiceMemberChangeResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceMemberChangeResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceMemberChangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceMemberChangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceMemberChangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "memberChange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceMemberChangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceMemberChangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceWaitingForCatchUpDataArgs struct {
  Req *CatchUpDataReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceWaitingForCatchUpDataArgs() *StorageAdminServiceWaitingForCatchUpDataArgs {
  return &StorageAdminServiceWaitingForCatchUpDataArgs{}
}

var StorageAdminServiceWaitingForCatchUpDataArgs_Req_DEFAULT *CatchUpDataReq
func (p *StorageAdminServiceWaitingForCatchUpDataArgs) GetReq() *CatchUpDataReq {
  if !p.IsSetReq() {
    return StorageAdminServiceWaitingForCatchUpDataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceWaitingForCatchUpDataArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CatchUpDataReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "waitingForCatchUpData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceWaitingForCatchUpDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceWaitingForCatchUpDataResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceWaitingForCatchUpDataResult() *StorageAdminServiceWaitingForCatchUpDataResult {
  return &StorageAdminServiceWaitingForCatchUpDataResult{}
}

var StorageAdminServiceWaitingForCatchUpDataResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceWaitingForCatchUpDataResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceWaitingForCatchUpDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceWaitingForCatchUpDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "waitingForCatchUpData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceWaitingForCatchUpDataResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceCreateCheckpointArgs struct {
  Req *CreateCPRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceCreateCheckpointArgs() *StorageAdminServiceCreateCheckpointArgs {
  return &StorageAdminServiceCreateCheckpointArgs{}
}

var StorageAdminServiceCreateCheckpointArgs_Req_DEFAULT *CreateCPRequest
func (p *StorageAdminServiceCreateCheckpointArgs) GetReq() *CreateCPRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceCreateCheckpointArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceCreateCheckpointArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceCreateCheckpointArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CreateCPRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createCheckpoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceCreateCheckpointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceCreateCheckpointArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceCreateCheckpointResult struct {
  Success *CreateCPResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceCreateCheckpointResult() *StorageAdminServiceCreateCheckpointResult {
  return &StorageAdminServiceCreateCheckpointResult{}
}

var StorageAdminServiceCreateCheckpointResult_Success_DEFAULT *CreateCPResp
func (p *StorageAdminServiceCreateCheckpointResult) GetSuccess() *CreateCPResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceCreateCheckpointResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceCreateCheckpointResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceCreateCheckpointResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateCPResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createCheckpoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceCreateCheckpointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceCreateCheckpointResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceDropCheckpointArgs struct {
  Req *DropCPRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceDropCheckpointArgs() *StorageAdminServiceDropCheckpointArgs {
  return &StorageAdminServiceDropCheckpointArgs{}
}

var StorageAdminServiceDropCheckpointArgs_Req_DEFAULT *DropCPRequest
func (p *StorageAdminServiceDropCheckpointArgs) GetReq() *DropCPRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceDropCheckpointArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceDropCheckpointArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceDropCheckpointArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &DropCPRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropCheckpoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceDropCheckpointArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceDropCheckpointArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceDropCheckpointResult struct {
  Success *DropCPResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceDropCheckpointResult() *StorageAdminServiceDropCheckpointResult {
  return &StorageAdminServiceDropCheckpointResult{}
}

var StorageAdminServiceDropCheckpointResult_Success_DEFAULT *DropCPResp
func (p *StorageAdminServiceDropCheckpointResult) GetSuccess() *DropCPResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceDropCheckpointResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceDropCheckpointResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceDropCheckpointResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DropCPResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dropCheckpoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceDropCheckpointResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceDropCheckpointResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceBlockingWritesArgs struct {
  Req *BlockingSignRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceBlockingWritesArgs() *StorageAdminServiceBlockingWritesArgs {
  return &StorageAdminServiceBlockingWritesArgs{}
}

var StorageAdminServiceBlockingWritesArgs_Req_DEFAULT *BlockingSignRequest
func (p *StorageAdminServiceBlockingWritesArgs) GetReq() *BlockingSignRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceBlockingWritesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceBlockingWritesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceBlockingWritesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &BlockingSignRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockingWrites_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceBlockingWritesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceBlockingWritesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceBlockingWritesResult struct {
  Success *BlockingSignResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceBlockingWritesResult() *StorageAdminServiceBlockingWritesResult {
  return &StorageAdminServiceBlockingWritesResult{}
}

var StorageAdminServiceBlockingWritesResult_Success_DEFAULT *BlockingSignResp
func (p *StorageAdminServiceBlockingWritesResult) GetSuccess() *BlockingSignResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceBlockingWritesResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceBlockingWritesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceBlockingWritesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &BlockingSignResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockingWrites_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceBlockingWritesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceBlockingWritesResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceGetLeaderPartsArgs struct {
  Req *GetLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceGetLeaderPartsArgs() *StorageAdminServiceGetLeaderPartsArgs {
  return &StorageAdminServiceGetLeaderPartsArgs{}
}

var StorageAdminServiceGetLeaderPartsArgs_Req_DEFAULT *GetLeaderReq
func (p *StorageAdminServiceGetLeaderPartsArgs) GetReq() *GetLeaderReq {
  if !p.IsSetReq() {
    return StorageAdminServiceGetLeaderPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceGetLeaderPartsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &GetLeaderReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLeaderParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceGetLeaderPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceGetLeaderPartsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceGetLeaderPartsResult struct {
  Success *GetLeaderPartsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceGetLeaderPartsResult() *StorageAdminServiceGetLeaderPartsResult {
  return &StorageAdminServiceGetLeaderPartsResult{}
}

var StorageAdminServiceGetLeaderPartsResult_Success_DEFAULT *GetLeaderPartsResp
func (p *StorageAdminServiceGetLeaderPartsResult) GetSuccess() *GetLeaderPartsResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceGetLeaderPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceGetLeaderPartsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceGetLeaderPartsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetLeaderPartsResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLeaderParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceGetLeaderPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceGetLeaderPartsResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceCheckPeersArgs struct {
  Req *CheckPeersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceCheckPeersArgs() *StorageAdminServiceCheckPeersArgs {
  return &StorageAdminServiceCheckPeersArgs{}
}

var StorageAdminServiceCheckPeersArgs_Req_DEFAULT *CheckPeersReq
func (p *StorageAdminServiceCheckPeersArgs) GetReq() *CheckPeersReq {
  if !p.IsSetReq() {
    return StorageAdminServiceCheckPeersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceCheckPeersArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceCheckPeersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &CheckPeersReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "checkPeers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceCheckPeersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceCheckPeersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceCheckPeersResult struct {
  Success *AdminExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceCheckPeersResult() *StorageAdminServiceCheckPeersResult {
  return &StorageAdminServiceCheckPeersResult{}
}

var StorageAdminServiceCheckPeersResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceCheckPeersResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceCheckPeersResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceCheckPeersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceCheckPeersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdminExecResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "checkPeers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceCheckPeersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceCheckPeersResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceAddAdminTaskArgs struct {
  Req *AddTaskRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddAdminTaskArgs() *StorageAdminServiceAddAdminTaskArgs {
  return &StorageAdminServiceAddAdminTaskArgs{}
}

var StorageAdminServiceAddAdminTaskArgs_Req_DEFAULT *AddTaskRequest
func (p *StorageAdminServiceAddAdminTaskArgs) GetReq() *AddTaskRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceAddAdminTaskArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddAdminTaskArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceAddAdminTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AddTaskRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addAdminTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddAdminTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddAdminTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceAddAdminTaskResult struct {
  Success *AddTaskResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddAdminTaskResult() *StorageAdminServiceAddAdminTaskResult {
  return &StorageAdminServiceAddAdminTaskResult{}
}

var StorageAdminServiceAddAdminTaskResult_Success_DEFAULT *AddTaskResp
func (p *StorageAdminServiceAddAdminTaskResult) GetSuccess() *AddTaskResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddAdminTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddAdminTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceAddAdminTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AddTaskResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addAdminTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddAdminTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceAddAdminTaskResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceStopAdminTaskArgs struct {
  Req *StopTaskRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceStopAdminTaskArgs() *StorageAdminServiceStopAdminTaskArgs {
  return &StorageAdminServiceStopAdminTaskArgs{}
}

var StorageAdminServiceStopAdminTaskArgs_Req_DEFAULT *StopTaskRequest
func (p *StorageAdminServiceStopAdminTaskArgs) GetReq() *StopTaskRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceStopAdminTaskArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceStopAdminTaskArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceStopAdminTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &StopTaskRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "stopAdminTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceStopAdminTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceStopAdminTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceStopAdminTaskResult struct {
  Success *StopTaskResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceStopAdminTaskResult() *StorageAdminServiceStopAdminTaskResult {
  return &StorageAdminServiceStopAdminTaskResult{}
}

var StorageAdminServiceStopAdminTaskResult_Success_DEFAULT *StopTaskResp
func (p *StorageAdminServiceStopAdminTaskResult) GetSuccess() *StopTaskResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceStopAdminTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceStopAdminTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceStopAdminTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &StopTaskResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "stopAdminTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceStopAdminTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceStopAdminTaskResult(%+v)", *p)
}

// Attributes:
//  - Req
type StorageAdminServiceClearSpaceArgs struct {
  Req *ClearSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceClearSpaceArgs() *StorageAdminServiceClearSpaceArgs {
  return &StorageAdminServiceClearSpaceArgs{}
}

var StorageAdminServiceClearSpaceArgs_Req_DEFAULT *ClearSpaceReq
func (p *StorageAdminServiceClearSpaceArgs) GetReq() *ClearSpaceReq {
  if !p.IsSetReq() {
    return StorageAdminServiceClearSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceClearSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *StorageAdminServiceClearSpaceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ClearSpaceReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceClearSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceClearSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type StorageAdminServiceClearSpaceResult struct {
  Success *ClearSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceClearSpaceResult() *StorageAdminServiceClearSpaceResult {
  return &StorageAdminServiceClearSpaceResult{}
}

var StorageAdminServiceClearSpaceResult_Success_DEFAULT *ClearSpaceResp
func (p *StorageAdminServiceClearSpaceResult) GetSuccess() *ClearSpaceResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceClearSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceClearSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageAdminServiceClearSpaceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ClearSpaceResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clearSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceClearSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageAdminServiceClearSpaceResult(%+v)", *p)
}


type InternalStorageService interface {
  // Parameters:
  //  - Req
  ChainAddEdges(ctx context.Context, req *ChainAddEdgesRequest) (_r *ExecResponse, _err error)
  // Parameters:
  //  - Req
  ChainUpdateEdge(ctx context.Context, req *ChainUpdateEdgeRequest) (_r *UpdateResponse, _err error)
  // Parameters:
  //  - Req
  ChainDeleteEdges(ctx context.Context, req *ChainDeleteEdgesRequest) (_r *ExecResponse, _err error)
}

type InternalStorageServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewInternalStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *InternalStorageServiceClient {
  return &InternalStorageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewInternalStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *InternalStorageServiceClient {
  return &InternalStorageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewInternalStorageServiceClient(c thrift.TClient) *InternalStorageServiceClient {
  return &InternalStorageServiceClient{
    c: c,
  }
}

func (p *InternalStorageServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *InternalStorageServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *InternalStorageServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *InternalStorageServiceClient) ChainAddEdges(ctx context.Context, req *ChainAddEdgesRequest) (_r *ExecResponse, _err error) {
  var _args602 InternalStorageServiceChainAddEdgesArgs
  _args602.Req = req
  var _result604 InternalStorageServiceChainAddEdgesResult
  var _meta603 thrift.ResponseMeta
  _meta603, _err = p.Client_().Call(ctx, "chainAddEdges", &_args602, &_result604)
  p.SetLastResponseMeta_(_meta603)
  if _err != nil {
    return
  }
  if _ret605 := _result604.GetSuccess(); _ret605 != nil {
    return _ret605, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainAddEdges failed: unknown result")
}

// Parameters:
//  - Req
func (p *InternalStorageServiceClient) ChainUpdateEdge(ctx context.Context, req *ChainUpdateEdgeRequest) (_r *UpdateResponse, _err error) {
  var _args606 InternalStorageServiceChainUpdateEdgeArgs
  _args606.Req = req
  var _result608 InternalStorageServiceChainUpdateEdgeResult
  var _meta607 thrift.ResponseMeta
  _meta607, _err = p.Client_().Call(ctx, "chainUpdateEdge", &_args606, &_result608)
  p.SetLastResponseMeta_(_meta607)
  if _err != nil {
    return
  }
  if _ret609 := _result608.GetSuccess(); _ret609 != nil {
    return _ret609, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainUpdateEdge failed: unknown result")
}

// Parameters:
//  - Req
func (p *InternalStorageServiceClient) ChainDeleteEdges(ctx context.Context, req *ChainDeleteEdgesRequest) (_r *ExecResponse, _err error) {
  var _args610 InternalStorageServiceChainDeleteEdgesArgs
  _args610.Req = req
  var _result612 InternalStorageServiceChainDeleteEdgesResult
  var _meta611 thrift.ResponseMeta
  _meta611, _err = p.Client_().Call(ctx, "chainDeleteEdges", &_args610, &_result612)
  p.SetLastResponseMeta_(_meta611)
  if _err != nil {
    return
  }
  if _ret613 := _result612.GetSuccess(); _ret613 != nil {
    return _ret613, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "chainDeleteEdges failed: unknown result")
}

type InternalStorageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler InternalStorageService
}

func (p *InternalStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *InternalStorageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *InternalStorageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewInternalStorageServiceProcessor(handler InternalStorageService) *InternalStorageServiceProcessor {

  self614 := &InternalStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self614.processorMap["chainAddEdges"] = &internalStorageServiceProcessorChainAddEdges{handler:handler}
  self614.processorMap["chainUpdateEdge"] = &internalStorageServiceProcessorChainUpdateEdge{handler:handler}
  self614.processorMap["chainDeleteEdges"] = &internalStorageServiceProcessorChainDeleteEdges{handler:handler}
return self614
}

func (p *InternalStorageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x615 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x615.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x615

}

type internalStorageServiceProcessorChainAddEdges struct {
  handler InternalStorageService
}

func (p *internalStorageServiceProcessorChainAddEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err616 error
  args := InternalStorageServiceChainAddEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalStorageServiceChainAddEdgesResult{}
  if retval, err2 := p.handler.ChainAddEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc617 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainAddEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err616 = thrift.WrapTException(err2)
    }
    if err2 := _exc617.Write(ctx, oprot); _write_err616 == nil && err2 != nil {
      _write_err616 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err616 == nil && err2 != nil {
      _write_err616 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err616 == nil && err2 != nil {
      _write_err616 = thrift.WrapTException(err2)
    }
    if _write_err616 != nil {
      return false, thrift.WrapTException(_write_err616)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainAddEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err616 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err616 == nil && err2 != nil {
    _write_err616 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err616 == nil && err2 != nil {
    _write_err616 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err616 == nil && err2 != nil {
    _write_err616 = thrift.WrapTException(err2)
  }
  if _write_err616 != nil {
    return false, thrift.WrapTException(_write_err616)
  }
  return true, err
}

type internalStorageServiceProcessorChainUpdateEdge struct {
  handler InternalStorageService
}

func (p *internalStorageServiceProcessorChainUpdateEdge) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err618 error
  args := InternalStorageServiceChainUpdateEdgeArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalStorageServiceChainUpdateEdgeResult{}
  if retval, err2 := p.handler.ChainUpdateEdge(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc619 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainUpdateEdge: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err618 = thrift.WrapTException(err2)
    }
    if err2 := _exc619.Write(ctx, oprot); _write_err618 == nil && err2 != nil {
      _write_err618 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err618 == nil && err2 != nil {
      _write_err618 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err618 == nil && err2 != nil {
      _write_err618 = thrift.WrapTException(err2)
    }
    if _write_err618 != nil {
      return false, thrift.WrapTException(_write_err618)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainUpdateEdge", thrift.REPLY, seqId); err2 != nil {
    _write_err618 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err618 == nil && err2 != nil {
    _write_err618 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err618 == nil && err2 != nil {
    _write_err618 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err618 == nil && err2 != nil {
    _write_err618 = thrift.WrapTException(err2)
  }
  if _write_err618 != nil {
    return false, thrift.WrapTException(_write_err618)
  }
  return true, err
}

type internalStorageServiceProcessorChainDeleteEdges struct {
  handler InternalStorageService
}

func (p *internalStorageServiceProcessorChainDeleteEdges) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err620 error
  args := InternalStorageServiceChainDeleteEdgesArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := InternalStorageServiceChainDeleteEdgesResult{}
  if retval, err2 := p.handler.ChainDeleteEdges(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc621 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainDeleteEdges: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err620 = thrift.WrapTException(err2)
    }
    if err2 := _exc621.Write(ctx, oprot); _write_err620 == nil && err2 != nil {
      _write_err620 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err620 == nil && err2 != nil {
      _write_err620 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err620 == nil && err2 != nil {
      _write_err620 = thrift.WrapTException(err2)
    }
    if _write_err620 != nil {
      return false, thrift.WrapTException(_write_err620)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "chainDeleteEdges", thrift.REPLY, seqId); err2 != nil {
    _write_err620 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err620 == nil && err2 != nil {
    _write_err620 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err620 == nil && err2 != nil {
    _write_err620 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err620 == nil && err2 != nil {
    _write_err620 = thrift.WrapTException(err2)
  }
  if _write_err620 != nil {
    return false, thrift.WrapTException(_write_err620)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type InternalStorageServiceChainAddEdgesArgs struct {
  Req *ChainAddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalStorageServiceChainAddEdgesArgs() *InternalStorageServiceChainAddEdgesArgs {
  return &InternalStorageServiceChainAddEdgesArgs{}
}

var InternalStorageServiceChainAddEdgesArgs_Req_DEFAULT *ChainAddEdgesRequest
func (p *InternalStorageServiceChainAddEdgesArgs) GetReq() *ChainAddEdgesRequest {
  if !p.IsSetReq() {
    return InternalStorageServiceChainAddEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalStorageServiceChainAddEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalStorageServiceChainAddEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ChainAddEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainAddEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalStorageServiceChainAddEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainAddEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalStorageServiceChainAddEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalStorageServiceChainAddEdgesResult() *InternalStorageServiceChainAddEdgesResult {
  return &InternalStorageServiceChainAddEdgesResult{}
}

var InternalStorageServiceChainAddEdgesResult_Success_DEFAULT *ExecResponse
func (p *InternalStorageServiceChainAddEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return InternalStorageServiceChainAddEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalStorageServiceChainAddEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalStorageServiceChainAddEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainAddEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainAddEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalStorageServiceChainAddEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainAddEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalStorageServiceChainUpdateEdgeArgs struct {
  Req *ChainUpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalStorageServiceChainUpdateEdgeArgs() *InternalStorageServiceChainUpdateEdgeArgs {
  return &InternalStorageServiceChainUpdateEdgeArgs{}
}

var InternalStorageServiceChainUpdateEdgeArgs_Req_DEFAULT *ChainUpdateEdgeRequest
func (p *InternalStorageServiceChainUpdateEdgeArgs) GetReq() *ChainUpdateEdgeRequest {
  if !p.IsSetReq() {
    return InternalStorageServiceChainUpdateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalStorageServiceChainUpdateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalStorageServiceChainUpdateEdgeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ChainUpdateEdgeRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainUpdateEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalStorageServiceChainUpdateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainUpdateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalStorageServiceChainUpdateEdgeResult struct {
  Success *UpdateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalStorageServiceChainUpdateEdgeResult() *InternalStorageServiceChainUpdateEdgeResult {
  return &InternalStorageServiceChainUpdateEdgeResult{}
}

var InternalStorageServiceChainUpdateEdgeResult_Success_DEFAULT *UpdateResponse
func (p *InternalStorageServiceChainUpdateEdgeResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return InternalStorageServiceChainUpdateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalStorageServiceChainUpdateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalStorageServiceChainUpdateEdgeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainUpdateEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainUpdateEdgeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalStorageServiceChainUpdateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainUpdateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type InternalStorageServiceChainDeleteEdgesArgs struct {
  Req *ChainDeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewInternalStorageServiceChainDeleteEdgesArgs() *InternalStorageServiceChainDeleteEdgesArgs {
  return &InternalStorageServiceChainDeleteEdgesArgs{}
}

var InternalStorageServiceChainDeleteEdgesArgs_Req_DEFAULT *ChainDeleteEdgesRequest
func (p *InternalStorageServiceChainDeleteEdgesArgs) GetReq() *ChainDeleteEdgesRequest {
  if !p.IsSetReq() {
    return InternalStorageServiceChainDeleteEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *InternalStorageServiceChainDeleteEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *InternalStorageServiceChainDeleteEdgesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &ChainDeleteEdgesRequest{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainDeleteEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *InternalStorageServiceChainDeleteEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainDeleteEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type InternalStorageServiceChainDeleteEdgesResult struct {
  Success *ExecResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewInternalStorageServiceChainDeleteEdgesResult() *InternalStorageServiceChainDeleteEdgesResult {
  return &InternalStorageServiceChainDeleteEdgesResult{}
}

var InternalStorageServiceChainDeleteEdgesResult_Success_DEFAULT *ExecResponse
func (p *InternalStorageServiceChainDeleteEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return InternalStorageServiceChainDeleteEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *InternalStorageServiceChainDeleteEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *InternalStorageServiceChainDeleteEdgesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "chainDeleteEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalStorageServiceChainDeleteEdgesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *InternalStorageServiceChainDeleteEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalStorageServiceChainDeleteEdgesResult(%+v)", *p)
}


