// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type AlterSchemaOp int64
const (
  AlterSchemaOp_ADD AlterSchemaOp = 1
  AlterSchemaOp_CHANGE AlterSchemaOp = 2
  AlterSchemaOp_DROP AlterSchemaOp = 3
  AlterSchemaOp_UNKNOWN AlterSchemaOp = 4
)

var AlterSchemaOpToName = map[AlterSchemaOp]string {
  AlterSchemaOp_ADD: "ADD",
  AlterSchemaOp_CHANGE: "CHANGE",
  AlterSchemaOp_DROP: "DROP",
  AlterSchemaOp_UNKNOWN: "UNKNOWN",
}

var AlterSchemaOpToValue = map[string]AlterSchemaOp {
  "ADD": AlterSchemaOp_ADD,
  "CHANGE": AlterSchemaOp_CHANGE,
  "DROP": AlterSchemaOp_DROP,
  "UNKNOWN": AlterSchemaOp_UNKNOWN,
}

var AlterSchemaOpNames = []string {
  "ADD",
  "CHANGE",
  "DROP",
  "UNKNOWN",
}

var AlterSchemaOpValues = []AlterSchemaOp {
  AlterSchemaOp_ADD,
  AlterSchemaOp_CHANGE,
  AlterSchemaOp_DROP,
  AlterSchemaOp_UNKNOWN,
}

func (p AlterSchemaOp) String() string {
  if v, ok := AlterSchemaOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AlterSchemaOpFromString(s string) (AlterSchemaOp, error) {
  if v, ok := AlterSchemaOpToValue[s]; ok {
    return v, nil
  }
  return AlterSchemaOp(0), fmt.Errorf("not a valid AlterSchemaOp string")
}

func AlterSchemaOpPtr(v AlterSchemaOp) *AlterSchemaOp { return &v }

type RoleType int64
const (
  RoleType_GOD RoleType = 1
  RoleType_ADMIN RoleType = 2
  RoleType_DBA RoleType = 3
  RoleType_USER RoleType = 4
  RoleType_GUEST RoleType = 5
)

var RoleTypeToName = map[RoleType]string {
  RoleType_GOD: "GOD",
  RoleType_ADMIN: "ADMIN",
  RoleType_DBA: "DBA",
  RoleType_USER: "USER",
  RoleType_GUEST: "GUEST",
}

var RoleTypeToValue = map[string]RoleType {
  "GOD": RoleType_GOD,
  "ADMIN": RoleType_ADMIN,
  "DBA": RoleType_DBA,
  "USER": RoleType_USER,
  "GUEST": RoleType_GUEST,
}

var RoleTypeNames = []string {
  "GOD",
  "ADMIN",
  "DBA",
  "USER",
  "GUEST",
}

var RoleTypeValues = []RoleType {
  RoleType_GOD,
  RoleType_ADMIN,
  RoleType_DBA,
  RoleType_USER,
  RoleType_GUEST,
}

func (p RoleType) String() string {
  if v, ok := RoleTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
  if v, ok := RoleTypeToValue[s]; ok {
    return v, nil
  }
  return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }

type GeoShape int64
const (
  GeoShape_ANY GeoShape = 0
  GeoShape_POINT GeoShape = 1
  GeoShape_LINESTRING GeoShape = 2
  GeoShape_POLYGON GeoShape = 3
)

var GeoShapeToName = map[GeoShape]string {
  GeoShape_ANY: "ANY",
  GeoShape_POINT: "POINT",
  GeoShape_LINESTRING: "LINESTRING",
  GeoShape_POLYGON: "POLYGON",
}

var GeoShapeToValue = map[string]GeoShape {
  "ANY": GeoShape_ANY,
  "POINT": GeoShape_POINT,
  "LINESTRING": GeoShape_LINESTRING,
  "POLYGON": GeoShape_POLYGON,
}

var GeoShapeNames = []string {
  "ANY",
  "POINT",
  "LINESTRING",
  "POLYGON",
}

var GeoShapeValues = []GeoShape {
  GeoShape_ANY,
  GeoShape_POINT,
  GeoShape_LINESTRING,
  GeoShape_POLYGON,
}

func (p GeoShape) String() string {
  if v, ok := GeoShapeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func GeoShapeFromString(s string) (GeoShape, error) {
  if v, ok := GeoShapeToValue[s]; ok {
    return v, nil
  }
  return GeoShape(0), fmt.Errorf("not a valid GeoShape string")
}

func GeoShapePtr(v GeoShape) *GeoShape { return &v }

type IsolationLevel int64
const (
  IsolationLevel_DEFAULT IsolationLevel = 0
  IsolationLevel_TOSS IsolationLevel = 1
)

var IsolationLevelToName = map[IsolationLevel]string {
  IsolationLevel_DEFAULT: "DEFAULT",
  IsolationLevel_TOSS: "TOSS",
}

var IsolationLevelToValue = map[string]IsolationLevel {
  "DEFAULT": IsolationLevel_DEFAULT,
  "TOSS": IsolationLevel_TOSS,
}

var IsolationLevelNames = []string {
  "DEFAULT",
  "TOSS",
}

var IsolationLevelValues = []IsolationLevel {
  IsolationLevel_DEFAULT,
  IsolationLevel_TOSS,
}

func (p IsolationLevel) String() string {
  if v, ok := IsolationLevelToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func IsolationLevelFromString(s string) (IsolationLevel, error) {
  if v, ok := IsolationLevelToValue[s]; ok {
    return v, nil
  }
  return IsolationLevel(0), fmt.Errorf("not a valid IsolationLevel string")
}

func IsolationLevelPtr(v IsolationLevel) *IsolationLevel { return &v }

type HostStatus int64
const (
  HostStatus_ONLINE HostStatus = 0
  HostStatus_OFFLINE HostStatus = 1
  HostStatus_UNKNOWN HostStatus = 2
)

var HostStatusToName = map[HostStatus]string {
  HostStatus_ONLINE: "ONLINE",
  HostStatus_OFFLINE: "OFFLINE",
  HostStatus_UNKNOWN: "UNKNOWN",
}

var HostStatusToValue = map[string]HostStatus {
  "ONLINE": HostStatus_ONLINE,
  "OFFLINE": HostStatus_OFFLINE,
  "UNKNOWN": HostStatus_UNKNOWN,
}

var HostStatusNames = []string {
  "ONLINE",
  "OFFLINE",
  "UNKNOWN",
}

var HostStatusValues = []HostStatus {
  HostStatus_ONLINE,
  HostStatus_OFFLINE,
  HostStatus_UNKNOWN,
}

func (p HostStatus) String() string {
  if v, ok := HostStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HostStatusFromString(s string) (HostStatus, error) {
  if v, ok := HostStatusToValue[s]; ok {
    return v, nil
  }
  return HostStatus(0), fmt.Errorf("not a valid HostStatus string")
}

func HostStatusPtr(v HostStatus) *HostStatus { return &v }

type SnapshotStatus int64
const (
  SnapshotStatus_VALID SnapshotStatus = 0
  SnapshotStatus_INVALID SnapshotStatus = 1
)

var SnapshotStatusToName = map[SnapshotStatus]string {
  SnapshotStatus_VALID: "VALID",
  SnapshotStatus_INVALID: "INVALID",
}

var SnapshotStatusToValue = map[string]SnapshotStatus {
  "VALID": SnapshotStatus_VALID,
  "INVALID": SnapshotStatus_INVALID,
}

var SnapshotStatusNames = []string {
  "VALID",
  "INVALID",
}

var SnapshotStatusValues = []SnapshotStatus {
  SnapshotStatus_VALID,
  SnapshotStatus_INVALID,
}

func (p SnapshotStatus) String() string {
  if v, ok := SnapshotStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func SnapshotStatusFromString(s string) (SnapshotStatus, error) {
  if v, ok := SnapshotStatusToValue[s]; ok {
    return v, nil
  }
  return SnapshotStatus(0), fmt.Errorf("not a valid SnapshotStatus string")
}

func SnapshotStatusPtr(v SnapshotStatus) *SnapshotStatus { return &v }

type AlterSpaceOp int64
const (
  AlterSpaceOp_ADD_ZONE AlterSpaceOp = 1
)

var AlterSpaceOpToName = map[AlterSpaceOp]string {
  AlterSpaceOp_ADD_ZONE: "ADD_ZONE",
}

var AlterSpaceOpToValue = map[string]AlterSpaceOp {
  "ADD_ZONE": AlterSpaceOp_ADD_ZONE,
}

var AlterSpaceOpNames = []string {
  "ADD_ZONE",
}

var AlterSpaceOpValues = []AlterSpaceOp {
  AlterSpaceOp_ADD_ZONE,
}

func (p AlterSpaceOp) String() string {
  if v, ok := AlterSpaceOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AlterSpaceOpFromString(s string) (AlterSpaceOp, error) {
  if v, ok := AlterSpaceOpToValue[s]; ok {
    return v, nil
  }
  return AlterSpaceOp(0), fmt.Errorf("not a valid AlterSpaceOp string")
}

func AlterSpaceOpPtr(v AlterSpaceOp) *AlterSpaceOp { return &v }

type JobOp int64
const (
  JobOp_ADD JobOp = 1
  JobOp_SHOW_All JobOp = 2
  JobOp_SHOW JobOp = 3
  JobOp_STOP JobOp = 4
  JobOp_RECOVER JobOp = 5
)

var JobOpToName = map[JobOp]string {
  JobOp_ADD: "ADD",
  JobOp_SHOW_All: "SHOW_All",
  JobOp_SHOW: "SHOW",
  JobOp_STOP: "STOP",
  JobOp_RECOVER: "RECOVER",
}

var JobOpToValue = map[string]JobOp {
  "ADD": JobOp_ADD,
  "SHOW_All": JobOp_SHOW_All,
  "SHOW": JobOp_SHOW,
  "STOP": JobOp_STOP,
  "RECOVER": JobOp_RECOVER,
}

var JobOpNames = []string {
  "ADD",
  "SHOW_All",
  "SHOW",
  "STOP",
  "RECOVER",
}

var JobOpValues = []JobOp {
  JobOp_ADD,
  JobOp_SHOW_All,
  JobOp_SHOW,
  JobOp_STOP,
  JobOp_RECOVER,
}

func (p JobOp) String() string {
  if v, ok := JobOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func JobOpFromString(s string) (JobOp, error) {
  if v, ok := JobOpToValue[s]; ok {
    return v, nil
  }
  return JobOp(0), fmt.Errorf("not a valid JobOp string")
}

func JobOpPtr(v JobOp) *JobOp { return &v }

type JobType int64
const (
  JobType_COMPACT JobType = 0
  JobType_FLUSH JobType = 1
  JobType_REBUILD_TAG_INDEX JobType = 2
  JobType_REBUILD_EDGE_INDEX JobType = 3
  JobType_REBUILD_FULLTEXT_INDEX JobType = 4
  JobType_STATS JobType = 5
  JobType_DATA_BALANCE JobType = 6
  JobType_DOWNLOAD JobType = 7
  JobType_INGEST JobType = 8
  JobType_LEADER_BALANCE JobType = 9
  JobType_ZONE_BALANCE JobType = 10
  JobType_UNKNOWN JobType = 99
)

var JobTypeToName = map[JobType]string {
  JobType_COMPACT: "COMPACT",
  JobType_FLUSH: "FLUSH",
  JobType_REBUILD_TAG_INDEX: "REBUILD_TAG_INDEX",
  JobType_REBUILD_EDGE_INDEX: "REBUILD_EDGE_INDEX",
  JobType_REBUILD_FULLTEXT_INDEX: "REBUILD_FULLTEXT_INDEX",
  JobType_STATS: "STATS",
  JobType_DATA_BALANCE: "DATA_BALANCE",
  JobType_DOWNLOAD: "DOWNLOAD",
  JobType_INGEST: "INGEST",
  JobType_LEADER_BALANCE: "LEADER_BALANCE",
  JobType_ZONE_BALANCE: "ZONE_BALANCE",
  JobType_UNKNOWN: "UNKNOWN",
}

var JobTypeToValue = map[string]JobType {
  "COMPACT": JobType_COMPACT,
  "FLUSH": JobType_FLUSH,
  "REBUILD_TAG_INDEX": JobType_REBUILD_TAG_INDEX,
  "REBUILD_EDGE_INDEX": JobType_REBUILD_EDGE_INDEX,
  "REBUILD_FULLTEXT_INDEX": JobType_REBUILD_FULLTEXT_INDEX,
  "STATS": JobType_STATS,
  "DATA_BALANCE": JobType_DATA_BALANCE,
  "DOWNLOAD": JobType_DOWNLOAD,
  "INGEST": JobType_INGEST,
  "LEADER_BALANCE": JobType_LEADER_BALANCE,
  "ZONE_BALANCE": JobType_ZONE_BALANCE,
  "UNKNOWN": JobType_UNKNOWN,
}

var JobTypeNames = []string {
  "COMPACT",
  "FLUSH",
  "REBUILD_TAG_INDEX",
  "REBUILD_EDGE_INDEX",
  "REBUILD_FULLTEXT_INDEX",
  "STATS",
  "DATA_BALANCE",
  "DOWNLOAD",
  "INGEST",
  "LEADER_BALANCE",
  "ZONE_BALANCE",
  "UNKNOWN",
}

var JobTypeValues = []JobType {
  JobType_COMPACT,
  JobType_FLUSH,
  JobType_REBUILD_TAG_INDEX,
  JobType_REBUILD_EDGE_INDEX,
  JobType_REBUILD_FULLTEXT_INDEX,
  JobType_STATS,
  JobType_DATA_BALANCE,
  JobType_DOWNLOAD,
  JobType_INGEST,
  JobType_LEADER_BALANCE,
  JobType_ZONE_BALANCE,
  JobType_UNKNOWN,
}

func (p JobType) String() string {
  if v, ok := JobTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
  if v, ok := JobTypeToValue[s]; ok {
    return v, nil
  }
  return JobType(0), fmt.Errorf("not a valid JobType string")
}

func JobTypePtr(v JobType) *JobType { return &v }

type JobStatus int64
const (
  JobStatus_QUEUE JobStatus = 1
  JobStatus_RUNNING JobStatus = 2
  JobStatus_FINISHED JobStatus = 3
  JobStatus_FAILED JobStatus = 4
  JobStatus_STOPPED JobStatus = 5
  JobStatus_INVALID JobStatus = 255
)

var JobStatusToName = map[JobStatus]string {
  JobStatus_QUEUE: "QUEUE",
  JobStatus_RUNNING: "RUNNING",
  JobStatus_FINISHED: "FINISHED",
  JobStatus_FAILED: "FAILED",
  JobStatus_STOPPED: "STOPPED",
  JobStatus_INVALID: "INVALID",
}

var JobStatusToValue = map[string]JobStatus {
  "QUEUE": JobStatus_QUEUE,
  "RUNNING": JobStatus_RUNNING,
  "FINISHED": JobStatus_FINISHED,
  "FAILED": JobStatus_FAILED,
  "STOPPED": JobStatus_STOPPED,
  "INVALID": JobStatus_INVALID,
}

var JobStatusNames = []string {
  "QUEUE",
  "RUNNING",
  "FINISHED",
  "FAILED",
  "STOPPED",
  "INVALID",
}

var JobStatusValues = []JobStatus {
  JobStatus_QUEUE,
  JobStatus_RUNNING,
  JobStatus_FINISHED,
  JobStatus_FAILED,
  JobStatus_STOPPED,
  JobStatus_INVALID,
}

func (p JobStatus) String() string {
  if v, ok := JobStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func JobStatusFromString(s string) (JobStatus, error) {
  if v, ok := JobStatusToValue[s]; ok {
    return v, nil
  }
  return JobStatus(0), fmt.Errorf("not a valid JobStatus string")
}

func JobStatusPtr(v JobStatus) *JobStatus { return &v }

type ListHostType int64
const (
  ListHostType_ALLOC ListHostType = 0
  ListHostType_GRAPH ListHostType = 1
  ListHostType_META ListHostType = 2
  ListHostType_STORAGE ListHostType = 3
  ListHostType_AGENT ListHostType = 4
)

var ListHostTypeToName = map[ListHostType]string {
  ListHostType_ALLOC: "ALLOC",
  ListHostType_GRAPH: "GRAPH",
  ListHostType_META: "META",
  ListHostType_STORAGE: "STORAGE",
  ListHostType_AGENT: "AGENT",
}

var ListHostTypeToValue = map[string]ListHostType {
  "ALLOC": ListHostType_ALLOC,
  "GRAPH": ListHostType_GRAPH,
  "META": ListHostType_META,
  "STORAGE": ListHostType_STORAGE,
  "AGENT": ListHostType_AGENT,
}

var ListHostTypeNames = []string {
  "ALLOC",
  "GRAPH",
  "META",
  "STORAGE",
  "AGENT",
}

var ListHostTypeValues = []ListHostType {
  ListHostType_ALLOC,
  ListHostType_GRAPH,
  ListHostType_META,
  ListHostType_STORAGE,
  ListHostType_AGENT,
}

func (p ListHostType) String() string {
  if v, ok := ListHostTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ListHostTypeFromString(s string) (ListHostType, error) {
  if v, ok := ListHostTypeToValue[s]; ok {
    return v, nil
  }
  return ListHostType(0), fmt.Errorf("not a valid ListHostType string")
}

func ListHostTypePtr(v ListHostType) *ListHostType { return &v }

type HostRole int64
const (
  HostRole_GRAPH HostRole = 0
  HostRole_META HostRole = 1
  HostRole_STORAGE HostRole = 2
  HostRole_LISTENER HostRole = 3
  HostRole_AGENT HostRole = 4
  HostRole_UNKNOWN HostRole = 5
)

var HostRoleToName = map[HostRole]string {
  HostRole_GRAPH: "GRAPH",
  HostRole_META: "META",
  HostRole_STORAGE: "STORAGE",
  HostRole_LISTENER: "LISTENER",
  HostRole_AGENT: "AGENT",
  HostRole_UNKNOWN: "UNKNOWN",
}

var HostRoleToValue = map[string]HostRole {
  "GRAPH": HostRole_GRAPH,
  "META": HostRole_META,
  "STORAGE": HostRole_STORAGE,
  "LISTENER": HostRole_LISTENER,
  "AGENT": HostRole_AGENT,
  "UNKNOWN": HostRole_UNKNOWN,
}

var HostRoleNames = []string {
  "GRAPH",
  "META",
  "STORAGE",
  "LISTENER",
  "AGENT",
  "UNKNOWN",
}

var HostRoleValues = []HostRole {
  HostRole_GRAPH,
  HostRole_META,
  HostRole_STORAGE,
  HostRole_LISTENER,
  HostRole_AGENT,
  HostRole_UNKNOWN,
}

func (p HostRole) String() string {
  if v, ok := HostRoleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HostRoleFromString(s string) (HostRole, error) {
  if v, ok := HostRoleToValue[s]; ok {
    return v, nil
  }
  return HostRole(0), fmt.Errorf("not a valid HostRole string")
}

func HostRolePtr(v HostRole) *HostRole { return &v }

type TaskResult_ int64
const (
  TaskResult__SUCCEEDED TaskResult_ = 0
  TaskResult__FAILED TaskResult_ = 1
  TaskResult__IN_PROGRESS TaskResult_ = 2
  TaskResult__INVALID TaskResult_ = 3
)

var TaskResult_ToName = map[TaskResult_]string {
  TaskResult__SUCCEEDED: "SUCCEEDED",
  TaskResult__FAILED: "FAILED",
  TaskResult__IN_PROGRESS: "IN_PROGRESS",
  TaskResult__INVALID: "INVALID",
}

var TaskResult_ToValue = map[string]TaskResult_ {
  "SUCCEEDED": TaskResult__SUCCEEDED,
  "FAILED": TaskResult__FAILED,
  "IN_PROGRESS": TaskResult__IN_PROGRESS,
  "INVALID": TaskResult__INVALID,
}

var TaskResult_Names = []string {
  "SUCCEEDED",
  "FAILED",
  "IN_PROGRESS",
  "INVALID",
}

var TaskResult_Values = []TaskResult_ {
  TaskResult__SUCCEEDED,
  TaskResult__FAILED,
  TaskResult__IN_PROGRESS,
  TaskResult__INVALID,
}

func (p TaskResult_) String() string {
  if v, ok := TaskResult_ToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func TaskResult_FromString(s string) (TaskResult_, error) {
  if v, ok := TaskResult_ToValue[s]; ok {
    return v, nil
  }
  return TaskResult_(0), fmt.Errorf("not a valid TaskResult_ string")
}

func TaskResult_Ptr(v TaskResult_) *TaskResult_ { return &v }

type ConfigModule int64
const (
  ConfigModule_UNKNOWN ConfigModule = 0
  ConfigModule_ALL ConfigModule = 1
  ConfigModule_GRAPH ConfigModule = 2
  ConfigModule_META ConfigModule = 3
  ConfigModule_STORAGE ConfigModule = 4
)

var ConfigModuleToName = map[ConfigModule]string {
  ConfigModule_UNKNOWN: "UNKNOWN",
  ConfigModule_ALL: "ALL",
  ConfigModule_GRAPH: "GRAPH",
  ConfigModule_META: "META",
  ConfigModule_STORAGE: "STORAGE",
}

var ConfigModuleToValue = map[string]ConfigModule {
  "UNKNOWN": ConfigModule_UNKNOWN,
  "ALL": ConfigModule_ALL,
  "GRAPH": ConfigModule_GRAPH,
  "META": ConfigModule_META,
  "STORAGE": ConfigModule_STORAGE,
}

var ConfigModuleNames = []string {
  "UNKNOWN",
  "ALL",
  "GRAPH",
  "META",
  "STORAGE",
}

var ConfigModuleValues = []ConfigModule {
  ConfigModule_UNKNOWN,
  ConfigModule_ALL,
  ConfigModule_GRAPH,
  ConfigModule_META,
  ConfigModule_STORAGE,
}

func (p ConfigModule) String() string {
  if v, ok := ConfigModuleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModuleFromString(s string) (ConfigModule, error) {
  if v, ok := ConfigModuleToValue[s]; ok {
    return v, nil
  }
  return ConfigModule(0), fmt.Errorf("not a valid ConfigModule string")
}

func ConfigModulePtr(v ConfigModule) *ConfigModule { return &v }

type ConfigMode int64
const (
  ConfigMode_IMMUTABLE ConfigMode = 0
  ConfigMode_REBOOT ConfigMode = 1
  ConfigMode_MUTABLE ConfigMode = 2
  ConfigMode_IGNORED ConfigMode = 3
)

var ConfigModeToName = map[ConfigMode]string {
  ConfigMode_IMMUTABLE: "IMMUTABLE",
  ConfigMode_REBOOT: "REBOOT",
  ConfigMode_MUTABLE: "MUTABLE",
  ConfigMode_IGNORED: "IGNORED",
}

var ConfigModeToValue = map[string]ConfigMode {
  "IMMUTABLE": ConfigMode_IMMUTABLE,
  "REBOOT": ConfigMode_REBOOT,
  "MUTABLE": ConfigMode_MUTABLE,
  "IGNORED": ConfigMode_IGNORED,
}

var ConfigModeNames = []string {
  "IMMUTABLE",
  "REBOOT",
  "MUTABLE",
  "IGNORED",
}

var ConfigModeValues = []ConfigMode {
  ConfigMode_IMMUTABLE,
  ConfigMode_REBOOT,
  ConfigMode_MUTABLE,
  ConfigMode_IGNORED,
}

func (p ConfigMode) String() string {
  if v, ok := ConfigModeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModeFromString(s string) (ConfigMode, error) {
  if v, ok := ConfigModeToValue[s]; ok {
    return v, nil
  }
  return ConfigMode(0), fmt.Errorf("not a valid ConfigMode string")
}

func ConfigModePtr(v ConfigMode) *ConfigMode { return &v }

type ListenerType int64
const (
  ListenerType_UNKNOWN ListenerType = 0
  ListenerType_ELASTICSEARCH ListenerType = 1
)

var ListenerTypeToName = map[ListenerType]string {
  ListenerType_UNKNOWN: "UNKNOWN",
  ListenerType_ELASTICSEARCH: "ELASTICSEARCH",
}

var ListenerTypeToValue = map[string]ListenerType {
  "UNKNOWN": ListenerType_UNKNOWN,
  "ELASTICSEARCH": ListenerType_ELASTICSEARCH,
}

var ListenerTypeNames = []string {
  "UNKNOWN",
  "ELASTICSEARCH",
}

var ListenerTypeValues = []ListenerType {
  ListenerType_UNKNOWN,
  ListenerType_ELASTICSEARCH,
}

func (p ListenerType) String() string {
  if v, ok := ListenerTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ListenerTypeFromString(s string) (ListenerType, error) {
  if v, ok := ListenerTypeToValue[s]; ok {
    return v, nil
  }
  return ListenerType(0), fmt.Errorf("not a valid ListenerType string")
}

func ListenerTypePtr(v ListenerType) *ListenerType { return &v }

type ExternalServiceType int64
const (
  ExternalServiceType_ELASTICSEARCH ExternalServiceType = 1
)

var ExternalServiceTypeToName = map[ExternalServiceType]string {
  ExternalServiceType_ELASTICSEARCH: "ELASTICSEARCH",
}

var ExternalServiceTypeToValue = map[string]ExternalServiceType {
  "ELASTICSEARCH": ExternalServiceType_ELASTICSEARCH,
}

var ExternalServiceTypeNames = []string {
  "ELASTICSEARCH",
}

var ExternalServiceTypeValues = []ExternalServiceType {
  ExternalServiceType_ELASTICSEARCH,
}

func (p ExternalServiceType) String() string {
  if v, ok := ExternalServiceTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ExternalServiceTypeFromString(s string) (ExternalServiceType, error) {
  if v, ok := ExternalServiceTypeToValue[s]; ok {
    return v, nil
  }
  return ExternalServiceType(0), fmt.Errorf("not a valid ExternalServiceType string")
}

func ExternalServiceTypePtr(v ExternalServiceType) *ExternalServiceType { return &v }

type QueryStatus int64
const (
  QueryStatus_RUNNING QueryStatus = 1
  QueryStatus_KILLING QueryStatus = 2
)

var QueryStatusToName = map[QueryStatus]string {
  QueryStatus_RUNNING: "RUNNING",
  QueryStatus_KILLING: "KILLING",
}

var QueryStatusToValue = map[string]QueryStatus {
  "RUNNING": QueryStatus_RUNNING,
  "KILLING": QueryStatus_KILLING,
}

var QueryStatusNames = []string {
  "RUNNING",
  "KILLING",
}

var QueryStatusValues = []QueryStatus {
  QueryStatus_RUNNING,
  QueryStatus_KILLING,
}

func (p QueryStatus) String() string {
  if v, ok := QueryStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func QueryStatusFromString(s string) (QueryStatus, error) {
  if v, ok := QueryStatusToValue[s]; ok {
    return v, nil
  }
  return QueryStatus(0), fmt.Errorf("not a valid QueryStatus string")
}

func QueryStatusPtr(v QueryStatus) *QueryStatus { return &v }

type SchemaVer = int64

func SchemaVerPtr(v SchemaVer) *SchemaVer { return &v }

type ClusterID = int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

// Attributes:
//  - SpaceID
//  - TagID
//  - EdgeType
//  - IndexID
//  - ClusterID
type ID struct {
  SpaceID *nebula0.GraphSpaceID `thrift:"space_id,1,optional" db:"space_id" json:"space_id,omitempty"`
  TagID *nebula0.TagID `thrift:"tag_id,2,optional" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula0.EdgeType `thrift:"edge_type,3,optional" db:"edge_type" json:"edge_type,omitempty"`
  IndexID *nebula0.IndexID `thrift:"index_id,4,optional" db:"index_id" json:"index_id,omitempty"`
  ClusterID *ClusterID `thrift:"cluster_id,5,optional" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewID() *ID {
  return &ID{}
}

var ID_SpaceID_DEFAULT nebula0.GraphSpaceID
func (p *ID) GetSpaceID() nebula0.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return ID_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var ID_TagID_DEFAULT nebula0.TagID
func (p *ID) GetTagID() nebula0.TagID {
  if !p.IsSetTagID() {
    return ID_TagID_DEFAULT
  }
return *p.TagID
}
var ID_EdgeType_DEFAULT nebula0.EdgeType
func (p *ID) GetEdgeType() nebula0.EdgeType {
  if !p.IsSetEdgeType() {
    return ID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
var ID_IndexID_DEFAULT nebula0.IndexID
func (p *ID) GetIndexID() nebula0.IndexID {
  if !p.IsSetIndexID() {
    return ID_IndexID_DEFAULT
  }
return *p.IndexID
}
var ID_ClusterID_DEFAULT ClusterID
func (p *ID) GetClusterID() ClusterID {
  if !p.IsSetClusterID() {
    return ID_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *ID) CountSetFieldsID() int {
  count := 0
  if (p.IsSetSpaceID()) {
    count++
  }
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  if (p.IsSetIndexID()) {
    count++
  }
  if (p.IsSetClusterID()) {
    count++
  }
  return count

}

func (p *ID) IsSetSpaceID() bool {
  return p != nil && p.SpaceID != nil
}

func (p *ID) IsSetTagID() bool {
  return p != nil && p.TagID != nil
}

func (p *ID) IsSetEdgeType() bool {
  return p != nil && p.EdgeType != nil
}

func (p *ID) IsSetIndexID() bool {
  return p != nil && p.IndexID != nil
}

func (p *ID) IsSetClusterID() bool {
  return p != nil && p.ClusterID != nil
}

type IDBuilder struct {
  obj *ID
}

func NewIDBuilder() *IDBuilder{
  return &IDBuilder{
    obj: NewID(),
  }
}

func (p IDBuilder) Emit() *ID{
  return &ID{
    SpaceID: p.obj.SpaceID,
    TagID: p.obj.TagID,
    EdgeType: p.obj.EdgeType,
    IndexID: p.obj.IndexID,
    ClusterID: p.obj.ClusterID,
  }
}

func (i *IDBuilder) SpaceID(spaceID *nebula0.GraphSpaceID) *IDBuilder {
  i.obj.SpaceID = spaceID
  return i
}

func (i *IDBuilder) TagID(tagID *nebula0.TagID) *IDBuilder {
  i.obj.TagID = tagID
  return i
}

func (i *IDBuilder) EdgeType(edgeType *nebula0.EdgeType) *IDBuilder {
  i.obj.EdgeType = edgeType
  return i
}

func (i *IDBuilder) IndexID(indexID *nebula0.IndexID) *IDBuilder {
  i.obj.IndexID = indexID
  return i
}

func (i *IDBuilder) ClusterID(clusterID *ClusterID) *IDBuilder {
  i.obj.ClusterID = clusterID
  return i
}

func (i *ID) SetSpaceID(spaceID *nebula0.GraphSpaceID) *ID {
  i.SpaceID = spaceID
  return i
}

func (i *ID) SetTagID(tagID *nebula0.TagID) *ID {
  i.TagID = tagID
  return i
}

func (i *ID) SetEdgeType(edgeType *nebula0.EdgeType) *ID {
  i.EdgeType = edgeType
  return i
}

func (i *ID) SetIndexID(indexID *nebula0.IndexID) *ID {
  i.IndexID = indexID
  return i
}

func (i *ID) SetClusterID(clusterID *ClusterID) *ID {
  i.ClusterID = clusterID
  return i
}

func (p *ID) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ID)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = &temp
  }
  return nil
}

func (p *ID)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.TagID(v)
    p.TagID = &temp
  }
  return nil
}

func (p *ID)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := nebula0.EdgeType(v)
    p.EdgeType = &temp
  }
  return nil
}

func (p *ID)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := nebula0.IndexID(v)
    p.IndexID = &temp
  }
  return nil
}

func (p *ID)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := ClusterID(v)
    p.ClusterID = &temp
  }
  return nil
}

func (p *ID) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsID(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("ID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ID) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err) }
  }
  return err
}

func (p *ID) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetIndexID() {
    if err := oprot.WriteFieldBegin("index_id", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IndexID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index_id (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cluster_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cluster_id: ", p), err) }
  }
  return err
}

func (p *ID) String() string {
  if p == nil {
    return "<nil>"
  }

  var spaceIDVal string
  if p.SpaceID == nil {
    spaceIDVal = "<nil>"
  } else {
    spaceIDVal = fmt.Sprintf("%v", *p.SpaceID)
  }
  var tagIDVal string
  if p.TagID == nil {
    tagIDVal = "<nil>"
  } else {
    tagIDVal = fmt.Sprintf("%v", *p.TagID)
  }
  var edgeTypeVal string
  if p.EdgeType == nil {
    edgeTypeVal = "<nil>"
  } else {
    edgeTypeVal = fmt.Sprintf("%v", *p.EdgeType)
  }
  var indexIDVal string
  if p.IndexID == nil {
    indexIDVal = "<nil>"
  } else {
    indexIDVal = fmt.Sprintf("%v", *p.IndexID)
  }
  var clusterIDVal string
  if p.ClusterID == nil {
    clusterIDVal = "<nil>"
  } else {
    clusterIDVal = fmt.Sprintf("%v", *p.ClusterID)
  }
  return fmt.Sprintf("ID({SpaceID:%s TagID:%s EdgeType:%s IndexID:%s ClusterID:%s})", spaceIDVal, tagIDVal, edgeTypeVal, indexIDVal, clusterIDVal)
}

// Attributes:
//  - Type
//  - TypeLength
//  - GeoShape
type ColumnTypeDef struct {
  Type nebula0.PropertyType `thrift:"type,1,required" db:"type" json:"type"`
  TypeLength int16 `thrift:"type_length,2,optional" db:"type_length" json:"type_length,omitempty"`
  GeoShape *GeoShape `thrift:"geo_shape,3,optional" db:"geo_shape" json:"geo_shape,omitempty"`
}

func NewColumnTypeDef() *ColumnTypeDef {
  return &ColumnTypeDef{}
}


func (p *ColumnTypeDef) GetType() nebula0.PropertyType {
  return p.Type
}
var ColumnTypeDef_TypeLength_DEFAULT int16 = 0

func (p *ColumnTypeDef) GetTypeLength() int16 {
  return p.TypeLength
}
var ColumnTypeDef_GeoShape_DEFAULT GeoShape
func (p *ColumnTypeDef) GetGeoShape() GeoShape {
  if !p.IsSetGeoShape() {
    return ColumnTypeDef_GeoShape_DEFAULT
  }
return *p.GeoShape
}
func (p *ColumnTypeDef) IsSetTypeLength() bool {
  return p != nil && p.TypeLength != ColumnTypeDef_TypeLength_DEFAULT
}

func (p *ColumnTypeDef) IsSetGeoShape() bool {
  return p != nil && p.GeoShape != nil
}

type ColumnTypeDefBuilder struct {
  obj *ColumnTypeDef
}

func NewColumnTypeDefBuilder() *ColumnTypeDefBuilder{
  return &ColumnTypeDefBuilder{
    obj: NewColumnTypeDef(),
  }
}

func (p ColumnTypeDefBuilder) Emit() *ColumnTypeDef{
  return &ColumnTypeDef{
    Type: p.obj.Type,
    TypeLength: p.obj.TypeLength,
    GeoShape: p.obj.GeoShape,
  }
}

func (c *ColumnTypeDefBuilder) Type(type_a1 nebula0.PropertyType) *ColumnTypeDefBuilder {
  c.obj.Type = type_a1
  return c
}

func (c *ColumnTypeDefBuilder) TypeLength(typeLength int16) *ColumnTypeDefBuilder {
  c.obj.TypeLength = typeLength
  return c
}

func (c *ColumnTypeDefBuilder) GeoShape(geoShape *GeoShape) *ColumnTypeDefBuilder {
  c.obj.GeoShape = geoShape
  return c
}

func (c *ColumnTypeDef) SetType(type_a1 nebula0.PropertyType) *ColumnTypeDef {
  c.Type = type_a1
  return c
}

func (c *ColumnTypeDef) SetTypeLength(typeLength int16) *ColumnTypeDef {
  c.TypeLength = typeLength
  return c
}

func (c *ColumnTypeDef) SetGeoShape(geoShape *GeoShape) *ColumnTypeDef {
  c.GeoShape = geoShape
  return c
}

func (p *ColumnTypeDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnTypeDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.PropertyType(v)
    p.Type = temp
  }
  return nil
}

func (p *ColumnTypeDef)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TypeLength = v
  }
  return nil
}

func (p *ColumnTypeDef)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := GeoShape(v)
    p.GeoShape = &temp
  }
  return nil
}

func (p *ColumnTypeDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ColumnTypeDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnTypeDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ColumnTypeDef) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin("type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(int16(p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *ColumnTypeDef) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetGeoShape() {
    if err := oprot.WriteFieldBegin("geo_shape", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:geo_shape: ", p), err) }
    if err := oprot.WriteI32(int32(*p.GeoShape)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.geo_shape (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:geo_shape: ", p), err) }
  }
  return err
}

func (p *ColumnTypeDef) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  typeLengthVal := fmt.Sprintf("%v", p.TypeLength)
  var geoShapeVal string
  if p.GeoShape == nil {
    geoShapeVal = "<nil>"
  } else {
    geoShapeVal = fmt.Sprintf("%v", *p.GeoShape)
  }
  return fmt.Sprintf("ColumnTypeDef({Type:%s TypeLength:%s GeoShape:%s})", typeVal, typeLengthVal, geoShapeVal)
}

// Attributes:
//  - Name
//  - Type
//  - DefaultValue
//  - Nullable
//  - Comment
type ColumnDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Type *ColumnTypeDef `thrift:"type,2,required" db:"type" json:"type"`
  DefaultValue []byte `thrift:"default_value,3,optional" db:"default_value" json:"default_value,omitempty"`
  Nullable bool `thrift:"nullable,4,optional" db:"nullable" json:"nullable,omitempty"`
  Comment []byte `thrift:"comment,5,optional" db:"comment" json:"comment,omitempty"`
}

func NewColumnDef() *ColumnDef {
  return &ColumnDef{
    Type: NewColumnTypeDef(),
  }
}


func (p *ColumnDef) GetName() []byte {
  return p.Name
}
var ColumnDef_Type_DEFAULT *ColumnTypeDef
func (p *ColumnDef) GetType() *ColumnTypeDef {
  if !p.IsSetType() {
    return ColumnDef_Type_DEFAULT
  }
return p.Type
}
var ColumnDef_DefaultValue_DEFAULT []byte

func (p *ColumnDef) GetDefaultValue() []byte {
  return p.DefaultValue
}
var ColumnDef_Nullable_DEFAULT bool = false

func (p *ColumnDef) GetNullable() bool {
  return p.Nullable
}
var ColumnDef_Comment_DEFAULT []byte

func (p *ColumnDef) GetComment() []byte {
  return p.Comment
}
func (p *ColumnDef) IsSetType() bool {
  return p != nil && p.Type != nil
}

func (p *ColumnDef) IsSetDefaultValue() bool {
  return p != nil && p.DefaultValue != nil
}

func (p *ColumnDef) IsSetNullable() bool {
  return p != nil && p.Nullable != ColumnDef_Nullable_DEFAULT
}

func (p *ColumnDef) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

type ColumnDefBuilder struct {
  obj *ColumnDef
}

func NewColumnDefBuilder() *ColumnDefBuilder{
  return &ColumnDefBuilder{
    obj: NewColumnDef(),
  }
}

func (p ColumnDefBuilder) Emit() *ColumnDef{
  return &ColumnDef{
    Name: p.obj.Name,
    Type: p.obj.Type,
    DefaultValue: p.obj.DefaultValue,
    Nullable: p.obj.Nullable,
    Comment: p.obj.Comment,
  }
}

func (c *ColumnDefBuilder) Name(name []byte) *ColumnDefBuilder {
  c.obj.Name = name
  return c
}

func (c *ColumnDefBuilder) Type(type_a1 *ColumnTypeDef) *ColumnDefBuilder {
  c.obj.Type = type_a1
  return c
}

func (c *ColumnDefBuilder) DefaultValue(defaultValue []byte) *ColumnDefBuilder {
  c.obj.DefaultValue = defaultValue
  return c
}

func (c *ColumnDefBuilder) Nullable(nullable bool) *ColumnDefBuilder {
  c.obj.Nullable = nullable
  return c
}

func (c *ColumnDefBuilder) Comment(comment []byte) *ColumnDefBuilder {
  c.obj.Comment = comment
  return c
}

func (c *ColumnDef) SetName(name []byte) *ColumnDef {
  c.Name = name
  return c
}

func (c *ColumnDef) SetType(type_a1 *ColumnTypeDef) *ColumnDef {
  c.Type = type_a1
  return c
}

func (c *ColumnDef) SetDefaultValue(defaultValue []byte) *ColumnDef {
  c.DefaultValue = defaultValue
  return c
}

func (c *ColumnDef) SetNullable(nullable bool) *ColumnDef {
  c.Nullable = nullable
  return c
}

func (c *ColumnDef) SetComment(comment []byte) *ColumnDef {
  c.Comment = comment
  return c
}

func (p *ColumnDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetType = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *ColumnDef)  ReadField2(iprot thrift.Protocol) error {
  p.Type = NewColumnTypeDef()
  if err := p.Type.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ColumnDef)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.DefaultValue = v
  }
  return nil
}

func (p *ColumnDef)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Nullable = v
  }
  return nil
}

func (p *ColumnDef)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *ColumnDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ColumnDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ColumnDef) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := p.Type.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ColumnDef) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetDefaultValue() {
    if err := oprot.WriteFieldBegin("default_value", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:default_value: ", p), err) }
    if err := oprot.WriteBinary(p.DefaultValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.default_value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:default_value: ", p), err) }
  }
  return err
}

func (p *ColumnDef) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetNullable() {
    if err := oprot.WriteFieldBegin("nullable", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nullable: ", p), err) }
    if err := oprot.WriteBool(bool(p.Nullable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nullable (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nullable: ", p), err) }
  }
  return err
}

func (p *ColumnDef) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:comment: ", p), err) }
  }
  return err
}

func (p *ColumnDef) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  var typeVal string
  if p.Type == nil {
    typeVal = "<nil>"
  } else {
    typeVal = fmt.Sprintf("%v", p.Type)
  }
  defaultValueVal := fmt.Sprintf("%v", p.DefaultValue)
  nullableVal := fmt.Sprintf("%v", p.Nullable)
  commentVal := fmt.Sprintf("%v", p.Comment)
  return fmt.Sprintf("ColumnDef({Name:%s Type:%s DefaultValue:%s Nullable:%s Comment:%s})", nameVal, typeVal, defaultValueVal, nullableVal, commentVal)
}

// Attributes:
//  - TtlDuration
//  - TtlCol
//  - Comment
type SchemaProp struct {
  TtlDuration *int64 `thrift:"ttl_duration,1,optional" db:"ttl_duration" json:"ttl_duration,omitempty"`
  TtlCol []byte `thrift:"ttl_col,2,optional" db:"ttl_col" json:"ttl_col,omitempty"`
  Comment []byte `thrift:"comment,3,optional" db:"comment" json:"comment,omitempty"`
}

func NewSchemaProp() *SchemaProp {
  return &SchemaProp{}
}

var SchemaProp_TtlDuration_DEFAULT int64
func (p *SchemaProp) GetTtlDuration() int64 {
  if !p.IsSetTtlDuration() {
    return SchemaProp_TtlDuration_DEFAULT
  }
return *p.TtlDuration
}
var SchemaProp_TtlCol_DEFAULT []byte

func (p *SchemaProp) GetTtlCol() []byte {
  return p.TtlCol
}
var SchemaProp_Comment_DEFAULT []byte

func (p *SchemaProp) GetComment() []byte {
  return p.Comment
}
func (p *SchemaProp) IsSetTtlDuration() bool {
  return p != nil && p.TtlDuration != nil
}

func (p *SchemaProp) IsSetTtlCol() bool {
  return p != nil && p.TtlCol != nil
}

func (p *SchemaProp) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

type SchemaPropBuilder struct {
  obj *SchemaProp
}

func NewSchemaPropBuilder() *SchemaPropBuilder{
  return &SchemaPropBuilder{
    obj: NewSchemaProp(),
  }
}

func (p SchemaPropBuilder) Emit() *SchemaProp{
  return &SchemaProp{
    TtlDuration: p.obj.TtlDuration,
    TtlCol: p.obj.TtlCol,
    Comment: p.obj.Comment,
  }
}

func (s *SchemaPropBuilder) TtlDuration(ttlDuration *int64) *SchemaPropBuilder {
  s.obj.TtlDuration = ttlDuration
  return s
}

func (s *SchemaPropBuilder) TtlCol(ttlCol []byte) *SchemaPropBuilder {
  s.obj.TtlCol = ttlCol
  return s
}

func (s *SchemaPropBuilder) Comment(comment []byte) *SchemaPropBuilder {
  s.obj.Comment = comment
  return s
}

func (s *SchemaProp) SetTtlDuration(ttlDuration *int64) *SchemaProp {
  s.TtlDuration = ttlDuration
  return s
}

func (s *SchemaProp) SetTtlCol(ttlCol []byte) *SchemaProp {
  s.TtlCol = ttlCol
  return s
}

func (s *SchemaProp) SetComment(comment []byte) *SchemaProp {
  s.Comment = comment
  return s
}

func (p *SchemaProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.TtlDuration = &v
  }
  return nil
}

func (p *SchemaProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TtlCol = v
  }
  return nil
}

func (p *SchemaProp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *SchemaProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SchemaProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaProp) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlDuration() {
    if err := oprot.WriteFieldBegin("ttl_duration", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ttl_duration: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TtlDuration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_duration (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ttl_duration: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlCol() {
    if err := oprot.WriteFieldBegin("ttl_col", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_col: ", p), err) }
    if err := oprot.WriteBinary(p.TtlCol); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_col (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_col: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  }
  return err
}

func (p *SchemaProp) String() string {
  if p == nil {
    return "<nil>"
  }

  var ttlDurationVal string
  if p.TtlDuration == nil {
    ttlDurationVal = "<nil>"
  } else {
    ttlDurationVal = fmt.Sprintf("%v", *p.TtlDuration)
  }
  ttlColVal := fmt.Sprintf("%v", p.TtlCol)
  commentVal := fmt.Sprintf("%v", p.Comment)
  return fmt.Sprintf("SchemaProp({TtlDuration:%s TtlCol:%s Comment:%s})", ttlDurationVal, ttlColVal, commentVal)
}

// Attributes:
//  - Columns
//  - SchemaProp
type Schema struct {
  Columns []*ColumnDef `thrift:"columns,1" db:"columns" json:"columns"`
  SchemaProp *SchemaProp `thrift:"schema_prop,2" db:"schema_prop" json:"schema_prop"`
}

func NewSchema() *Schema {
  return &Schema{
    SchemaProp: NewSchemaProp(),
  }
}


func (p *Schema) GetColumns() []*ColumnDef {
  return p.Columns
}
var Schema_SchemaProp_DEFAULT *SchemaProp
func (p *Schema) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return Schema_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *Schema) IsSetSchemaProp() bool {
  return p != nil && p.SchemaProp != nil
}

type SchemaBuilder struct {
  obj *Schema
}

func NewSchemaBuilder() *SchemaBuilder{
  return &SchemaBuilder{
    obj: NewSchema(),
  }
}

func (p SchemaBuilder) Emit() *Schema{
  return &Schema{
    Columns: p.obj.Columns,
    SchemaProp: p.obj.SchemaProp,
  }
}

func (s *SchemaBuilder) Columns(columns []*ColumnDef) *SchemaBuilder {
  s.obj.Columns = columns
  return s
}

func (s *SchemaBuilder) SchemaProp(schemaProp *SchemaProp) *SchemaBuilder {
  s.obj.SchemaProp = schemaProp
  return s
}

func (s *Schema) SetColumns(columns []*ColumnDef) *Schema {
  s.Columns = columns
  return s
}

func (s *Schema) SetSchemaProp(schemaProp *SchemaProp) *Schema {
  s.SchemaProp = schemaProp
  return s
}

func (p *Schema) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := NewColumnDef()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Columns = append(p.Columns, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *Schema) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  return err
}

func (p *Schema) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_prop: ", p), err) }
  return err
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }

  columnsVal := fmt.Sprintf("%v", p.Columns)
  var schemaPropVal string
  if p.SchemaProp == nil {
    schemaPropVal = "<nil>"
  } else {
    schemaPropVal = fmt.Sprintf("%v", p.SchemaProp)
  }
  return fmt.Sprintf("Schema({Columns:%s SchemaProp:%s})", columnsVal, schemaPropVal)
}

// Attributes:
//  - Id
//  - Name
type IdName struct {
  Id *ID `thrift:"id,1" db:"id" json:"id"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewIdName() *IdName {
  return &IdName{}
}

var IdName_Id_DEFAULT *ID
func (p *IdName) GetId() *ID {
  if !p.IsSetId() {
    return IdName_Id_DEFAULT
  }
return p.Id
}

func (p *IdName) GetName() []byte {
  return p.Name
}
func (p *IdName) IsSetId() bool {
  return p != nil && p.Id != nil
}

type IdNameBuilder struct {
  obj *IdName
}

func NewIdNameBuilder() *IdNameBuilder{
  return &IdNameBuilder{
    obj: NewIdName(),
  }
}

func (p IdNameBuilder) Emit() *IdName{
  return &IdName{
    Id: p.obj.Id,
    Name: p.obj.Name,
  }
}

func (i *IdNameBuilder) Id(id *ID) *IdNameBuilder {
  i.obj.Id = id
  return i
}

func (i *IdNameBuilder) Name(name []byte) *IdNameBuilder {
  i.obj.Name = name
  return i
}

func (i *IdName) SetId(id *ID) *IdName {
  i.Id = id
  return i
}

func (i *IdName) SetName(name []byte) *IdName {
  i.Name = name
  return i
}

func (p *IdName) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdName)  ReadField1(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *IdName)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *IdName) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IdName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdName) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IdName) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IdName) String() string {
  if p == nil {
    return "<nil>"
  }

  var idVal string
  if p.Id == nil {
    idVal = "<nil>"
  } else {
    idVal = fmt.Sprintf("%v", p.Id)
  }
  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("IdName({Id:%s Name:%s})", idVal, nameVal)
}

// Attributes:
//  - SpaceName
//  - PartitionNum
//  - ReplicaFactor
//  - CharsetName
//  - CollateName
//  - VidType
//  - ZoneNames
//  - IsolationLevel
//  - Comment
type SpaceDesc struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  PartitionNum int32 `thrift:"partition_num,2" db:"partition_num" json:"partition_num"`
  ReplicaFactor int32 `thrift:"replica_factor,3" db:"replica_factor" json:"replica_factor"`
  CharsetName []byte `thrift:"charset_name,4" db:"charset_name" json:"charset_name"`
  CollateName []byte `thrift:"collate_name,5" db:"collate_name" json:"collate_name"`
  VidType *ColumnTypeDef `thrift:"vid_type,6" db:"vid_type" json:"vid_type"`
  ZoneNames [][]byte `thrift:"zone_names,7" db:"zone_names" json:"zone_names"`
  IsolationLevel *IsolationLevel `thrift:"isolation_level,8,optional" db:"isolation_level" json:"isolation_level,omitempty"`
  Comment []byte `thrift:"comment,9,optional" db:"comment" json:"comment,omitempty"`
}

func NewSpaceDesc() *SpaceDesc {
  return &SpaceDesc{
    VidType: NewColumnTypeDef(),
  }
}


func (p *SpaceDesc) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *SpaceDesc) GetPartitionNum() int32 {
  return p.PartitionNum
}

func (p *SpaceDesc) GetReplicaFactor() int32 {
  return p.ReplicaFactor
}

func (p *SpaceDesc) GetCharsetName() []byte {
  return p.CharsetName
}

func (p *SpaceDesc) GetCollateName() []byte {
  return p.CollateName
}
var SpaceDesc_VidType_DEFAULT *ColumnTypeDef = &ColumnTypeDef{
  Type: 7,
  TypeLength: const_lit_vid_type_type_length,
}
func (p *SpaceDesc) GetVidType() *ColumnTypeDef {
  if !p.IsSetVidType() {
    return SpaceDesc_VidType_DEFAULT
  }
return p.VidType
}

func (p *SpaceDesc) GetZoneNames() [][]byte {
  return p.ZoneNames
}
var SpaceDesc_IsolationLevel_DEFAULT IsolationLevel
func (p *SpaceDesc) GetIsolationLevel() IsolationLevel {
  if !p.IsSetIsolationLevel() {
    return SpaceDesc_IsolationLevel_DEFAULT
  }
return *p.IsolationLevel
}
var SpaceDesc_Comment_DEFAULT []byte

func (p *SpaceDesc) GetComment() []byte {
  return p.Comment
}
func (p *SpaceDesc) IsSetVidType() bool {
  return p != nil && p.VidType != nil
}

func (p *SpaceDesc) IsSetIsolationLevel() bool {
  return p != nil && p.IsolationLevel != nil
}

func (p *SpaceDesc) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

type SpaceDescBuilder struct {
  obj *SpaceDesc
}

func NewSpaceDescBuilder() *SpaceDescBuilder{
  return &SpaceDescBuilder{
    obj: NewSpaceDesc(),
  }
}

func (p SpaceDescBuilder) Emit() *SpaceDesc{
  return &SpaceDesc{
    SpaceName: p.obj.SpaceName,
    PartitionNum: p.obj.PartitionNum,
    ReplicaFactor: p.obj.ReplicaFactor,
    CharsetName: p.obj.CharsetName,
    CollateName: p.obj.CollateName,
    VidType: p.obj.VidType,
    ZoneNames: p.obj.ZoneNames,
    IsolationLevel: p.obj.IsolationLevel,
    Comment: p.obj.Comment,
  }
}

func (s *SpaceDescBuilder) SpaceName(spaceName []byte) *SpaceDescBuilder {
  s.obj.SpaceName = spaceName
  return s
}

func (s *SpaceDescBuilder) PartitionNum(partitionNum int32) *SpaceDescBuilder {
  s.obj.PartitionNum = partitionNum
  return s
}

func (s *SpaceDescBuilder) ReplicaFactor(replicaFactor int32) *SpaceDescBuilder {
  s.obj.ReplicaFactor = replicaFactor
  return s
}

func (s *SpaceDescBuilder) CharsetName(charsetName []byte) *SpaceDescBuilder {
  s.obj.CharsetName = charsetName
  return s
}

func (s *SpaceDescBuilder) CollateName(collateName []byte) *SpaceDescBuilder {
  s.obj.CollateName = collateName
  return s
}

func (s *SpaceDescBuilder) VidType(vidType *ColumnTypeDef) *SpaceDescBuilder {
  s.obj.VidType = vidType
  return s
}

func (s *SpaceDescBuilder) ZoneNames(zoneNames [][]byte) *SpaceDescBuilder {
  s.obj.ZoneNames = zoneNames
  return s
}

func (s *SpaceDescBuilder) IsolationLevel(isolationLevel *IsolationLevel) *SpaceDescBuilder {
  s.obj.IsolationLevel = isolationLevel
  return s
}

func (s *SpaceDescBuilder) Comment(comment []byte) *SpaceDescBuilder {
  s.obj.Comment = comment
  return s
}

func (s *SpaceDesc) SetSpaceName(spaceName []byte) *SpaceDesc {
  s.SpaceName = spaceName
  return s
}

func (s *SpaceDesc) SetPartitionNum(partitionNum int32) *SpaceDesc {
  s.PartitionNum = partitionNum
  return s
}

func (s *SpaceDesc) SetReplicaFactor(replicaFactor int32) *SpaceDesc {
  s.ReplicaFactor = replicaFactor
  return s
}

func (s *SpaceDesc) SetCharsetName(charsetName []byte) *SpaceDesc {
  s.CharsetName = charsetName
  return s
}

func (s *SpaceDesc) SetCollateName(collateName []byte) *SpaceDesc {
  s.CollateName = collateName
  return s
}

func (s *SpaceDesc) SetVidType(vidType *ColumnTypeDef) *SpaceDesc {
  s.VidType = vidType
  return s
}

func (s *SpaceDesc) SetZoneNames(zoneNames [][]byte) *SpaceDesc {
  s.ZoneNames = zoneNames
  return s
}

func (s *SpaceDesc) SetIsolationLevel(isolationLevel *IsolationLevel) *SpaceDesc {
  s.IsolationLevel = isolationLevel
  return s
}

func (s *SpaceDesc) SetComment(comment []byte) *SpaceDesc {
  s.Comment = comment
  return s
}

func (p *SpaceDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *SpaceDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.PartitionNum = v
  }
  return nil
}

func (p *SpaceDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ReplicaFactor = v
  }
  return nil
}

func (p *SpaceDesc)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.CharsetName = v
  }
  return nil
}

func (p *SpaceDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.CollateName = v
  }
  return nil
}

func (p *SpaceDesc)  ReadField6(iprot thrift.Protocol) error {
  p.VidType = NewColumnTypeDef()
  if err := p.VidType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VidType), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField7(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ZoneNames =  tSlice
  for i := 0; i < size; i ++ {
    var _elem2 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem2 = v
    }
    p.ZoneNames = append(p.ZoneNames, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    temp := IsolationLevel(v)
    p.IsolationLevel = &temp
  }
  return nil
}

func (p *SpaceDesc)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *SpaceDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("partition_num", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartitionNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_num: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("replica_factor", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replica_factor: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReplicaFactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_factor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replica_factor: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("charset_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:charset_name: ", p), err) }
  if err := oprot.WriteBinary(p.CharsetName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.charset_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:charset_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("collate_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:collate_name: ", p), err) }
  if err := oprot.WriteBinary(p.CollateName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.collate_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:collate_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vid_type", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vid_type: ", p), err) }
  if err := p.VidType.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VidType), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vid_type: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_names", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:zone_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ZoneNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ZoneNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:zone_names: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetIsolationLevel() {
    if err := oprot.WriteFieldBegin("isolation_level", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isolation_level: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IsolationLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isolation_level (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isolation_level: ", p), err) }
  }
  return err
}

func (p *SpaceDesc) writeField9(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:comment: ", p), err) }
  }
  return err
}

func (p *SpaceDesc) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  partitionNumVal := fmt.Sprintf("%v", p.PartitionNum)
  replicaFactorVal := fmt.Sprintf("%v", p.ReplicaFactor)
  charsetNameVal := fmt.Sprintf("%v", p.CharsetName)
  collateNameVal := fmt.Sprintf("%v", p.CollateName)
  var vidTypeVal string
  if p.VidType == nil {
    vidTypeVal = "<nil>"
  } else {
    vidTypeVal = fmt.Sprintf("%v", p.VidType)
  }
  zoneNamesVal := fmt.Sprintf("%v", p.ZoneNames)
  var isolationLevelVal string
  if p.IsolationLevel == nil {
    isolationLevelVal = "<nil>"
  } else {
    isolationLevelVal = fmt.Sprintf("%v", *p.IsolationLevel)
  }
  commentVal := fmt.Sprintf("%v", p.Comment)
  return fmt.Sprintf("SpaceDesc({SpaceName:%s PartitionNum:%s ReplicaFactor:%s CharsetName:%s CollateName:%s VidType:%s ZoneNames:%s IsolationLevel:%s Comment:%s})", spaceNameVal, partitionNumVal, replicaFactorVal, charsetNameVal, collateNameVal, vidTypeVal, zoneNamesVal, isolationLevelVal, commentVal)
}

// Attributes:
//  - SpaceID
//  - Properties
type SpaceItem struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Properties *SpaceDesc `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSpaceItem() *SpaceItem {
  return &SpaceItem{
    Properties: NewSpaceDesc(),
  }
}


func (p *SpaceItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var SpaceItem_Properties_DEFAULT *SpaceDesc
func (p *SpaceItem) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return SpaceItem_Properties_DEFAULT
  }
return p.Properties
}
func (p *SpaceItem) IsSetProperties() bool {
  return p != nil && p.Properties != nil
}

type SpaceItemBuilder struct {
  obj *SpaceItem
}

func NewSpaceItemBuilder() *SpaceItemBuilder{
  return &SpaceItemBuilder{
    obj: NewSpaceItem(),
  }
}

func (p SpaceItemBuilder) Emit() *SpaceItem{
  return &SpaceItem{
    SpaceID: p.obj.SpaceID,
    Properties: p.obj.Properties,
  }
}

func (s *SpaceItemBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *SpaceItemBuilder {
  s.obj.SpaceID = spaceID
  return s
}

func (s *SpaceItemBuilder) Properties(properties *SpaceDesc) *SpaceItemBuilder {
  s.obj.Properties = properties
  return s
}

func (s *SpaceItem) SetSpaceID(spaceID nebula0.GraphSpaceID) *SpaceItem {
  s.SpaceID = spaceID
  return s
}

func (s *SpaceItem) SetProperties(properties *SpaceDesc) *SpaceItem {
  s.Properties = properties
  return s
}

func (p *SpaceItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *SpaceItem)  ReadField2(iprot thrift.Protocol) error {
  p.Properties = NewSpaceDesc()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *SpaceItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *SpaceItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *SpaceItem) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  var propertiesVal string
  if p.Properties == nil {
    propertiesVal = "<nil>"
  } else {
    propertiesVal = fmt.Sprintf("%v", p.Properties)
  }
  return fmt.Sprintf("SpaceItem({SpaceID:%s Properties:%s})", spaceIDVal, propertiesVal)
}

// Attributes:
//  - TagID
//  - TagName
//  - Version
//  - Schema
type TagItem struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewTagItem() *TagItem {
  return &TagItem{
    Schema: NewSchema(),
  }
}


func (p *TagItem) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *TagItem) GetTagName() []byte {
  return p.TagName
}

func (p *TagItem) GetVersion() SchemaVer {
  return p.Version
}
var TagItem_Schema_DEFAULT *Schema
func (p *TagItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return TagItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *TagItem) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type TagItemBuilder struct {
  obj *TagItem
}

func NewTagItemBuilder() *TagItemBuilder{
  return &TagItemBuilder{
    obj: NewTagItem(),
  }
}

func (p TagItemBuilder) Emit() *TagItem{
  return &TagItem{
    TagID: p.obj.TagID,
    TagName: p.obj.TagName,
    Version: p.obj.Version,
    Schema: p.obj.Schema,
  }
}

func (t *TagItemBuilder) TagID(tagID nebula0.TagID) *TagItemBuilder {
  t.obj.TagID = tagID
  return t
}

func (t *TagItemBuilder) TagName(tagName []byte) *TagItemBuilder {
  t.obj.TagName = tagName
  return t
}

func (t *TagItemBuilder) Version(version SchemaVer) *TagItemBuilder {
  t.obj.Version = version
  return t
}

func (t *TagItemBuilder) Schema(schema *Schema) *TagItemBuilder {
  t.obj.Schema = schema
  return t
}

func (t *TagItem) SetTagID(tagID nebula0.TagID) *TagItem {
  t.TagID = tagID
  return t
}

func (t *TagItem) SetTagName(tagName []byte) *TagItem {
  t.TagName = tagName
  return t
}

func (t *TagItem) SetVersion(version SchemaVer) *TagItem {
  t.Version = version
  return t
}

func (t *TagItem) SetSchema(schema *Schema) *TagItem {
  t.Schema = schema
  return t
}

func (p *TagItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.TagID(v)
    p.TagID = temp
  }
  return nil
}

func (p *TagItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *TagItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := SchemaVer(v)
    p.Version = temp
  }
  return nil
}

func (p *TagItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *TagItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TagItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *TagItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *TagItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *TagItem) String() string {
  if p == nil {
    return "<nil>"
  }

  tagIDVal := fmt.Sprintf("%v", p.TagID)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  versionVal := fmt.Sprintf("%v", p.Version)
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  return fmt.Sprintf("TagItem({TagID:%s TagName:%s Version:%s Schema:%s})", tagIDVal, tagNameVal, versionVal, schemaVal)
}

// Attributes:
//  - Op
//  - Schema
type AlterSchemaItem struct {
  Op AlterSchemaOp `thrift:"op,1" db:"op" json:"op"`
  Schema *Schema `thrift:"schema,2" db:"schema" json:"schema"`
}

func NewAlterSchemaItem() *AlterSchemaItem {
  return &AlterSchemaItem{
    Schema: NewSchema(),
  }
}


func (p *AlterSchemaItem) GetOp() AlterSchemaOp {
  return p.Op
}
var AlterSchemaItem_Schema_DEFAULT *Schema
func (p *AlterSchemaItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return AlterSchemaItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *AlterSchemaItem) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type AlterSchemaItemBuilder struct {
  obj *AlterSchemaItem
}

func NewAlterSchemaItemBuilder() *AlterSchemaItemBuilder{
  return &AlterSchemaItemBuilder{
    obj: NewAlterSchemaItem(),
  }
}

func (p AlterSchemaItemBuilder) Emit() *AlterSchemaItem{
  return &AlterSchemaItem{
    Op: p.obj.Op,
    Schema: p.obj.Schema,
  }
}

func (a *AlterSchemaItemBuilder) Op(op AlterSchemaOp) *AlterSchemaItemBuilder {
  a.obj.Op = op
  return a
}

func (a *AlterSchemaItemBuilder) Schema(schema *Schema) *AlterSchemaItemBuilder {
  a.obj.Schema = schema
  return a
}

func (a *AlterSchemaItem) SetOp(op AlterSchemaOp) *AlterSchemaItem {
  a.Op = op
  return a
}

func (a *AlterSchemaItem) SetSchema(schema *Schema) *AlterSchemaItem {
  a.Schema = schema
  return a
}

func (p *AlterSchemaItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSchemaItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := AlterSchemaOp(v)
    p.Op = temp
  }
  return nil
}

func (p *AlterSchemaItem)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *AlterSchemaItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterSchemaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSchemaItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err) }
  return err
}

func (p *AlterSchemaItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  return err
}

func (p *AlterSchemaItem) String() string {
  if p == nil {
    return "<nil>"
  }

  opVal := fmt.Sprintf("%v", p.Op)
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  return fmt.Sprintf("AlterSchemaItem({Op:%s Schema:%s})", opVal, schemaVal)
}

// Attributes:
//  - EdgeType
//  - EdgeName
//  - Version
//  - Schema
type EdgeItem struct {
  EdgeType nebula0.EdgeType `thrift:"edge_type,1" db:"edge_type" json:"edge_type"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewEdgeItem() *EdgeItem {
  return &EdgeItem{
    Schema: NewSchema(),
  }
}


func (p *EdgeItem) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgeItem) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *EdgeItem) GetVersion() SchemaVer {
  return p.Version
}
var EdgeItem_Schema_DEFAULT *Schema
func (p *EdgeItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return EdgeItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *EdgeItem) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type EdgeItemBuilder struct {
  obj *EdgeItem
}

func NewEdgeItemBuilder() *EdgeItemBuilder{
  return &EdgeItemBuilder{
    obj: NewEdgeItem(),
  }
}

func (p EdgeItemBuilder) Emit() *EdgeItem{
  return &EdgeItem{
    EdgeType: p.obj.EdgeType,
    EdgeName: p.obj.EdgeName,
    Version: p.obj.Version,
    Schema: p.obj.Schema,
  }
}

func (e *EdgeItemBuilder) EdgeType(edgeType nebula0.EdgeType) *EdgeItemBuilder {
  e.obj.EdgeType = edgeType
  return e
}

func (e *EdgeItemBuilder) EdgeName(edgeName []byte) *EdgeItemBuilder {
  e.obj.EdgeName = edgeName
  return e
}

func (e *EdgeItemBuilder) Version(version SchemaVer) *EdgeItemBuilder {
  e.obj.Version = version
  return e
}

func (e *EdgeItemBuilder) Schema(schema *Schema) *EdgeItemBuilder {
  e.obj.Schema = schema
  return e
}

func (e *EdgeItem) SetEdgeType(edgeType nebula0.EdgeType) *EdgeItem {
  e.EdgeType = edgeType
  return e
}

func (e *EdgeItem) SetEdgeName(edgeName []byte) *EdgeItem {
  e.EdgeName = edgeName
  return e
}

func (e *EdgeItem) SetVersion(version SchemaVer) *EdgeItem {
  e.Version = version
  return e
}

func (e *EdgeItem) SetSchema(schema *Schema) *EdgeItem {
  e.Schema = schema
  return e
}

func (p *EdgeItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.EdgeType(v)
    p.EdgeType = temp
  }
  return nil
}

func (p *EdgeItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *EdgeItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := SchemaVer(v)
    p.Version = temp
  }
  return nil
}

func (p *EdgeItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *EdgeItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_type: ", p), err) }
  return err
}

func (p *EdgeItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *EdgeItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *EdgeItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *EdgeItem) String() string {
  if p == nil {
    return "<nil>"
  }

  edgeTypeVal := fmt.Sprintf("%v", p.EdgeType)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  versionVal := fmt.Sprintf("%v", p.Version)
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  return fmt.Sprintf("EdgeItem({EdgeType:%s EdgeName:%s Version:%s Schema:%s})", edgeTypeVal, edgeNameVal, versionVal, schemaVal)
}

// Attributes:
//  - S2MaxLevel
//  - S2MaxCells
type IndexParams struct {
  S2MaxLevel *int32 `thrift:"s2_max_level,1,optional" db:"s2_max_level" json:"s2_max_level,omitempty"`
  S2MaxCells *int32 `thrift:"s2_max_cells,2,optional" db:"s2_max_cells" json:"s2_max_cells,omitempty"`
}

func NewIndexParams() *IndexParams {
  return &IndexParams{}
}

var IndexParams_S2MaxLevel_DEFAULT int32
func (p *IndexParams) GetS2MaxLevel() int32 {
  if !p.IsSetS2MaxLevel() {
    return IndexParams_S2MaxLevel_DEFAULT
  }
return *p.S2MaxLevel
}
var IndexParams_S2MaxCells_DEFAULT int32
func (p *IndexParams) GetS2MaxCells() int32 {
  if !p.IsSetS2MaxCells() {
    return IndexParams_S2MaxCells_DEFAULT
  }
return *p.S2MaxCells
}
func (p *IndexParams) IsSetS2MaxLevel() bool {
  return p != nil && p.S2MaxLevel != nil
}

func (p *IndexParams) IsSetS2MaxCells() bool {
  return p != nil && p.S2MaxCells != nil
}

type IndexParamsBuilder struct {
  obj *IndexParams
}

func NewIndexParamsBuilder() *IndexParamsBuilder{
  return &IndexParamsBuilder{
    obj: NewIndexParams(),
  }
}

func (p IndexParamsBuilder) Emit() *IndexParams{
  return &IndexParams{
    S2MaxLevel: p.obj.S2MaxLevel,
    S2MaxCells: p.obj.S2MaxCells,
  }
}

func (i *IndexParamsBuilder) S2MaxLevel(s2MaxLevel *int32) *IndexParamsBuilder {
  i.obj.S2MaxLevel = s2MaxLevel
  return i
}

func (i *IndexParamsBuilder) S2MaxCells(s2MaxCells *int32) *IndexParamsBuilder {
  i.obj.S2MaxCells = s2MaxCells
  return i
}

func (i *IndexParams) SetS2MaxLevel(s2MaxLevel *int32) *IndexParams {
  i.S2MaxLevel = s2MaxLevel
  return i
}

func (i *IndexParams) SetS2MaxCells(s2MaxCells *int32) *IndexParams {
  i.S2MaxCells = s2MaxCells
  return i
}

func (p *IndexParams) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexParams)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.S2MaxLevel = &v
  }
  return nil
}

func (p *IndexParams)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.S2MaxCells = &v
  }
  return nil
}

func (p *IndexParams) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexParams) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetS2MaxLevel() {
    if err := oprot.WriteFieldBegin("s2_max_level", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s2_max_level: ", p), err) }
    if err := oprot.WriteI32(int32(*p.S2MaxLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.s2_max_level (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s2_max_level: ", p), err) }
  }
  return err
}

func (p *IndexParams) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetS2MaxCells() {
    if err := oprot.WriteFieldBegin("s2_max_cells", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:s2_max_cells: ", p), err) }
    if err := oprot.WriteI32(int32(*p.S2MaxCells)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.s2_max_cells (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:s2_max_cells: ", p), err) }
  }
  return err
}

func (p *IndexParams) String() string {
  if p == nil {
    return "<nil>"
  }

  var s2MaxLevelVal string
  if p.S2MaxLevel == nil {
    s2MaxLevelVal = "<nil>"
  } else {
    s2MaxLevelVal = fmt.Sprintf("%v", *p.S2MaxLevel)
  }
  var s2MaxCellsVal string
  if p.S2MaxCells == nil {
    s2MaxCellsVal = "<nil>"
  } else {
    s2MaxCellsVal = fmt.Sprintf("%v", *p.S2MaxCells)
  }
  return fmt.Sprintf("IndexParams({S2MaxLevel:%s S2MaxCells:%s})", s2MaxLevelVal, s2MaxCellsVal)
}

// Attributes:
//  - IndexID
//  - IndexName
//  - SchemaID
//  - SchemaName
//  - Fields
//  - Comment
//  - IndexParams
type IndexItem struct {
  IndexID nebula0.IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  SchemaID *nebula0.SchemaID `thrift:"schema_id,3" db:"schema_id" json:"schema_id"`
  SchemaName []byte `thrift:"schema_name,4" db:"schema_name" json:"schema_name"`
  Fields []*ColumnDef `thrift:"fields,5" db:"fields" json:"fields"`
  Comment []byte `thrift:"comment,6,optional" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7,optional" db:"index_params" json:"index_params,omitempty"`
}

func NewIndexItem() *IndexItem {
  return &IndexItem{}
}


func (p *IndexItem) GetIndexID() nebula0.IndexID {
  return p.IndexID
}

func (p *IndexItem) GetIndexName() []byte {
  return p.IndexName
}
var IndexItem_SchemaID_DEFAULT *nebula0.SchemaID
func (p *IndexItem) GetSchemaID() *nebula0.SchemaID {
  if !p.IsSetSchemaID() {
    return IndexItem_SchemaID_DEFAULT
  }
return p.SchemaID
}

func (p *IndexItem) GetSchemaName() []byte {
  return p.SchemaName
}

func (p *IndexItem) GetFields() []*ColumnDef {
  return p.Fields
}
var IndexItem_Comment_DEFAULT []byte

func (p *IndexItem) GetComment() []byte {
  return p.Comment
}
var IndexItem_IndexParams_DEFAULT *IndexParams
func (p *IndexItem) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return IndexItem_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *IndexItem) IsSetSchemaID() bool {
  return p != nil && p.SchemaID != nil
}

func (p *IndexItem) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

func (p *IndexItem) IsSetIndexParams() bool {
  return p != nil && p.IndexParams != nil
}

type IndexItemBuilder struct {
  obj *IndexItem
}

func NewIndexItemBuilder() *IndexItemBuilder{
  return &IndexItemBuilder{
    obj: NewIndexItem(),
  }
}

func (p IndexItemBuilder) Emit() *IndexItem{
  return &IndexItem{
    IndexID: p.obj.IndexID,
    IndexName: p.obj.IndexName,
    SchemaID: p.obj.SchemaID,
    SchemaName: p.obj.SchemaName,
    Fields: p.obj.Fields,
    Comment: p.obj.Comment,
    IndexParams: p.obj.IndexParams,
  }
}

func (i *IndexItemBuilder) IndexID(indexID nebula0.IndexID) *IndexItemBuilder {
  i.obj.IndexID = indexID
  return i
}

func (i *IndexItemBuilder) IndexName(indexName []byte) *IndexItemBuilder {
  i.obj.IndexName = indexName
  return i
}

func (i *IndexItemBuilder) SchemaID(schemaID *nebula0.SchemaID) *IndexItemBuilder {
  i.obj.SchemaID = schemaID
  return i
}

func (i *IndexItemBuilder) SchemaName(schemaName []byte) *IndexItemBuilder {
  i.obj.SchemaName = schemaName
  return i
}

func (i *IndexItemBuilder) Fields(fields []*ColumnDef) *IndexItemBuilder {
  i.obj.Fields = fields
  return i
}

func (i *IndexItemBuilder) Comment(comment []byte) *IndexItemBuilder {
  i.obj.Comment = comment
  return i
}

func (i *IndexItemBuilder) IndexParams(indexParams *IndexParams) *IndexItemBuilder {
  i.obj.IndexParams = indexParams
  return i
}

func (i *IndexItem) SetIndexID(indexID nebula0.IndexID) *IndexItem {
  i.IndexID = indexID
  return i
}

func (i *IndexItem) SetIndexName(indexName []byte) *IndexItem {
  i.IndexName = indexName
  return i
}

func (i *IndexItem) SetSchemaID(schemaID *nebula0.SchemaID) *IndexItem {
  i.SchemaID = schemaID
  return i
}

func (i *IndexItem) SetSchemaName(schemaName []byte) *IndexItem {
  i.SchemaName = schemaName
  return i
}

func (i *IndexItem) SetFields(fields []*ColumnDef) *IndexItem {
  i.Fields = fields
  return i
}

func (i *IndexItem) SetComment(comment []byte) *IndexItem {
  i.Comment = comment
  return i
}

func (i *IndexItem) SetIndexParams(indexParams *IndexParams) *IndexItem {
  i.IndexParams = indexParams
  return i
}

func (p *IndexItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.IndexID(v)
    p.IndexID = temp
  }
  return nil
}

func (p *IndexItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *IndexItem)  ReadField3(iprot thrift.Protocol) error {
  p.SchemaID = nebula0.NewSchemaID()
  if err := p.SchemaID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.SchemaName = v
  }
  return nil
}

func (p *IndexItem)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := NewColumnDef()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Fields = append(p.Fields, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *IndexItem)  ReadField7(iprot thrift.Protocol) error {
  p.IndexParams = NewIndexParams()
  if err := p.IndexParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *IndexItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema_id: ", p), err) }
  if err := p.SchemaID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_name: ", p), err) }
  if err := oprot.WriteBinary(p.SchemaName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schema_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fields: ", p), err) }
  return err
}

func (p *IndexItem) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *IndexItem) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin("index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *IndexItem) String() string {
  if p == nil {
    return "<nil>"
  }

  indexIDVal := fmt.Sprintf("%v", p.IndexID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  var schemaIDVal string
  if p.SchemaID == nil {
    schemaIDVal = "<nil>"
  } else {
    schemaIDVal = fmt.Sprintf("%v", p.SchemaID)
  }
  schemaNameVal := fmt.Sprintf("%v", p.SchemaName)
  fieldsVal := fmt.Sprintf("%v", p.Fields)
  commentVal := fmt.Sprintf("%v", p.Comment)
  var indexParamsVal string
  if p.IndexParams == nil {
    indexParamsVal = "<nil>"
  } else {
    indexParamsVal = fmt.Sprintf("%v", p.IndexParams)
  }
  return fmt.Sprintf("IndexItem({IndexID:%s IndexName:%s SchemaID:%s SchemaName:%s Fields:%s Comment:%s IndexParams:%s})", indexIDVal, indexNameVal, schemaIDVal, schemaNameVal, fieldsVal, commentVal, indexParamsVal)
}

// Attributes:
//  - HostAddr
//  - Status
//  - LeaderParts
//  - AllParts
//  - Role
//  - GitInfoSha
//  - ZoneName
//  - Version
type HostItem struct {
  HostAddr *nebula0.HostAddr `thrift:"hostAddr,1" db:"hostAddr" json:"hostAddr"`
  Status HostStatus `thrift:"status,2" db:"status" json:"status"`
  LeaderParts map[string][]nebula0.PartitionID `thrift:"leader_parts,3" db:"leader_parts" json:"leader_parts"`
  AllParts map[string][]nebula0.PartitionID `thrift:"all_parts,4" db:"all_parts" json:"all_parts"`
  Role HostRole `thrift:"role,5" db:"role" json:"role"`
  GitInfoSha []byte `thrift:"git_info_sha,6" db:"git_info_sha" json:"git_info_sha"`
  ZoneName []byte `thrift:"zone_name,7,optional" db:"zone_name" json:"zone_name,omitempty"`
  Version []byte `thrift:"version,8,optional" db:"version" json:"version,omitempty"`
}

func NewHostItem() *HostItem {
  return &HostItem{
    HostAddr: nebula0.NewHostAddr(),
  }
}

var HostItem_HostAddr_DEFAULT *nebula0.HostAddr
func (p *HostItem) GetHostAddr() *nebula0.HostAddr {
  if !p.IsSetHostAddr() {
    return HostItem_HostAddr_DEFAULT
  }
return p.HostAddr
}

func (p *HostItem) GetStatus() HostStatus {
  return p.Status
}

func (p *HostItem) GetLeaderParts() map[string][]nebula0.PartitionID {
  return p.LeaderParts
}

func (p *HostItem) GetAllParts() map[string][]nebula0.PartitionID {
  return p.AllParts
}

func (p *HostItem) GetRole() HostRole {
  return p.Role
}

func (p *HostItem) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var HostItem_ZoneName_DEFAULT []byte

func (p *HostItem) GetZoneName() []byte {
  return p.ZoneName
}
var HostItem_Version_DEFAULT []byte

func (p *HostItem) GetVersion() []byte {
  return p.Version
}
func (p *HostItem) IsSetHostAddr() bool {
  return p != nil && p.HostAddr != nil
}

func (p *HostItem) IsSetZoneName() bool {
  return p != nil && p.ZoneName != nil
}

func (p *HostItem) IsSetVersion() bool {
  return p != nil && p.Version != nil
}

type HostItemBuilder struct {
  obj *HostItem
}

func NewHostItemBuilder() *HostItemBuilder{
  return &HostItemBuilder{
    obj: NewHostItem(),
  }
}

func (p HostItemBuilder) Emit() *HostItem{
  return &HostItem{
    HostAddr: p.obj.HostAddr,
    Status: p.obj.Status,
    LeaderParts: p.obj.LeaderParts,
    AllParts: p.obj.AllParts,
    Role: p.obj.Role,
    GitInfoSha: p.obj.GitInfoSha,
    ZoneName: p.obj.ZoneName,
    Version: p.obj.Version,
  }
}

func (h *HostItemBuilder) HostAddr(hostAddr *nebula0.HostAddr) *HostItemBuilder {
  h.obj.HostAddr = hostAddr
  return h
}

func (h *HostItemBuilder) Status(status HostStatus) *HostItemBuilder {
  h.obj.Status = status
  return h
}

func (h *HostItemBuilder) LeaderParts(leaderParts map[string][]nebula0.PartitionID) *HostItemBuilder {
  h.obj.LeaderParts = leaderParts
  return h
}

func (h *HostItemBuilder) AllParts(allParts map[string][]nebula0.PartitionID) *HostItemBuilder {
  h.obj.AllParts = allParts
  return h
}

func (h *HostItemBuilder) Role(role HostRole) *HostItemBuilder {
  h.obj.Role = role
  return h
}

func (h *HostItemBuilder) GitInfoSha(gitInfoSha []byte) *HostItemBuilder {
  h.obj.GitInfoSha = gitInfoSha
  return h
}

func (h *HostItemBuilder) ZoneName(zoneName []byte) *HostItemBuilder {
  h.obj.ZoneName = zoneName
  return h
}

func (h *HostItemBuilder) Version(version []byte) *HostItemBuilder {
  h.obj.Version = version
  return h
}

func (h *HostItem) SetHostAddr(hostAddr *nebula0.HostAddr) *HostItem {
  h.HostAddr = hostAddr
  return h
}

func (h *HostItem) SetStatus(status HostStatus) *HostItem {
  h.Status = status
  return h
}

func (h *HostItem) SetLeaderParts(leaderParts map[string][]nebula0.PartitionID) *HostItem {
  h.LeaderParts = leaderParts
  return h
}

func (h *HostItem) SetAllParts(allParts map[string][]nebula0.PartitionID) *HostItem {
  h.AllParts = allParts
  return h
}

func (h *HostItem) SetRole(role HostRole) *HostItem {
  h.Role = role
  return h
}

func (h *HostItem) SetGitInfoSha(gitInfoSha []byte) *HostItem {
  h.GitInfoSha = gitInfoSha
  return h
}

func (h *HostItem) SetZoneName(zoneName []byte) *HostItem {
  h.ZoneName = zoneName
  return h
}

func (h *HostItem) SetVersion(version []byte) *HostItem {
  h.Version = version
  return h
}

func (p *HostItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostItem)  ReadField1(iprot thrift.Protocol) error {
  p.HostAddr = nebula0.NewHostAddr()
  if err := p.HostAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostAddr), err)
  }
  return nil
}

func (p *HostItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := HostStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *HostItem)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
    var _key4 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key4 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val5 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem6 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := nebula0.PartitionID(v)
        _elem6 = temp
      }
      _val5 = append(_val5, _elem6)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.AllParts =  tMap
  for i := 0; i < size; i ++ {
    var _key7 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key7 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val8 :=  tSlice
    for i := 0; i < size; i ++ {
      var _elem9 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := nebula0.PartitionID(v)
        _elem9 = temp
      }
      _val8 = append(_val8, _elem9)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.AllParts[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := HostRole(v)
    p.Role = temp
  }
  return nil
}

func (p *HostItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.GitInfoSha = v
  }
  return nil
}

func (p *HostItem)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *HostItem)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Version = v
  }
  return nil
}

func (p *HostItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hostAddr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err) }
  if err := p.HostAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err) }
  return err
}

func (p *HostItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *HostItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_parts", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:all_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.AllParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AllParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:all_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:role: ", p), err) }
  return err
}

func (p *HostItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("git_info_sha", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:git_info_sha: ", p), err) }
  return err
}

func (p *HostItem) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetZoneName() {
    if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:zone_name: ", p), err) }
    if err := oprot.WriteBinary(p.ZoneName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.zone_name (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:zone_name: ", p), err) }
  }
  return err
}

func (p *HostItem) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err) }
    if err := oprot.WriteBinary(p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err) }
  }
  return err
}

func (p *HostItem) String() string {
  if p == nil {
    return "<nil>"
  }

  var hostAddrVal string
  if p.HostAddr == nil {
    hostAddrVal = "<nil>"
  } else {
    hostAddrVal = fmt.Sprintf("%v", p.HostAddr)
  }
  statusVal := fmt.Sprintf("%v", p.Status)
  leaderPartsVal := fmt.Sprintf("%v", p.LeaderParts)
  allPartsVal := fmt.Sprintf("%v", p.AllParts)
  roleVal := fmt.Sprintf("%v", p.Role)
  gitInfoShaVal := fmt.Sprintf("%v", p.GitInfoSha)
  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("HostItem({HostAddr:%s Status:%s LeaderParts:%s AllParts:%s Role:%s GitInfoSha:%s ZoneName:%s Version:%s})", hostAddrVal, statusVal, leaderPartsVal, allPartsVal, roleVal, gitInfoShaVal, zoneNameVal, versionVal)
}

// Attributes:
//  - Account
//  - IsLock
//  - MaxQueriesPerHour
//  - MaxUpdatesPerHour
//  - MaxConnectionsPerHour
//  - MaxUserConnections
type UserItem struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IsLock bool `thrift:"is_lock,2" db:"is_lock" json:"is_lock"`
  MaxQueriesPerHour int32 `thrift:"max_queries_per_hour,3" db:"max_queries_per_hour" json:"max_queries_per_hour"`
  MaxUpdatesPerHour int32 `thrift:"max_updates_per_hour,4" db:"max_updates_per_hour" json:"max_updates_per_hour"`
  MaxConnectionsPerHour int32 `thrift:"max_connections_per_hour,5" db:"max_connections_per_hour" json:"max_connections_per_hour"`
  MaxUserConnections int32 `thrift:"max_user_connections,6" db:"max_user_connections" json:"max_user_connections"`
}

func NewUserItem() *UserItem {
  return &UserItem{}
}


func (p *UserItem) GetAccount() []byte {
  return p.Account
}

func (p *UserItem) GetIsLock() bool {
  return p.IsLock
}

func (p *UserItem) GetMaxQueriesPerHour() int32 {
  return p.MaxQueriesPerHour
}

func (p *UserItem) GetMaxUpdatesPerHour() int32 {
  return p.MaxUpdatesPerHour
}

func (p *UserItem) GetMaxConnectionsPerHour() int32 {
  return p.MaxConnectionsPerHour
}

func (p *UserItem) GetMaxUserConnections() int32 {
  return p.MaxUserConnections
}
type UserItemBuilder struct {
  obj *UserItem
}

func NewUserItemBuilder() *UserItemBuilder{
  return &UserItemBuilder{
    obj: NewUserItem(),
  }
}

func (p UserItemBuilder) Emit() *UserItem{
  return &UserItem{
    Account: p.obj.Account,
    IsLock: p.obj.IsLock,
    MaxQueriesPerHour: p.obj.MaxQueriesPerHour,
    MaxUpdatesPerHour: p.obj.MaxUpdatesPerHour,
    MaxConnectionsPerHour: p.obj.MaxConnectionsPerHour,
    MaxUserConnections: p.obj.MaxUserConnections,
  }
}

func (u *UserItemBuilder) Account(account []byte) *UserItemBuilder {
  u.obj.Account = account
  return u
}

func (u *UserItemBuilder) IsLock(isLock bool) *UserItemBuilder {
  u.obj.IsLock = isLock
  return u
}

func (u *UserItemBuilder) MaxQueriesPerHour(maxQueriesPerHour int32) *UserItemBuilder {
  u.obj.MaxQueriesPerHour = maxQueriesPerHour
  return u
}

func (u *UserItemBuilder) MaxUpdatesPerHour(maxUpdatesPerHour int32) *UserItemBuilder {
  u.obj.MaxUpdatesPerHour = maxUpdatesPerHour
  return u
}

func (u *UserItemBuilder) MaxConnectionsPerHour(maxConnectionsPerHour int32) *UserItemBuilder {
  u.obj.MaxConnectionsPerHour = maxConnectionsPerHour
  return u
}

func (u *UserItemBuilder) MaxUserConnections(maxUserConnections int32) *UserItemBuilder {
  u.obj.MaxUserConnections = maxUserConnections
  return u
}

func (u *UserItem) SetAccount(account []byte) *UserItem {
  u.Account = account
  return u
}

func (u *UserItem) SetIsLock(isLock bool) *UserItem {
  u.IsLock = isLock
  return u
}

func (u *UserItem) SetMaxQueriesPerHour(maxQueriesPerHour int32) *UserItem {
  u.MaxQueriesPerHour = maxQueriesPerHour
  return u
}

func (u *UserItem) SetMaxUpdatesPerHour(maxUpdatesPerHour int32) *UserItem {
  u.MaxUpdatesPerHour = maxUpdatesPerHour
  return u
}

func (u *UserItem) SetMaxConnectionsPerHour(maxConnectionsPerHour int32) *UserItem {
  u.MaxConnectionsPerHour = maxConnectionsPerHour
  return u
}

func (u *UserItem) SetMaxUserConnections(maxUserConnections int32) *UserItem {
  u.MaxUserConnections = maxUserConnections
  return u
}

func (p *UserItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *UserItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IsLock = v
  }
  return nil
}

func (p *UserItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.MaxQueriesPerHour = v
  }
  return nil
}

func (p *UserItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.MaxUpdatesPerHour = v
  }
  return nil
}

func (p *UserItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.MaxConnectionsPerHour = v
  }
  return nil
}

func (p *UserItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.MaxUserConnections = v
  }
  return nil
}

func (p *UserItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UserItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *UserItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_lock", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_lock: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsLock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_lock (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_lock: ", p), err) }
  return err
}

func (p *UserItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_queries_per_hour", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_queries_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxQueriesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_queries_per_hour (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_queries_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_updates_per_hour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_updates_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUpdatesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_updates_per_hour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_updates_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_connections_per_hour", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_connections_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxConnectionsPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_connections_per_hour (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_connections_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_user_connections", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_user_connections: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUserConnections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_user_connections (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_user_connections: ", p), err) }
  return err
}

func (p *UserItem) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  isLockVal := fmt.Sprintf("%v", p.IsLock)
  maxQueriesPerHourVal := fmt.Sprintf("%v", p.MaxQueriesPerHour)
  maxUpdatesPerHourVal := fmt.Sprintf("%v", p.MaxUpdatesPerHour)
  maxConnectionsPerHourVal := fmt.Sprintf("%v", p.MaxConnectionsPerHour)
  maxUserConnectionsVal := fmt.Sprintf("%v", p.MaxUserConnections)
  return fmt.Sprintf("UserItem({Account:%s IsLock:%s MaxQueriesPerHour:%s MaxUpdatesPerHour:%s MaxConnectionsPerHour:%s MaxUserConnections:%s})", accountVal, isLockVal, maxQueriesPerHourVal, maxUpdatesPerHourVal, maxConnectionsPerHourVal, maxUserConnectionsVal)
}

// Attributes:
//  - UserID
//  - SpaceID
//  - RoleType
type RoleItem struct {
  UserID []byte `thrift:"user_id,1" db:"user_id" json:"user_id"`
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  RoleType RoleType `thrift:"role_type,3" db:"role_type" json:"role_type"`
}

func NewRoleItem() *RoleItem {
  return &RoleItem{}
}


func (p *RoleItem) GetUserID() []byte {
  return p.UserID
}

func (p *RoleItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RoleItem) GetRoleType() RoleType {
  return p.RoleType
}
type RoleItemBuilder struct {
  obj *RoleItem
}

func NewRoleItemBuilder() *RoleItemBuilder{
  return &RoleItemBuilder{
    obj: NewRoleItem(),
  }
}

func (p RoleItemBuilder) Emit() *RoleItem{
  return &RoleItem{
    UserID: p.obj.UserID,
    SpaceID: p.obj.SpaceID,
    RoleType: p.obj.RoleType,
  }
}

func (r *RoleItemBuilder) UserID(userID []byte) *RoleItemBuilder {
  r.obj.UserID = userID
  return r
}

func (r *RoleItemBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *RoleItemBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *RoleItemBuilder) RoleType(roleType RoleType) *RoleItemBuilder {
  r.obj.RoleType = roleType
  return r
}

func (r *RoleItem) SetUserID(userID []byte) *RoleItem {
  r.UserID = userID
  return r
}

func (r *RoleItem) SetSpaceID(spaceID nebula0.GraphSpaceID) *RoleItem {
  r.SpaceID = spaceID
  return r
}

func (r *RoleItem) SetRoleType(roleType RoleType) *RoleItem {
  r.RoleType = roleType
  return r
}

func (p *RoleItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.UserID = v
  }
  return nil
}

func (p *RoleItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *RoleItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := RoleType(v)
    p.RoleType = temp
  }
  return nil
}

func (p *RoleItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RoleItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteBinary(p.UserID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role_type: ", p), err) }
  return err
}

func (p *RoleItem) String() string {
  if p == nil {
    return "<nil>"
  }

  userIDVal := fmt.Sprintf("%v", p.UserID)
  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  roleTypeVal := fmt.Sprintf("%v", p.RoleType)
  return fmt.Sprintf("RoleItem({UserID:%s SpaceID:%s RoleType:%s})", userIDVal, spaceIDVal, roleTypeVal)
}

// Attributes:
//  - Code
//  - Id
//  - Leader
type ExecResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Id *ID `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
}

func NewExecResp() *ExecResp {
  return &ExecResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ExecResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ExecResp_Id_DEFAULT *ID
func (p *ExecResp) GetId() *ID {
  if !p.IsSetId() {
    return ExecResp_Id_DEFAULT
  }
return p.Id
}
var ExecResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ExecResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ExecResp_Leader_DEFAULT
  }
return p.Leader
}
func (p *ExecResp) IsSetId() bool {
  return p != nil && p.Id != nil
}

func (p *ExecResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ExecRespBuilder struct {
  obj *ExecResp
}

func NewExecRespBuilder() *ExecRespBuilder{
  return &ExecRespBuilder{
    obj: NewExecResp(),
  }
}

func (p ExecRespBuilder) Emit() *ExecResp{
  return &ExecResp{
    Code: p.obj.Code,
    Id: p.obj.Id,
    Leader: p.obj.Leader,
  }
}

func (e *ExecRespBuilder) Code(code nebula0.ErrorCode) *ExecRespBuilder {
  e.obj.Code = code
  return e
}

func (e *ExecRespBuilder) Id(id *ID) *ExecRespBuilder {
  e.obj.Id = id
  return e
}

func (e *ExecRespBuilder) Leader(leader *nebula0.HostAddr) *ExecRespBuilder {
  e.obj.Leader = leader
  return e
}

func (e *ExecResp) SetCode(code nebula0.ErrorCode) *ExecResp {
  e.Code = code
  return e
}

func (e *ExecResp) SetId(id *ID) *ExecResp {
  e.Id = id
  return e
}

func (e *ExecResp) SetLeader(leader *nebula0.HostAddr) *ExecResp {
  e.Leader = leader
  return e
}

func (p *ExecResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ExecResp)  ReadField2(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *ExecResp)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ExecResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ExecResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *ExecResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *ExecResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var idVal string
  if p.Id == nil {
    idVal = "<nil>"
  } else {
    idVal = fmt.Sprintf("%v", p.Id)
  }
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  return fmt.Sprintf("ExecResp({Code:%s Id:%s Leader:%s})", codeVal, idVal, leaderVal)
}

// Attributes:
//  - SpaceName
//  - Op
//  - Paras
type AlterSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  Op AlterSpaceOp `thrift:"op,2" db:"op" json:"op"`
  Paras [][]byte `thrift:"paras,3" db:"paras" json:"paras"`
}

func NewAlterSpaceReq() *AlterSpaceReq {
  return &AlterSpaceReq{}
}


func (p *AlterSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *AlterSpaceReq) GetOp() AlterSpaceOp {
  return p.Op
}

func (p *AlterSpaceReq) GetParas() [][]byte {
  return p.Paras
}
type AlterSpaceReqBuilder struct {
  obj *AlterSpaceReq
}

func NewAlterSpaceReqBuilder() *AlterSpaceReqBuilder{
  return &AlterSpaceReqBuilder{
    obj: NewAlterSpaceReq(),
  }
}

func (p AlterSpaceReqBuilder) Emit() *AlterSpaceReq{
  return &AlterSpaceReq{
    SpaceName: p.obj.SpaceName,
    Op: p.obj.Op,
    Paras: p.obj.Paras,
  }
}

func (a *AlterSpaceReqBuilder) SpaceName(spaceName []byte) *AlterSpaceReqBuilder {
  a.obj.SpaceName = spaceName
  return a
}

func (a *AlterSpaceReqBuilder) Op(op AlterSpaceOp) *AlterSpaceReqBuilder {
  a.obj.Op = op
  return a
}

func (a *AlterSpaceReqBuilder) Paras(paras [][]byte) *AlterSpaceReqBuilder {
  a.obj.Paras = paras
  return a
}

func (a *AlterSpaceReq) SetSpaceName(spaceName []byte) *AlterSpaceReq {
  a.SpaceName = spaceName
  return a
}

func (a *AlterSpaceReq) SetOp(op AlterSpaceOp) *AlterSpaceReq {
  a.Op = op
  return a
}

func (a *AlterSpaceReq) SetParas(paras [][]byte) *AlterSpaceReq {
  a.Paras = paras
  return a
}

func (p *AlterSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *AlterSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := AlterSpaceOp(v)
    p.Op = temp
  }
  return nil
}

func (p *AlterSpaceReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
    var _elem10 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem10 = v
    }
    p.Paras = append(p.Paras, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *AlterSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *AlterSpaceReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("paras", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paras: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paras: ", p), err) }
  return err
}

func (p *AlterSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  opVal := fmt.Sprintf("%v", p.Op)
  parasVal := fmt.Sprintf("%v", p.Paras)
  return fmt.Sprintf("AlterSpaceReq({SpaceName:%s Op:%s Paras:%s})", spaceNameVal, opVal, parasVal)
}

// Attributes:
//  - SpaceID
//  - Op
//  - Type
//  - Paras
type AdminJobReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Op JobOp `thrift:"op,2" db:"op" json:"op"`
  Type JobType `thrift:"type,3" db:"type" json:"type"`
  Paras [][]byte `thrift:"paras,4" db:"paras" json:"paras"`
}

func NewAdminJobReq() *AdminJobReq {
  return &AdminJobReq{}
}


func (p *AdminJobReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AdminJobReq) GetOp() JobOp {
  return p.Op
}

func (p *AdminJobReq) GetType() JobType {
  return p.Type
}

func (p *AdminJobReq) GetParas() [][]byte {
  return p.Paras
}
type AdminJobReqBuilder struct {
  obj *AdminJobReq
}

func NewAdminJobReqBuilder() *AdminJobReqBuilder{
  return &AdminJobReqBuilder{
    obj: NewAdminJobReq(),
  }
}

func (p AdminJobReqBuilder) Emit() *AdminJobReq{
  return &AdminJobReq{
    SpaceID: p.obj.SpaceID,
    Op: p.obj.Op,
    Type: p.obj.Type,
    Paras: p.obj.Paras,
  }
}

func (a *AdminJobReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AdminJobReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AdminJobReqBuilder) Op(op JobOp) *AdminJobReqBuilder {
  a.obj.Op = op
  return a
}

func (a *AdminJobReqBuilder) Type(type_a1 JobType) *AdminJobReqBuilder {
  a.obj.Type = type_a1
  return a
}

func (a *AdminJobReqBuilder) Paras(paras [][]byte) *AdminJobReqBuilder {
  a.obj.Paras = paras
  return a
}

func (a *AdminJobReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AdminJobReq {
  a.SpaceID = spaceID
  return a
}

func (a *AdminJobReq) SetOp(op JobOp) *AdminJobReq {
  a.Op = op
  return a
}

func (a *AdminJobReq) SetType(type_a1 JobType) *AdminJobReq {
  a.Type = type_a1
  return a
}

func (a *AdminJobReq) SetParas(paras [][]byte) *AdminJobReq {
  a.Paras = paras
  return a
}

func (p *AdminJobReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AdminJobReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := JobOp(v)
    p.Op = temp
  }
  return nil
}

func (p *AdminJobReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := JobType(v)
    p.Type = temp
  }
  return nil
}

func (p *AdminJobReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
    var _elem11 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem11 = v
    }
    p.Paras = append(p.Paras, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("paras", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paras: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paras: ", p), err) }
  return err
}

func (p *AdminJobReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  opVal := fmt.Sprintf("%v", p.Op)
  typeVal := fmt.Sprintf("%v", p.Type)
  parasVal := fmt.Sprintf("%v", p.Paras)
  return fmt.Sprintf("AdminJobReq({SpaceID:%s Op:%s Type:%s Paras:%s})", spaceIDVal, opVal, typeVal, parasVal)
}

// Attributes:
//  - SpaceID
//  - JobID
//  - Type
//  - Paras
//  - Status
//  - StartTime
//  - StopTime
//  - Code
type JobDesc struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  Type JobType `thrift:"type,3" db:"type" json:"type"`
  Paras []string `thrift:"paras,4" db:"paras" json:"paras"`
  Status JobStatus `thrift:"status,5" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,6" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,7" db:"stop_time" json:"stop_time"`
  Code nebula0.ErrorCode `thrift:"code,8" db:"code" json:"code"`
}

func NewJobDesc() *JobDesc {
  return &JobDesc{}
}


func (p *JobDesc) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *JobDesc) GetJobID() int32 {
  return p.JobID
}

func (p *JobDesc) GetType() JobType {
  return p.Type
}

func (p *JobDesc) GetParas() []string {
  return p.Paras
}

func (p *JobDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *JobDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *JobDesc) GetStopTime() int64 {
  return p.StopTime
}

func (p *JobDesc) GetCode() nebula0.ErrorCode {
  return p.Code
}
type JobDescBuilder struct {
  obj *JobDesc
}

func NewJobDescBuilder() *JobDescBuilder{
  return &JobDescBuilder{
    obj: NewJobDesc(),
  }
}

func (p JobDescBuilder) Emit() *JobDesc{
  return &JobDesc{
    SpaceID: p.obj.SpaceID,
    JobID: p.obj.JobID,
    Type: p.obj.Type,
    Paras: p.obj.Paras,
    Status: p.obj.Status,
    StartTime: p.obj.StartTime,
    StopTime: p.obj.StopTime,
    Code: p.obj.Code,
  }
}

func (j *JobDescBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *JobDescBuilder {
  j.obj.SpaceID = spaceID
  return j
}

func (j *JobDescBuilder) JobID(jobID int32) *JobDescBuilder {
  j.obj.JobID = jobID
  return j
}

func (j *JobDescBuilder) Type(type_a1 JobType) *JobDescBuilder {
  j.obj.Type = type_a1
  return j
}

func (j *JobDescBuilder) Paras(paras []string) *JobDescBuilder {
  j.obj.Paras = paras
  return j
}

func (j *JobDescBuilder) Status(status JobStatus) *JobDescBuilder {
  j.obj.Status = status
  return j
}

func (j *JobDescBuilder) StartTime(startTime int64) *JobDescBuilder {
  j.obj.StartTime = startTime
  return j
}

func (j *JobDescBuilder) StopTime(stopTime int64) *JobDescBuilder {
  j.obj.StopTime = stopTime
  return j
}

func (j *JobDescBuilder) Code(code nebula0.ErrorCode) *JobDescBuilder {
  j.obj.Code = code
  return j
}

func (j *JobDesc) SetSpaceID(spaceID nebula0.GraphSpaceID) *JobDesc {
  j.SpaceID = spaceID
  return j
}

func (j *JobDesc) SetJobID(jobID int32) *JobDesc {
  j.JobID = jobID
  return j
}

func (j *JobDesc) SetType(type_a1 JobType) *JobDesc {
  j.Type = type_a1
  return j
}

func (j *JobDesc) SetParas(paras []string) *JobDesc {
  j.Paras = paras
  return j
}

func (j *JobDesc) SetStatus(status JobStatus) *JobDesc {
  j.Status = status
  return j
}

func (j *JobDesc) SetStartTime(startTime int64) *JobDesc {
  j.StartTime = startTime
  return j
}

func (j *JobDesc) SetStopTime(stopTime int64) *JobDesc {
  j.StopTime = stopTime
  return j
}

func (j *JobDesc) SetCode(code nebula0.ErrorCode) *JobDesc {
  j.Code = code
  return j
}

func (p *JobDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *JobDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.JobID = v
  }
  return nil
}

func (p *JobDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := JobType(v)
    p.Type = temp
  }
  return nil
}

func (p *JobDesc)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
    var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem12 = v
    }
    p.Paras = append(p.Paras, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := JobStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *JobDesc)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.StartTime = v
  }
  return nil
}

func (p *JobDesc)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.StopTime = v
  }
  return nil
}

func (p *JobDesc)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *JobDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("JobDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *JobDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *JobDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *JobDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("paras", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paras: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paras: ", p), err) }
  return err
}

func (p *JobDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *JobDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_time: ", p), err) }
  return err
}

func (p *JobDesc) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stop_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stop_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stop_time: ", p), err) }
  return err
}

func (p *JobDesc) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:code: ", p), err) }
  return err
}

func (p *JobDesc) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  jobIDVal := fmt.Sprintf("%v", p.JobID)
  typeVal := fmt.Sprintf("%v", p.Type)
  parasVal := fmt.Sprintf("%v", p.Paras)
  statusVal := fmt.Sprintf("%v", p.Status)
  startTimeVal := fmt.Sprintf("%v", p.StartTime)
  stopTimeVal := fmt.Sprintf("%v", p.StopTime)
  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("JobDesc({SpaceID:%s JobID:%s Type:%s Paras:%s Status:%s StartTime:%s StopTime:%s Code:%s})", spaceIDVal, jobIDVal, typeVal, parasVal, statusVal, startTimeVal, stopTimeVal, codeVal)
}

// Attributes:
//  - SpaceID
//  - JobID
//  - TaskID
//  - Host
//  - Status
//  - StartTime
//  - StopTime
//  - Code
type TaskDesc struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,2" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,3" db:"task_id" json:"task_id"`
  Host *nebula0.HostAddr `thrift:"host,4" db:"host" json:"host"`
  Status JobStatus `thrift:"status,5" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,6" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,7" db:"stop_time" json:"stop_time"`
  Code nebula0.ErrorCode `thrift:"code,8" db:"code" json:"code"`
}

func NewTaskDesc() *TaskDesc {
  return &TaskDesc{
    Host: nebula0.NewHostAddr(),
  }
}


func (p *TaskDesc) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *TaskDesc) GetJobID() int32 {
  return p.JobID
}

func (p *TaskDesc) GetTaskID() int32 {
  return p.TaskID
}
var TaskDesc_Host_DEFAULT *nebula0.HostAddr
func (p *TaskDesc) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return TaskDesc_Host_DEFAULT
  }
return p.Host
}

func (p *TaskDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *TaskDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *TaskDesc) GetStopTime() int64 {
  return p.StopTime
}

func (p *TaskDesc) GetCode() nebula0.ErrorCode {
  return p.Code
}
func (p *TaskDesc) IsSetHost() bool {
  return p != nil && p.Host != nil
}

type TaskDescBuilder struct {
  obj *TaskDesc
}

func NewTaskDescBuilder() *TaskDescBuilder{
  return &TaskDescBuilder{
    obj: NewTaskDesc(),
  }
}

func (p TaskDescBuilder) Emit() *TaskDesc{
  return &TaskDesc{
    SpaceID: p.obj.SpaceID,
    JobID: p.obj.JobID,
    TaskID: p.obj.TaskID,
    Host: p.obj.Host,
    Status: p.obj.Status,
    StartTime: p.obj.StartTime,
    StopTime: p.obj.StopTime,
    Code: p.obj.Code,
  }
}

func (t *TaskDescBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *TaskDescBuilder {
  t.obj.SpaceID = spaceID
  return t
}

func (t *TaskDescBuilder) JobID(jobID int32) *TaskDescBuilder {
  t.obj.JobID = jobID
  return t
}

func (t *TaskDescBuilder) TaskID(taskID int32) *TaskDescBuilder {
  t.obj.TaskID = taskID
  return t
}

func (t *TaskDescBuilder) Host(host *nebula0.HostAddr) *TaskDescBuilder {
  t.obj.Host = host
  return t
}

func (t *TaskDescBuilder) Status(status JobStatus) *TaskDescBuilder {
  t.obj.Status = status
  return t
}

func (t *TaskDescBuilder) StartTime(startTime int64) *TaskDescBuilder {
  t.obj.StartTime = startTime
  return t
}

func (t *TaskDescBuilder) StopTime(stopTime int64) *TaskDescBuilder {
  t.obj.StopTime = stopTime
  return t
}

func (t *TaskDescBuilder) Code(code nebula0.ErrorCode) *TaskDescBuilder {
  t.obj.Code = code
  return t
}

func (t *TaskDesc) SetSpaceID(spaceID nebula0.GraphSpaceID) *TaskDesc {
  t.SpaceID = spaceID
  return t
}

func (t *TaskDesc) SetJobID(jobID int32) *TaskDesc {
  t.JobID = jobID
  return t
}

func (t *TaskDesc) SetTaskID(taskID int32) *TaskDesc {
  t.TaskID = taskID
  return t
}

func (t *TaskDesc) SetHost(host *nebula0.HostAddr) *TaskDesc {
  t.Host = host
  return t
}

func (t *TaskDesc) SetStatus(status JobStatus) *TaskDesc {
  t.Status = status
  return t
}

func (t *TaskDesc) SetStartTime(startTime int64) *TaskDesc {
  t.StartTime = startTime
  return t
}

func (t *TaskDesc) SetStopTime(stopTime int64) *TaskDesc {
  t.StopTime = stopTime
  return t
}

func (t *TaskDesc) SetCode(code nebula0.ErrorCode) *TaskDesc {
  t.Code = code
  return t
}

func (p *TaskDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *TaskDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.JobID = v
  }
  return nil
}

func (p *TaskDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TaskID = v
  }
  return nil
}

func (p *TaskDesc)  ReadField4(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    temp := JobStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *TaskDesc)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.StartTime = v
  }
  return nil
}

func (p *TaskDesc)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.StopTime = v
  }
  return nil
}

func (p *TaskDesc)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *TaskDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TaskDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("task_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:host: ", p), err) }
  return err
}

func (p *TaskDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *TaskDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:start_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stop_time", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stop_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stop_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:code: ", p), err) }
  return err
}

func (p *TaskDesc) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  jobIDVal := fmt.Sprintf("%v", p.JobID)
  taskIDVal := fmt.Sprintf("%v", p.TaskID)
  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  statusVal := fmt.Sprintf("%v", p.Status)
  startTimeVal := fmt.Sprintf("%v", p.StartTime)
  stopTimeVal := fmt.Sprintf("%v", p.StopTime)
  codeVal := fmt.Sprintf("%v", p.Code)
  return fmt.Sprintf("TaskDesc({SpaceID:%s JobID:%s TaskID:%s Host:%s Status:%s StartTime:%s StopTime:%s Code:%s})", spaceIDVal, jobIDVal, taskIDVal, hostVal, statusVal, startTimeVal, stopTimeVal, codeVal)
}

// Attributes:
//  - JobID
//  - JobDesc
//  - TaskDesc
//  - RecoveredJobNum
type AdminJobResult_ struct {
  JobID *int32 `thrift:"job_id,1,optional" db:"job_id" json:"job_id,omitempty"`
  JobDesc []*JobDesc `thrift:"job_desc,2,optional" db:"job_desc" json:"job_desc,omitempty"`
  TaskDesc []*TaskDesc `thrift:"task_desc,3,optional" db:"task_desc" json:"task_desc,omitempty"`
  RecoveredJobNum *int32 `thrift:"recovered_job_num,4,optional" db:"recovered_job_num" json:"recovered_job_num,omitempty"`
}

func NewAdminJobResult_() *AdminJobResult_ {
  return &AdminJobResult_{}
}

var AdminJobResult__JobID_DEFAULT int32
func (p *AdminJobResult_) GetJobID() int32 {
  if !p.IsSetJobID() {
    return AdminJobResult__JobID_DEFAULT
  }
return *p.JobID
}
var AdminJobResult__JobDesc_DEFAULT []*JobDesc

func (p *AdminJobResult_) GetJobDesc() []*JobDesc {
  return p.JobDesc
}
var AdminJobResult__TaskDesc_DEFAULT []*TaskDesc

func (p *AdminJobResult_) GetTaskDesc() []*TaskDesc {
  return p.TaskDesc
}
var AdminJobResult__RecoveredJobNum_DEFAULT int32
func (p *AdminJobResult_) GetRecoveredJobNum() int32 {
  if !p.IsSetRecoveredJobNum() {
    return AdminJobResult__RecoveredJobNum_DEFAULT
  }
return *p.RecoveredJobNum
}
func (p *AdminJobResult_) IsSetJobID() bool {
  return p != nil && p.JobID != nil
}

func (p *AdminJobResult_) IsSetJobDesc() bool {
  return p != nil && p.JobDesc != nil
}

func (p *AdminJobResult_) IsSetTaskDesc() bool {
  return p != nil && p.TaskDesc != nil
}

func (p *AdminJobResult_) IsSetRecoveredJobNum() bool {
  return p != nil && p.RecoveredJobNum != nil
}

type AdminJobResult_Builder struct {
  obj *AdminJobResult_
}

func NewAdminJobResult_Builder() *AdminJobResult_Builder{
  return &AdminJobResult_Builder{
    obj: NewAdminJobResult_(),
  }
}

func (p AdminJobResult_Builder) Emit() *AdminJobResult_{
  return &AdminJobResult_{
    JobID: p.obj.JobID,
    JobDesc: p.obj.JobDesc,
    TaskDesc: p.obj.TaskDesc,
    RecoveredJobNum: p.obj.RecoveredJobNum,
  }
}

func (a *AdminJobResult_Builder) JobID(jobID *int32) *AdminJobResult_Builder {
  a.obj.JobID = jobID
  return a
}

func (a *AdminJobResult_Builder) JobDesc(jobDesc []*JobDesc) *AdminJobResult_Builder {
  a.obj.JobDesc = jobDesc
  return a
}

func (a *AdminJobResult_Builder) TaskDesc(taskDesc []*TaskDesc) *AdminJobResult_Builder {
  a.obj.TaskDesc = taskDesc
  return a
}

func (a *AdminJobResult_Builder) RecoveredJobNum(recoveredJobNum *int32) *AdminJobResult_Builder {
  a.obj.RecoveredJobNum = recoveredJobNum
  return a
}

func (a *AdminJobResult_) SetJobID(jobID *int32) *AdminJobResult_ {
  a.JobID = jobID
  return a
}

func (a *AdminJobResult_) SetJobDesc(jobDesc []*JobDesc) *AdminJobResult_ {
  a.JobDesc = jobDesc
  return a
}

func (a *AdminJobResult_) SetTaskDesc(taskDesc []*TaskDesc) *AdminJobResult_ {
  a.TaskDesc = taskDesc
  return a
}

func (a *AdminJobResult_) SetRecoveredJobNum(recoveredJobNum *int32) *AdminJobResult_ {
  a.RecoveredJobNum = recoveredJobNum
  return a
}

func (p *AdminJobResult_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.JobID = &v
  }
  return nil
}

func (p *AdminJobResult_)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JobDesc, 0, size)
  p.JobDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := NewJobDesc()
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.JobDesc = append(p.JobDesc, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TaskDesc, 0, size)
  p.TaskDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := NewTaskDesc()
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.TaskDesc = append(p.TaskDesc, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.RecoveredJobNum = &v
  }
  return nil
}

func (p *AdminJobResult_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResult_) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetJobID() {
    if err := oprot.WriteFieldBegin("job_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.JobID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetJobDesc() {
    if err := oprot.WriteFieldBegin("job_desc", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_desc: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JobDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JobDesc {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetTaskDesc() {
    if err := oprot.WriteFieldBegin("task_desc", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_desc: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskDesc {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetRecoveredJobNum() {
    if err := oprot.WriteFieldBegin("recovered_job_num", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recovered_job_num: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RecoveredJobNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recovered_job_num (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recovered_job_num: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) String() string {
  if p == nil {
    return "<nil>"
  }

  var jobIDVal string
  if p.JobID == nil {
    jobIDVal = "<nil>"
  } else {
    jobIDVal = fmt.Sprintf("%v", *p.JobID)
  }
  jobDescVal := fmt.Sprintf("%v", p.JobDesc)
  taskDescVal := fmt.Sprintf("%v", p.TaskDesc)
  var recoveredJobNumVal string
  if p.RecoveredJobNum == nil {
    recoveredJobNumVal = "<nil>"
  } else {
    recoveredJobNumVal = fmt.Sprintf("%v", *p.RecoveredJobNum)
  }
  return fmt.Sprintf("AdminJobResult_({JobID:%s JobDesc:%s TaskDesc:%s RecoveredJobNum:%s})", jobIDVal, jobDescVal, taskDescVal, recoveredJobNumVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Result_
type AdminJobResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Result_ *AdminJobResult_ `thrift:"result,3" db:"result" json:"result"`
}

func NewAdminJobResp() *AdminJobResp {
  return &AdminJobResp{
    Leader: nebula0.NewHostAddr(),
    Result_: NewAdminJobResult_(),
  }
}


func (p *AdminJobResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var AdminJobResp_Leader_DEFAULT *nebula0.HostAddr
func (p *AdminJobResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return AdminJobResp_Leader_DEFAULT
  }
return p.Leader
}
var AdminJobResp_Result__DEFAULT *AdminJobResult_
func (p *AdminJobResp) GetResult_() *AdminJobResult_ {
  if !p.IsSetResult_() {
    return AdminJobResp_Result__DEFAULT
  }
return p.Result_
}
func (p *AdminJobResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *AdminJobResp) IsSetResult_() bool {
  return p != nil && p.Result_ != nil
}

type AdminJobRespBuilder struct {
  obj *AdminJobResp
}

func NewAdminJobRespBuilder() *AdminJobRespBuilder{
  return &AdminJobRespBuilder{
    obj: NewAdminJobResp(),
  }
}

func (p AdminJobRespBuilder) Emit() *AdminJobResp{
  return &AdminJobResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Result_: p.obj.Result_,
  }
}

func (a *AdminJobRespBuilder) Code(code nebula0.ErrorCode) *AdminJobRespBuilder {
  a.obj.Code = code
  return a
}

func (a *AdminJobRespBuilder) Leader(leader *nebula0.HostAddr) *AdminJobRespBuilder {
  a.obj.Leader = leader
  return a
}

func (a *AdminJobRespBuilder) Result_(result *AdminJobResult_) *AdminJobRespBuilder {
  a.obj.Result_ = result
  return a
}

func (a *AdminJobResp) SetCode(code nebula0.ErrorCode) *AdminJobResp {
  a.Code = code
  return a
}

func (a *AdminJobResp) SetLeader(leader *nebula0.HostAddr) *AdminJobResp {
  a.Leader = leader
  return a
}

func (a *AdminJobResp) SetResult_(result *AdminJobResult_) *AdminJobResp {
  a.Result_ = result
  return a
}

func (p *AdminJobResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *AdminJobResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField3(iprot thrift.Protocol) error {
  p.Result_ = NewAdminJobResult_()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminJobResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *AdminJobResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var resultVal string
  if p.Result_ == nil {
    resultVal = "<nil>"
  } else {
    resultVal = fmt.Sprintf("%v", p.Result_)
  }
  return fmt.Sprintf("AdminJobResp({Code:%s Leader:%s Result_:%s})", codeVal, leaderVal, resultVal)
}

// Attributes:
//  - PartID
//  - Proportion
type Correlativity struct {
  PartID nebula0.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Proportion float64 `thrift:"proportion,2" db:"proportion" json:"proportion"`
}

func NewCorrelativity() *Correlativity {
  return &Correlativity{}
}


func (p *Correlativity) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *Correlativity) GetProportion() float64 {
  return p.Proportion
}
type CorrelativityBuilder struct {
  obj *Correlativity
}

func NewCorrelativityBuilder() *CorrelativityBuilder{
  return &CorrelativityBuilder{
    obj: NewCorrelativity(),
  }
}

func (p CorrelativityBuilder) Emit() *Correlativity{
  return &Correlativity{
    PartID: p.obj.PartID,
    Proportion: p.obj.Proportion,
  }
}

func (c *CorrelativityBuilder) PartID(partID nebula0.PartitionID) *CorrelativityBuilder {
  c.obj.PartID = partID
  return c
}

func (c *CorrelativityBuilder) Proportion(proportion float64) *CorrelativityBuilder {
  c.obj.Proportion = proportion
  return c
}

func (c *Correlativity) SetPartID(partID nebula0.PartitionID) *Correlativity {
  c.PartID = partID
  return c
}

func (c *Correlativity) SetProportion(proportion float64) *Correlativity {
  c.Proportion = proportion
  return c
}

func (p *Correlativity) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Correlativity)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *Correlativity)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Proportion = v
  }
  return nil
}

func (p *Correlativity) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Correlativity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Correlativity) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *Correlativity) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("proportion", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:proportion: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Proportion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proportion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:proportion: ", p), err) }
  return err
}

func (p *Correlativity) String() string {
  if p == nil {
    return "<nil>"
  }

  partIDVal := fmt.Sprintf("%v", p.PartID)
  proportionVal := fmt.Sprintf("%v", p.Proportion)
  return fmt.Sprintf("Correlativity({PartID:%s Proportion:%s})", partIDVal, proportionVal)
}

// Attributes:
//  - TagVertices
//  - Edges
//  - SpaceVertices
//  - SpaceEdges
//  - PositivePartCorrelativity
//  - NegativePartCorrelativity
//  - Status
type StatsItem struct {
  TagVertices map[string]int64 `thrift:"tag_vertices,1" db:"tag_vertices" json:"tag_vertices"`
  Edges map[string]int64 `thrift:"edges,2" db:"edges" json:"edges"`
  SpaceVertices int64 `thrift:"space_vertices,3" db:"space_vertices" json:"space_vertices"`
  SpaceEdges int64 `thrift:"space_edges,4" db:"space_edges" json:"space_edges"`
  PositivePartCorrelativity map[nebula0.PartitionID][]*Correlativity `thrift:"positive_part_correlativity,5" db:"positive_part_correlativity" json:"positive_part_correlativity"`
  NegativePartCorrelativity map[nebula0.PartitionID][]*Correlativity `thrift:"negative_part_correlativity,6" db:"negative_part_correlativity" json:"negative_part_correlativity"`
  Status JobStatus `thrift:"status,7" db:"status" json:"status"`
}

func NewStatsItem() *StatsItem {
  return &StatsItem{}
}


func (p *StatsItem) GetTagVertices() map[string]int64 {
  return p.TagVertices
}

func (p *StatsItem) GetEdges() map[string]int64 {
  return p.Edges
}

func (p *StatsItem) GetSpaceVertices() int64 {
  return p.SpaceVertices
}

func (p *StatsItem) GetSpaceEdges() int64 {
  return p.SpaceEdges
}

func (p *StatsItem) GetPositivePartCorrelativity() map[nebula0.PartitionID][]*Correlativity {
  return p.PositivePartCorrelativity
}

func (p *StatsItem) GetNegativePartCorrelativity() map[nebula0.PartitionID][]*Correlativity {
  return p.NegativePartCorrelativity
}

func (p *StatsItem) GetStatus() JobStatus {
  return p.Status
}
type StatsItemBuilder struct {
  obj *StatsItem
}

func NewStatsItemBuilder() *StatsItemBuilder{
  return &StatsItemBuilder{
    obj: NewStatsItem(),
  }
}

func (p StatsItemBuilder) Emit() *StatsItem{
  return &StatsItem{
    TagVertices: p.obj.TagVertices,
    Edges: p.obj.Edges,
    SpaceVertices: p.obj.SpaceVertices,
    SpaceEdges: p.obj.SpaceEdges,
    PositivePartCorrelativity: p.obj.PositivePartCorrelativity,
    NegativePartCorrelativity: p.obj.NegativePartCorrelativity,
    Status: p.obj.Status,
  }
}

func (s *StatsItemBuilder) TagVertices(tagVertices map[string]int64) *StatsItemBuilder {
  s.obj.TagVertices = tagVertices
  return s
}

func (s *StatsItemBuilder) Edges(edges map[string]int64) *StatsItemBuilder {
  s.obj.Edges = edges
  return s
}

func (s *StatsItemBuilder) SpaceVertices(spaceVertices int64) *StatsItemBuilder {
  s.obj.SpaceVertices = spaceVertices
  return s
}

func (s *StatsItemBuilder) SpaceEdges(spaceEdges int64) *StatsItemBuilder {
  s.obj.SpaceEdges = spaceEdges
  return s
}

func (s *StatsItemBuilder) PositivePartCorrelativity(positivePartCorrelativity map[nebula0.PartitionID][]*Correlativity) *StatsItemBuilder {
  s.obj.PositivePartCorrelativity = positivePartCorrelativity
  return s
}

func (s *StatsItemBuilder) NegativePartCorrelativity(negativePartCorrelativity map[nebula0.PartitionID][]*Correlativity) *StatsItemBuilder {
  s.obj.NegativePartCorrelativity = negativePartCorrelativity
  return s
}

func (s *StatsItemBuilder) Status(status JobStatus) *StatsItemBuilder {
  s.obj.Status = status
  return s
}

func (s *StatsItem) SetTagVertices(tagVertices map[string]int64) *StatsItem {
  s.TagVertices = tagVertices
  return s
}

func (s *StatsItem) SetEdges(edges map[string]int64) *StatsItem {
  s.Edges = edges
  return s
}

func (s *StatsItem) SetSpaceVertices(spaceVertices int64) *StatsItem {
  s.SpaceVertices = spaceVertices
  return s
}

func (s *StatsItem) SetSpaceEdges(spaceEdges int64) *StatsItem {
  s.SpaceEdges = spaceEdges
  return s
}

func (s *StatsItem) SetPositivePartCorrelativity(positivePartCorrelativity map[nebula0.PartitionID][]*Correlativity) *StatsItem {
  s.PositivePartCorrelativity = positivePartCorrelativity
  return s
}

func (s *StatsItem) SetNegativePartCorrelativity(negativePartCorrelativity map[nebula0.PartitionID][]*Correlativity) *StatsItem {
  s.NegativePartCorrelativity = negativePartCorrelativity
  return s
}

func (s *StatsItem) SetStatus(status JobStatus) *StatsItem {
  s.Status = status
  return s
}

func (p *StatsItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatsItem)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.TagVertices =  tMap
  for i := 0; i < size; i ++ {
    var _key15 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key15 = v
    }
    var _val16 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val16 = v
    }
    p.TagVertices[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Edges =  tMap
  for i := 0; i < size; i ++ {
    var _key17 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key17 = v
    }
    var _val18 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val18 = v
    }
    p.Edges[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.SpaceVertices = v
  }
  return nil
}

func (p *StatsItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.SpaceEdges = v
  }
  return nil
}

func (p *StatsItem)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*Correlativity, size)
  p.PositivePartCorrelativity =  tMap
  for i := 0; i < size; i ++ {
    var _key19 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key19 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Correlativity, 0, size)
    _val20 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem21 := NewCorrelativity()
      if err := _elem21.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
      }
      _val20 = append(_val20, _elem21)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PositivePartCorrelativity[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*Correlativity, size)
  p.NegativePartCorrelativity =  tMap
  for i := 0; i < size; i ++ {
    var _key22 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key22 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Correlativity, 0, size)
    _val23 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem24 := NewCorrelativity()
      if err := _elem24.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
      }
      _val23 = append(_val23, _elem24)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.NegativePartCorrelativity[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatsItem)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    temp := JobStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *StatsItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StatsItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatsItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_vertices", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_vertices: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TagVertices)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TagVertices {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_vertices: ", p), err) }
  return err
}

func (p *StatsItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Edges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edges: ", p), err) }
  return err
}

func (p *StatsItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_vertices", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:space_vertices: ", p), err) }
  if err := oprot.WriteI64(int64(p.SpaceVertices)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_vertices (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:space_vertices: ", p), err) }
  return err
}

func (p *StatsItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_edges", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_edges: ", p), err) }
  if err := oprot.WriteI64(int64(p.SpaceEdges)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_edges (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_edges: ", p), err) }
  return err
}

func (p *StatsItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("positive_part_correlativity", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:positive_part_correlativity: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PositivePartCorrelativity)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PositivePartCorrelativity {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:positive_part_correlativity: ", p), err) }
  return err
}

func (p *StatsItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("negative_part_correlativity", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:negative_part_correlativity: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.NegativePartCorrelativity)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NegativePartCorrelativity {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:negative_part_correlativity: ", p), err) }
  return err
}

func (p *StatsItem) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *StatsItem) String() string {
  if p == nil {
    return "<nil>"
  }

  tagVerticesVal := fmt.Sprintf("%v", p.TagVertices)
  edgesVal := fmt.Sprintf("%v", p.Edges)
  spaceVerticesVal := fmt.Sprintf("%v", p.SpaceVertices)
  spaceEdgesVal := fmt.Sprintf("%v", p.SpaceEdges)
  positivePartCorrelativityVal := fmt.Sprintf("%v", p.PositivePartCorrelativity)
  negativePartCorrelativityVal := fmt.Sprintf("%v", p.NegativePartCorrelativity)
  statusVal := fmt.Sprintf("%v", p.Status)
  return fmt.Sprintf("StatsItem({TagVertices:%s Edges:%s SpaceVertices:%s SpaceEdges:%s PositivePartCorrelativity:%s NegativePartCorrelativity:%s Status:%s})", tagVerticesVal, edgesVal, spaceVerticesVal, spaceEdgesVal, positivePartCorrelativityVal, negativePartCorrelativityVal, statusVal)
}

// Attributes:
//  - Properties
//  - IfNotExists
type CreateSpaceReq struct {
  Properties *SpaceDesc `thrift:"properties,1" db:"properties" json:"properties"`
  IfNotExists bool `thrift:"if_not_exists,2" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateSpaceReq() *CreateSpaceReq {
  return &CreateSpaceReq{
    Properties: NewSpaceDesc(),
  }
}

var CreateSpaceReq_Properties_DEFAULT *SpaceDesc
func (p *CreateSpaceReq) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return CreateSpaceReq_Properties_DEFAULT
  }
return p.Properties
}

func (p *CreateSpaceReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateSpaceReq) IsSetProperties() bool {
  return p != nil && p.Properties != nil
}

type CreateSpaceReqBuilder struct {
  obj *CreateSpaceReq
}

func NewCreateSpaceReqBuilder() *CreateSpaceReqBuilder{
  return &CreateSpaceReqBuilder{
    obj: NewCreateSpaceReq(),
  }
}

func (p CreateSpaceReqBuilder) Emit() *CreateSpaceReq{
  return &CreateSpaceReq{
    Properties: p.obj.Properties,
    IfNotExists: p.obj.IfNotExists,
  }
}

func (c *CreateSpaceReqBuilder) Properties(properties *SpaceDesc) *CreateSpaceReqBuilder {
  c.obj.Properties = properties
  return c
}

func (c *CreateSpaceReqBuilder) IfNotExists(ifNotExists bool) *CreateSpaceReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateSpaceReq) SetProperties(properties *SpaceDesc) *CreateSpaceReq {
  c.Properties = properties
  return c
}

func (c *CreateSpaceReq) SetIfNotExists(ifNotExists bool) *CreateSpaceReq {
  c.IfNotExists = ifNotExists
  return c
}

func (p *CreateSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  p.Properties = NewSpaceDesc()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *CreateSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_not_exists: ", p), err) }
  return err
}

func (p *CreateSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var propertiesVal string
  if p.Properties == nil {
    propertiesVal = "<nil>"
  } else {
    propertiesVal = fmt.Sprintf("%v", p.Properties)
  }
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  return fmt.Sprintf("CreateSpaceReq({Properties:%s IfNotExists:%s})", propertiesVal, ifNotExistsVal)
}

// Attributes:
//  - OldSpaceName
//  - NewSpaceName_
type CreateSpaceAsReq struct {
  OldSpaceName []byte `thrift:"old_space_name,1" db:"old_space_name" json:"old_space_name"`
  NewSpaceName_ []byte `thrift:"new_space_name,2" db:"new_space_name" json:"new_space_name"`
}

func NewCreateSpaceAsReq() *CreateSpaceAsReq {
  return &CreateSpaceAsReq{}
}


func (p *CreateSpaceAsReq) GetOldSpaceName() []byte {
  return p.OldSpaceName
}

func (p *CreateSpaceAsReq) GetNewSpaceName_() []byte {
  return p.NewSpaceName_
}
type CreateSpaceAsReqBuilder struct {
  obj *CreateSpaceAsReq
}

func NewCreateSpaceAsReqBuilder() *CreateSpaceAsReqBuilder{
  return &CreateSpaceAsReqBuilder{
    obj: NewCreateSpaceAsReq(),
  }
}

func (p CreateSpaceAsReqBuilder) Emit() *CreateSpaceAsReq{
  return &CreateSpaceAsReq{
    OldSpaceName: p.obj.OldSpaceName,
    NewSpaceName_: p.obj.NewSpaceName_,
  }
}

func (c *CreateSpaceAsReqBuilder) OldSpaceName(oldSpaceName []byte) *CreateSpaceAsReqBuilder {
  c.obj.OldSpaceName = oldSpaceName
  return c
}

func (c *CreateSpaceAsReqBuilder) NewSpaceName_(newSpaceName []byte) *CreateSpaceAsReqBuilder {
  c.obj.NewSpaceName_ = newSpaceName
  return c
}

func (c *CreateSpaceAsReq) SetOldSpaceName(oldSpaceName []byte) *CreateSpaceAsReq {
  c.OldSpaceName = oldSpaceName
  return c
}

func (c *CreateSpaceAsReq) SetNewSpaceName_(newSpaceName []byte) *CreateSpaceAsReq {
  c.NewSpaceName_ = newSpaceName
  return c
}

func (p *CreateSpaceAsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceAsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.OldSpaceName = v
  }
  return nil
}

func (p *CreateSpaceAsReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NewSpaceName_ = v
  }
  return nil
}

func (p *CreateSpaceAsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSpaceAsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceAsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("old_space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:old_space_name: ", p), err) }
  if err := oprot.WriteBinary(p.OldSpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:old_space_name: ", p), err) }
  return err
}

func (p *CreateSpaceAsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_space_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_space_name: ", p), err) }
  if err := oprot.WriteBinary(p.NewSpaceName_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_space_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_space_name: ", p), err) }
  return err
}

func (p *CreateSpaceAsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  oldSpaceNameVal := fmt.Sprintf("%v", p.OldSpaceName)
  newSpaceNameVal := fmt.Sprintf("%v", p.NewSpaceName_)
  return fmt.Sprintf("CreateSpaceAsReq({OldSpaceName:%s NewSpaceName_:%s})", oldSpaceNameVal, newSpaceNameVal)
}

// Attributes:
//  - SpaceName
//  - IfExists
type DropSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropSpaceReq() *DropSpaceReq {
  return &DropSpaceReq{}
}


func (p *DropSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *DropSpaceReq) GetIfExists() bool {
  return p.IfExists
}
type DropSpaceReqBuilder struct {
  obj *DropSpaceReq
}

func NewDropSpaceReqBuilder() *DropSpaceReqBuilder{
  return &DropSpaceReqBuilder{
    obj: NewDropSpaceReq(),
  }
}

func (p DropSpaceReqBuilder) Emit() *DropSpaceReq{
  return &DropSpaceReq{
    SpaceName: p.obj.SpaceName,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropSpaceReqBuilder) SpaceName(spaceName []byte) *DropSpaceReqBuilder {
  d.obj.SpaceName = spaceName
  return d
}

func (d *DropSpaceReqBuilder) IfExists(ifExists bool) *DropSpaceReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropSpaceReq) SetSpaceName(spaceName []byte) *DropSpaceReq {
  d.SpaceName = spaceName
  return d
}

func (d *DropSpaceReq) SetIfExists(ifExists bool) *DropSpaceReq {
  d.IfExists = ifExists
  return d
}

func (p *DropSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *DropSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *DropSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropSpaceReq({SpaceName:%s IfExists:%s})", spaceNameVal, ifExistsVal)
}

// Attributes:
//  - SpaceName
//  - IfExists
type ClearSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewClearSpaceReq() *ClearSpaceReq {
  return &ClearSpaceReq{}
}


func (p *ClearSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *ClearSpaceReq) GetIfExists() bool {
  return p.IfExists
}
type ClearSpaceReqBuilder struct {
  obj *ClearSpaceReq
}

func NewClearSpaceReqBuilder() *ClearSpaceReqBuilder{
  return &ClearSpaceReqBuilder{
    obj: NewClearSpaceReq(),
  }
}

func (p ClearSpaceReqBuilder) Emit() *ClearSpaceReq{
  return &ClearSpaceReq{
    SpaceName: p.obj.SpaceName,
    IfExists: p.obj.IfExists,
  }
}

func (c *ClearSpaceReqBuilder) SpaceName(spaceName []byte) *ClearSpaceReqBuilder {
  c.obj.SpaceName = spaceName
  return c
}

func (c *ClearSpaceReqBuilder) IfExists(ifExists bool) *ClearSpaceReqBuilder {
  c.obj.IfExists = ifExists
  return c
}

func (c *ClearSpaceReq) SetSpaceName(spaceName []byte) *ClearSpaceReq {
  c.SpaceName = spaceName
  return c
}

func (c *ClearSpaceReq) SetIfExists(ifExists bool) *ClearSpaceReq {
  c.IfExists = ifExists
  return c
}

func (p *ClearSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClearSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *ClearSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *ClearSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ClearSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClearSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *ClearSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *ClearSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("ClearSpaceReq({SpaceName:%s IfExists:%s})", spaceNameVal, ifExistsVal)
}

type ListSpacesReq struct {
}

func NewListSpacesReq() *ListSpacesReq {
  return &ListSpacesReq{}
}

type ListSpacesReqBuilder struct {
  obj *ListSpacesReq
}

func NewListSpacesReqBuilder() *ListSpacesReqBuilder{
  return &ListSpacesReqBuilder{
    obj: NewListSpacesReq(),
  }
}

func (p ListSpacesReqBuilder) Emit() *ListSpacesReq{
  return &ListSpacesReq{
  }
}

func (p *ListSpacesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListSpacesReq({})")
}

// Attributes:
//  - Code
//  - Leader
//  - Spaces
type ListSpacesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Spaces []*IdName `thrift:"spaces,3" db:"spaces" json:"spaces"`
}

func NewListSpacesResp() *ListSpacesResp {
  return &ListSpacesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListSpacesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListSpacesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSpacesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSpacesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSpacesResp) GetSpaces() []*IdName {
  return p.Spaces
}
func (p *ListSpacesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListSpacesRespBuilder struct {
  obj *ListSpacesResp
}

func NewListSpacesRespBuilder() *ListSpacesRespBuilder{
  return &ListSpacesRespBuilder{
    obj: NewListSpacesResp(),
  }
}

func (p ListSpacesRespBuilder) Emit() *ListSpacesResp{
  return &ListSpacesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Spaces: p.obj.Spaces,
  }
}

func (l *ListSpacesRespBuilder) Code(code nebula0.ErrorCode) *ListSpacesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListSpacesRespBuilder) Leader(leader *nebula0.HostAddr) *ListSpacesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListSpacesRespBuilder) Spaces(spaces []*IdName) *ListSpacesRespBuilder {
  l.obj.Spaces = spaces
  return l
}

func (l *ListSpacesResp) SetCode(code nebula0.ErrorCode) *ListSpacesResp {
  l.Code = code
  return l
}

func (l *ListSpacesResp) SetLeader(leader *nebula0.HostAddr) *ListSpacesResp {
  l.Leader = leader
  return l
}

func (l *ListSpacesResp) SetSpaces(spaces []*IdName) *ListSpacesResp {
  l.Spaces = spaces
  return l
}

func (p *ListSpacesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListSpacesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IdName, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := NewIdName()
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Spaces = append(p.Spaces, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSpacesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("spaces", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaces: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spaces)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spaces {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaces: ", p), err) }
  return err
}

func (p *ListSpacesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  spacesVal := fmt.Sprintf("%v", p.Spaces)
  return fmt.Sprintf("ListSpacesResp({Code:%s Leader:%s Spaces:%s})", codeVal, leaderVal, spacesVal)
}

// Attributes:
//  - SpaceName
type GetSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
}

func NewGetSpaceReq() *GetSpaceReq {
  return &GetSpaceReq{}
}


func (p *GetSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}
type GetSpaceReqBuilder struct {
  obj *GetSpaceReq
}

func NewGetSpaceReqBuilder() *GetSpaceReqBuilder{
  return &GetSpaceReqBuilder{
    obj: NewGetSpaceReq(),
  }
}

func (p GetSpaceReqBuilder) Emit() *GetSpaceReq{
  return &GetSpaceReq{
    SpaceName: p.obj.SpaceName,
  }
}

func (g *GetSpaceReqBuilder) SpaceName(spaceName []byte) *GetSpaceReqBuilder {
  g.obj.SpaceName = spaceName
  return g
}

func (g *GetSpaceReq) SetSpaceName(spaceName []byte) *GetSpaceReq {
  g.SpaceName = spaceName
  return g
}

func (p *GetSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *GetSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *GetSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  return fmt.Sprintf("GetSpaceReq({SpaceName:%s})", spaceNameVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetSpaceResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *SpaceItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetSpaceResp() *GetSpaceResp {
  return &GetSpaceResp{
    Leader: nebula0.NewHostAddr(),
    Item: NewSpaceItem(),
  }
}


func (p *GetSpaceResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetSpaceResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetSpaceResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetSpaceResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSpaceResp_Item_DEFAULT *SpaceItem
func (p *GetSpaceResp) GetItem() *SpaceItem {
  if !p.IsSetItem() {
    return GetSpaceResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetSpaceResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetSpaceResp) IsSetItem() bool {
  return p != nil && p.Item != nil
}

type GetSpaceRespBuilder struct {
  obj *GetSpaceResp
}

func NewGetSpaceRespBuilder() *GetSpaceRespBuilder{
  return &GetSpaceRespBuilder{
    obj: NewGetSpaceResp(),
  }
}

func (p GetSpaceRespBuilder) Emit() *GetSpaceResp{
  return &GetSpaceResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Item: p.obj.Item,
  }
}

func (g *GetSpaceRespBuilder) Code(code nebula0.ErrorCode) *GetSpaceRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetSpaceRespBuilder) Leader(leader *nebula0.HostAddr) *GetSpaceRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetSpaceRespBuilder) Item(item *SpaceItem) *GetSpaceRespBuilder {
  g.obj.Item = item
  return g
}

func (g *GetSpaceResp) SetCode(code nebula0.ErrorCode) *GetSpaceResp {
  g.Code = code
  return g
}

func (g *GetSpaceResp) SetLeader(leader *nebula0.HostAddr) *GetSpaceResp {
  g.Leader = leader
  return g
}

func (g *GetSpaceResp) SetItem(item *SpaceItem) *GetSpaceResp {
  g.Item = item
  return g
}

func (p *GetSpaceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetSpaceResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewSpaceItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetSpaceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var itemVal string
  if p.Item == nil {
    itemVal = "<nil>"
  } else {
    itemVal = fmt.Sprintf("%v", p.Item)
  }
  return fmt.Sprintf("GetSpaceResp({Code:%s Leader:%s Item:%s})", codeVal, leaderVal, itemVal)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Schema
//  - IfNotExists
type CreateTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateTagReq() *CreateTagReq {
  return &CreateTagReq{
    Schema: NewSchema(),
  }
}


func (p *CreateTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagReq) GetTagName() []byte {
  return p.TagName
}
var CreateTagReq_Schema_DEFAULT *Schema
func (p *CreateTagReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateTagReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateTagReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateTagReq) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type CreateTagReqBuilder struct {
  obj *CreateTagReq
}

func NewCreateTagReqBuilder() *CreateTagReqBuilder{
  return &CreateTagReqBuilder{
    obj: NewCreateTagReq(),
  }
}

func (p CreateTagReqBuilder) Emit() *CreateTagReq{
  return &CreateTagReq{
    SpaceID: p.obj.SpaceID,
    TagName: p.obj.TagName,
    Schema: p.obj.Schema,
    IfNotExists: p.obj.IfNotExists,
  }
}

func (c *CreateTagReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CreateTagReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CreateTagReqBuilder) TagName(tagName []byte) *CreateTagReqBuilder {
  c.obj.TagName = tagName
  return c
}

func (c *CreateTagReqBuilder) Schema(schema *Schema) *CreateTagReqBuilder {
  c.obj.Schema = schema
  return c
}

func (c *CreateTagReqBuilder) IfNotExists(ifNotExists bool) *CreateTagReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateTagReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CreateTagReq {
  c.SpaceID = spaceID
  return c
}

func (c *CreateTagReq) SetTagName(tagName []byte) *CreateTagReq {
  c.TagName = tagName
  return c
}

func (c *CreateTagReq) SetSchema(schema *Schema) *CreateTagReq {
  c.Schema = schema
  return c
}

func (c *CreateTagReq) SetIfNotExists(ifNotExists bool) *CreateTagReq {
  c.IfNotExists = ifNotExists
  return c
}

func (p *CreateTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CreateTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *CreateTagReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  return fmt.Sprintf("CreateTagReq({SpaceID:%s TagName:%s Schema:%s IfNotExists:%s})", spaceIDVal, tagNameVal, schemaVal, ifNotExistsVal)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - TagItems
//  - SchemaProp
type AlterTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  TagItems []*AlterSchemaItem `thrift:"tag_items,3" db:"tag_items" json:"tag_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterTagReq() *AlterTagReq {
  return &AlterTagReq{
    SchemaProp: NewSchemaProp(),
  }
}


func (p *AlterTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *AlterTagReq) GetTagItems() []*AlterSchemaItem {
  return p.TagItems
}
var AlterTagReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterTagReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterTagReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterTagReq) IsSetSchemaProp() bool {
  return p != nil && p.SchemaProp != nil
}

type AlterTagReqBuilder struct {
  obj *AlterTagReq
}

func NewAlterTagReqBuilder() *AlterTagReqBuilder{
  return &AlterTagReqBuilder{
    obj: NewAlterTagReq(),
  }
}

func (p AlterTagReqBuilder) Emit() *AlterTagReq{
  return &AlterTagReq{
    SpaceID: p.obj.SpaceID,
    TagName: p.obj.TagName,
    TagItems: p.obj.TagItems,
    SchemaProp: p.obj.SchemaProp,
  }
}

func (a *AlterTagReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AlterTagReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AlterTagReqBuilder) TagName(tagName []byte) *AlterTagReqBuilder {
  a.obj.TagName = tagName
  return a
}

func (a *AlterTagReqBuilder) TagItems(tagItems []*AlterSchemaItem) *AlterTagReqBuilder {
  a.obj.TagItems = tagItems
  return a
}

func (a *AlterTagReqBuilder) SchemaProp(schemaProp *SchemaProp) *AlterTagReqBuilder {
  a.obj.SchemaProp = schemaProp
  return a
}

func (a *AlterTagReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AlterTagReq {
  a.SpaceID = spaceID
  return a
}

func (a *AlterTagReq) SetTagName(tagName []byte) *AlterTagReq {
  a.TagName = tagName
  return a
}

func (a *AlterTagReq) SetTagItems(tagItems []*AlterSchemaItem) *AlterTagReq {
  a.TagItems = tagItems
  return a
}

func (a *AlterTagReq) SetSchemaProp(schemaProp *SchemaProp) *AlterTagReq {
  a.SchemaProp = schemaProp
  return a
}

func (p *AlterTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AlterTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *AlterTagReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.TagItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := NewAlterSchemaItem()
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.TagItems = append(p.TagItems, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_items: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterTagReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  tagItemsVal := fmt.Sprintf("%v", p.TagItems)
  var schemaPropVal string
  if p.SchemaProp == nil {
    schemaPropVal = "<nil>"
  } else {
    schemaPropVal = fmt.Sprintf("%v", p.SchemaProp)
  }
  return fmt.Sprintf("AlterTagReq({SpaceID:%s TagName:%s TagItems:%s SchemaProp:%s})", spaceIDVal, tagNameVal, tagItemsVal, schemaPropVal)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - IfExists
type DropTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagReq() *DropTagReq {
  return &DropTagReq{}
}


func (p *DropTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *DropTagReq) GetIfExists() bool {
  return p.IfExists
}
type DropTagReqBuilder struct {
  obj *DropTagReq
}

func NewDropTagReqBuilder() *DropTagReqBuilder{
  return &DropTagReqBuilder{
    obj: NewDropTagReq(),
  }
}

func (p DropTagReqBuilder) Emit() *DropTagReq{
  return &DropTagReq{
    SpaceID: p.obj.SpaceID,
    TagName: p.obj.TagName,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropTagReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DropTagReqBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DropTagReqBuilder) TagName(tagName []byte) *DropTagReqBuilder {
  d.obj.TagName = tagName
  return d
}

func (d *DropTagReqBuilder) IfExists(ifExists bool) *DropTagReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropTagReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *DropTagReq {
  d.SpaceID = spaceID
  return d
}

func (d *DropTagReq) SetTagName(tagName []byte) *DropTagReq {
  d.TagName = tagName
  return d
}

func (d *DropTagReq) SetIfExists(ifExists bool) *DropTagReq {
  d.IfExists = ifExists
  return d
}

func (p *DropTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DropTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *DropTagReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *DropTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropTagReq({SpaceID:%s TagName:%s IfExists:%s})", spaceIDVal, tagNameVal, ifExistsVal)
}

// Attributes:
//  - SpaceID
type ListTagsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagsReq() *ListTagsReq {
  return &ListTagsReq{}
}


func (p *ListTagsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListTagsReqBuilder struct {
  obj *ListTagsReq
}

func NewListTagsReqBuilder() *ListTagsReqBuilder{
  return &ListTagsReqBuilder{
    obj: NewListTagsReq(),
  }
}

func (p ListTagsReqBuilder) Emit() *ListTagsReq{
  return &ListTagsReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListTagsReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListTagsReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListTagsReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListTagsReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListTagsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListTagsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListTagsReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Tags
type ListTagsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Tags []*TagItem `thrift:"tags,3" db:"tags" json:"tags"`
}

func NewListTagsResp() *ListTagsResp {
  return &ListTagsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListTagsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListTagsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListTagsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListTagsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagsResp) GetTags() []*TagItem {
  return p.Tags
}
func (p *ListTagsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListTagsRespBuilder struct {
  obj *ListTagsResp
}

func NewListTagsRespBuilder() *ListTagsRespBuilder{
  return &ListTagsRespBuilder{
    obj: NewListTagsResp(),
  }
}

func (p ListTagsRespBuilder) Emit() *ListTagsResp{
  return &ListTagsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Tags: p.obj.Tags,
  }
}

func (l *ListTagsRespBuilder) Code(code nebula0.ErrorCode) *ListTagsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListTagsRespBuilder) Leader(leader *nebula0.HostAddr) *ListTagsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListTagsRespBuilder) Tags(tags []*TagItem) *ListTagsRespBuilder {
  l.obj.Tags = tags
  return l
}

func (l *ListTagsResp) SetCode(code nebula0.ErrorCode) *ListTagsResp {
  l.Code = code
  return l
}

func (l *ListTagsResp) SetLeader(leader *nebula0.HostAddr) *ListTagsResp {
  l.Leader = leader
  return l
}

func (l *ListTagsResp) SetTags(tags []*TagItem) *ListTagsResp {
  l.Tags = tags
  return l
}

func (p *ListTagsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListTagsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagItem, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := NewTagItem()
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Tags = append(p.Tags, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err) }
  return err
}

func (p *ListTagsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  tagsVal := fmt.Sprintf("%v", p.Tags)
  return fmt.Sprintf("ListTagsResp({Code:%s Leader:%s Tags:%s})", codeVal, leaderVal, tagsVal)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Version
type GetTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetTagReq() *GetTagReq {
  return &GetTagReq{}
}


func (p *GetTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *GetTagReq) GetVersion() SchemaVer {
  return p.Version
}
type GetTagReqBuilder struct {
  obj *GetTagReq
}

func NewGetTagReqBuilder() *GetTagReqBuilder{
  return &GetTagReqBuilder{
    obj: NewGetTagReq(),
  }
}

func (p GetTagReqBuilder) Emit() *GetTagReq{
  return &GetTagReq{
    SpaceID: p.obj.SpaceID,
    TagName: p.obj.TagName,
    Version: p.obj.Version,
  }
}

func (g *GetTagReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetTagReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetTagReqBuilder) TagName(tagName []byte) *GetTagReqBuilder {
  g.obj.TagName = tagName
  return g
}

func (g *GetTagReqBuilder) Version(version SchemaVer) *GetTagReqBuilder {
  g.obj.Version = version
  return g
}

func (g *GetTagReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetTagReq {
  g.SpaceID = spaceID
  return g
}

func (g *GetTagReq) SetTagName(tagName []byte) *GetTagReq {
  g.TagName = tagName
  return g
}

func (g *GetTagReq) SetVersion(version SchemaVer) *GetTagReq {
  g.Version = version
  return g
}

func (p *GetTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *GetTagReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := SchemaVer(v)
    p.Version = temp
  }
  return nil
}

func (p *GetTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *GetTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetTagReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("GetTagReq({SpaceID:%s TagName:%s Version:%s})", spaceIDVal, tagNameVal, versionVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetTagResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetTagResp() *GetTagResp {
  return &GetTagResp{
    Leader: nebula0.NewHostAddr(),
    Schema: NewSchema(),
  }
}


func (p *GetTagResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetTagResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetTagResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetTagResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagResp_Schema_DEFAULT *Schema
func (p *GetTagResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetTagResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetTagResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetTagResp) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type GetTagRespBuilder struct {
  obj *GetTagResp
}

func NewGetTagRespBuilder() *GetTagRespBuilder{
  return &GetTagRespBuilder{
    obj: NewGetTagResp(),
  }
}

func (p GetTagRespBuilder) Emit() *GetTagResp{
  return &GetTagResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Schema: p.obj.Schema,
  }
}

func (g *GetTagRespBuilder) Code(code nebula0.ErrorCode) *GetTagRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetTagRespBuilder) Leader(leader *nebula0.HostAddr) *GetTagRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetTagRespBuilder) Schema(schema *Schema) *GetTagRespBuilder {
  g.obj.Schema = schema
  return g
}

func (g *GetTagResp) SetCode(code nebula0.ErrorCode) *GetTagResp {
  g.Code = code
  return g
}

func (g *GetTagResp) SetLeader(leader *nebula0.HostAddr) *GetTagResp {
  g.Leader = leader
  return g
}

func (g *GetTagResp) SetSchema(schema *Schema) *GetTagResp {
  g.Schema = schema
  return g
}

func (p *GetTagResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetTagResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetTagResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetTagResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  return fmt.Sprintf("GetTagResp({Code:%s Leader:%s Schema:%s})", codeVal, leaderVal, schemaVal)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Schema
//  - IfNotExists
type CreateEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateEdgeReq() *CreateEdgeReq {
  return &CreateEdgeReq{
    Schema: NewSchema(),
  }
}


func (p *CreateEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}
var CreateEdgeReq_Schema_DEFAULT *Schema
func (p *CreateEdgeReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateEdgeReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateEdgeReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateEdgeReq) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type CreateEdgeReqBuilder struct {
  obj *CreateEdgeReq
}

func NewCreateEdgeReqBuilder() *CreateEdgeReqBuilder{
  return &CreateEdgeReqBuilder{
    obj: NewCreateEdgeReq(),
  }
}

func (p CreateEdgeReqBuilder) Emit() *CreateEdgeReq{
  return &CreateEdgeReq{
    SpaceID: p.obj.SpaceID,
    EdgeName: p.obj.EdgeName,
    Schema: p.obj.Schema,
    IfNotExists: p.obj.IfNotExists,
  }
}

func (c *CreateEdgeReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CreateEdgeReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CreateEdgeReqBuilder) EdgeName(edgeName []byte) *CreateEdgeReqBuilder {
  c.obj.EdgeName = edgeName
  return c
}

func (c *CreateEdgeReqBuilder) Schema(schema *Schema) *CreateEdgeReqBuilder {
  c.obj.Schema = schema
  return c
}

func (c *CreateEdgeReqBuilder) IfNotExists(ifNotExists bool) *CreateEdgeReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateEdgeReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CreateEdgeReq {
  c.SpaceID = spaceID
  return c
}

func (c *CreateEdgeReq) SetEdgeName(edgeName []byte) *CreateEdgeReq {
  c.EdgeName = edgeName
  return c
}

func (c *CreateEdgeReq) SetSchema(schema *Schema) *CreateEdgeReq {
  c.Schema = schema
  return c
}

func (c *CreateEdgeReq) SetIfNotExists(ifNotExists bool) *CreateEdgeReq {
  c.IfNotExists = ifNotExists
  return c
}

func (p *CreateEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  return fmt.Sprintf("CreateEdgeReq({SpaceID:%s EdgeName:%s Schema:%s IfNotExists:%s})", spaceIDVal, edgeNameVal, schemaVal, ifNotExistsVal)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - EdgeItems
//  - SchemaProp
type AlterEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  EdgeItems []*AlterSchemaItem `thrift:"edge_items,3" db:"edge_items" json:"edge_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterEdgeReq() *AlterEdgeReq {
  return &AlterEdgeReq{
    SchemaProp: NewSchemaProp(),
  }
}


func (p *AlterEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *AlterEdgeReq) GetEdgeItems() []*AlterSchemaItem {
  return p.EdgeItems
}
var AlterEdgeReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterEdgeReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterEdgeReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterEdgeReq) IsSetSchemaProp() bool {
  return p != nil && p.SchemaProp != nil
}

type AlterEdgeReqBuilder struct {
  obj *AlterEdgeReq
}

func NewAlterEdgeReqBuilder() *AlterEdgeReqBuilder{
  return &AlterEdgeReqBuilder{
    obj: NewAlterEdgeReq(),
  }
}

func (p AlterEdgeReqBuilder) Emit() *AlterEdgeReq{
  return &AlterEdgeReq{
    SpaceID: p.obj.SpaceID,
    EdgeName: p.obj.EdgeName,
    EdgeItems: p.obj.EdgeItems,
    SchemaProp: p.obj.SchemaProp,
  }
}

func (a *AlterEdgeReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AlterEdgeReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AlterEdgeReqBuilder) EdgeName(edgeName []byte) *AlterEdgeReqBuilder {
  a.obj.EdgeName = edgeName
  return a
}

func (a *AlterEdgeReqBuilder) EdgeItems(edgeItems []*AlterSchemaItem) *AlterEdgeReqBuilder {
  a.obj.EdgeItems = edgeItems
  return a
}

func (a *AlterEdgeReqBuilder) SchemaProp(schemaProp *SchemaProp) *AlterEdgeReqBuilder {
  a.obj.SchemaProp = schemaProp
  return a
}

func (a *AlterEdgeReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AlterEdgeReq {
  a.SpaceID = spaceID
  return a
}

func (a *AlterEdgeReq) SetEdgeName(edgeName []byte) *AlterEdgeReq {
  a.EdgeName = edgeName
  return a
}

func (a *AlterEdgeReq) SetEdgeItems(edgeItems []*AlterSchemaItem) *AlterEdgeReq {
  a.EdgeItems = edgeItems
  return a
}

func (a *AlterEdgeReq) SetSchemaProp(schemaProp *SchemaProp) *AlterEdgeReq {
  a.SchemaProp = schemaProp
  return a
}

func (p *AlterEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.EdgeItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := NewAlterSchemaItem()
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.EdgeItems = append(p.EdgeItems, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_items: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  edgeItemsVal := fmt.Sprintf("%v", p.EdgeItems)
  var schemaPropVal string
  if p.SchemaProp == nil {
    schemaPropVal = "<nil>"
  } else {
    schemaPropVal = fmt.Sprintf("%v", p.SchemaProp)
  }
  return fmt.Sprintf("AlterEdgeReq({SpaceID:%s EdgeName:%s EdgeItems:%s SchemaProp:%s})", spaceIDVal, edgeNameVal, edgeItemsVal, schemaPropVal)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Version
type GetEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetEdgeReq() *GetEdgeReq {
  return &GetEdgeReq{}
}


func (p *GetEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *GetEdgeReq) GetVersion() SchemaVer {
  return p.Version
}
type GetEdgeReqBuilder struct {
  obj *GetEdgeReq
}

func NewGetEdgeReqBuilder() *GetEdgeReqBuilder{
  return &GetEdgeReqBuilder{
    obj: NewGetEdgeReq(),
  }
}

func (p GetEdgeReqBuilder) Emit() *GetEdgeReq{
  return &GetEdgeReq{
    SpaceID: p.obj.SpaceID,
    EdgeName: p.obj.EdgeName,
    Version: p.obj.Version,
  }
}

func (g *GetEdgeReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetEdgeReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetEdgeReqBuilder) EdgeName(edgeName []byte) *GetEdgeReqBuilder {
  g.obj.EdgeName = edgeName
  return g
}

func (g *GetEdgeReqBuilder) Version(version SchemaVer) *GetEdgeReqBuilder {
  g.obj.Version = version
  return g
}

func (g *GetEdgeReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetEdgeReq {
  g.SpaceID = spaceID
  return g
}

func (g *GetEdgeReq) SetEdgeName(edgeName []byte) *GetEdgeReq {
  g.EdgeName = edgeName
  return g
}

func (g *GetEdgeReq) SetVersion(version SchemaVer) *GetEdgeReq {
  g.Version = version
  return g
}

func (p *GetEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *GetEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := SchemaVer(v)
    p.Version = temp
  }
  return nil
}

func (p *GetEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("GetEdgeReq({SpaceID:%s EdgeName:%s Version:%s})", spaceIDVal, edgeNameVal, versionVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetEdgeResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetEdgeResp() *GetEdgeResp {
  return &GetEdgeResp{
    Leader: nebula0.NewHostAddr(),
    Schema: NewSchema(),
  }
}


func (p *GetEdgeResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetEdgeResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetEdgeResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeResp_Schema_DEFAULT *Schema
func (p *GetEdgeResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetEdgeResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetEdgeResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetEdgeResp) IsSetSchema() bool {
  return p != nil && p.Schema != nil
}

type GetEdgeRespBuilder struct {
  obj *GetEdgeResp
}

func NewGetEdgeRespBuilder() *GetEdgeRespBuilder{
  return &GetEdgeRespBuilder{
    obj: NewGetEdgeResp(),
  }
}

func (p GetEdgeRespBuilder) Emit() *GetEdgeResp{
  return &GetEdgeResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Schema: p.obj.Schema,
  }
}

func (g *GetEdgeRespBuilder) Code(code nebula0.ErrorCode) *GetEdgeRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetEdgeRespBuilder) Leader(leader *nebula0.HostAddr) *GetEdgeRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetEdgeRespBuilder) Schema(schema *Schema) *GetEdgeRespBuilder {
  g.obj.Schema = schema
  return g
}

func (g *GetEdgeResp) SetCode(code nebula0.ErrorCode) *GetEdgeResp {
  g.Code = code
  return g
}

func (g *GetEdgeResp) SetLeader(leader *nebula0.HostAddr) *GetEdgeResp {
  g.Leader = leader
  return g
}

func (g *GetEdgeResp) SetSchema(schema *Schema) *GetEdgeResp {
  g.Schema = schema
  return g
}

func (p *GetEdgeResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetEdgeResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetEdgeResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetEdgeResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var schemaVal string
  if p.Schema == nil {
    schemaVal = "<nil>"
  } else {
    schemaVal = fmt.Sprintf("%v", p.Schema)
  }
  return fmt.Sprintf("GetEdgeResp({Code:%s Leader:%s Schema:%s})", codeVal, leaderVal, schemaVal)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - IfExists
type DropEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeReq() *DropEdgeReq {
  return &DropEdgeReq{}
}


func (p *DropEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *DropEdgeReq) GetIfExists() bool {
  return p.IfExists
}
type DropEdgeReqBuilder struct {
  obj *DropEdgeReq
}

func NewDropEdgeReqBuilder() *DropEdgeReqBuilder{
  return &DropEdgeReqBuilder{
    obj: NewDropEdgeReq(),
  }
}

func (p DropEdgeReqBuilder) Emit() *DropEdgeReq{
  return &DropEdgeReq{
    SpaceID: p.obj.SpaceID,
    EdgeName: p.obj.EdgeName,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropEdgeReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DropEdgeReqBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DropEdgeReqBuilder) EdgeName(edgeName []byte) *DropEdgeReqBuilder {
  d.obj.EdgeName = edgeName
  return d
}

func (d *DropEdgeReqBuilder) IfExists(ifExists bool) *DropEdgeReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropEdgeReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *DropEdgeReq {
  d.SpaceID = spaceID
  return d
}

func (d *DropEdgeReq) SetEdgeName(edgeName []byte) *DropEdgeReq {
  d.EdgeName = edgeName
  return d
}

func (d *DropEdgeReq) SetIfExists(ifExists bool) *DropEdgeReq {
  d.IfExists = ifExists
  return d
}

func (p *DropEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DropEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *DropEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropEdgeReq({SpaceID:%s EdgeName:%s IfExists:%s})", spaceIDVal, edgeNameVal, ifExistsVal)
}

// Attributes:
//  - SpaceID
type ListEdgesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgesReq() *ListEdgesReq {
  return &ListEdgesReq{}
}


func (p *ListEdgesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListEdgesReqBuilder struct {
  obj *ListEdgesReq
}

func NewListEdgesReqBuilder() *ListEdgesReqBuilder{
  return &ListEdgesReqBuilder{
    obj: NewListEdgesReq(),
  }
}

func (p ListEdgesReqBuilder) Emit() *ListEdgesReq{
  return &ListEdgesReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListEdgesReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListEdgesReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListEdgesReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListEdgesReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListEdgesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListEdgesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListEdgesReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Edges
type ListEdgesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Edges []*EdgeItem `thrift:"edges,3" db:"edges" json:"edges"`
}

func NewListEdgesResp() *ListEdgesResp {
  return &ListEdgesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListEdgesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListEdgesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListEdgesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgesResp) GetEdges() []*EdgeItem {
  return p.Edges
}
func (p *ListEdgesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListEdgesRespBuilder struct {
  obj *ListEdgesResp
}

func NewListEdgesRespBuilder() *ListEdgesRespBuilder{
  return &ListEdgesRespBuilder{
    obj: NewListEdgesResp(),
  }
}

func (p ListEdgesRespBuilder) Emit() *ListEdgesResp{
  return &ListEdgesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Edges: p.obj.Edges,
  }
}

func (l *ListEdgesRespBuilder) Code(code nebula0.ErrorCode) *ListEdgesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListEdgesRespBuilder) Leader(leader *nebula0.HostAddr) *ListEdgesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListEdgesRespBuilder) Edges(edges []*EdgeItem) *ListEdgesRespBuilder {
  l.obj.Edges = edges
  return l
}

func (l *ListEdgesResp) SetCode(code nebula0.ErrorCode) *ListEdgesResp {
  l.Code = code
  return l
}

func (l *ListEdgesResp) SetLeader(leader *nebula0.HostAddr) *ListEdgesResp {
  l.Leader = leader
  return l
}

func (l *ListEdgesResp) SetEdges(edges []*EdgeItem) *ListEdgesResp {
  l.Edges = edges
  return l
}

func (p *ListEdgesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListEdgesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeItem, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := NewEdgeItem()
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Edges = append(p.Edges, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Edges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edges: ", p), err) }
  return err
}

func (p *ListEdgesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  edgesVal := fmt.Sprintf("%v", p.Edges)
  return fmt.Sprintf("ListEdgesResp({Code:%s Leader:%s Edges:%s})", codeVal, leaderVal, edgesVal)
}

// Attributes:
//  - Hosts
type AddHostsReq struct {
  Hosts []*nebula0.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewAddHostsReq() *AddHostsReq {
  return &AddHostsReq{}
}


func (p *AddHostsReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
type AddHostsReqBuilder struct {
  obj *AddHostsReq
}

func NewAddHostsReqBuilder() *AddHostsReqBuilder{
  return &AddHostsReqBuilder{
    obj: NewAddHostsReq(),
  }
}

func (p AddHostsReqBuilder) Emit() *AddHostsReq{
  return &AddHostsReq{
    Hosts: p.obj.Hosts,
  }
}

func (a *AddHostsReqBuilder) Hosts(hosts []*nebula0.HostAddr) *AddHostsReqBuilder {
  a.obj.Hosts = hosts
  return a
}

func (a *AddHostsReq) SetHosts(hosts []*nebula0.HostAddr) *AddHostsReq {
  a.Hosts = hosts
  return a
}

func (p *AddHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostsReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := nebula0.NewHostAddr()
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Hosts = append(p.Hosts, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *AddHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("AddHostsReq({Hosts:%s})", hostsVal)
}

// Attributes:
//  - Hosts
type DropHostsReq struct {
  Hosts []*nebula0.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
}

func NewDropHostsReq() *DropHostsReq {
  return &DropHostsReq{}
}


func (p *DropHostsReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
type DropHostsReqBuilder struct {
  obj *DropHostsReq
}

func NewDropHostsReqBuilder() *DropHostsReqBuilder{
  return &DropHostsReqBuilder{
    obj: NewDropHostsReq(),
  }
}

func (p DropHostsReqBuilder) Emit() *DropHostsReq{
  return &DropHostsReq{
    Hosts: p.obj.Hosts,
  }
}

func (d *DropHostsReqBuilder) Hosts(hosts []*nebula0.HostAddr) *DropHostsReqBuilder {
  d.obj.Hosts = hosts
  return d
}

func (d *DropHostsReq) SetHosts(hosts []*nebula0.HostAddr) *DropHostsReq {
  d.Hosts = hosts
  return d
}

func (p *DropHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropHostsReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem31 := nebula0.NewHostAddr()
    if err := _elem31.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
    }
    p.Hosts = append(p.Hosts, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *DropHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("DropHostsReq({Hosts:%s})", hostsVal)
}

// Attributes:
//  - Type
type ListHostsReq struct {
  Type ListHostType `thrift:"type,1" db:"type" json:"type"`
}

func NewListHostsReq() *ListHostsReq {
  return &ListHostsReq{}
}


func (p *ListHostsReq) GetType() ListHostType {
  return p.Type
}
type ListHostsReqBuilder struct {
  obj *ListHostsReq
}

func NewListHostsReqBuilder() *ListHostsReqBuilder{
  return &ListHostsReqBuilder{
    obj: NewListHostsReq(),
  }
}

func (p ListHostsReqBuilder) Emit() *ListHostsReq{
  return &ListHostsReq{
    Type: p.obj.Type,
  }
}

func (l *ListHostsReqBuilder) Type(type_a1 ListHostType) *ListHostsReqBuilder {
  l.obj.Type = type_a1
  return l
}

func (l *ListHostsReq) SetType(type_a1 ListHostType) *ListHostsReq {
  l.Type = type_a1
  return l
}

func (p *ListHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ListHostType(v)
    p.Type = temp
  }
  return nil
}

func (p *ListHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("ListHostsReq({Type:%s})", typeVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Hosts
type ListHostsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*HostItem `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewListHostsResp() *ListHostsResp {
  return &ListHostsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListHostsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListHostsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListHostsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListHostsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListHostsResp) GetHosts() []*HostItem {
  return p.Hosts
}
func (p *ListHostsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListHostsRespBuilder struct {
  obj *ListHostsResp
}

func NewListHostsRespBuilder() *ListHostsRespBuilder{
  return &ListHostsRespBuilder{
    obj: NewListHostsResp(),
  }
}

func (p ListHostsRespBuilder) Emit() *ListHostsResp{
  return &ListHostsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Hosts: p.obj.Hosts,
  }
}

func (l *ListHostsRespBuilder) Code(code nebula0.ErrorCode) *ListHostsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListHostsRespBuilder) Leader(leader *nebula0.HostAddr) *ListHostsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListHostsRespBuilder) Hosts(hosts []*HostItem) *ListHostsRespBuilder {
  l.obj.Hosts = hosts
  return l
}

func (l *ListHostsResp) SetCode(code nebula0.ErrorCode) *ListHostsResp {
  l.Code = code
  return l
}

func (l *ListHostsResp) SetLeader(leader *nebula0.HostAddr) *ListHostsResp {
  l.Leader = leader
  return l
}

func (l *ListHostsResp) SetHosts(hosts []*HostItem) *ListHostsResp {
  l.Hosts = hosts
  return l
}

func (p *ListHostsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListHostsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostItem, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := NewHostItem()
    if err := _elem32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Hosts = append(p.Hosts, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListHostsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *ListHostsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("ListHostsResp({Code:%s Leader:%s Hosts:%s})", codeVal, leaderVal, hostsVal)
}

// Attributes:
//  - PartID
//  - Leader
//  - Peers
//  - Losts
type PartItem struct {
  PartID nebula0.PartitionID `thrift:"part_id,1,required" db:"part_id" json:"part_id"`
  Leader *nebula0.HostAddr `thrift:"leader,2,optional" db:"leader" json:"leader,omitempty"`
  Peers []*nebula0.HostAddr `thrift:"peers,3,required" db:"peers" json:"peers"`
  Losts []*nebula0.HostAddr `thrift:"losts,4,required" db:"losts" json:"losts"`
}

func NewPartItem() *PartItem {
  return &PartItem{}
}


func (p *PartItem) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var PartItem_Leader_DEFAULT *nebula0.HostAddr
func (p *PartItem) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return PartItem_Leader_DEFAULT
  }
return p.Leader
}

func (p *PartItem) GetPeers() []*nebula0.HostAddr {
  return p.Peers
}

func (p *PartItem) GetLosts() []*nebula0.HostAddr {
  return p.Losts
}
func (p *PartItem) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type PartItemBuilder struct {
  obj *PartItem
}

func NewPartItemBuilder() *PartItemBuilder{
  return &PartItemBuilder{
    obj: NewPartItem(),
  }
}

func (p PartItemBuilder) Emit() *PartItem{
  return &PartItem{
    PartID: p.obj.PartID,
    Leader: p.obj.Leader,
    Peers: p.obj.Peers,
    Losts: p.obj.Losts,
  }
}

func (p *PartItemBuilder) PartID(partID nebula0.PartitionID) *PartItemBuilder {
  p.obj.PartID = partID
  return p
}

func (p *PartItemBuilder) Leader(leader *nebula0.HostAddr) *PartItemBuilder {
  p.obj.Leader = leader
  return p
}

func (p *PartItemBuilder) Peers(peers []*nebula0.HostAddr) *PartItemBuilder {
  p.obj.Peers = peers
  return p
}

func (p *PartItemBuilder) Losts(losts []*nebula0.HostAddr) *PartItemBuilder {
  p.obj.Losts = losts
  return p
}

func (p *PartItem) SetPartID(partID nebula0.PartitionID) *PartItem {
  p.PartID = partID
  return p
}

func (p *PartItem) SetLeader(leader *nebula0.HostAddr) *PartItem {
  p.Leader = leader
  return p
}

func (p *PartItem) SetPeers(peers []*nebula0.HostAddr) *PartItem {
  p.Peers = peers
  return p
}

func (p *PartItem) SetLosts(losts []*nebula0.HostAddr) *PartItem {
  p.Losts = losts
  return p
}

func (p *PartItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartID bool = false;
  var issetPeers bool = false;
  var issetLosts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPartID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetPeers = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetLosts = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  if !issetPeers{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Peers is not set"));
  }
  if !issetLosts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Losts is not set"));
  }
  return nil
}

func (p *PartItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *PartItem)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *PartItem)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem33 := nebula0.NewHostAddr()
    if err := _elem33.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
    }
    p.Peers = append(p.Peers, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Losts =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := nebula0.NewHostAddr()
    if err := _elem34.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.Losts = append(p.Losts, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *PartItem) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
    if err := p.Leader.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  }
  return err
}

func (p *PartItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *PartItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("losts", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:losts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Losts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Losts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:losts: ", p), err) }
  return err
}

func (p *PartItem) String() string {
  if p == nil {
    return "<nil>"
  }

  partIDVal := fmt.Sprintf("%v", p.PartID)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  peersVal := fmt.Sprintf("%v", p.Peers)
  lostsVal := fmt.Sprintf("%v", p.Losts)
  return fmt.Sprintf("PartItem({PartID:%s Leader:%s Peers:%s Losts:%s})", partIDVal, leaderVal, peersVal, lostsVal)
}

// Attributes:
//  - SpaceID
//  - PartIds
type ListPartsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartIds []nebula0.PartitionID `thrift:"part_ids,2" db:"part_ids" json:"part_ids"`
}

func NewListPartsReq() *ListPartsReq {
  return &ListPartsReq{}
}


func (p *ListPartsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ListPartsReq) GetPartIds() []nebula0.PartitionID {
  return p.PartIds
}
type ListPartsReqBuilder struct {
  obj *ListPartsReq
}

func NewListPartsReqBuilder() *ListPartsReqBuilder{
  return &ListPartsReqBuilder{
    obj: NewListPartsReq(),
  }
}

func (p ListPartsReqBuilder) Emit() *ListPartsReq{
  return &ListPartsReq{
    SpaceID: p.obj.SpaceID,
    PartIds: p.obj.PartIds,
  }
}

func (l *ListPartsReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListPartsReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListPartsReqBuilder) PartIds(partIds []nebula0.PartitionID) *ListPartsReqBuilder {
  l.obj.PartIds = partIds
  return l
}

func (l *ListPartsReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListPartsReq {
  l.SpaceID = spaceID
  return l
}

func (l *ListPartsReq) SetPartIds(partIds []nebula0.PartitionID) *ListPartsReq {
  l.PartIds = partIds
  return l
}

func (p *ListPartsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListPartsReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.PartIds =  tSlice
  for i := 0; i < size; i ++ {
    var _elem35 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem35 = temp
    }
    p.PartIds = append(p.PartIds, _elem35)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListPartsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListPartsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PartIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_ids: ", p), err) }
  return err
}

func (p *ListPartsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  partIdsVal := fmt.Sprintf("%v", p.PartIds)
  return fmt.Sprintf("ListPartsReq({SpaceID:%s PartIds:%s})", spaceIDVal, partIdsVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Parts
type ListPartsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts []*PartItem `thrift:"parts,3" db:"parts" json:"parts"`
}

func NewListPartsResp() *ListPartsResp {
  return &ListPartsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListPartsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListPartsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListPartsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListPartsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListPartsResp) GetParts() []*PartItem {
  return p.Parts
}
func (p *ListPartsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListPartsRespBuilder struct {
  obj *ListPartsResp
}

func NewListPartsRespBuilder() *ListPartsRespBuilder{
  return &ListPartsRespBuilder{
    obj: NewListPartsResp(),
  }
}

func (p ListPartsRespBuilder) Emit() *ListPartsResp{
  return &ListPartsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Parts: p.obj.Parts,
  }
}

func (l *ListPartsRespBuilder) Code(code nebula0.ErrorCode) *ListPartsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListPartsRespBuilder) Leader(leader *nebula0.HostAddr) *ListPartsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListPartsRespBuilder) Parts(parts []*PartItem) *ListPartsRespBuilder {
  l.obj.Parts = parts
  return l
}

func (l *ListPartsResp) SetCode(code nebula0.ErrorCode) *ListPartsResp {
  l.Code = code
  return l
}

func (l *ListPartsResp) SetLeader(leader *nebula0.HostAddr) *ListPartsResp {
  l.Leader = leader
  return l
}

func (l *ListPartsResp) SetParts(parts []*PartItem) *ListPartsResp {
  l.Parts = parts
  return l
}

func (p *ListPartsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListPartsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartItem, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := NewPartItem()
    if err := _elem36.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.Parts = append(p.Parts, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListPartsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *ListPartsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  partsVal := fmt.Sprintf("%v", p.Parts)
  return fmt.Sprintf("ListPartsResp({Code:%s Leader:%s Parts:%s})", codeVal, leaderVal, partsVal)
}

// Attributes:
//  - SpaceID
type GetPartsAllocReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetPartsAllocReq() *GetPartsAllocReq {
  return &GetPartsAllocReq{}
}


func (p *GetPartsAllocReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type GetPartsAllocReqBuilder struct {
  obj *GetPartsAllocReq
}

func NewGetPartsAllocReqBuilder() *GetPartsAllocReqBuilder{
  return &GetPartsAllocReqBuilder{
    obj: NewGetPartsAllocReq(),
  }
}

func (p GetPartsAllocReqBuilder) Emit() *GetPartsAllocReq{
  return &GetPartsAllocReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (g *GetPartsAllocReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetPartsAllocReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetPartsAllocReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetPartsAllocReq {
  g.SpaceID = spaceID
  return g
}

func (p *GetPartsAllocReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetPartsAllocReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPartsAllocReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("GetPartsAllocReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Parts
//  - Terms
type GetPartsAllocResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts map[nebula0.PartitionID][]*nebula0.HostAddr `thrift:"parts,3" db:"parts" json:"parts"`
  Terms map[nebula0.PartitionID]int64 `thrift:"terms,4,optional" db:"terms" json:"terms,omitempty"`
}

func NewGetPartsAllocResp() *GetPartsAllocResp {
  return &GetPartsAllocResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *GetPartsAllocResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetPartsAllocResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetPartsAllocResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetPartsAllocResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetPartsAllocResp) GetParts() map[nebula0.PartitionID][]*nebula0.HostAddr {
  return p.Parts
}
var GetPartsAllocResp_Terms_DEFAULT map[nebula0.PartitionID]int64

func (p *GetPartsAllocResp) GetTerms() map[nebula0.PartitionID]int64 {
  return p.Terms
}
func (p *GetPartsAllocResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetPartsAllocResp) IsSetTerms() bool {
  return p != nil && p.Terms != nil
}

type GetPartsAllocRespBuilder struct {
  obj *GetPartsAllocResp
}

func NewGetPartsAllocRespBuilder() *GetPartsAllocRespBuilder{
  return &GetPartsAllocRespBuilder{
    obj: NewGetPartsAllocResp(),
  }
}

func (p GetPartsAllocRespBuilder) Emit() *GetPartsAllocResp{
  return &GetPartsAllocResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Parts: p.obj.Parts,
    Terms: p.obj.Terms,
  }
}

func (g *GetPartsAllocRespBuilder) Code(code nebula0.ErrorCode) *GetPartsAllocRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetPartsAllocRespBuilder) Leader(leader *nebula0.HostAddr) *GetPartsAllocRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetPartsAllocRespBuilder) Parts(parts map[nebula0.PartitionID][]*nebula0.HostAddr) *GetPartsAllocRespBuilder {
  g.obj.Parts = parts
  return g
}

func (g *GetPartsAllocRespBuilder) Terms(terms map[nebula0.PartitionID]int64) *GetPartsAllocRespBuilder {
  g.obj.Terms = terms
  return g
}

func (g *GetPartsAllocResp) SetCode(code nebula0.ErrorCode) *GetPartsAllocResp {
  g.Code = code
  return g
}

func (g *GetPartsAllocResp) SetLeader(leader *nebula0.HostAddr) *GetPartsAllocResp {
  g.Leader = leader
  return g
}

func (g *GetPartsAllocResp) SetParts(parts map[nebula0.PartitionID][]*nebula0.HostAddr) *GetPartsAllocResp {
  g.Parts = parts
  return g
}

func (g *GetPartsAllocResp) SetTerms(terms map[nebula0.PartitionID]int64) *GetPartsAllocResp {
  g.Terms = terms
  return g
}

func (p *GetPartsAllocResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.HostAddr, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
    var _key37 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key37 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.HostAddr, 0, size)
    _val38 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem39 := nebula0.NewHostAddr()
      if err := _elem39.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
      }
      _val38 = append(_val38, _elem39)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID]int64, size)
  p.Terms =  tMap
  for i := 0; i < size; i ++ {
    var _key40 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _key40 = temp
    }
    var _val41 int64
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val41 = v
    }
    p.Terms[_key40] = _val41
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetTerms() {
    if err := oprot.WriteFieldBegin("terms", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:terms: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.I64, len(p.Terms)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Terms {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:terms: ", p), err) }
  }
  return err
}

func (p *GetPartsAllocResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  partsVal := fmt.Sprintf("%v", p.Parts)
  termsVal := fmt.Sprintf("%v", p.Terms)
  return fmt.Sprintf("GetPartsAllocResp({Code:%s Leader:%s Parts:%s Terms:%s})", codeVal, leaderVal, partsVal, termsVal)
}

// Attributes:
//  - Host
type GetWorkerIdReq struct {
  Host []byte `thrift:"host,1" db:"host" json:"host"`
}

func NewGetWorkerIdReq() *GetWorkerIdReq {
  return &GetWorkerIdReq{}
}


func (p *GetWorkerIdReq) GetHost() []byte {
  return p.Host
}
type GetWorkerIdReqBuilder struct {
  obj *GetWorkerIdReq
}

func NewGetWorkerIdReqBuilder() *GetWorkerIdReqBuilder{
  return &GetWorkerIdReqBuilder{
    obj: NewGetWorkerIdReq(),
  }
}

func (p GetWorkerIdReqBuilder) Emit() *GetWorkerIdReq{
  return &GetWorkerIdReq{
    Host: p.obj.Host,
  }
}

func (g *GetWorkerIdReqBuilder) Host(host []byte) *GetWorkerIdReqBuilder {
  g.obj.Host = host
  return g
}

func (g *GetWorkerIdReq) SetHost(host []byte) *GetWorkerIdReq {
  g.Host = host
  return g
}

func (p *GetWorkerIdReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkerIdReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Host = v
  }
  return nil
}

func (p *GetWorkerIdReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetWorkerIdReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkerIdReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteBinary(p.Host); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *GetWorkerIdReq) String() string {
  if p == nil {
    return "<nil>"
  }

  hostVal := fmt.Sprintf("%v", p.Host)
  return fmt.Sprintf("GetWorkerIdReq({Host:%s})", hostVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Workerid
type GetWorkerIdResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Workerid int64 `thrift:"workerid,3" db:"workerid" json:"workerid"`
}

func NewGetWorkerIdResp() *GetWorkerIdResp {
  return &GetWorkerIdResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *GetWorkerIdResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetWorkerIdResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetWorkerIdResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetWorkerIdResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetWorkerIdResp) GetWorkerid() int64 {
  return p.Workerid
}
func (p *GetWorkerIdResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type GetWorkerIdRespBuilder struct {
  obj *GetWorkerIdResp
}

func NewGetWorkerIdRespBuilder() *GetWorkerIdRespBuilder{
  return &GetWorkerIdRespBuilder{
    obj: NewGetWorkerIdResp(),
  }
}

func (p GetWorkerIdRespBuilder) Emit() *GetWorkerIdResp{
  return &GetWorkerIdResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Workerid: p.obj.Workerid,
  }
}

func (g *GetWorkerIdRespBuilder) Code(code nebula0.ErrorCode) *GetWorkerIdRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetWorkerIdRespBuilder) Leader(leader *nebula0.HostAddr) *GetWorkerIdRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetWorkerIdRespBuilder) Workerid(workerid int64) *GetWorkerIdRespBuilder {
  g.obj.Workerid = workerid
  return g
}

func (g *GetWorkerIdResp) SetCode(code nebula0.ErrorCode) *GetWorkerIdResp {
  g.Code = code
  return g
}

func (g *GetWorkerIdResp) SetLeader(leader *nebula0.HostAddr) *GetWorkerIdResp {
  g.Leader = leader
  return g
}

func (g *GetWorkerIdResp) SetWorkerid(workerid int64) *GetWorkerIdResp {
  g.Workerid = workerid
  return g
}

func (p *GetWorkerIdResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetWorkerIdResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetWorkerIdResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetWorkerIdResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Workerid = v
  }
  return nil
}

func (p *GetWorkerIdResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetWorkerIdResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetWorkerIdResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("workerid", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:workerid: ", p), err) }
  if err := oprot.WriteI64(int64(p.Workerid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workerid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:workerid: ", p), err) }
  return err
}

func (p *GetWorkerIdResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  workeridVal := fmt.Sprintf("%v", p.Workerid)
  return fmt.Sprintf("GetWorkerIdResp({Code:%s Leader:%s Workerid:%s})", codeVal, leaderVal, workeridVal)
}

// Attributes:
//  - Length
type GetSegmentIdReq struct {
  Length int64 `thrift:"length,1" db:"length" json:"length"`
}

func NewGetSegmentIdReq() *GetSegmentIdReq {
  return &GetSegmentIdReq{}
}


func (p *GetSegmentIdReq) GetLength() int64 {
  return p.Length
}
type GetSegmentIdReqBuilder struct {
  obj *GetSegmentIdReq
}

func NewGetSegmentIdReqBuilder() *GetSegmentIdReqBuilder{
  return &GetSegmentIdReqBuilder{
    obj: NewGetSegmentIdReq(),
  }
}

func (p GetSegmentIdReqBuilder) Emit() *GetSegmentIdReq{
  return &GetSegmentIdReq{
    Length: p.obj.Length,
  }
}

func (g *GetSegmentIdReqBuilder) Length(length int64) *GetSegmentIdReqBuilder {
  g.obj.Length = length
  return g
}

func (g *GetSegmentIdReq) SetLength(length int64) *GetSegmentIdReq {
  g.Length = length
  return g
}

func (p *GetSegmentIdReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSegmentIdReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Length = v
  }
  return nil
}

func (p *GetSegmentIdReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSegmentIdReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSegmentIdReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("length", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:length: ", p), err) }
  if err := oprot.WriteI64(int64(p.Length)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.length (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:length: ", p), err) }
  return err
}

func (p *GetSegmentIdReq) String() string {
  if p == nil {
    return "<nil>"
  }

  lengthVal := fmt.Sprintf("%v", p.Length)
  return fmt.Sprintf("GetSegmentIdReq({Length:%s})", lengthVal)
}

// Attributes:
//  - Code
//  - Leader
//  - SegmentID
type GetSegmentIdResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  SegmentID int64 `thrift:"segment_id,3" db:"segment_id" json:"segment_id"`
}

func NewGetSegmentIdResp() *GetSegmentIdResp {
  return &GetSegmentIdResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *GetSegmentIdResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetSegmentIdResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetSegmentIdResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetSegmentIdResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetSegmentIdResp) GetSegmentID() int64 {
  return p.SegmentID
}
func (p *GetSegmentIdResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type GetSegmentIdRespBuilder struct {
  obj *GetSegmentIdResp
}

func NewGetSegmentIdRespBuilder() *GetSegmentIdRespBuilder{
  return &GetSegmentIdRespBuilder{
    obj: NewGetSegmentIdResp(),
  }
}

func (p GetSegmentIdRespBuilder) Emit() *GetSegmentIdResp{
  return &GetSegmentIdResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    SegmentID: p.obj.SegmentID,
  }
}

func (g *GetSegmentIdRespBuilder) Code(code nebula0.ErrorCode) *GetSegmentIdRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetSegmentIdRespBuilder) Leader(leader *nebula0.HostAddr) *GetSegmentIdRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetSegmentIdRespBuilder) SegmentID(segmentID int64) *GetSegmentIdRespBuilder {
  g.obj.SegmentID = segmentID
  return g
}

func (g *GetSegmentIdResp) SetCode(code nebula0.ErrorCode) *GetSegmentIdResp {
  g.Code = code
  return g
}

func (g *GetSegmentIdResp) SetLeader(leader *nebula0.HostAddr) *GetSegmentIdResp {
  g.Leader = leader
  return g
}

func (g *GetSegmentIdResp) SetSegmentID(segmentID int64) *GetSegmentIdResp {
  g.SegmentID = segmentID
  return g
}

func (p *GetSegmentIdResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSegmentIdResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetSegmentIdResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSegmentIdResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.SegmentID = v
  }
  return nil
}

func (p *GetSegmentIdResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSegmentIdResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSegmentIdResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:segment_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SegmentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:segment_id: ", p), err) }
  return err
}

func (p *GetSegmentIdResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  segmentIDVal := fmt.Sprintf("%v", p.SegmentID)
  return fmt.Sprintf("GetSegmentIdResp({Code:%s Leader:%s SegmentID:%s})", codeVal, leaderVal, segmentIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - ClusterID
//  - LastUpdateTimeInMs
//  - MetaVersion
type HBResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LastUpdateTimeInMs int64 `thrift:"last_update_time_in_ms,4" db:"last_update_time_in_ms" json:"last_update_time_in_ms"`
  MetaVersion int32 `thrift:"meta_version,5" db:"meta_version" json:"meta_version"`
}

func NewHBResp() *HBResp {
  return &HBResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *HBResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var HBResp_Leader_DEFAULT *nebula0.HostAddr
func (p *HBResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return HBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *HBResp) GetClusterID() ClusterID {
  return p.ClusterID
}

func (p *HBResp) GetLastUpdateTimeInMs() int64 {
  return p.LastUpdateTimeInMs
}

func (p *HBResp) GetMetaVersion() int32 {
  return p.MetaVersion
}
func (p *HBResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type HBRespBuilder struct {
  obj *HBResp
}

func NewHBRespBuilder() *HBRespBuilder{
  return &HBRespBuilder{
    obj: NewHBResp(),
  }
}

func (p HBRespBuilder) Emit() *HBResp{
  return &HBResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    ClusterID: p.obj.ClusterID,
    LastUpdateTimeInMs: p.obj.LastUpdateTimeInMs,
    MetaVersion: p.obj.MetaVersion,
  }
}

func (h *HBRespBuilder) Code(code nebula0.ErrorCode) *HBRespBuilder {
  h.obj.Code = code
  return h
}

func (h *HBRespBuilder) Leader(leader *nebula0.HostAddr) *HBRespBuilder {
  h.obj.Leader = leader
  return h
}

func (h *HBRespBuilder) ClusterID(clusterID ClusterID) *HBRespBuilder {
  h.obj.ClusterID = clusterID
  return h
}

func (h *HBRespBuilder) LastUpdateTimeInMs(lastUpdateTimeInMs int64) *HBRespBuilder {
  h.obj.LastUpdateTimeInMs = lastUpdateTimeInMs
  return h
}

func (h *HBRespBuilder) MetaVersion(metaVersion int32) *HBRespBuilder {
  h.obj.MetaVersion = metaVersion
  return h
}

func (h *HBResp) SetCode(code nebula0.ErrorCode) *HBResp {
  h.Code = code
  return h
}

func (h *HBResp) SetLeader(leader *nebula0.HostAddr) *HBResp {
  h.Leader = leader
  return h
}

func (h *HBResp) SetClusterID(clusterID ClusterID) *HBResp {
  h.ClusterID = clusterID
  return h
}

func (h *HBResp) SetLastUpdateTimeInMs(lastUpdateTimeInMs int64) *HBResp {
  h.LastUpdateTimeInMs = lastUpdateTimeInMs
  return h
}

func (h *HBResp) SetMetaVersion(metaVersion int32) *HBResp {
  h.MetaVersion = metaVersion
  return h
}

func (p *HBResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *HBResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *HBResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := ClusterID(v)
    p.ClusterID = temp
  }
  return nil
}

func (p *HBResp)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.LastUpdateTimeInMs = v
  }
  return nil
}

func (p *HBResp)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.MetaVersion = v
  }
  return nil
}

func (p *HBResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *HBResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *HBResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBResp) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_update_time_in_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_update_time_in_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastUpdateTimeInMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_update_time_in_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_update_time_in_ms: ", p), err) }
  return err
}

func (p *HBResp) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("meta_version", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:meta_version: ", p), err) }
  if err := oprot.WriteI32(int32(p.MetaVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meta_version (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:meta_version: ", p), err) }
  return err
}

func (p *HBResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  clusterIDVal := fmt.Sprintf("%v", p.ClusterID)
  lastUpdateTimeInMsVal := fmt.Sprintf("%v", p.LastUpdateTimeInMs)
  metaVersionVal := fmt.Sprintf("%v", p.MetaVersion)
  return fmt.Sprintf("HBResp({Code:%s Leader:%s ClusterID:%s LastUpdateTimeInMs:%s MetaVersion:%s})", codeVal, leaderVal, clusterIDVal, lastUpdateTimeInMsVal, metaVersionVal)
}

// Attributes:
//  - PartID
//  - Term
type LeaderInfo struct {
  PartID nebula0.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Term int64 `thrift:"term,2" db:"term" json:"term"`
}

func NewLeaderInfo() *LeaderInfo {
  return &LeaderInfo{}
}


func (p *LeaderInfo) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *LeaderInfo) GetTerm() int64 {
  return p.Term
}
type LeaderInfoBuilder struct {
  obj *LeaderInfo
}

func NewLeaderInfoBuilder() *LeaderInfoBuilder{
  return &LeaderInfoBuilder{
    obj: NewLeaderInfo(),
  }
}

func (p LeaderInfoBuilder) Emit() *LeaderInfo{
  return &LeaderInfo{
    PartID: p.obj.PartID,
    Term: p.obj.Term,
  }
}

func (l *LeaderInfoBuilder) PartID(partID nebula0.PartitionID) *LeaderInfoBuilder {
  l.obj.PartID = partID
  return l
}

func (l *LeaderInfoBuilder) Term(term int64) *LeaderInfoBuilder {
  l.obj.Term = term
  return l
}

func (l *LeaderInfo) SetPartID(partID nebula0.PartitionID) *LeaderInfo {
  l.PartID = partID
  return l
}

func (l *LeaderInfo) SetTerm(term int64) *LeaderInfo {
  l.Term = term
  return l
}

func (p *LeaderInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LeaderInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *LeaderInfo)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Term = v
  }
  return nil
}

func (p *LeaderInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LeaderInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LeaderInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *LeaderInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term: ", p), err) }
  return err
}

func (p *LeaderInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  partIDVal := fmt.Sprintf("%v", p.PartID)
  termVal := fmt.Sprintf("%v", p.Term)
  return fmt.Sprintf("LeaderInfo({PartID:%s Term:%s})", partIDVal, termVal)
}

// Attributes:
//  - PartList
type PartitionList struct {
  PartList []nebula0.PartitionID `thrift:"part_list,1" db:"part_list" json:"part_list"`
}

func NewPartitionList() *PartitionList {
  return &PartitionList{}
}


func (p *PartitionList) GetPartList() []nebula0.PartitionID {
  return p.PartList
}
type PartitionListBuilder struct {
  obj *PartitionList
}

func NewPartitionListBuilder() *PartitionListBuilder{
  return &PartitionListBuilder{
    obj: NewPartitionList(),
  }
}

func (p PartitionListBuilder) Emit() *PartitionList{
  return &PartitionList{
    PartList: p.obj.PartList,
  }
}

func (p *PartitionListBuilder) PartList(partList []nebula0.PartitionID) *PartitionListBuilder {
  p.obj.PartList = partList
  return p
}

func (p *PartitionList) SetPartList(partList []nebula0.PartitionID) *PartitionList {
  p.PartList = partList
  return p
}

func (p *PartitionList) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionList)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.PartList =  tSlice
  for i := 0; i < size; i ++ {
    var _elem42 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.PartitionID(v)
      _elem42 = temp
    }
    p.PartList = append(p.PartList, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionList) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartitionList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionList) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_list", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PartList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_list: ", p), err) }
  return err
}

func (p *PartitionList) String() string {
  if p == nil {
    return "<nil>"
  }

  partListVal := fmt.Sprintf("%v", p.PartList)
  return fmt.Sprintf("PartitionList({PartList:%s})", partListVal)
}

// Attributes:
//  - Role
//  - Host
//  - ClusterID
//  - LeaderPartIds
//  - GitInfoSha
//  - DiskParts
//  - Dir
//  - Version
type HBReq struct {
  Role HostRole `thrift:"role,1" db:"role" json:"role"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LeaderPartIds map[nebula0.GraphSpaceID][]*LeaderInfo `thrift:"leader_partIds,4,optional" db:"leader_partIds" json:"leader_partIds,omitempty"`
  GitInfoSha []byte `thrift:"git_info_sha,5" db:"git_info_sha" json:"git_info_sha"`
  DiskParts map[nebula0.GraphSpaceID]map[string]*PartitionList `thrift:"disk_parts,6,optional" db:"disk_parts" json:"disk_parts,omitempty"`
  Dir *nebula0.DirInfo `thrift:"dir,7,optional" db:"dir" json:"dir,omitempty"`
  Version []byte `thrift:"version,8,optional" db:"version" json:"version,omitempty"`
}

func NewHBReq() *HBReq {
  return &HBReq{
    Host: nebula0.NewHostAddr(),
  }
}


func (p *HBReq) GetRole() HostRole {
  return p.Role
}
var HBReq_Host_DEFAULT *nebula0.HostAddr
func (p *HBReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return HBReq_Host_DEFAULT
  }
return p.Host
}

func (p *HBReq) GetClusterID() ClusterID {
  return p.ClusterID
}
var HBReq_LeaderPartIds_DEFAULT map[nebula0.GraphSpaceID][]*LeaderInfo

func (p *HBReq) GetLeaderPartIds() map[nebula0.GraphSpaceID][]*LeaderInfo {
  return p.LeaderPartIds
}

func (p *HBReq) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var HBReq_DiskParts_DEFAULT map[nebula0.GraphSpaceID]map[string]*PartitionList

func (p *HBReq) GetDiskParts() map[nebula0.GraphSpaceID]map[string]*PartitionList {
  return p.DiskParts
}
var HBReq_Dir_DEFAULT *nebula0.DirInfo
func (p *HBReq) GetDir() *nebula0.DirInfo {
  if !p.IsSetDir() {
    return HBReq_Dir_DEFAULT
  }
return p.Dir
}
var HBReq_Version_DEFAULT []byte

func (p *HBReq) GetVersion() []byte {
  return p.Version
}
func (p *HBReq) IsSetHost() bool {
  return p != nil && p.Host != nil
}

func (p *HBReq) IsSetLeaderPartIds() bool {
  return p != nil && p.LeaderPartIds != nil
}

func (p *HBReq) IsSetDiskParts() bool {
  return p != nil && p.DiskParts != nil
}

func (p *HBReq) IsSetDir() bool {
  return p != nil && p.Dir != nil
}

func (p *HBReq) IsSetVersion() bool {
  return p != nil && p.Version != nil
}

type HBReqBuilder struct {
  obj *HBReq
}

func NewHBReqBuilder() *HBReqBuilder{
  return &HBReqBuilder{
    obj: NewHBReq(),
  }
}

func (p HBReqBuilder) Emit() *HBReq{
  return &HBReq{
    Role: p.obj.Role,
    Host: p.obj.Host,
    ClusterID: p.obj.ClusterID,
    LeaderPartIds: p.obj.LeaderPartIds,
    GitInfoSha: p.obj.GitInfoSha,
    DiskParts: p.obj.DiskParts,
    Dir: p.obj.Dir,
    Version: p.obj.Version,
  }
}

func (h *HBReqBuilder) Role(role HostRole) *HBReqBuilder {
  h.obj.Role = role
  return h
}

func (h *HBReqBuilder) Host(host *nebula0.HostAddr) *HBReqBuilder {
  h.obj.Host = host
  return h
}

func (h *HBReqBuilder) ClusterID(clusterID ClusterID) *HBReqBuilder {
  h.obj.ClusterID = clusterID
  return h
}

func (h *HBReqBuilder) LeaderPartIds(leaderPartIds map[nebula0.GraphSpaceID][]*LeaderInfo) *HBReqBuilder {
  h.obj.LeaderPartIds = leaderPartIds
  return h
}

func (h *HBReqBuilder) GitInfoSha(gitInfoSha []byte) *HBReqBuilder {
  h.obj.GitInfoSha = gitInfoSha
  return h
}

func (h *HBReqBuilder) DiskParts(diskParts map[nebula0.GraphSpaceID]map[string]*PartitionList) *HBReqBuilder {
  h.obj.DiskParts = diskParts
  return h
}

func (h *HBReqBuilder) Dir(dir *nebula0.DirInfo) *HBReqBuilder {
  h.obj.Dir = dir
  return h
}

func (h *HBReqBuilder) Version(version []byte) *HBReqBuilder {
  h.obj.Version = version
  return h
}

func (h *HBReq) SetRole(role HostRole) *HBReq {
  h.Role = role
  return h
}

func (h *HBReq) SetHost(host *nebula0.HostAddr) *HBReq {
  h.Host = host
  return h
}

func (h *HBReq) SetClusterID(clusterID ClusterID) *HBReq {
  h.ClusterID = clusterID
  return h
}

func (h *HBReq) SetLeaderPartIds(leaderPartIds map[nebula0.GraphSpaceID][]*LeaderInfo) *HBReq {
  h.LeaderPartIds = leaderPartIds
  return h
}

func (h *HBReq) SetGitInfoSha(gitInfoSha []byte) *HBReq {
  h.GitInfoSha = gitInfoSha
  return h
}

func (h *HBReq) SetDiskParts(diskParts map[nebula0.GraphSpaceID]map[string]*PartitionList) *HBReq {
  h.DiskParts = diskParts
  return h
}

func (h *HBReq) SetDir(dir *nebula0.DirInfo) *HBReq {
  h.Dir = dir
  return h
}

func (h *HBReq) SetVersion(version []byte) *HBReq {
  h.Version = version
  return h
}

func (p *HBReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := HostRole(v)
    p.Role = temp
  }
  return nil
}

func (p *HBReq)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HBReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := ClusterID(v)
    p.ClusterID = temp
  }
  return nil
}

func (p *HBReq)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID][]*LeaderInfo, size)
  p.LeaderPartIds =  tMap
  for i := 0; i < size; i ++ {
    var _key43 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _key43 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*LeaderInfo, 0, size)
    _val44 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem45 := NewLeaderInfo()
      if err := _elem45.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
      }
      _val44 = append(_val44, _elem45)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderPartIds[_key43] = _val44
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HBReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.GitInfoSha = v
  }
  return nil
}

func (p *HBReq)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID]map[string]*PartitionList, size)
  p.DiskParts =  tMap
  for i := 0; i < size; i ++ {
    var _key46 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _key46 = temp
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string]*PartitionList, size)
    _val47 :=  tMap
    for i := 0; i < size; i ++ {
      var _key48 string
      if v, err := iprot.ReadString(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        _key48 = v
      }
      _val49 := NewPartitionList()
      if err := _val49.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val49), err)
      }
      _val47[_key48] = _val49
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.DiskParts[_key46] = _val47
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HBReq)  ReadField7(iprot thrift.Protocol) error {
  p.Dir = nebula0.NewDirInfo()
  if err := p.Dir.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *HBReq)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.Version = v
  }
  return nil
}

func (p *HBReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  return err
}

func (p *HBReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *HBReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBReq) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetLeaderPartIds() {
    if err := oprot.WriteFieldBegin("leader_partIds", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_partIds: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.LeaderPartIds)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.LeaderPartIds {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_partIds: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("git_info_sha", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:git_info_sha: ", p), err) }
  return err
}

func (p *HBReq) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetDiskParts() {
    if err := oprot.WriteFieldBegin("disk_parts", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:disk_parts: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.DiskParts)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.DiskParts {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := v.Write(oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:disk_parts: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetDir() {
    if err := oprot.WriteFieldBegin("dir", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dir: ", p), err) }
    if err := p.Dir.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dir: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField8(oprot thrift.Protocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err) }
    if err := oprot.WriteBinary(p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err) }
  }
  return err
}

func (p *HBReq) String() string {
  if p == nil {
    return "<nil>"
  }

  roleVal := fmt.Sprintf("%v", p.Role)
  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  clusterIDVal := fmt.Sprintf("%v", p.ClusterID)
  leaderPartIdsVal := fmt.Sprintf("%v", p.LeaderPartIds)
  gitInfoShaVal := fmt.Sprintf("%v", p.GitInfoSha)
  diskPartsVal := fmt.Sprintf("%v", p.DiskParts)
  var dirVal string
  if p.Dir == nil {
    dirVal = "<nil>"
  } else {
    dirVal = fmt.Sprintf("%v", p.Dir)
  }
  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("HBReq({Role:%s Host:%s ClusterID:%s LeaderPartIds:%s GitInfoSha:%s DiskParts:%s Dir:%s Version:%s})", roleVal, hostVal, clusterIDVal, leaderPartIdsVal, gitInfoShaVal, diskPartsVal, dirVal, versionVal)
}

// Attributes:
//  - Dir
//  - Addr
//  - Role
type ServiceInfo struct {
  Dir *nebula0.DirInfo `thrift:"dir,1" db:"dir" json:"dir"`
  Addr *nebula0.HostAddr `thrift:"addr,2" db:"addr" json:"addr"`
  Role HostRole `thrift:"role,3" db:"role" json:"role"`
}

func NewServiceInfo() *ServiceInfo {
  return &ServiceInfo{
    Dir: nebula0.NewDirInfo(),
    Addr: nebula0.NewHostAddr(),
  }
}

var ServiceInfo_Dir_DEFAULT *nebula0.DirInfo
func (p *ServiceInfo) GetDir() *nebula0.DirInfo {
  if !p.IsSetDir() {
    return ServiceInfo_Dir_DEFAULT
  }
return p.Dir
}
var ServiceInfo_Addr_DEFAULT *nebula0.HostAddr
func (p *ServiceInfo) GetAddr() *nebula0.HostAddr {
  if !p.IsSetAddr() {
    return ServiceInfo_Addr_DEFAULT
  }
return p.Addr
}

func (p *ServiceInfo) GetRole() HostRole {
  return p.Role
}
func (p *ServiceInfo) IsSetDir() bool {
  return p != nil && p.Dir != nil
}

func (p *ServiceInfo) IsSetAddr() bool {
  return p != nil && p.Addr != nil
}

type ServiceInfoBuilder struct {
  obj *ServiceInfo
}

func NewServiceInfoBuilder() *ServiceInfoBuilder{
  return &ServiceInfoBuilder{
    obj: NewServiceInfo(),
  }
}

func (p ServiceInfoBuilder) Emit() *ServiceInfo{
  return &ServiceInfo{
    Dir: p.obj.Dir,
    Addr: p.obj.Addr,
    Role: p.obj.Role,
  }
}

func (s *ServiceInfoBuilder) Dir(dir *nebula0.DirInfo) *ServiceInfoBuilder {
  s.obj.Dir = dir
  return s
}

func (s *ServiceInfoBuilder) Addr(addr *nebula0.HostAddr) *ServiceInfoBuilder {
  s.obj.Addr = addr
  return s
}

func (s *ServiceInfoBuilder) Role(role HostRole) *ServiceInfoBuilder {
  s.obj.Role = role
  return s
}

func (s *ServiceInfo) SetDir(dir *nebula0.DirInfo) *ServiceInfo {
  s.Dir = dir
  return s
}

func (s *ServiceInfo) SetAddr(addr *nebula0.HostAddr) *ServiceInfo {
  s.Addr = addr
  return s
}

func (s *ServiceInfo) SetRole(role HostRole) *ServiceInfo {
  s.Role = role
  return s
}

func (p *ServiceInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField1(iprot thrift.Protocol) error {
  p.Dir = nebula0.NewDirInfo()
  if err := p.Dir.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField2(iprot thrift.Protocol) error {
  p.Addr = nebula0.NewHostAddr()
  if err := p.Addr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Addr), err)
  }
  return nil
}

func (p *ServiceInfo)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := HostRole(v)
    p.Role = temp
  }
  return nil
}

func (p *ServiceInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ServiceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dir: ", p), err) }
  if err := p.Dir.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dir: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("addr", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addr: ", p), err) }
  if err := p.Addr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Addr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addr: ", p), err) }
  return err
}

func (p *ServiceInfo) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err) }
  return err
}

func (p *ServiceInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  var dirVal string
  if p.Dir == nil {
    dirVal = "<nil>"
  } else {
    dirVal = fmt.Sprintf("%v", p.Dir)
  }
  var addrVal string
  if p.Addr == nil {
    addrVal = "<nil>"
  } else {
    addrVal = fmt.Sprintf("%v", p.Addr)
  }
  roleVal := fmt.Sprintf("%v", p.Role)
  return fmt.Sprintf("ServiceInfo({Dir:%s Addr:%s Role:%s})", dirVal, addrVal, roleVal)
}

// Attributes:
//  - Host
//  - GitInfoSha
//  - Version
type AgentHBReq struct {
  Host *nebula0.HostAddr `thrift:"host,1" db:"host" json:"host"`
  GitInfoSha []byte `thrift:"git_info_sha,2" db:"git_info_sha" json:"git_info_sha"`
  Version []byte `thrift:"version,3,optional" db:"version" json:"version,omitempty"`
}

func NewAgentHBReq() *AgentHBReq {
  return &AgentHBReq{
    Host: nebula0.NewHostAddr(),
  }
}

var AgentHBReq_Host_DEFAULT *nebula0.HostAddr
func (p *AgentHBReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return AgentHBReq_Host_DEFAULT
  }
return p.Host
}

func (p *AgentHBReq) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var AgentHBReq_Version_DEFAULT []byte

func (p *AgentHBReq) GetVersion() []byte {
  return p.Version
}
func (p *AgentHBReq) IsSetHost() bool {
  return p != nil && p.Host != nil
}

func (p *AgentHBReq) IsSetVersion() bool {
  return p != nil && p.Version != nil
}

type AgentHBReqBuilder struct {
  obj *AgentHBReq
}

func NewAgentHBReqBuilder() *AgentHBReqBuilder{
  return &AgentHBReqBuilder{
    obj: NewAgentHBReq(),
  }
}

func (p AgentHBReqBuilder) Emit() *AgentHBReq{
  return &AgentHBReq{
    Host: p.obj.Host,
    GitInfoSha: p.obj.GitInfoSha,
    Version: p.obj.Version,
  }
}

func (a *AgentHBReqBuilder) Host(host *nebula0.HostAddr) *AgentHBReqBuilder {
  a.obj.Host = host
  return a
}

func (a *AgentHBReqBuilder) GitInfoSha(gitInfoSha []byte) *AgentHBReqBuilder {
  a.obj.GitInfoSha = gitInfoSha
  return a
}

func (a *AgentHBReqBuilder) Version(version []byte) *AgentHBReqBuilder {
  a.obj.Version = version
  return a
}

func (a *AgentHBReq) SetHost(host *nebula0.HostAddr) *AgentHBReq {
  a.Host = host
  return a
}

func (a *AgentHBReq) SetGitInfoSha(gitInfoSha []byte) *AgentHBReq {
  a.GitInfoSha = gitInfoSha
  return a
}

func (a *AgentHBReq) SetVersion(version []byte) *AgentHBReq {
  a.Version = version
  return a
}

func (p *AgentHBReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgentHBReq)  ReadField1(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *AgentHBReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.GitInfoSha = v
  }
  return nil
}

func (p *AgentHBReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Version = v
  }
  return nil
}

func (p *AgentHBReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AgentHBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgentHBReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *AgentHBReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("git_info_sha", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:git_info_sha: ", p), err) }
  return err
}

func (p *AgentHBReq) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
    if err := oprot.WriteBinary(p.Version); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  }
  return err
}

func (p *AgentHBReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  gitInfoShaVal := fmt.Sprintf("%v", p.GitInfoSha)
  versionVal := fmt.Sprintf("%v", p.Version)
  return fmt.Sprintf("AgentHBReq({Host:%s GitInfoSha:%s Version:%s})", hostVal, gitInfoShaVal, versionVal)
}

// Attributes:
//  - Code
//  - Leader
//  - ServiceList
type AgentHBResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ServiceList []*ServiceInfo `thrift:"service_list,3" db:"service_list" json:"service_list"`
}

func NewAgentHBResp() *AgentHBResp {
  return &AgentHBResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *AgentHBResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var AgentHBResp_Leader_DEFAULT *nebula0.HostAddr
func (p *AgentHBResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return AgentHBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *AgentHBResp) GetServiceList() []*ServiceInfo {
  return p.ServiceList
}
func (p *AgentHBResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type AgentHBRespBuilder struct {
  obj *AgentHBResp
}

func NewAgentHBRespBuilder() *AgentHBRespBuilder{
  return &AgentHBRespBuilder{
    obj: NewAgentHBResp(),
  }
}

func (p AgentHBRespBuilder) Emit() *AgentHBResp{
  return &AgentHBResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    ServiceList: p.obj.ServiceList,
  }
}

func (a *AgentHBRespBuilder) Code(code nebula0.ErrorCode) *AgentHBRespBuilder {
  a.obj.Code = code
  return a
}

func (a *AgentHBRespBuilder) Leader(leader *nebula0.HostAddr) *AgentHBRespBuilder {
  a.obj.Leader = leader
  return a
}

func (a *AgentHBRespBuilder) ServiceList(serviceList []*ServiceInfo) *AgentHBRespBuilder {
  a.obj.ServiceList = serviceList
  return a
}

func (a *AgentHBResp) SetCode(code nebula0.ErrorCode) *AgentHBResp {
  a.Code = code
  return a
}

func (a *AgentHBResp) SetLeader(leader *nebula0.HostAddr) *AgentHBResp {
  a.Leader = leader
  return a
}

func (a *AgentHBResp) SetServiceList(serviceList []*ServiceInfo) *AgentHBResp {
  a.ServiceList = serviceList
  return a
}

func (p *AgentHBResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AgentHBResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *AgentHBResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AgentHBResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServiceInfo, 0, size)
  p.ServiceList =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := NewServiceInfo()
    if err := _elem50.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.ServiceList = append(p.ServiceList, _elem50)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AgentHBResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AgentHBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AgentHBResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AgentHBResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AgentHBResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("service_list", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:service_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ServiceList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ServiceList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:service_list: ", p), err) }
  return err
}

func (p *AgentHBResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  serviceListVal := fmt.Sprintf("%v", p.ServiceList)
  return fmt.Sprintf("AgentHBResp({Code:%s Leader:%s ServiceList:%s})", codeVal, leaderVal, serviceListVal)
}

// Attributes:
//  - Name
//  - TypeLength
type IndexFieldDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  TypeLength *int16 `thrift:"type_length,2,optional" db:"type_length" json:"type_length,omitempty"`
}

func NewIndexFieldDef() *IndexFieldDef {
  return &IndexFieldDef{}
}


func (p *IndexFieldDef) GetName() []byte {
  return p.Name
}
var IndexFieldDef_TypeLength_DEFAULT int16
func (p *IndexFieldDef) GetTypeLength() int16 {
  if !p.IsSetTypeLength() {
    return IndexFieldDef_TypeLength_DEFAULT
  }
return *p.TypeLength
}
func (p *IndexFieldDef) IsSetTypeLength() bool {
  return p != nil && p.TypeLength != nil
}

type IndexFieldDefBuilder struct {
  obj *IndexFieldDef
}

func NewIndexFieldDefBuilder() *IndexFieldDefBuilder{
  return &IndexFieldDefBuilder{
    obj: NewIndexFieldDef(),
  }
}

func (p IndexFieldDefBuilder) Emit() *IndexFieldDef{
  return &IndexFieldDef{
    Name: p.obj.Name,
    TypeLength: p.obj.TypeLength,
  }
}

func (i *IndexFieldDefBuilder) Name(name []byte) *IndexFieldDefBuilder {
  i.obj.Name = name
  return i
}

func (i *IndexFieldDefBuilder) TypeLength(typeLength *int16) *IndexFieldDefBuilder {
  i.obj.TypeLength = typeLength
  return i
}

func (i *IndexFieldDef) SetName(name []byte) *IndexFieldDef {
  i.Name = name
  return i
}

func (i *IndexFieldDef) SetTypeLength(typeLength *int16) *IndexFieldDef {
  i.TypeLength = typeLength
  return i
}

func (p *IndexFieldDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *IndexFieldDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *IndexFieldDef)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.TypeLength = &v
  }
  return nil
}

func (p *IndexFieldDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexFieldDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexFieldDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexFieldDef) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin("type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(int16(*p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *IndexFieldDef) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  var typeLengthVal string
  if p.TypeLength == nil {
    typeLengthVal = "<nil>"
  } else {
    typeLengthVal = fmt.Sprintf("%v", *p.TypeLength)
  }
  return fmt.Sprintf("IndexFieldDef({Name:%s TypeLength:%s})", nameVal, typeLengthVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - TagName
//  - Fields
//  - IfNotExists
//  - Comment
//  - IndexParams
type CreateTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  TagName []byte `thrift:"tag_name,3" db:"tag_name" json:"tag_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
  Comment []byte `thrift:"comment,6,optional" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7,optional" db:"index_params" json:"index_params,omitempty"`
}

func NewCreateTagIndexReq() *CreateTagIndexReq {
  return &CreateTagIndexReq{}
}


func (p *CreateTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateTagIndexReq) GetTagName() []byte {
  return p.TagName
}

func (p *CreateTagIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateTagIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
var CreateTagIndexReq_Comment_DEFAULT []byte

func (p *CreateTagIndexReq) GetComment() []byte {
  return p.Comment
}
var CreateTagIndexReq_IndexParams_DEFAULT *IndexParams
func (p *CreateTagIndexReq) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return CreateTagIndexReq_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *CreateTagIndexReq) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

func (p *CreateTagIndexReq) IsSetIndexParams() bool {
  return p != nil && p.IndexParams != nil
}

type CreateTagIndexReqBuilder struct {
  obj *CreateTagIndexReq
}

func NewCreateTagIndexReqBuilder() *CreateTagIndexReqBuilder{
  return &CreateTagIndexReqBuilder{
    obj: NewCreateTagIndexReq(),
  }
}

func (p CreateTagIndexReqBuilder) Emit() *CreateTagIndexReq{
  return &CreateTagIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
    TagName: p.obj.TagName,
    Fields: p.obj.Fields,
    IfNotExists: p.obj.IfNotExists,
    Comment: p.obj.Comment,
    IndexParams: p.obj.IndexParams,
  }
}

func (c *CreateTagIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CreateTagIndexReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CreateTagIndexReqBuilder) IndexName(indexName []byte) *CreateTagIndexReqBuilder {
  c.obj.IndexName = indexName
  return c
}

func (c *CreateTagIndexReqBuilder) TagName(tagName []byte) *CreateTagIndexReqBuilder {
  c.obj.TagName = tagName
  return c
}

func (c *CreateTagIndexReqBuilder) Fields(fields []*IndexFieldDef) *CreateTagIndexReqBuilder {
  c.obj.Fields = fields
  return c
}

func (c *CreateTagIndexReqBuilder) IfNotExists(ifNotExists bool) *CreateTagIndexReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateTagIndexReqBuilder) Comment(comment []byte) *CreateTagIndexReqBuilder {
  c.obj.Comment = comment
  return c
}

func (c *CreateTagIndexReqBuilder) IndexParams(indexParams *IndexParams) *CreateTagIndexReqBuilder {
  c.obj.IndexParams = indexParams
  return c
}

func (c *CreateTagIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CreateTagIndexReq {
  c.SpaceID = spaceID
  return c
}

func (c *CreateTagIndexReq) SetIndexName(indexName []byte) *CreateTagIndexReq {
  c.IndexName = indexName
  return c
}

func (c *CreateTagIndexReq) SetTagName(tagName []byte) *CreateTagIndexReq {
  c.TagName = tagName
  return c
}

func (c *CreateTagIndexReq) SetFields(fields []*IndexFieldDef) *CreateTagIndexReq {
  c.Fields = fields
  return c
}

func (c *CreateTagIndexReq) SetIfNotExists(ifNotExists bool) *CreateTagIndexReq {
  c.IfNotExists = ifNotExists
  return c
}

func (c *CreateTagIndexReq) SetComment(comment []byte) *CreateTagIndexReq {
  c.Comment = comment
  return c
}

func (c *CreateTagIndexReq) SetIndexParams(indexParams *IndexParams) *CreateTagIndexReq {
  c.IndexParams = indexParams
  return c
}

func (p *CreateTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.TagName = v
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem51 := NewIndexFieldDef()
    if err := _elem51.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem51), err)
    }
    p.Fields = append(p.Fields, _elem51)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField7(iprot thrift.Protocol) error {
  p.IndexParams = NewIndexParams()
  if err := p.IndexParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *CreateTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *CreateTagIndexReq) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin("index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *CreateTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  tagNameVal := fmt.Sprintf("%v", p.TagName)
  fieldsVal := fmt.Sprintf("%v", p.Fields)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  commentVal := fmt.Sprintf("%v", p.Comment)
  var indexParamsVal string
  if p.IndexParams == nil {
    indexParamsVal = "<nil>"
  } else {
    indexParamsVal = fmt.Sprintf("%v", p.IndexParams)
  }
  return fmt.Sprintf("CreateTagIndexReq({SpaceID:%s IndexName:%s TagName:%s Fields:%s IfNotExists:%s Comment:%s IndexParams:%s})", spaceIDVal, indexNameVal, tagNameVal, fieldsVal, ifNotExistsVal, commentVal, indexParamsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagIndexReq() *DropTagIndexReq {
  return &DropTagIndexReq{}
}


func (p *DropTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropTagIndexReq) GetIfExists() bool {
  return p.IfExists
}
type DropTagIndexReqBuilder struct {
  obj *DropTagIndexReq
}

func NewDropTagIndexReqBuilder() *DropTagIndexReqBuilder{
  return &DropTagIndexReqBuilder{
    obj: NewDropTagIndexReq(),
  }
}

func (p DropTagIndexReqBuilder) Emit() *DropTagIndexReq{
  return &DropTagIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropTagIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DropTagIndexReqBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DropTagIndexReqBuilder) IndexName(indexName []byte) *DropTagIndexReqBuilder {
  d.obj.IndexName = indexName
  return d
}

func (d *DropTagIndexReqBuilder) IfExists(ifExists bool) *DropTagIndexReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropTagIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *DropTagIndexReq {
  d.SpaceID = spaceID
  return d
}

func (d *DropTagIndexReq) SetIndexName(indexName []byte) *DropTagIndexReq {
  d.IndexName = indexName
  return d
}

func (d *DropTagIndexReq) SetIfExists(ifExists bool) *DropTagIndexReq {
  d.IfExists = ifExists
  return d
}

func (p *DropTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DropTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *DropTagIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropTagIndexReq({SpaceID:%s IndexName:%s IfExists:%s})", spaceIDVal, indexNameVal, ifExistsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
type GetTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetTagIndexReq() *GetTagIndexReq {
  return &GetTagIndexReq{}
}


func (p *GetTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}
type GetTagIndexReqBuilder struct {
  obj *GetTagIndexReq
}

func NewGetTagIndexReqBuilder() *GetTagIndexReqBuilder{
  return &GetTagIndexReqBuilder{
    obj: NewGetTagIndexReq(),
  }
}

func (p GetTagIndexReqBuilder) Emit() *GetTagIndexReq{
  return &GetTagIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
  }
}

func (g *GetTagIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetTagIndexReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetTagIndexReqBuilder) IndexName(indexName []byte) *GetTagIndexReqBuilder {
  g.obj.IndexName = indexName
  return g
}

func (g *GetTagIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetTagIndexReq {
  g.SpaceID = spaceID
  return g
}

func (g *GetTagIndexReq) SetIndexName(indexName []byte) *GetTagIndexReq {
  g.IndexName = indexName
  return g
}

func (p *GetTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *GetTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  return fmt.Sprintf("GetTagIndexReq({SpaceID:%s IndexName:%s})", spaceIDVal, indexNameVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetTagIndexResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetTagIndexResp() *GetTagIndexResp {
  return &GetTagIndexResp{
    Leader: nebula0.NewHostAddr(),
    Item: NewIndexItem(),
  }
}


func (p *GetTagIndexResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetTagIndexResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetTagIndexResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetTagIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagIndexResp_Item_DEFAULT *IndexItem
func (p *GetTagIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetTagIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetTagIndexResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetTagIndexResp) IsSetItem() bool {
  return p != nil && p.Item != nil
}

type GetTagIndexRespBuilder struct {
  obj *GetTagIndexResp
}

func NewGetTagIndexRespBuilder() *GetTagIndexRespBuilder{
  return &GetTagIndexRespBuilder{
    obj: NewGetTagIndexResp(),
  }
}

func (p GetTagIndexRespBuilder) Emit() *GetTagIndexResp{
  return &GetTagIndexResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Item: p.obj.Item,
  }
}

func (g *GetTagIndexRespBuilder) Code(code nebula0.ErrorCode) *GetTagIndexRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetTagIndexRespBuilder) Leader(leader *nebula0.HostAddr) *GetTagIndexRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetTagIndexRespBuilder) Item(item *IndexItem) *GetTagIndexRespBuilder {
  g.obj.Item = item
  return g
}

func (g *GetTagIndexResp) SetCode(code nebula0.ErrorCode) *GetTagIndexResp {
  g.Code = code
  return g
}

func (g *GetTagIndexResp) SetLeader(leader *nebula0.HostAddr) *GetTagIndexResp {
  g.Leader = leader
  return g
}

func (g *GetTagIndexResp) SetItem(item *IndexItem) *GetTagIndexResp {
  g.Item = item
  return g
}

func (p *GetTagIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewIndexItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetTagIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetTagIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var itemVal string
  if p.Item == nil {
    itemVal = "<nil>"
  } else {
    itemVal = fmt.Sprintf("%v", p.Item)
  }
  return fmt.Sprintf("GetTagIndexResp({Code:%s Leader:%s Item:%s})", codeVal, leaderVal, itemVal)
}

// Attributes:
//  - SpaceID
type ListTagIndexesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagIndexesReq() *ListTagIndexesReq {
  return &ListTagIndexesReq{}
}


func (p *ListTagIndexesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListTagIndexesReqBuilder struct {
  obj *ListTagIndexesReq
}

func NewListTagIndexesReqBuilder() *ListTagIndexesReqBuilder{
  return &ListTagIndexesReqBuilder{
    obj: NewListTagIndexesReq(),
  }
}

func (p ListTagIndexesReqBuilder) Emit() *ListTagIndexesReq{
  return &ListTagIndexesReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListTagIndexesReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListTagIndexesReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListTagIndexesReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListTagIndexesReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListTagIndexesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListTagIndexesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListTagIndexesReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListTagIndexesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListTagIndexesResp() *ListTagIndexesResp {
  return &ListTagIndexesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListTagIndexesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListTagIndexesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListTagIndexesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListTagIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListTagIndexesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListTagIndexesRespBuilder struct {
  obj *ListTagIndexesResp
}

func NewListTagIndexesRespBuilder() *ListTagIndexesRespBuilder{
  return &ListTagIndexesRespBuilder{
    obj: NewListTagIndexesResp(),
  }
}

func (p ListTagIndexesRespBuilder) Emit() *ListTagIndexesResp{
  return &ListTagIndexesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Items: p.obj.Items,
  }
}

func (l *ListTagIndexesRespBuilder) Code(code nebula0.ErrorCode) *ListTagIndexesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListTagIndexesRespBuilder) Leader(leader *nebula0.HostAddr) *ListTagIndexesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListTagIndexesRespBuilder) Items(items []*IndexItem) *ListTagIndexesRespBuilder {
  l.obj.Items = items
  return l
}

func (l *ListTagIndexesResp) SetCode(code nebula0.ErrorCode) *ListTagIndexesResp {
  l.Code = code
  return l
}

func (l *ListTagIndexesResp) SetLeader(leader *nebula0.HostAddr) *ListTagIndexesResp {
  l.Leader = leader
  return l
}

func (l *ListTagIndexesResp) SetItems(items []*IndexItem) *ListTagIndexesResp {
  l.Items = items
  return l
}

func (p *ListTagIndexesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem52 := NewIndexItem()
    if err := _elem52.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
    }
    p.Items = append(p.Items, _elem52)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagIndexesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  itemsVal := fmt.Sprintf("%v", p.Items)
  return fmt.Sprintf("ListTagIndexesResp({Code:%s Leader:%s Items:%s})", codeVal, leaderVal, itemsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - EdgeName
//  - Fields
//  - IfNotExists
//  - Comment
//  - IndexParams
type CreateEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  EdgeName []byte `thrift:"edge_name,3" db:"edge_name" json:"edge_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
  Comment []byte `thrift:"comment,6,optional" db:"comment" json:"comment,omitempty"`
  IndexParams *IndexParams `thrift:"index_params,7,optional" db:"index_params" json:"index_params,omitempty"`
}

func NewCreateEdgeIndexReq() *CreateEdgeIndexReq {
  return &CreateEdgeIndexReq{}
}


func (p *CreateEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateEdgeIndexReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *CreateEdgeIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateEdgeIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
var CreateEdgeIndexReq_Comment_DEFAULT []byte

func (p *CreateEdgeIndexReq) GetComment() []byte {
  return p.Comment
}
var CreateEdgeIndexReq_IndexParams_DEFAULT *IndexParams
func (p *CreateEdgeIndexReq) GetIndexParams() *IndexParams {
  if !p.IsSetIndexParams() {
    return CreateEdgeIndexReq_IndexParams_DEFAULT
  }
return p.IndexParams
}
func (p *CreateEdgeIndexReq) IsSetComment() bool {
  return p != nil && p.Comment != nil
}

func (p *CreateEdgeIndexReq) IsSetIndexParams() bool {
  return p != nil && p.IndexParams != nil
}

type CreateEdgeIndexReqBuilder struct {
  obj *CreateEdgeIndexReq
}

func NewCreateEdgeIndexReqBuilder() *CreateEdgeIndexReqBuilder{
  return &CreateEdgeIndexReqBuilder{
    obj: NewCreateEdgeIndexReq(),
  }
}

func (p CreateEdgeIndexReqBuilder) Emit() *CreateEdgeIndexReq{
  return &CreateEdgeIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
    EdgeName: p.obj.EdgeName,
    Fields: p.obj.Fields,
    IfNotExists: p.obj.IfNotExists,
    Comment: p.obj.Comment,
    IndexParams: p.obj.IndexParams,
  }
}

func (c *CreateEdgeIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *CreateEdgeIndexReqBuilder {
  c.obj.SpaceID = spaceID
  return c
}

func (c *CreateEdgeIndexReqBuilder) IndexName(indexName []byte) *CreateEdgeIndexReqBuilder {
  c.obj.IndexName = indexName
  return c
}

func (c *CreateEdgeIndexReqBuilder) EdgeName(edgeName []byte) *CreateEdgeIndexReqBuilder {
  c.obj.EdgeName = edgeName
  return c
}

func (c *CreateEdgeIndexReqBuilder) Fields(fields []*IndexFieldDef) *CreateEdgeIndexReqBuilder {
  c.obj.Fields = fields
  return c
}

func (c *CreateEdgeIndexReqBuilder) IfNotExists(ifNotExists bool) *CreateEdgeIndexReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateEdgeIndexReqBuilder) Comment(comment []byte) *CreateEdgeIndexReqBuilder {
  c.obj.Comment = comment
  return c
}

func (c *CreateEdgeIndexReqBuilder) IndexParams(indexParams *IndexParams) *CreateEdgeIndexReqBuilder {
  c.obj.IndexParams = indexParams
  return c
}

func (c *CreateEdgeIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *CreateEdgeIndexReq {
  c.SpaceID = spaceID
  return c
}

func (c *CreateEdgeIndexReq) SetIndexName(indexName []byte) *CreateEdgeIndexReq {
  c.IndexName = indexName
  return c
}

func (c *CreateEdgeIndexReq) SetEdgeName(edgeName []byte) *CreateEdgeIndexReq {
  c.EdgeName = edgeName
  return c
}

func (c *CreateEdgeIndexReq) SetFields(fields []*IndexFieldDef) *CreateEdgeIndexReq {
  c.Fields = fields
  return c
}

func (c *CreateEdgeIndexReq) SetIfNotExists(ifNotExists bool) *CreateEdgeIndexReq {
  c.IfNotExists = ifNotExists
  return c
}

func (c *CreateEdgeIndexReq) SetComment(comment []byte) *CreateEdgeIndexReq {
  c.Comment = comment
  return c
}

func (c *CreateEdgeIndexReq) SetIndexParams(indexParams *IndexParams) *CreateEdgeIndexReq {
  c.IndexParams = indexParams
  return c
}

func (p *CreateEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.EdgeName = v
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := NewIndexFieldDef()
    if err := _elem53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.Fields = append(p.Fields, _elem53)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.Comment = v
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField7(iprot thrift.Protocol) error {
  p.IndexParams = NewIndexParams()
  if err := p.IndexParams.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexParams), err)
  }
  return nil
}

func (p *CreateEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:comment: ", p), err) }
    if err := oprot.WriteBinary(p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:comment: ", p), err) }
  }
  return err
}

func (p *CreateEdgeIndexReq) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetIndexParams() {
    if err := oprot.WriteFieldBegin("index_params", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:index_params: ", p), err) }
    if err := p.IndexParams.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexParams), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:index_params: ", p), err) }
  }
  return err
}

func (p *CreateEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  edgeNameVal := fmt.Sprintf("%v", p.EdgeName)
  fieldsVal := fmt.Sprintf("%v", p.Fields)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  commentVal := fmt.Sprintf("%v", p.Comment)
  var indexParamsVal string
  if p.IndexParams == nil {
    indexParamsVal = "<nil>"
  } else {
    indexParamsVal = fmt.Sprintf("%v", p.IndexParams)
  }
  return fmt.Sprintf("CreateEdgeIndexReq({SpaceID:%s IndexName:%s EdgeName:%s Fields:%s IfNotExists:%s Comment:%s IndexParams:%s})", spaceIDVal, indexNameVal, edgeNameVal, fieldsVal, ifNotExistsVal, commentVal, indexParamsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeIndexReq() *DropEdgeIndexReq {
  return &DropEdgeIndexReq{}
}


func (p *DropEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropEdgeIndexReq) GetIfExists() bool {
  return p.IfExists
}
type DropEdgeIndexReqBuilder struct {
  obj *DropEdgeIndexReq
}

func NewDropEdgeIndexReqBuilder() *DropEdgeIndexReqBuilder{
  return &DropEdgeIndexReqBuilder{
    obj: NewDropEdgeIndexReq(),
  }
}

func (p DropEdgeIndexReqBuilder) Emit() *DropEdgeIndexReq{
  return &DropEdgeIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropEdgeIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DropEdgeIndexReqBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DropEdgeIndexReqBuilder) IndexName(indexName []byte) *DropEdgeIndexReqBuilder {
  d.obj.IndexName = indexName
  return d
}

func (d *DropEdgeIndexReqBuilder) IfExists(ifExists bool) *DropEdgeIndexReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropEdgeIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *DropEdgeIndexReq {
  d.SpaceID = spaceID
  return d
}

func (d *DropEdgeIndexReq) SetIndexName(indexName []byte) *DropEdgeIndexReq {
  d.IndexName = indexName
  return d
}

func (d *DropEdgeIndexReq) SetIfExists(ifExists bool) *DropEdgeIndexReq {
  d.IfExists = ifExists
  return d
}

func (p *DropEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DropEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *DropEdgeIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropEdgeIndexReq({SpaceID:%s IndexName:%s IfExists:%s})", spaceIDVal, indexNameVal, ifExistsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
type GetEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetEdgeIndexReq() *GetEdgeIndexReq {
  return &GetEdgeIndexReq{}
}


func (p *GetEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}
type GetEdgeIndexReqBuilder struct {
  obj *GetEdgeIndexReq
}

func NewGetEdgeIndexReqBuilder() *GetEdgeIndexReqBuilder{
  return &GetEdgeIndexReqBuilder{
    obj: NewGetEdgeIndexReq(),
  }
}

func (p GetEdgeIndexReqBuilder) Emit() *GetEdgeIndexReq{
  return &GetEdgeIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
  }
}

func (g *GetEdgeIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetEdgeIndexReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetEdgeIndexReqBuilder) IndexName(indexName []byte) *GetEdgeIndexReqBuilder {
  g.obj.IndexName = indexName
  return g
}

func (g *GetEdgeIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetEdgeIndexReq {
  g.SpaceID = spaceID
  return g
}

func (g *GetEdgeIndexReq) SetIndexName(indexName []byte) *GetEdgeIndexReq {
  g.IndexName = indexName
  return g
}

func (p *GetEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *GetEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  return fmt.Sprintf("GetEdgeIndexReq({SpaceID:%s IndexName:%s})", spaceIDVal, indexNameVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetEdgeIndexResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetEdgeIndexResp() *GetEdgeIndexResp {
  return &GetEdgeIndexResp{
    Leader: nebula0.NewHostAddr(),
    Item: NewIndexItem(),
  }
}


func (p *GetEdgeIndexResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetEdgeIndexResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetEdgeIndexResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeIndexResp_Item_DEFAULT *IndexItem
func (p *GetEdgeIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetEdgeIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetEdgeIndexResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetEdgeIndexResp) IsSetItem() bool {
  return p != nil && p.Item != nil
}

type GetEdgeIndexRespBuilder struct {
  obj *GetEdgeIndexResp
}

func NewGetEdgeIndexRespBuilder() *GetEdgeIndexRespBuilder{
  return &GetEdgeIndexRespBuilder{
    obj: NewGetEdgeIndexResp(),
  }
}

func (p GetEdgeIndexRespBuilder) Emit() *GetEdgeIndexResp{
  return &GetEdgeIndexResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Item: p.obj.Item,
  }
}

func (g *GetEdgeIndexRespBuilder) Code(code nebula0.ErrorCode) *GetEdgeIndexRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetEdgeIndexRespBuilder) Leader(leader *nebula0.HostAddr) *GetEdgeIndexRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetEdgeIndexRespBuilder) Item(item *IndexItem) *GetEdgeIndexRespBuilder {
  g.obj.Item = item
  return g
}

func (g *GetEdgeIndexResp) SetCode(code nebula0.ErrorCode) *GetEdgeIndexResp {
  g.Code = code
  return g
}

func (g *GetEdgeIndexResp) SetLeader(leader *nebula0.HostAddr) *GetEdgeIndexResp {
  g.Leader = leader
  return g
}

func (g *GetEdgeIndexResp) SetItem(item *IndexItem) *GetEdgeIndexResp {
  g.Item = item
  return g
}

func (p *GetEdgeIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewIndexItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetEdgeIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var itemVal string
  if p.Item == nil {
    itemVal = "<nil>"
  } else {
    itemVal = fmt.Sprintf("%v", p.Item)
  }
  return fmt.Sprintf("GetEdgeIndexResp({Code:%s Leader:%s Item:%s})", codeVal, leaderVal, itemVal)
}

// Attributes:
//  - SpaceID
type ListEdgeIndexesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgeIndexesReq() *ListEdgeIndexesReq {
  return &ListEdgeIndexesReq{}
}


func (p *ListEdgeIndexesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListEdgeIndexesReqBuilder struct {
  obj *ListEdgeIndexesReq
}

func NewListEdgeIndexesReqBuilder() *ListEdgeIndexesReqBuilder{
  return &ListEdgeIndexesReqBuilder{
    obj: NewListEdgeIndexesReq(),
  }
}

func (p ListEdgeIndexesReqBuilder) Emit() *ListEdgeIndexesReq{
  return &ListEdgeIndexesReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListEdgeIndexesReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListEdgeIndexesReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListEdgeIndexesReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListEdgeIndexesReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListEdgeIndexesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListEdgeIndexesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgeIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgeIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListEdgeIndexesReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListEdgeIndexesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListEdgeIndexesResp() *ListEdgeIndexesResp {
  return &ListEdgeIndexesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListEdgeIndexesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListEdgeIndexesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListEdgeIndexesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgeIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgeIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListEdgeIndexesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListEdgeIndexesRespBuilder struct {
  obj *ListEdgeIndexesResp
}

func NewListEdgeIndexesRespBuilder() *ListEdgeIndexesRespBuilder{
  return &ListEdgeIndexesRespBuilder{
    obj: NewListEdgeIndexesResp(),
  }
}

func (p ListEdgeIndexesRespBuilder) Emit() *ListEdgeIndexesResp{
  return &ListEdgeIndexesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Items: p.obj.Items,
  }
}

func (l *ListEdgeIndexesRespBuilder) Code(code nebula0.ErrorCode) *ListEdgeIndexesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListEdgeIndexesRespBuilder) Leader(leader *nebula0.HostAddr) *ListEdgeIndexesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListEdgeIndexesRespBuilder) Items(items []*IndexItem) *ListEdgeIndexesRespBuilder {
  l.obj.Items = items
  return l
}

func (l *ListEdgeIndexesResp) SetCode(code nebula0.ErrorCode) *ListEdgeIndexesResp {
  l.Code = code
  return l
}

func (l *ListEdgeIndexesResp) SetLeader(leader *nebula0.HostAddr) *ListEdgeIndexesResp {
  l.Leader = leader
  return l
}

func (l *ListEdgeIndexesResp) SetItems(items []*IndexItem) *ListEdgeIndexesResp {
  l.Items = items
  return l
}

func (p *ListEdgeIndexesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem54 := NewIndexItem()
    if err := _elem54.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
    }
    p.Items = append(p.Items, _elem54)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgeIndexesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgeIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  itemsVal := fmt.Sprintf("%v", p.Items)
  return fmt.Sprintf("ListEdgeIndexesResp({Code:%s Leader:%s Items:%s})", codeVal, leaderVal, itemsVal)
}

// Attributes:
//  - SpaceID
//  - IndexName
type RebuildIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewRebuildIndexReq() *RebuildIndexReq {
  return &RebuildIndexReq{}
}


func (p *RebuildIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexReq) GetIndexName() []byte {
  return p.IndexName
}
type RebuildIndexReqBuilder struct {
  obj *RebuildIndexReq
}

func NewRebuildIndexReqBuilder() *RebuildIndexReqBuilder{
  return &RebuildIndexReqBuilder{
    obj: NewRebuildIndexReq(),
  }
}

func (p RebuildIndexReqBuilder) Emit() *RebuildIndexReq{
  return &RebuildIndexReq{
    SpaceID: p.obj.SpaceID,
    IndexName: p.obj.IndexName,
  }
}

func (r *RebuildIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *RebuildIndexReqBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *RebuildIndexReqBuilder) IndexName(indexName []byte) *RebuildIndexReqBuilder {
  r.obj.IndexName = indexName
  return r
}

func (r *RebuildIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *RebuildIndexReq {
  r.SpaceID = spaceID
  return r
}

func (r *RebuildIndexReq) SetIndexName(indexName []byte) *RebuildIndexReq {
  r.IndexName = indexName
  return r
}

func (p *RebuildIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *RebuildIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IndexName = v
  }
  return nil
}

func (p *RebuildIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RebuildIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *RebuildIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  indexNameVal := fmt.Sprintf("%v", p.IndexName)
  return fmt.Sprintf("RebuildIndexReq({SpaceID:%s IndexName:%s})", spaceIDVal, indexNameVal)
}

// Attributes:
//  - Account
//  - EncodedPwd
//  - IfNotExists
type CreateUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
  IfNotExists bool `thrift:"if_not_exists,3" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateUserReq() *CreateUserReq {
  return &CreateUserReq{}
}


func (p *CreateUserReq) GetAccount() []byte {
  return p.Account
}

func (p *CreateUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}

func (p *CreateUserReq) GetIfNotExists() bool {
  return p.IfNotExists
}
type CreateUserReqBuilder struct {
  obj *CreateUserReq
}

func NewCreateUserReqBuilder() *CreateUserReqBuilder{
  return &CreateUserReqBuilder{
    obj: NewCreateUserReq(),
  }
}

func (p CreateUserReqBuilder) Emit() *CreateUserReq{
  return &CreateUserReq{
    Account: p.obj.Account,
    EncodedPwd: p.obj.EncodedPwd,
    IfNotExists: p.obj.IfNotExists,
  }
}

func (c *CreateUserReqBuilder) Account(account []byte) *CreateUserReqBuilder {
  c.obj.Account = account
  return c
}

func (c *CreateUserReqBuilder) EncodedPwd(encodedPwd []byte) *CreateUserReqBuilder {
  c.obj.EncodedPwd = encodedPwd
  return c
}

func (c *CreateUserReqBuilder) IfNotExists(ifNotExists bool) *CreateUserReqBuilder {
  c.obj.IfNotExists = ifNotExists
  return c
}

func (c *CreateUserReq) SetAccount(account []byte) *CreateUserReq {
  c.Account = account
  return c
}

func (c *CreateUserReq) SetEncodedPwd(encodedPwd []byte) *CreateUserReq {
  c.EncodedPwd = encodedPwd
  return c
}

func (c *CreateUserReq) SetIfNotExists(ifNotExists bool) *CreateUserReq {
  c.IfNotExists = ifNotExists
  return c
}

func (p *CreateUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *CreateUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EncodedPwd = v
  }
  return nil
}

func (p *CreateUserReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IfNotExists = v
  }
  return nil
}

func (p *CreateUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_not_exists: ", p), err) }
  return err
}

func (p *CreateUserReq) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  encodedPwdVal := fmt.Sprintf("%v", p.EncodedPwd)
  ifNotExistsVal := fmt.Sprintf("%v", p.IfNotExists)
  return fmt.Sprintf("CreateUserReq({Account:%s EncodedPwd:%s IfNotExists:%s})", accountVal, encodedPwdVal, ifNotExistsVal)
}

// Attributes:
//  - Account
//  - IfExists
type DropUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropUserReq() *DropUserReq {
  return &DropUserReq{}
}


func (p *DropUserReq) GetAccount() []byte {
  return p.Account
}

func (p *DropUserReq) GetIfExists() bool {
  return p.IfExists
}
type DropUserReqBuilder struct {
  obj *DropUserReq
}

func NewDropUserReqBuilder() *DropUserReqBuilder{
  return &DropUserReqBuilder{
    obj: NewDropUserReq(),
  }
}

func (p DropUserReqBuilder) Emit() *DropUserReq{
  return &DropUserReq{
    Account: p.obj.Account,
    IfExists: p.obj.IfExists,
  }
}

func (d *DropUserReqBuilder) Account(account []byte) *DropUserReqBuilder {
  d.obj.Account = account
  return d
}

func (d *DropUserReqBuilder) IfExists(ifExists bool) *DropUserReqBuilder {
  d.obj.IfExists = ifExists
  return d
}

func (d *DropUserReq) SetAccount(account []byte) *DropUserReq {
  d.Account = account
  return d
}

func (d *DropUserReq) SetIfExists(ifExists bool) *DropUserReq {
  d.IfExists = ifExists
  return d
}

func (p *DropUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *DropUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.IfExists = v
  }
  return nil
}

func (p *DropUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *DropUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropUserReq) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  ifExistsVal := fmt.Sprintf("%v", p.IfExists)
  return fmt.Sprintf("DropUserReq({Account:%s IfExists:%s})", accountVal, ifExistsVal)
}

// Attributes:
//  - Account
//  - EncodedPwd
type AlterUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
}

func NewAlterUserReq() *AlterUserReq {
  return &AlterUserReq{}
}


func (p *AlterUserReq) GetAccount() []byte {
  return p.Account
}

func (p *AlterUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}
type AlterUserReqBuilder struct {
  obj *AlterUserReq
}

func NewAlterUserReqBuilder() *AlterUserReqBuilder{
  return &AlterUserReqBuilder{
    obj: NewAlterUserReq(),
  }
}

func (p AlterUserReqBuilder) Emit() *AlterUserReq{
  return &AlterUserReq{
    Account: p.obj.Account,
    EncodedPwd: p.obj.EncodedPwd,
  }
}

func (a *AlterUserReqBuilder) Account(account []byte) *AlterUserReqBuilder {
  a.obj.Account = account
  return a
}

func (a *AlterUserReqBuilder) EncodedPwd(encodedPwd []byte) *AlterUserReqBuilder {
  a.obj.EncodedPwd = encodedPwd
  return a
}

func (a *AlterUserReq) SetAccount(account []byte) *AlterUserReq {
  a.Account = account
  return a
}

func (a *AlterUserReq) SetEncodedPwd(encodedPwd []byte) *AlterUserReq {
  a.EncodedPwd = encodedPwd
  return a
}

func (p *AlterUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *AlterUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.EncodedPwd = v
  }
  return nil
}

func (p *AlterUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *AlterUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *AlterUserReq) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  encodedPwdVal := fmt.Sprintf("%v", p.EncodedPwd)
  return fmt.Sprintf("AlterUserReq({Account:%s EncodedPwd:%s})", accountVal, encodedPwdVal)
}

// Attributes:
//  - RoleItem
type GrantRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewGrantRoleReq() *GrantRoleReq {
  return &GrantRoleReq{
    RoleItem: NewRoleItem(),
  }
}

var GrantRoleReq_RoleItem_DEFAULT *RoleItem
func (p *GrantRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return GrantRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *GrantRoleReq) IsSetRoleItem() bool {
  return p != nil && p.RoleItem != nil
}

type GrantRoleReqBuilder struct {
  obj *GrantRoleReq
}

func NewGrantRoleReqBuilder() *GrantRoleReqBuilder{
  return &GrantRoleReqBuilder{
    obj: NewGrantRoleReq(),
  }
}

func (p GrantRoleReqBuilder) Emit() *GrantRoleReq{
  return &GrantRoleReq{
    RoleItem: p.obj.RoleItem,
  }
}

func (g *GrantRoleReqBuilder) RoleItem(roleItem *RoleItem) *GrantRoleReqBuilder {
  g.obj.RoleItem = roleItem
  return g
}

func (g *GrantRoleReq) SetRoleItem(roleItem *RoleItem) *GrantRoleReq {
  g.RoleItem = roleItem
  return g
}

func (p *GrantRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *GrantRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GrantRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *GrantRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var roleItemVal string
  if p.RoleItem == nil {
    roleItemVal = "<nil>"
  } else {
    roleItemVal = fmt.Sprintf("%v", p.RoleItem)
  }
  return fmt.Sprintf("GrantRoleReq({RoleItem:%s})", roleItemVal)
}

// Attributes:
//  - RoleItem
type RevokeRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewRevokeRoleReq() *RevokeRoleReq {
  return &RevokeRoleReq{
    RoleItem: NewRoleItem(),
  }
}

var RevokeRoleReq_RoleItem_DEFAULT *RoleItem
func (p *RevokeRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return RevokeRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *RevokeRoleReq) IsSetRoleItem() bool {
  return p != nil && p.RoleItem != nil
}

type RevokeRoleReqBuilder struct {
  obj *RevokeRoleReq
}

func NewRevokeRoleReqBuilder() *RevokeRoleReqBuilder{
  return &RevokeRoleReqBuilder{
    obj: NewRevokeRoleReq(),
  }
}

func (p RevokeRoleReqBuilder) Emit() *RevokeRoleReq{
  return &RevokeRoleReq{
    RoleItem: p.obj.RoleItem,
  }
}

func (r *RevokeRoleReqBuilder) RoleItem(roleItem *RoleItem) *RevokeRoleReqBuilder {
  r.obj.RoleItem = roleItem
  return r
}

func (r *RevokeRoleReq) SetRoleItem(roleItem *RoleItem) *RevokeRoleReq {
  r.RoleItem = roleItem
  return r
}

func (p *RevokeRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RevokeRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *RevokeRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RevokeRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RevokeRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *RevokeRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var roleItemVal string
  if p.RoleItem == nil {
    roleItemVal = "<nil>"
  } else {
    roleItemVal = fmt.Sprintf("%v", p.RoleItem)
  }
  return fmt.Sprintf("RevokeRoleReq({RoleItem:%s})", roleItemVal)
}

type ListUsersReq struct {
}

func NewListUsersReq() *ListUsersReq {
  return &ListUsersReq{}
}

type ListUsersReqBuilder struct {
  obj *ListUsersReq
}

func NewListUsersReqBuilder() *ListUsersReqBuilder{
  return &ListUsersReqBuilder{
    obj: NewListUsersReq(),
  }
}

func (p ListUsersReqBuilder) Emit() *ListUsersReq{
  return &ListUsersReq{
  }
}

func (p *ListUsersReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListUsersReq({})")
}

// Attributes:
//  - Code
//  - Leader
//  - Users
type ListUsersResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Users map[string][]byte `thrift:"users,3" db:"users" json:"users"`
}

func NewListUsersResp() *ListUsersResp {
  return &ListUsersResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListUsersResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListUsersResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListUsersResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListUsersResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListUsersResp) GetUsers() map[string][]byte {
  return p.Users
}
func (p *ListUsersResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListUsersRespBuilder struct {
  obj *ListUsersResp
}

func NewListUsersRespBuilder() *ListUsersRespBuilder{
  return &ListUsersRespBuilder{
    obj: NewListUsersResp(),
  }
}

func (p ListUsersRespBuilder) Emit() *ListUsersResp{
  return &ListUsersResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Users: p.obj.Users,
  }
}

func (l *ListUsersRespBuilder) Code(code nebula0.ErrorCode) *ListUsersRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListUsersRespBuilder) Leader(leader *nebula0.HostAddr) *ListUsersRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListUsersRespBuilder) Users(users map[string][]byte) *ListUsersRespBuilder {
  l.obj.Users = users
  return l
}

func (l *ListUsersResp) SetCode(code nebula0.ErrorCode) *ListUsersResp {
  l.Code = code
  return l
}

func (l *ListUsersResp) SetLeader(leader *nebula0.HostAddr) *ListUsersResp {
  l.Leader = leader
  return l
}

func (l *ListUsersResp) SetUsers(users map[string][]byte) *ListUsersResp {
  l.Users = users
  return l
}

func (p *ListUsersResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListUsersResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Users =  tMap
  for i := 0; i < size; i ++ {
    var _key55 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key55 = v
    }
    var _val56 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val56 = v
    }
    p.Users[_key55] = _val56
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListUsersResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:users: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Users)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Users {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:users: ", p), err) }
  return err
}

func (p *ListUsersResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  usersVal := fmt.Sprintf("%v", p.Users)
  return fmt.Sprintf("ListUsersResp({Code:%s Leader:%s Users:%s})", codeVal, leaderVal, usersVal)
}

// Attributes:
//  - SpaceID
type ListRolesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListRolesReq() *ListRolesReq {
  return &ListRolesReq{}
}


func (p *ListRolesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListRolesReqBuilder struct {
  obj *ListRolesReq
}

func NewListRolesReqBuilder() *ListRolesReqBuilder{
  return &ListRolesReqBuilder{
    obj: NewListRolesReq(),
  }
}

func (p ListRolesReqBuilder) Emit() *ListRolesReq{
  return &ListRolesReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListRolesReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListRolesReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListRolesReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListRolesReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListRolesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListRolesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListRolesReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Roles
type ListRolesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Roles []*RoleItem `thrift:"roles,3" db:"roles" json:"roles"`
}

func NewListRolesResp() *ListRolesResp {
  return &ListRolesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListRolesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListRolesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListRolesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListRolesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListRolesResp) GetRoles() []*RoleItem {
  return p.Roles
}
func (p *ListRolesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListRolesRespBuilder struct {
  obj *ListRolesResp
}

func NewListRolesRespBuilder() *ListRolesRespBuilder{
  return &ListRolesRespBuilder{
    obj: NewListRolesResp(),
  }
}

func (p ListRolesRespBuilder) Emit() *ListRolesResp{
  return &ListRolesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Roles: p.obj.Roles,
  }
}

func (l *ListRolesRespBuilder) Code(code nebula0.ErrorCode) *ListRolesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListRolesRespBuilder) Leader(leader *nebula0.HostAddr) *ListRolesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListRolesRespBuilder) Roles(roles []*RoleItem) *ListRolesRespBuilder {
  l.obj.Roles = roles
  return l
}

func (l *ListRolesResp) SetCode(code nebula0.ErrorCode) *ListRolesResp {
  l.Code = code
  return l
}

func (l *ListRolesResp) SetLeader(leader *nebula0.HostAddr) *ListRolesResp {
  l.Leader = leader
  return l
}

func (l *ListRolesResp) SetRoles(roles []*RoleItem) *ListRolesResp {
  l.Roles = roles
  return l
}

func (p *ListRolesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListRolesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoleItem, 0, size)
  p.Roles =  tSlice
  for i := 0; i < size; i ++ {
    _elem57 := NewRoleItem()
    if err := _elem57.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem57), err)
    }
    p.Roles = append(p.Roles, _elem57)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListRolesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("roles", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Roles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roles: ", p), err) }
  return err
}

func (p *ListRolesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  rolesVal := fmt.Sprintf("%v", p.Roles)
  return fmt.Sprintf("ListRolesResp({Code:%s Leader:%s Roles:%s})", codeVal, leaderVal, rolesVal)
}

// Attributes:
//  - Account
type GetUserRolesReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
}

func NewGetUserRolesReq() *GetUserRolesReq {
  return &GetUserRolesReq{}
}


func (p *GetUserRolesReq) GetAccount() []byte {
  return p.Account
}
type GetUserRolesReqBuilder struct {
  obj *GetUserRolesReq
}

func NewGetUserRolesReqBuilder() *GetUserRolesReqBuilder{
  return &GetUserRolesReqBuilder{
    obj: NewGetUserRolesReq(),
  }
}

func (p GetUserRolesReqBuilder) Emit() *GetUserRolesReq{
  return &GetUserRolesReq{
    Account: p.obj.Account,
  }
}

func (g *GetUserRolesReqBuilder) Account(account []byte) *GetUserRolesReqBuilder {
  g.obj.Account = account
  return g
}

func (g *GetUserRolesReq) SetAccount(account []byte) *GetUserRolesReq {
  g.Account = account
  return g
}

func (p *GetUserRolesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserRolesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *GetUserRolesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUserRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserRolesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GetUserRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  return fmt.Sprintf("GetUserRolesReq({Account:%s})", accountVal)
}

// Attributes:
//  - Account
//  - NewEncodedPwd_
//  - OldEncodedPwd
type ChangePasswordReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  NewEncodedPwd_ []byte `thrift:"new_encoded_pwd,2" db:"new_encoded_pwd" json:"new_encoded_pwd"`
  OldEncodedPwd []byte `thrift:"old_encoded_pwd,3" db:"old_encoded_pwd" json:"old_encoded_pwd"`
}

func NewChangePasswordReq() *ChangePasswordReq {
  return &ChangePasswordReq{}
}


func (p *ChangePasswordReq) GetAccount() []byte {
  return p.Account
}

func (p *ChangePasswordReq) GetNewEncodedPwd_() []byte {
  return p.NewEncodedPwd_
}

func (p *ChangePasswordReq) GetOldEncodedPwd() []byte {
  return p.OldEncodedPwd
}
type ChangePasswordReqBuilder struct {
  obj *ChangePasswordReq
}

func NewChangePasswordReqBuilder() *ChangePasswordReqBuilder{
  return &ChangePasswordReqBuilder{
    obj: NewChangePasswordReq(),
  }
}

func (p ChangePasswordReqBuilder) Emit() *ChangePasswordReq{
  return &ChangePasswordReq{
    Account: p.obj.Account,
    NewEncodedPwd_: p.obj.NewEncodedPwd_,
    OldEncodedPwd: p.obj.OldEncodedPwd,
  }
}

func (c *ChangePasswordReqBuilder) Account(account []byte) *ChangePasswordReqBuilder {
  c.obj.Account = account
  return c
}

func (c *ChangePasswordReqBuilder) NewEncodedPwd_(newEncodedPwd []byte) *ChangePasswordReqBuilder {
  c.obj.NewEncodedPwd_ = newEncodedPwd
  return c
}

func (c *ChangePasswordReqBuilder) OldEncodedPwd(oldEncodedPwd []byte) *ChangePasswordReqBuilder {
  c.obj.OldEncodedPwd = oldEncodedPwd
  return c
}

func (c *ChangePasswordReq) SetAccount(account []byte) *ChangePasswordReq {
  c.Account = account
  return c
}

func (c *ChangePasswordReq) SetNewEncodedPwd_(newEncodedPwd []byte) *ChangePasswordReq {
  c.NewEncodedPwd_ = newEncodedPwd
  return c
}

func (c *ChangePasswordReq) SetOldEncodedPwd(oldEncodedPwd []byte) *ChangePasswordReq {
  c.OldEncodedPwd = oldEncodedPwd
  return c
}

func (p *ChangePasswordReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Account = v
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.NewEncodedPwd_ = v
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.OldEncodedPwd = v
  }
  return nil
}

func (p *ChangePasswordReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChangePasswordReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChangePasswordReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.NewEncodedPwd_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("old_encoded_pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:old_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.OldEncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_encoded_pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:old_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) String() string {
  if p == nil {
    return "<nil>"
  }

  accountVal := fmt.Sprintf("%v", p.Account)
  newEncodedPwdVal := fmt.Sprintf("%v", p.NewEncodedPwd_)
  oldEncodedPwdVal := fmt.Sprintf("%v", p.OldEncodedPwd)
  return fmt.Sprintf("ChangePasswordReq({Account:%s NewEncodedPwd_:%s OldEncodedPwd:%s})", accountVal, newEncodedPwdVal, oldEncodedPwdVal)
}

// Attributes:
//  - Id
//  - Command
//  - Result_
//  - StartTime
//  - StopTime
type BalanceTask struct {
  Id []byte `thrift:"id,1" db:"id" json:"id"`
  Command []byte `thrift:"command,2" db:"command" json:"command"`
  Result_ TaskResult_ `thrift:"result,3" db:"result" json:"result"`
  StartTime int64 `thrift:"start_time,4" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,5" db:"stop_time" json:"stop_time"`
}

func NewBalanceTask() *BalanceTask {
  return &BalanceTask{}
}


func (p *BalanceTask) GetId() []byte {
  return p.Id
}

func (p *BalanceTask) GetCommand() []byte {
  return p.Command
}

func (p *BalanceTask) GetResult_() TaskResult_ {
  return p.Result_
}

func (p *BalanceTask) GetStartTime() int64 {
  return p.StartTime
}

func (p *BalanceTask) GetStopTime() int64 {
  return p.StopTime
}
type BalanceTaskBuilder struct {
  obj *BalanceTask
}

func NewBalanceTaskBuilder() *BalanceTaskBuilder{
  return &BalanceTaskBuilder{
    obj: NewBalanceTask(),
  }
}

func (p BalanceTaskBuilder) Emit() *BalanceTask{
  return &BalanceTask{
    Id: p.obj.Id,
    Command: p.obj.Command,
    Result_: p.obj.Result_,
    StartTime: p.obj.StartTime,
    StopTime: p.obj.StopTime,
  }
}

func (b *BalanceTaskBuilder) Id(id []byte) *BalanceTaskBuilder {
  b.obj.Id = id
  return b
}

func (b *BalanceTaskBuilder) Command(command []byte) *BalanceTaskBuilder {
  b.obj.Command = command
  return b
}

func (b *BalanceTaskBuilder) Result_(result TaskResult_) *BalanceTaskBuilder {
  b.obj.Result_ = result
  return b
}

func (b *BalanceTaskBuilder) StartTime(startTime int64) *BalanceTaskBuilder {
  b.obj.StartTime = startTime
  return b
}

func (b *BalanceTaskBuilder) StopTime(stopTime int64) *BalanceTaskBuilder {
  b.obj.StopTime = stopTime
  return b
}

func (b *BalanceTask) SetId(id []byte) *BalanceTask {
  b.Id = id
  return b
}

func (b *BalanceTask) SetCommand(command []byte) *BalanceTask {
  b.Command = command
  return b
}

func (b *BalanceTask) SetResult_(result TaskResult_) *BalanceTask {
  b.Result_ = result
  return b
}

func (b *BalanceTask) SetStartTime(startTime int64) *BalanceTask {
  b.StartTime = startTime
  return b
}

func (b *BalanceTask) SetStopTime(stopTime int64) *BalanceTask {
  b.StopTime = stopTime
  return b
}

func (p *BalanceTask) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceTask)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Id = v
  }
  return nil
}

func (p *BalanceTask)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Command = v
  }
  return nil
}

func (p *BalanceTask)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := TaskResult_(v)
    p.Result_ = temp
  }
  return nil
}

func (p *BalanceTask)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.StartTime = v
  }
  return nil
}

func (p *BalanceTask)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.StopTime = v
  }
  return nil
}

func (p *BalanceTask) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceTask) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteBinary(p.Id); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BalanceTask) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("command", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:command: ", p), err) }
  if err := oprot.WriteBinary(p.Command); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:command: ", p), err) }
  return err
}

func (p *BalanceTask) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *BalanceTask) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  return err
}

func (p *BalanceTask) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stop_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stop_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stop_time: ", p), err) }
  return err
}

func (p *BalanceTask) String() string {
  if p == nil {
    return "<nil>"
  }

  idVal := fmt.Sprintf("%v", p.Id)
  commandVal := fmt.Sprintf("%v", p.Command)
  resultVal := fmt.Sprintf("%v", p.Result_)
  startTimeVal := fmt.Sprintf("%v", p.StartTime)
  stopTimeVal := fmt.Sprintf("%v", p.StopTime)
  return fmt.Sprintf("BalanceTask({Id:%s Command:%s Result_:%s StartTime:%s StopTime:%s})", idVal, commandVal, resultVal, startTimeVal, stopTimeVal)
}

// Attributes:
//  - Module
//  - Name
//  - Mode
//  - Value
type ConfigItem struct {
  Module ConfigModule `thrift:"module,1" db:"module" json:"module"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
  Mode ConfigMode `thrift:"mode,3" db:"mode" json:"mode"`
  Value *nebula0.Value `thrift:"value,4" db:"value" json:"value"`
}

func NewConfigItem() *ConfigItem {
  return &ConfigItem{}
}


func (p *ConfigItem) GetModule() ConfigModule {
  return p.Module
}

func (p *ConfigItem) GetName() []byte {
  return p.Name
}

func (p *ConfigItem) GetMode() ConfigMode {
  return p.Mode
}
var ConfigItem_Value_DEFAULT *nebula0.Value
func (p *ConfigItem) GetValue() *nebula0.Value {
  if !p.IsSetValue() {
    return ConfigItem_Value_DEFAULT
  }
return p.Value
}
func (p *ConfigItem) IsSetValue() bool {
  return p != nil && p.Value != nil
}

type ConfigItemBuilder struct {
  obj *ConfigItem
}

func NewConfigItemBuilder() *ConfigItemBuilder{
  return &ConfigItemBuilder{
    obj: NewConfigItem(),
  }
}

func (p ConfigItemBuilder) Emit() *ConfigItem{
  return &ConfigItem{
    Module: p.obj.Module,
    Name: p.obj.Name,
    Mode: p.obj.Mode,
    Value: p.obj.Value,
  }
}

func (c *ConfigItemBuilder) Module(module ConfigModule) *ConfigItemBuilder {
  c.obj.Module = module
  return c
}

func (c *ConfigItemBuilder) Name(name []byte) *ConfigItemBuilder {
  c.obj.Name = name
  return c
}

func (c *ConfigItemBuilder) Mode(mode ConfigMode) *ConfigItemBuilder {
  c.obj.Mode = mode
  return c
}

func (c *ConfigItemBuilder) Value(value *nebula0.Value) *ConfigItemBuilder {
  c.obj.Value = value
  return c
}

func (c *ConfigItem) SetModule(module ConfigModule) *ConfigItem {
  c.Module = module
  return c
}

func (c *ConfigItem) SetName(name []byte) *ConfigItem {
  c.Name = name
  return c
}

func (c *ConfigItem) SetMode(mode ConfigMode) *ConfigItem {
  c.Mode = mode
  return c
}

func (c *ConfigItem) SetValue(value *nebula0.Value) *ConfigItem {
  c.Value = value
  return c
}

func (p *ConfigItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ConfigModule(v)
    p.Module = temp
  }
  return nil
}

func (p *ConfigItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *ConfigItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := ConfigMode(v)
    p.Mode = temp
  }
  return nil
}

func (p *ConfigItem)  ReadField4(iprot thrift.Protocol) error {
  p.Value = nebula0.NewValue()
  if err := p.Value.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *ConfigItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ConfigItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:module: ", p), err) }
  return err
}

func (p *ConfigItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ConfigItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *ConfigItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := p.Value.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *ConfigItem) String() string {
  if p == nil {
    return "<nil>"
  }

  moduleVal := fmt.Sprintf("%v", p.Module)
  nameVal := fmt.Sprintf("%v", p.Name)
  modeVal := fmt.Sprintf("%v", p.Mode)
  var valueVal string
  if p.Value == nil {
    valueVal = "<nil>"
  } else {
    valueVal = fmt.Sprintf("%v", p.Value)
  }
  return fmt.Sprintf("ConfigItem({Module:%s Name:%s Mode:%s Value:%s})", moduleVal, nameVal, modeVal, valueVal)
}

// Attributes:
//  - Items
type RegConfigReq struct {
  Items []*ConfigItem `thrift:"items,1" db:"items" json:"items"`
}

func NewRegConfigReq() *RegConfigReq {
  return &RegConfigReq{}
}


func (p *RegConfigReq) GetItems() []*ConfigItem {
  return p.Items
}
type RegConfigReqBuilder struct {
  obj *RegConfigReq
}

func NewRegConfigReqBuilder() *RegConfigReqBuilder{
  return &RegConfigReqBuilder{
    obj: NewRegConfigReq(),
  }
}

func (p RegConfigReqBuilder) Emit() *RegConfigReq{
  return &RegConfigReq{
    Items: p.obj.Items,
  }
}

func (r *RegConfigReqBuilder) Items(items []*ConfigItem) *RegConfigReqBuilder {
  r.obj.Items = items
  return r
}

func (r *RegConfigReq) SetItems(items []*ConfigItem) *RegConfigReq {
  r.Items = items
  return r
}

func (p *RegConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegConfigReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem58 := NewConfigItem()
    if err := _elem58.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
    }
    p.Items = append(p.Items, _elem58)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RegConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RegConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *RegConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }

  itemsVal := fmt.Sprintf("%v", p.Items)
  return fmt.Sprintf("RegConfigReq({Items:%s})", itemsVal)
}

// Attributes:
//  - Item
type GetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewGetConfigReq() *GetConfigReq {
  return &GetConfigReq{
    Item: NewConfigItem(),
  }
}

var GetConfigReq_Item_DEFAULT *ConfigItem
func (p *GetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return GetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *GetConfigReq) IsSetItem() bool {
  return p != nil && p.Item != nil
}

type GetConfigReqBuilder struct {
  obj *GetConfigReq
}

func NewGetConfigReqBuilder() *GetConfigReqBuilder{
  return &GetConfigReqBuilder{
    obj: NewGetConfigReq(),
  }
}

func (p GetConfigReqBuilder) Emit() *GetConfigReq{
  return &GetConfigReq{
    Item: p.obj.Item,
  }
}

func (g *GetConfigReqBuilder) Item(item *ConfigItem) *GetConfigReqBuilder {
  g.obj.Item = item
  return g
}

func (g *GetConfigReq) SetItem(item *ConfigItem) *GetConfigReq {
  g.Item = item
  return g
}

func (p *GetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *GetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var itemVal string
  if p.Item == nil {
    itemVal = "<nil>"
  } else {
    itemVal = fmt.Sprintf("%v", p.Item)
  }
  return fmt.Sprintf("GetConfigReq({Item:%s})", itemVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type GetConfigResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewGetConfigResp() *GetConfigResp {
  return &GetConfigResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *GetConfigResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetConfigResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetConfigResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetConfigResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetConfigResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *GetConfigResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type GetConfigRespBuilder struct {
  obj *GetConfigResp
}

func NewGetConfigRespBuilder() *GetConfigRespBuilder{
  return &GetConfigRespBuilder{
    obj: NewGetConfigResp(),
  }
}

func (p GetConfigRespBuilder) Emit() *GetConfigResp{
  return &GetConfigResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Items: p.obj.Items,
  }
}

func (g *GetConfigRespBuilder) Code(code nebula0.ErrorCode) *GetConfigRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetConfigRespBuilder) Leader(leader *nebula0.HostAddr) *GetConfigRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetConfigRespBuilder) Items(items []*ConfigItem) *GetConfigRespBuilder {
  g.obj.Items = items
  return g
}

func (g *GetConfigResp) SetCode(code nebula0.ErrorCode) *GetConfigResp {
  g.Code = code
  return g
}

func (g *GetConfigResp) SetLeader(leader *nebula0.HostAddr) *GetConfigResp {
  g.Leader = leader
  return g
}

func (g *GetConfigResp) SetItems(items []*ConfigItem) *GetConfigResp {
  g.Items = items
  return g
}

func (p *GetConfigResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetConfigResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem59 := NewConfigItem()
    if err := _elem59.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
    }
    p.Items = append(p.Items, _elem59)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetConfigResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *GetConfigResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  itemsVal := fmt.Sprintf("%v", p.Items)
  return fmt.Sprintf("GetConfigResp({Code:%s Leader:%s Items:%s})", codeVal, leaderVal, itemsVal)
}

// Attributes:
//  - Item
type SetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewSetConfigReq() *SetConfigReq {
  return &SetConfigReq{
    Item: NewConfigItem(),
  }
}

var SetConfigReq_Item_DEFAULT *ConfigItem
func (p *SetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return SetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *SetConfigReq) IsSetItem() bool {
  return p != nil && p.Item != nil
}

type SetConfigReqBuilder struct {
  obj *SetConfigReq
}

func NewSetConfigReqBuilder() *SetConfigReqBuilder{
  return &SetConfigReqBuilder{
    obj: NewSetConfigReq(),
  }
}

func (p SetConfigReqBuilder) Emit() *SetConfigReq{
  return &SetConfigReq{
    Item: p.obj.Item,
  }
}

func (s *SetConfigReqBuilder) Item(item *ConfigItem) *SetConfigReqBuilder {
  s.obj.Item = item
  return s
}

func (s *SetConfigReq) SetItem(item *ConfigItem) *SetConfigReq {
  s.Item = item
  return s
}

func (p *SetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }

  var itemVal string
  if p.Item == nil {
    itemVal = "<nil>"
  } else {
    itemVal = fmt.Sprintf("%v", p.Item)
  }
  return fmt.Sprintf("SetConfigReq({Item:%s})", itemVal)
}

// Attributes:
//  - Space
//  - Module
type ListConfigsReq struct {
  Space []byte `thrift:"space,1" db:"space" json:"space"`
  Module ConfigModule `thrift:"module,2" db:"module" json:"module"`
}

func NewListConfigsReq() *ListConfigsReq {
  return &ListConfigsReq{}
}


func (p *ListConfigsReq) GetSpace() []byte {
  return p.Space
}

func (p *ListConfigsReq) GetModule() ConfigModule {
  return p.Module
}
type ListConfigsReqBuilder struct {
  obj *ListConfigsReq
}

func NewListConfigsReqBuilder() *ListConfigsReqBuilder{
  return &ListConfigsReqBuilder{
    obj: NewListConfigsReq(),
  }
}

func (p ListConfigsReqBuilder) Emit() *ListConfigsReq{
  return &ListConfigsReq{
    Space: p.obj.Space,
    Module: p.obj.Module,
  }
}

func (l *ListConfigsReqBuilder) Space(space []byte) *ListConfigsReqBuilder {
  l.obj.Space = space
  return l
}

func (l *ListConfigsReqBuilder) Module(module ConfigModule) *ListConfigsReqBuilder {
  l.obj.Module = module
  return l
}

func (l *ListConfigsReq) SetSpace(space []byte) *ListConfigsReq {
  l.Space = space
  return l
}

func (l *ListConfigsReq) SetModule(module ConfigModule) *ListConfigsReq {
  l.Module = module
  return l
}

func (p *ListConfigsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Space = v
  }
  return nil
}

func (p *ListConfigsReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := ConfigModule(v)
    p.Module = temp
  }
  return nil
}

func (p *ListConfigsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteBinary(p.Space); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *ListConfigsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:module: ", p), err) }
  return err
}

func (p *ListConfigsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  moduleVal := fmt.Sprintf("%v", p.Module)
  return fmt.Sprintf("ListConfigsReq({Space:%s Module:%s})", spaceVal, moduleVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListConfigsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListConfigsResp() *ListConfigsResp {
  return &ListConfigsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListConfigsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListConfigsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListConfigsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListConfigsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListConfigsResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *ListConfigsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListConfigsRespBuilder struct {
  obj *ListConfigsResp
}

func NewListConfigsRespBuilder() *ListConfigsRespBuilder{
  return &ListConfigsRespBuilder{
    obj: NewListConfigsResp(),
  }
}

func (p ListConfigsRespBuilder) Emit() *ListConfigsResp{
  return &ListConfigsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Items: p.obj.Items,
  }
}

func (l *ListConfigsRespBuilder) Code(code nebula0.ErrorCode) *ListConfigsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListConfigsRespBuilder) Leader(leader *nebula0.HostAddr) *ListConfigsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListConfigsRespBuilder) Items(items []*ConfigItem) *ListConfigsRespBuilder {
  l.obj.Items = items
  return l
}

func (l *ListConfigsResp) SetCode(code nebula0.ErrorCode) *ListConfigsResp {
  l.Code = code
  return l
}

func (l *ListConfigsResp) SetLeader(leader *nebula0.HostAddr) *ListConfigsResp {
  l.Leader = leader
  return l
}

func (l *ListConfigsResp) SetItems(items []*ConfigItem) *ListConfigsResp {
  l.Items = items
  return l
}

func (p *ListConfigsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListConfigsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem60 := NewConfigItem()
    if err := _elem60.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
    }
    p.Items = append(p.Items, _elem60)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConfigsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListConfigsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  itemsVal := fmt.Sprintf("%v", p.Items)
  return fmt.Sprintf("ListConfigsResp({Code:%s Leader:%s Items:%s})", codeVal, leaderVal, itemsVal)
}

type CreateSnapshotReq struct {
}

func NewCreateSnapshotReq() *CreateSnapshotReq {
  return &CreateSnapshotReq{}
}

type CreateSnapshotReqBuilder struct {
  obj *CreateSnapshotReq
}

func NewCreateSnapshotReqBuilder() *CreateSnapshotReqBuilder{
  return &CreateSnapshotReqBuilder{
    obj: NewCreateSnapshotReq(),
  }
}

func (p CreateSnapshotReqBuilder) Emit() *CreateSnapshotReq{
  return &CreateSnapshotReq{
  }
}

func (p *CreateSnapshotReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSnapshotReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("CreateSnapshotReq({})")
}

// Attributes:
//  - Names
type DropSnapshotReq struct {
  Names [][]byte `thrift:"names,1" db:"names" json:"names"`
}

func NewDropSnapshotReq() *DropSnapshotReq {
  return &DropSnapshotReq{}
}


func (p *DropSnapshotReq) GetNames() [][]byte {
  return p.Names
}
type DropSnapshotReqBuilder struct {
  obj *DropSnapshotReq
}

func NewDropSnapshotReqBuilder() *DropSnapshotReqBuilder{
  return &DropSnapshotReqBuilder{
    obj: NewDropSnapshotReq(),
  }
}

func (p DropSnapshotReqBuilder) Emit() *DropSnapshotReq{
  return &DropSnapshotReq{
    Names: p.obj.Names,
  }
}

func (d *DropSnapshotReqBuilder) Names(names [][]byte) *DropSnapshotReqBuilder {
  d.obj.Names = names
  return d
}

func (d *DropSnapshotReq) SetNames(names [][]byte) *DropSnapshotReq {
  d.Names = names
  return d
}

func (p *DropSnapshotReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSnapshotReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Names =  tSlice
  for i := 0; i < size; i ++ {
    var _elem61 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem61 = v
    }
    p.Names = append(p.Names, _elem61)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DropSnapshotReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSnapshotReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("names", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Names {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:names: ", p), err) }
  return err
}

func (p *DropSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }

  namesVal := fmt.Sprintf("%v", p.Names)
  return fmt.Sprintf("DropSnapshotReq({Names:%s})", namesVal)
}

type ListSnapshotsReq struct {
}

func NewListSnapshotsReq() *ListSnapshotsReq {
  return &ListSnapshotsReq{}
}

type ListSnapshotsReqBuilder struct {
  obj *ListSnapshotsReq
}

func NewListSnapshotsReqBuilder() *ListSnapshotsReqBuilder{
  return &ListSnapshotsReqBuilder{
    obj: NewListSnapshotsReq(),
  }
}

func (p ListSnapshotsReqBuilder) Emit() *ListSnapshotsReq{
  return &ListSnapshotsReq{
  }
}

func (p *ListSnapshotsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSnapshotsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListSnapshotsReq({})")
}

// Attributes:
//  - Name
//  - Status
//  - Hosts
type Snapshot struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status SnapshotStatus `thrift:"status,2" db:"status" json:"status"`
  Hosts []byte `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewSnapshot() *Snapshot {
  return &Snapshot{}
}


func (p *Snapshot) GetName() []byte {
  return p.Name
}

func (p *Snapshot) GetStatus() SnapshotStatus {
  return p.Status
}

func (p *Snapshot) GetHosts() []byte {
  return p.Hosts
}
type SnapshotBuilder struct {
  obj *Snapshot
}

func NewSnapshotBuilder() *SnapshotBuilder{
  return &SnapshotBuilder{
    obj: NewSnapshot(),
  }
}

func (p SnapshotBuilder) Emit() *Snapshot{
  return &Snapshot{
    Name: p.obj.Name,
    Status: p.obj.Status,
    Hosts: p.obj.Hosts,
  }
}

func (s *SnapshotBuilder) Name(name []byte) *SnapshotBuilder {
  s.obj.Name = name
  return s
}

func (s *SnapshotBuilder) Status(status SnapshotStatus) *SnapshotBuilder {
  s.obj.Status = status
  return s
}

func (s *SnapshotBuilder) Hosts(hosts []byte) *SnapshotBuilder {
  s.obj.Hosts = hosts
  return s
}

func (s *Snapshot) SetName(name []byte) *Snapshot {
  s.Name = name
  return s
}

func (s *Snapshot) SetStatus(status SnapshotStatus) *Snapshot {
  s.Status = status
  return s
}

func (s *Snapshot) SetHosts(hosts []byte) *Snapshot {
  s.Hosts = hosts
  return s
}

func (p *Snapshot) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Snapshot)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *Snapshot)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := SnapshotStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *Snapshot)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Hosts = v
  }
  return nil
}

func (p *Snapshot) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Snapshot"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Snapshot) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Snapshot) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *Snapshot) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteBinary(p.Hosts); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hosts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *Snapshot) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  statusVal := fmt.Sprintf("%v", p.Status)
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("Snapshot({Name:%s Status:%s Hosts:%s})", nameVal, statusVal, hostsVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Snapshots
type ListSnapshotsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Snapshots []*Snapshot `thrift:"snapshots,3" db:"snapshots" json:"snapshots"`
}

func NewListSnapshotsResp() *ListSnapshotsResp {
  return &ListSnapshotsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListSnapshotsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListSnapshotsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSnapshotsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSnapshotsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSnapshotsResp) GetSnapshots() []*Snapshot {
  return p.Snapshots
}
func (p *ListSnapshotsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListSnapshotsRespBuilder struct {
  obj *ListSnapshotsResp
}

func NewListSnapshotsRespBuilder() *ListSnapshotsRespBuilder{
  return &ListSnapshotsRespBuilder{
    obj: NewListSnapshotsResp(),
  }
}

func (p ListSnapshotsRespBuilder) Emit() *ListSnapshotsResp{
  return &ListSnapshotsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Snapshots: p.obj.Snapshots,
  }
}

func (l *ListSnapshotsRespBuilder) Code(code nebula0.ErrorCode) *ListSnapshotsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListSnapshotsRespBuilder) Leader(leader *nebula0.HostAddr) *ListSnapshotsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListSnapshotsRespBuilder) Snapshots(snapshots []*Snapshot) *ListSnapshotsRespBuilder {
  l.obj.Snapshots = snapshots
  return l
}

func (l *ListSnapshotsResp) SetCode(code nebula0.ErrorCode) *ListSnapshotsResp {
  l.Code = code
  return l
}

func (l *ListSnapshotsResp) SetLeader(leader *nebula0.HostAddr) *ListSnapshotsResp {
  l.Leader = leader
  return l
}

func (l *ListSnapshotsResp) SetSnapshots(snapshots []*Snapshot) *ListSnapshotsResp {
  l.Snapshots = snapshots
  return l
}

func (p *ListSnapshotsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Snapshot, 0, size)
  p.Snapshots =  tSlice
  for i := 0; i < size; i ++ {
    _elem62 := NewSnapshot()
    if err := _elem62.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem62), err)
    }
    p.Snapshots = append(p.Snapshots, _elem62)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSnapshotsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSnapshotsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("snapshots", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snapshots: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Snapshots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Snapshots {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snapshots: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  snapshotsVal := fmt.Sprintf("%v", p.Snapshots)
  return fmt.Sprintf("ListSnapshotsResp({Code:%s Leader:%s Snapshots:%s})", codeVal, leaderVal, snapshotsVal)
}

// Attributes:
//  - SpaceID
type ListIndexStatusReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListIndexStatusReq() *ListIndexStatusReq {
  return &ListIndexStatusReq{}
}


func (p *ListIndexStatusReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListIndexStatusReqBuilder struct {
  obj *ListIndexStatusReq
}

func NewListIndexStatusReqBuilder() *ListIndexStatusReqBuilder{
  return &ListIndexStatusReqBuilder{
    obj: NewListIndexStatusReq(),
  }
}

func (p ListIndexStatusReqBuilder) Emit() *ListIndexStatusReq{
  return &ListIndexStatusReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListIndexStatusReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListIndexStatusReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListIndexStatusReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListIndexStatusReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListIndexStatusReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListIndexStatusReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListIndexStatusReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListIndexStatusReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListIndexStatusReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Name
//  - Status
type IndexStatus struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status []byte `thrift:"status,2" db:"status" json:"status"`
}

func NewIndexStatus() *IndexStatus {
  return &IndexStatus{}
}


func (p *IndexStatus) GetName() []byte {
  return p.Name
}

func (p *IndexStatus) GetStatus() []byte {
  return p.Status
}
type IndexStatusBuilder struct {
  obj *IndexStatus
}

func NewIndexStatusBuilder() *IndexStatusBuilder{
  return &IndexStatusBuilder{
    obj: NewIndexStatus(),
  }
}

func (p IndexStatusBuilder) Emit() *IndexStatus{
  return &IndexStatus{
    Name: p.obj.Name,
    Status: p.obj.Status,
  }
}

func (i *IndexStatusBuilder) Name(name []byte) *IndexStatusBuilder {
  i.obj.Name = name
  return i
}

func (i *IndexStatusBuilder) Status(status []byte) *IndexStatusBuilder {
  i.obj.Status = status
  return i
}

func (i *IndexStatus) SetName(name []byte) *IndexStatus {
  i.Name = name
  return i
}

func (i *IndexStatus) SetStatus(status []byte) *IndexStatus {
  i.Status = status
  return i
}

func (p *IndexStatus) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexStatus)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *IndexStatus)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Status = v
  }
  return nil
}

func (p *IndexStatus) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexStatus) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexStatus) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteBinary(p.Status); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *IndexStatus) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  statusVal := fmt.Sprintf("%v", p.Status)
  return fmt.Sprintf("IndexStatus({Name:%s Status:%s})", nameVal, statusVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Statuses
type ListIndexStatusResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Statuses []*IndexStatus `thrift:"statuses,3" db:"statuses" json:"statuses"`
}

func NewListIndexStatusResp() *ListIndexStatusResp {
  return &ListIndexStatusResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListIndexStatusResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListIndexStatusResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListIndexStatusResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListIndexStatusResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListIndexStatusResp) GetStatuses() []*IndexStatus {
  return p.Statuses
}
func (p *ListIndexStatusResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListIndexStatusRespBuilder struct {
  obj *ListIndexStatusResp
}

func NewListIndexStatusRespBuilder() *ListIndexStatusRespBuilder{
  return &ListIndexStatusRespBuilder{
    obj: NewListIndexStatusResp(),
  }
}

func (p ListIndexStatusRespBuilder) Emit() *ListIndexStatusResp{
  return &ListIndexStatusResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Statuses: p.obj.Statuses,
  }
}

func (l *ListIndexStatusRespBuilder) Code(code nebula0.ErrorCode) *ListIndexStatusRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListIndexStatusRespBuilder) Leader(leader *nebula0.HostAddr) *ListIndexStatusRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListIndexStatusRespBuilder) Statuses(statuses []*IndexStatus) *ListIndexStatusRespBuilder {
  l.obj.Statuses = statuses
  return l
}

func (l *ListIndexStatusResp) SetCode(code nebula0.ErrorCode) *ListIndexStatusResp {
  l.Code = code
  return l
}

func (l *ListIndexStatusResp) SetLeader(leader *nebula0.HostAddr) *ListIndexStatusResp {
  l.Leader = leader
  return l
}

func (l *ListIndexStatusResp) SetStatuses(statuses []*IndexStatus) *ListIndexStatusResp {
  l.Statuses = statuses
  return l
}

func (p *ListIndexStatusResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexStatus, 0, size)
  p.Statuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem63 := NewIndexStatus()
    if err := _elem63.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem63), err)
    }
    p.Statuses = append(p.Statuses, _elem63)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListIndexStatusResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListIndexStatusResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("statuses", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statuses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Statuses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Statuses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statuses: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  statusesVal := fmt.Sprintf("%v", p.Statuses)
  return fmt.Sprintf("ListIndexStatusResp({Code:%s Leader:%s Statuses:%s})", codeVal, leaderVal, statusesVal)
}

// Attributes:
//  - Zones
//  - ZoneName
type MergeZoneReq struct {
  Zones [][]byte `thrift:"zones,1" db:"zones" json:"zones"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewMergeZoneReq() *MergeZoneReq {
  return &MergeZoneReq{}
}


func (p *MergeZoneReq) GetZones() [][]byte {
  return p.Zones
}

func (p *MergeZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
type MergeZoneReqBuilder struct {
  obj *MergeZoneReq
}

func NewMergeZoneReqBuilder() *MergeZoneReqBuilder{
  return &MergeZoneReqBuilder{
    obj: NewMergeZoneReq(),
  }
}

func (p MergeZoneReqBuilder) Emit() *MergeZoneReq{
  return &MergeZoneReq{
    Zones: p.obj.Zones,
    ZoneName: p.obj.ZoneName,
  }
}

func (m *MergeZoneReqBuilder) Zones(zones [][]byte) *MergeZoneReqBuilder {
  m.obj.Zones = zones
  return m
}

func (m *MergeZoneReqBuilder) ZoneName(zoneName []byte) *MergeZoneReqBuilder {
  m.obj.ZoneName = zoneName
  return m
}

func (m *MergeZoneReq) SetZones(zones [][]byte) *MergeZoneReq {
  m.Zones = zones
  return m
}

func (m *MergeZoneReq) SetZoneName(zoneName []byte) *MergeZoneReq {
  m.ZoneName = zoneName
  return m
}

func (p *MergeZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MergeZoneReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Zones =  tSlice
  for i := 0; i < size; i ++ {
    var _elem64 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem64 = v
    }
    p.Zones = append(p.Zones, _elem64)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MergeZoneReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *MergeZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MergeZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MergeZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zones", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zones: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Zones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Zones {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zones: ", p), err) }
  return err
}

func (p *MergeZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *MergeZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  zonesVal := fmt.Sprintf("%v", p.Zones)
  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  return fmt.Sprintf("MergeZoneReq({Zones:%s ZoneName:%s})", zonesVal, zoneNameVal)
}

// Attributes:
//  - ZoneName
type DropZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewDropZoneReq() *DropZoneReq {
  return &DropZoneReq{}
}


func (p *DropZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
type DropZoneReqBuilder struct {
  obj *DropZoneReq
}

func NewDropZoneReqBuilder() *DropZoneReqBuilder{
  return &DropZoneReqBuilder{
    obj: NewDropZoneReq(),
  }
}

func (p DropZoneReqBuilder) Emit() *DropZoneReq{
  return &DropZoneReq{
    ZoneName: p.obj.ZoneName,
  }
}

func (d *DropZoneReqBuilder) ZoneName(zoneName []byte) *DropZoneReqBuilder {
  d.obj.ZoneName = zoneName
  return d
}

func (d *DropZoneReq) SetZoneName(zoneName []byte) *DropZoneReq {
  d.ZoneName = zoneName
  return d
}

func (p *DropZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *DropZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DropZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  return fmt.Sprintf("DropZoneReq({ZoneName:%s})", zoneNameVal)
}

// Attributes:
//  - ZoneName
//  - ZoneItems
type DivideZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  ZoneItems map[string][]*nebula0.HostAddr `thrift:"zone_items,2" db:"zone_items" json:"zone_items"`
}

func NewDivideZoneReq() *DivideZoneReq {
  return &DivideZoneReq{}
}


func (p *DivideZoneReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *DivideZoneReq) GetZoneItems() map[string][]*nebula0.HostAddr {
  return p.ZoneItems
}
type DivideZoneReqBuilder struct {
  obj *DivideZoneReq
}

func NewDivideZoneReqBuilder() *DivideZoneReqBuilder{
  return &DivideZoneReqBuilder{
    obj: NewDivideZoneReq(),
  }
}

func (p DivideZoneReqBuilder) Emit() *DivideZoneReq{
  return &DivideZoneReq{
    ZoneName: p.obj.ZoneName,
    ZoneItems: p.obj.ZoneItems,
  }
}

func (d *DivideZoneReqBuilder) ZoneName(zoneName []byte) *DivideZoneReqBuilder {
  d.obj.ZoneName = zoneName
  return d
}

func (d *DivideZoneReqBuilder) ZoneItems(zoneItems map[string][]*nebula0.HostAddr) *DivideZoneReqBuilder {
  d.obj.ZoneItems = zoneItems
  return d
}

func (d *DivideZoneReq) SetZoneName(zoneName []byte) *DivideZoneReq {
  d.ZoneName = zoneName
  return d
}

func (d *DivideZoneReq) SetZoneItems(zoneItems map[string][]*nebula0.HostAddr) *DivideZoneReq {
  d.ZoneItems = zoneItems
  return d
}

func (p *DivideZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DivideZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *DivideZoneReq)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*nebula0.HostAddr, size)
  p.ZoneItems =  tMap
  for i := 0; i < size; i ++ {
    var _key65 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key65 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.HostAddr, 0, size)
    _val66 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem67 := nebula0.NewHostAddr()
      if err := _elem67.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem67), err)
      }
      _val66 = append(_val66, _elem67)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.ZoneItems[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DivideZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DivideZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DivideZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DivideZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_items", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_items: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.ZoneItems)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ZoneItems {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_items: ", p), err) }
  return err
}

func (p *DivideZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  zoneItemsVal := fmt.Sprintf("%v", p.ZoneItems)
  return fmt.Sprintf("DivideZoneReq({ZoneName:%s ZoneItems:%s})", zoneNameVal, zoneItemsVal)
}

// Attributes:
//  - OriginalZoneName
//  - ZoneName
type RenameZoneReq struct {
  OriginalZoneName []byte `thrift:"original_zone_name,1" db:"original_zone_name" json:"original_zone_name"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewRenameZoneReq() *RenameZoneReq {
  return &RenameZoneReq{}
}


func (p *RenameZoneReq) GetOriginalZoneName() []byte {
  return p.OriginalZoneName
}

func (p *RenameZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
type RenameZoneReqBuilder struct {
  obj *RenameZoneReq
}

func NewRenameZoneReqBuilder() *RenameZoneReqBuilder{
  return &RenameZoneReqBuilder{
    obj: NewRenameZoneReq(),
  }
}

func (p RenameZoneReqBuilder) Emit() *RenameZoneReq{
  return &RenameZoneReq{
    OriginalZoneName: p.obj.OriginalZoneName,
    ZoneName: p.obj.ZoneName,
  }
}

func (r *RenameZoneReqBuilder) OriginalZoneName(originalZoneName []byte) *RenameZoneReqBuilder {
  r.obj.OriginalZoneName = originalZoneName
  return r
}

func (r *RenameZoneReqBuilder) ZoneName(zoneName []byte) *RenameZoneReqBuilder {
  r.obj.ZoneName = zoneName
  return r
}

func (r *RenameZoneReq) SetOriginalZoneName(originalZoneName []byte) *RenameZoneReq {
  r.OriginalZoneName = originalZoneName
  return r
}

func (r *RenameZoneReq) SetZoneName(zoneName []byte) *RenameZoneReq {
  r.ZoneName = zoneName
  return r
}

func (p *RenameZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RenameZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.OriginalZoneName = v
  }
  return nil
}

func (p *RenameZoneReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *RenameZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RenameZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RenameZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("original_zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:original_zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.OriginalZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.original_zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:original_zone_name: ", p), err) }
  return err
}

func (p *RenameZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *RenameZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  originalZoneNameVal := fmt.Sprintf("%v", p.OriginalZoneName)
  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  return fmt.Sprintf("RenameZoneReq({OriginalZoneName:%s ZoneName:%s})", originalZoneNameVal, zoneNameVal)
}

// Attributes:
//  - Hosts
//  - ZoneName
//  - IsNew
type AddHostsIntoZoneReq struct {
  Hosts []*nebula0.HostAddr `thrift:"hosts,1" db:"hosts" json:"hosts"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
  IsNew bool `thrift:"is_new,3" db:"is_new" json:"is_new"`
}

func NewAddHostsIntoZoneReq() *AddHostsIntoZoneReq {
  return &AddHostsIntoZoneReq{}
}


func (p *AddHostsIntoZoneReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}

func (p *AddHostsIntoZoneReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *AddHostsIntoZoneReq) GetIsNew() bool {
  return p.IsNew
}
type AddHostsIntoZoneReqBuilder struct {
  obj *AddHostsIntoZoneReq
}

func NewAddHostsIntoZoneReqBuilder() *AddHostsIntoZoneReqBuilder{
  return &AddHostsIntoZoneReqBuilder{
    obj: NewAddHostsIntoZoneReq(),
  }
}

func (p AddHostsIntoZoneReqBuilder) Emit() *AddHostsIntoZoneReq{
  return &AddHostsIntoZoneReq{
    Hosts: p.obj.Hosts,
    ZoneName: p.obj.ZoneName,
    IsNew: p.obj.IsNew,
  }
}

func (a *AddHostsIntoZoneReqBuilder) Hosts(hosts []*nebula0.HostAddr) *AddHostsIntoZoneReqBuilder {
  a.obj.Hosts = hosts
  return a
}

func (a *AddHostsIntoZoneReqBuilder) ZoneName(zoneName []byte) *AddHostsIntoZoneReqBuilder {
  a.obj.ZoneName = zoneName
  return a
}

func (a *AddHostsIntoZoneReqBuilder) IsNew(isNew bool) *AddHostsIntoZoneReqBuilder {
  a.obj.IsNew = isNew
  return a
}

func (a *AddHostsIntoZoneReq) SetHosts(hosts []*nebula0.HostAddr) *AddHostsIntoZoneReq {
  a.Hosts = hosts
  return a
}

func (a *AddHostsIntoZoneReq) SetZoneName(zoneName []byte) *AddHostsIntoZoneReq {
  a.ZoneName = zoneName
  return a
}

func (a *AddHostsIntoZoneReq) SetIsNew(isNew bool) *AddHostsIntoZoneReq {
  a.IsNew = isNew
  return a
}

func (p *AddHostsIntoZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem68 := nebula0.NewHostAddr()
    if err := _elem68.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem68), err)
    }
    p.Hosts = append(p.Hosts, _elem68)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *AddHostsIntoZoneReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.IsNew = v
  }
  return nil
}

func (p *AddHostsIntoZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddHostsIntoZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostsIntoZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_new", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_new: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsNew)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_new (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_new: ", p), err) }
  return err
}

func (p *AddHostsIntoZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  hostsVal := fmt.Sprintf("%v", p.Hosts)
  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  isNewVal := fmt.Sprintf("%v", p.IsNew)
  return fmt.Sprintf("AddHostsIntoZoneReq({Hosts:%s ZoneName:%s IsNew:%s})", hostsVal, zoneNameVal, isNewVal)
}

// Attributes:
//  - ZoneName
type GetZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewGetZoneReq() *GetZoneReq {
  return &GetZoneReq{}
}


func (p *GetZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
type GetZoneReqBuilder struct {
  obj *GetZoneReq
}

func NewGetZoneReqBuilder() *GetZoneReqBuilder{
  return &GetZoneReqBuilder{
    obj: NewGetZoneReq(),
  }
}

func (p GetZoneReqBuilder) Emit() *GetZoneReq{
  return &GetZoneReq{
    ZoneName: p.obj.ZoneName,
  }
}

func (g *GetZoneReqBuilder) ZoneName(zoneName []byte) *GetZoneReqBuilder {
  g.obj.ZoneName = zoneName
  return g
}

func (g *GetZoneReq) SetZoneName(zoneName []byte) *GetZoneReq {
  g.ZoneName = zoneName
  return g
}

func (p *GetZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *GetZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *GetZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }

  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  return fmt.Sprintf("GetZoneReq({ZoneName:%s})", zoneNameVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Hosts
type GetZoneResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*nebula0.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewGetZoneResp() *GetZoneResp {
  return &GetZoneResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *GetZoneResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetZoneResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetZoneResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetZoneResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetZoneResp) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
func (p *GetZoneResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type GetZoneRespBuilder struct {
  obj *GetZoneResp
}

func NewGetZoneRespBuilder() *GetZoneRespBuilder{
  return &GetZoneRespBuilder{
    obj: NewGetZoneResp(),
  }
}

func (p GetZoneRespBuilder) Emit() *GetZoneResp{
  return &GetZoneResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Hosts: p.obj.Hosts,
  }
}

func (g *GetZoneRespBuilder) Code(code nebula0.ErrorCode) *GetZoneRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetZoneRespBuilder) Leader(leader *nebula0.HostAddr) *GetZoneRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetZoneRespBuilder) Hosts(hosts []*nebula0.HostAddr) *GetZoneRespBuilder {
  g.obj.Hosts = hosts
  return g
}

func (g *GetZoneResp) SetCode(code nebula0.ErrorCode) *GetZoneResp {
  g.Code = code
  return g
}

func (g *GetZoneResp) SetLeader(leader *nebula0.HostAddr) *GetZoneResp {
  g.Leader = leader
  return g
}

func (g *GetZoneResp) SetHosts(hosts []*nebula0.HostAddr) *GetZoneResp {
  g.Hosts = hosts
  return g
}

func (p *GetZoneResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetZoneResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem69 := nebula0.NewHostAddr()
    if err := _elem69.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem69), err)
    }
    p.Hosts = append(p.Hosts, _elem69)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetZoneResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetZoneResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *GetZoneResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("GetZoneResp({Code:%s Leader:%s Hosts:%s})", codeVal, leaderVal, hostsVal)
}

type ListZonesReq struct {
}

func NewListZonesReq() *ListZonesReq {
  return &ListZonesReq{}
}

type ListZonesReqBuilder struct {
  obj *ListZonesReq
}

func NewListZonesReqBuilder() *ListZonesReqBuilder{
  return &ListZonesReqBuilder{
    obj: NewListZonesReq(),
  }
}

func (p ListZonesReqBuilder) Emit() *ListZonesReq{
  return &ListZonesReq{
  }
}

func (p *ListZonesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListZonesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListZonesReq({})")
}

// Attributes:
//  - ZoneName
//  - Nodes
type Zone struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  Nodes []*nebula0.HostAddr `thrift:"nodes,2" db:"nodes" json:"nodes"`
}

func NewZone() *Zone {
  return &Zone{}
}


func (p *Zone) GetZoneName() []byte {
  return p.ZoneName
}

func (p *Zone) GetNodes() []*nebula0.HostAddr {
  return p.Nodes
}
type ZoneBuilder struct {
  obj *Zone
}

func NewZoneBuilder() *ZoneBuilder{
  return &ZoneBuilder{
    obj: NewZone(),
  }
}

func (p ZoneBuilder) Emit() *Zone{
  return &Zone{
    ZoneName: p.obj.ZoneName,
    Nodes: p.obj.Nodes,
  }
}

func (z *ZoneBuilder) ZoneName(zoneName []byte) *ZoneBuilder {
  z.obj.ZoneName = zoneName
  return z
}

func (z *ZoneBuilder) Nodes(nodes []*nebula0.HostAddr) *ZoneBuilder {
  z.obj.Nodes = nodes
  return z
}

func (z *Zone) SetZoneName(zoneName []byte) *Zone {
  z.ZoneName = zoneName
  return z
}

func (z *Zone) SetNodes(nodes []*nebula0.HostAddr) *Zone {
  z.Nodes = nodes
  return z
}

func (p *Zone) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Zone)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ZoneName = v
  }
  return nil
}

func (p *Zone)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem70 := nebula0.NewHostAddr()
    if err := _elem70.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem70), err)
    }
    p.Nodes = append(p.Nodes, _elem70)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Zone) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Zone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Zone) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *Zone) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nodes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodes: ", p), err) }
  return err
}

func (p *Zone) String() string {
  if p == nil {
    return "<nil>"
  }

  zoneNameVal := fmt.Sprintf("%v", p.ZoneName)
  nodesVal := fmt.Sprintf("%v", p.Nodes)
  return fmt.Sprintf("Zone({ZoneName:%s Nodes:%s})", zoneNameVal, nodesVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Zones
type ListZonesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Zones []*Zone `thrift:"zones,3" db:"zones" json:"zones"`
}

func NewListZonesResp() *ListZonesResp {
  return &ListZonesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListZonesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListZonesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListZonesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListZonesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListZonesResp) GetZones() []*Zone {
  return p.Zones
}
func (p *ListZonesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListZonesRespBuilder struct {
  obj *ListZonesResp
}

func NewListZonesRespBuilder() *ListZonesRespBuilder{
  return &ListZonesRespBuilder{
    obj: NewListZonesResp(),
  }
}

func (p ListZonesRespBuilder) Emit() *ListZonesResp{
  return &ListZonesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Zones: p.obj.Zones,
  }
}

func (l *ListZonesRespBuilder) Code(code nebula0.ErrorCode) *ListZonesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListZonesRespBuilder) Leader(leader *nebula0.HostAddr) *ListZonesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListZonesRespBuilder) Zones(zones []*Zone) *ListZonesRespBuilder {
  l.obj.Zones = zones
  return l
}

func (l *ListZonesResp) SetCode(code nebula0.ErrorCode) *ListZonesResp {
  l.Code = code
  return l
}

func (l *ListZonesResp) SetLeader(leader *nebula0.HostAddr) *ListZonesResp {
  l.Leader = leader
  return l
}

func (l *ListZonesResp) SetZones(zones []*Zone) *ListZonesResp {
  l.Zones = zones
  return l
}

func (p *ListZonesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListZonesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Zone, 0, size)
  p.Zones =  tSlice
  for i := 0; i < size; i ++ {
    _elem71 := NewZone()
    if err := _elem71.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem71), err)
    }
    p.Zones = append(p.Zones, _elem71)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListZonesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListZonesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zones", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zones: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Zones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Zones {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zones: ", p), err) }
  return err
}

func (p *ListZonesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  zonesVal := fmt.Sprintf("%v", p.Zones)
  return fmt.Sprintf("ListZonesResp({Code:%s Leader:%s Zones:%s})", codeVal, leaderVal, zonesVal)
}

// Attributes:
//  - SpaceID
//  - Type
//  - Hosts
type AddListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
  Hosts []*nebula0.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewAddListenerReq() *AddListenerReq {
  return &AddListenerReq{}
}


func (p *AddListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddListenerReq) GetType() ListenerType {
  return p.Type
}

func (p *AddListenerReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
type AddListenerReqBuilder struct {
  obj *AddListenerReq
}

func NewAddListenerReqBuilder() *AddListenerReqBuilder{
  return &AddListenerReqBuilder{
    obj: NewAddListenerReq(),
  }
}

func (p AddListenerReqBuilder) Emit() *AddListenerReq{
  return &AddListenerReq{
    SpaceID: p.obj.SpaceID,
    Type: p.obj.Type,
    Hosts: p.obj.Hosts,
  }
}

func (a *AddListenerReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *AddListenerReqBuilder {
  a.obj.SpaceID = spaceID
  return a
}

func (a *AddListenerReqBuilder) Type(type_a1 ListenerType) *AddListenerReqBuilder {
  a.obj.Type = type_a1
  return a
}

func (a *AddListenerReqBuilder) Hosts(hosts []*nebula0.HostAddr) *AddListenerReqBuilder {
  a.obj.Hosts = hosts
  return a
}

func (a *AddListenerReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *AddListenerReq {
  a.SpaceID = spaceID
  return a
}

func (a *AddListenerReq) SetType(type_a1 ListenerType) *AddListenerReq {
  a.Type = type_a1
  return a
}

func (a *AddListenerReq) SetHosts(hosts []*nebula0.HostAddr) *AddListenerReq {
  a.Hosts = hosts
  return a
}

func (p *AddListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *AddListenerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := ListenerType(v)
    p.Type = temp
  }
  return nil
}

func (p *AddListenerReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem72 := nebula0.NewHostAddr()
    if err := _elem72.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem72), err)
    }
    p.Hosts = append(p.Hosts, _elem72)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *AddListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  typeVal := fmt.Sprintf("%v", p.Type)
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("AddListenerReq({SpaceID:%s Type:%s Hosts:%s})", spaceIDVal, typeVal, hostsVal)
}

// Attributes:
//  - SpaceID
//  - Type
type RemoveListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
}

func NewRemoveListenerReq() *RemoveListenerReq {
  return &RemoveListenerReq{}
}


func (p *RemoveListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemoveListenerReq) GetType() ListenerType {
  return p.Type
}
type RemoveListenerReqBuilder struct {
  obj *RemoveListenerReq
}

func NewRemoveListenerReqBuilder() *RemoveListenerReqBuilder{
  return &RemoveListenerReqBuilder{
    obj: NewRemoveListenerReq(),
  }
}

func (p RemoveListenerReqBuilder) Emit() *RemoveListenerReq{
  return &RemoveListenerReq{
    SpaceID: p.obj.SpaceID,
    Type: p.obj.Type,
  }
}

func (r *RemoveListenerReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *RemoveListenerReqBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *RemoveListenerReqBuilder) Type(type_a1 ListenerType) *RemoveListenerReqBuilder {
  r.obj.Type = type_a1
  return r
}

func (r *RemoveListenerReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *RemoveListenerReq {
  r.SpaceID = spaceID
  return r
}

func (r *RemoveListenerReq) SetType(type_a1 ListenerType) *RemoveListenerReq {
  r.Type = type_a1
  return r
}

func (p *RemoveListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *RemoveListenerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := ListenerType(v)
    p.Type = temp
  }
  return nil
}

func (p *RemoveListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemoveListenerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *RemoveListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("RemoveListenerReq({SpaceID:%s Type:%s})", spaceIDVal, typeVal)
}

// Attributes:
//  - SpaceID
type ListListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListListenerReq() *ListListenerReq {
  return &ListListenerReq{}
}


func (p *ListListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type ListListenerReqBuilder struct {
  obj *ListListenerReq
}

func NewListListenerReqBuilder() *ListListenerReqBuilder{
  return &ListListenerReqBuilder{
    obj: NewListListenerReq(),
  }
}

func (p ListListenerReqBuilder) Emit() *ListListenerReq{
  return &ListListenerReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (l *ListListenerReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ListListenerReqBuilder {
  l.obj.SpaceID = spaceID
  return l
}

func (l *ListListenerReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ListListenerReq {
  l.SpaceID = spaceID
  return l
}

func (p *ListListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ListListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("ListListenerReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Type
//  - Host
//  - PartID
//  - Status
type ListenerInfo struct {
  Type ListenerType `thrift:"type,1" db:"type" json:"type"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  PartID nebula0.PartitionID `thrift:"part_id,3" db:"part_id" json:"part_id"`
  Status HostStatus `thrift:"status,4" db:"status" json:"status"`
}

func NewListenerInfo() *ListenerInfo {
  return &ListenerInfo{
    Host: nebula0.NewHostAddr(),
  }
}


func (p *ListenerInfo) GetType() ListenerType {
  return p.Type
}
var ListenerInfo_Host_DEFAULT *nebula0.HostAddr
func (p *ListenerInfo) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return ListenerInfo_Host_DEFAULT
  }
return p.Host
}

func (p *ListenerInfo) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *ListenerInfo) GetStatus() HostStatus {
  return p.Status
}
func (p *ListenerInfo) IsSetHost() bool {
  return p != nil && p.Host != nil
}

type ListenerInfoBuilder struct {
  obj *ListenerInfo
}

func NewListenerInfoBuilder() *ListenerInfoBuilder{
  return &ListenerInfoBuilder{
    obj: NewListenerInfo(),
  }
}

func (p ListenerInfoBuilder) Emit() *ListenerInfo{
  return &ListenerInfo{
    Type: p.obj.Type,
    Host: p.obj.Host,
    PartID: p.obj.PartID,
    Status: p.obj.Status,
  }
}

func (l *ListenerInfoBuilder) Type(type_a1 ListenerType) *ListenerInfoBuilder {
  l.obj.Type = type_a1
  return l
}

func (l *ListenerInfoBuilder) Host(host *nebula0.HostAddr) *ListenerInfoBuilder {
  l.obj.Host = host
  return l
}

func (l *ListenerInfoBuilder) PartID(partID nebula0.PartitionID) *ListenerInfoBuilder {
  l.obj.PartID = partID
  return l
}

func (l *ListenerInfoBuilder) Status(status HostStatus) *ListenerInfoBuilder {
  l.obj.Status = status
  return l
}

func (l *ListenerInfo) SetType(type_a1 ListenerType) *ListenerInfo {
  l.Type = type_a1
  return l
}

func (l *ListenerInfo) SetHost(host *nebula0.HostAddr) *ListenerInfo {
  l.Host = host
  return l
}

func (l *ListenerInfo) SetPartID(partID nebula0.PartitionID) *ListenerInfo {
  l.PartID = partID
  return l
}

func (l *ListenerInfo) SetStatus(status HostStatus) *ListenerInfo {
  l.Status = status
  return l
}

func (p *ListenerInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ListenerType(v)
    p.Type = temp
  }
  return nil
}

func (p *ListenerInfo)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *ListenerInfo)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    temp := HostStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *ListenerInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListenerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListenerInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *ListenerInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  partIDVal := fmt.Sprintf("%v", p.PartID)
  statusVal := fmt.Sprintf("%v", p.Status)
  return fmt.Sprintf("ListenerInfo({Type:%s Host:%s PartID:%s Status:%s})", typeVal, hostVal, partIDVal, statusVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Listeners
type ListListenerResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Listeners []*ListenerInfo `thrift:"listeners,3" db:"listeners" json:"listeners"`
}

func NewListListenerResp() *ListListenerResp {
  return &ListListenerResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListListenerResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListListenerResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListListenerResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListListenerResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListListenerResp) GetListeners() []*ListenerInfo {
  return p.Listeners
}
func (p *ListListenerResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListListenerRespBuilder struct {
  obj *ListListenerResp
}

func NewListListenerRespBuilder() *ListListenerRespBuilder{
  return &ListListenerRespBuilder{
    obj: NewListListenerResp(),
  }
}

func (p ListListenerRespBuilder) Emit() *ListListenerResp{
  return &ListListenerResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Listeners: p.obj.Listeners,
  }
}

func (l *ListListenerRespBuilder) Code(code nebula0.ErrorCode) *ListListenerRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListListenerRespBuilder) Leader(leader *nebula0.HostAddr) *ListListenerRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListListenerRespBuilder) Listeners(listeners []*ListenerInfo) *ListListenerRespBuilder {
  l.obj.Listeners = listeners
  return l
}

func (l *ListListenerResp) SetCode(code nebula0.ErrorCode) *ListListenerResp {
  l.Code = code
  return l
}

func (l *ListListenerResp) SetLeader(leader *nebula0.HostAddr) *ListListenerResp {
  l.Leader = leader
  return l
}

func (l *ListListenerResp) SetListeners(listeners []*ListenerInfo) *ListListenerResp {
  l.Listeners = listeners
  return l
}

func (p *ListListenerResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListListenerResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ListenerInfo, 0, size)
  p.Listeners =  tSlice
  for i := 0; i < size; i ++ {
    _elem73 := NewListenerInfo()
    if err := _elem73.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
    }
    p.Listeners = append(p.Listeners, _elem73)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListListenerResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListListenerResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("listeners", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:listeners: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Listeners)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Listeners {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:listeners: ", p), err) }
  return err
}

func (p *ListListenerResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  listenersVal := fmt.Sprintf("%v", p.Listeners)
  return fmt.Sprintf("ListListenerResp({Code:%s Leader:%s Listeners:%s})", codeVal, leaderVal, listenersVal)
}

// Attributes:
//  - SpaceID
type GetStatsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetStatsReq() *GetStatsReq {
  return &GetStatsReq{}
}


func (p *GetStatsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
type GetStatsReqBuilder struct {
  obj *GetStatsReq
}

func NewGetStatsReqBuilder() *GetStatsReqBuilder{
  return &GetStatsReqBuilder{
    obj: NewGetStatsReq(),
  }
}

func (p GetStatsReqBuilder) Emit() *GetStatsReq{
  return &GetStatsReq{
    SpaceID: p.obj.SpaceID,
  }
}

func (g *GetStatsReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *GetStatsReqBuilder {
  g.obj.SpaceID = spaceID
  return g
}

func (g *GetStatsReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *GetStatsReq {
  g.SpaceID = spaceID
  return g
}

func (p *GetStatsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *GetStatsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStatsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetStatsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  return fmt.Sprintf("GetStatsReq({SpaceID:%s})", spaceIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Stats
type GetStatsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Stats *StatsItem `thrift:"stats,3" db:"stats" json:"stats"`
}

func NewGetStatsResp() *GetStatsResp {
  return &GetStatsResp{
    Leader: nebula0.NewHostAddr(),
    Stats: NewStatsItem(),
  }
}


func (p *GetStatsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetStatsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetStatsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetStatsResp_Leader_DEFAULT
  }
return p.Leader
}
var GetStatsResp_Stats_DEFAULT *StatsItem
func (p *GetStatsResp) GetStats() *StatsItem {
  if !p.IsSetStats() {
    return GetStatsResp_Stats_DEFAULT
  }
return p.Stats
}
func (p *GetStatsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetStatsResp) IsSetStats() bool {
  return p != nil && p.Stats != nil
}

type GetStatsRespBuilder struct {
  obj *GetStatsResp
}

func NewGetStatsRespBuilder() *GetStatsRespBuilder{
  return &GetStatsRespBuilder{
    obj: NewGetStatsResp(),
  }
}

func (p GetStatsRespBuilder) Emit() *GetStatsResp{
  return &GetStatsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Stats: p.obj.Stats,
  }
}

func (g *GetStatsRespBuilder) Code(code nebula0.ErrorCode) *GetStatsRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetStatsRespBuilder) Leader(leader *nebula0.HostAddr) *GetStatsRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetStatsRespBuilder) Stats(stats *StatsItem) *GetStatsRespBuilder {
  g.obj.Stats = stats
  return g
}

func (g *GetStatsResp) SetCode(code nebula0.ErrorCode) *GetStatsResp {
  g.Code = code
  return g
}

func (g *GetStatsResp) SetLeader(leader *nebula0.HostAddr) *GetStatsResp {
  g.Leader = leader
  return g
}

func (g *GetStatsResp) SetStats(stats *StatsItem) *GetStatsResp {
  g.Stats = stats
  return g
}

func (p *GetStatsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetStatsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetStatsResp)  ReadField3(iprot thrift.Protocol) error {
  p.Stats = NewStatsItem()
  if err := p.Stats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *GetStatsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStatsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetStatsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetStatsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stats: ", p), err) }
  if err := p.Stats.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stats: ", p), err) }
  return err
}

func (p *GetStatsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var statsVal string
  if p.Stats == nil {
    statsVal = "<nil>"
  } else {
    statsVal = fmt.Sprintf("%v", p.Stats)
  }
  return fmt.Sprintf("GetStatsResp({Code:%s Leader:%s Stats:%s})", codeVal, leaderVal, statsVal)
}

// Attributes:
//  - Host
//  - Checkpoints
type HostBackupInfo struct {
  Host *nebula0.HostAddr `thrift:"host,1" db:"host" json:"host"`
  Checkpoints []*nebula0.CheckpointInfo `thrift:"checkpoints,2" db:"checkpoints" json:"checkpoints"`
}

func NewHostBackupInfo() *HostBackupInfo {
  return &HostBackupInfo{
    Host: nebula0.NewHostAddr(),
  }
}

var HostBackupInfo_Host_DEFAULT *nebula0.HostAddr
func (p *HostBackupInfo) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return HostBackupInfo_Host_DEFAULT
  }
return p.Host
}

func (p *HostBackupInfo) GetCheckpoints() []*nebula0.CheckpointInfo {
  return p.Checkpoints
}
func (p *HostBackupInfo) IsSetHost() bool {
  return p != nil && p.Host != nil
}

type HostBackupInfoBuilder struct {
  obj *HostBackupInfo
}

func NewHostBackupInfoBuilder() *HostBackupInfoBuilder{
  return &HostBackupInfoBuilder{
    obj: NewHostBackupInfo(),
  }
}

func (p HostBackupInfoBuilder) Emit() *HostBackupInfo{
  return &HostBackupInfo{
    Host: p.obj.Host,
    Checkpoints: p.obj.Checkpoints,
  }
}

func (h *HostBackupInfoBuilder) Host(host *nebula0.HostAddr) *HostBackupInfoBuilder {
  h.obj.Host = host
  return h
}

func (h *HostBackupInfoBuilder) Checkpoints(checkpoints []*nebula0.CheckpointInfo) *HostBackupInfoBuilder {
  h.obj.Checkpoints = checkpoints
  return h
}

func (h *HostBackupInfo) SetHost(host *nebula0.HostAddr) *HostBackupInfo {
  h.Host = host
  return h
}

func (h *HostBackupInfo) SetCheckpoints(checkpoints []*nebula0.CheckpointInfo) *HostBackupInfo {
  h.Checkpoints = checkpoints
  return h
}

func (p *HostBackupInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostBackupInfo)  ReadField1(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HostBackupInfo)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.CheckpointInfo, 0, size)
  p.Checkpoints =  tSlice
  for i := 0; i < size; i ++ {
    _elem74 := nebula0.NewCheckpointInfo()
    if err := _elem74.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem74), err)
    }
    p.Checkpoints = append(p.Checkpoints, _elem74)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HostBackupInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostBackupInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostBackupInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *HostBackupInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("checkpoints", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:checkpoints: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Checkpoints)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Checkpoints {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:checkpoints: ", p), err) }
  return err
}

func (p *HostBackupInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  checkpointsVal := fmt.Sprintf("%v", p.Checkpoints)
  return fmt.Sprintf("HostBackupInfo({Host:%s Checkpoints:%s})", hostVal, checkpointsVal)
}

// Attributes:
//  - Space
//  - HostBackups
type SpaceBackupInfo struct {
  Space *SpaceDesc `thrift:"space,1" db:"space" json:"space"`
  HostBackups []*HostBackupInfo `thrift:"host_backups,2" db:"host_backups" json:"host_backups"`
}

func NewSpaceBackupInfo() *SpaceBackupInfo {
  return &SpaceBackupInfo{
    Space: NewSpaceDesc(),
  }
}

var SpaceBackupInfo_Space_DEFAULT *SpaceDesc
func (p *SpaceBackupInfo) GetSpace() *SpaceDesc {
  if !p.IsSetSpace() {
    return SpaceBackupInfo_Space_DEFAULT
  }
return p.Space
}

func (p *SpaceBackupInfo) GetHostBackups() []*HostBackupInfo {
  return p.HostBackups
}
func (p *SpaceBackupInfo) IsSetSpace() bool {
  return p != nil && p.Space != nil
}

type SpaceBackupInfoBuilder struct {
  obj *SpaceBackupInfo
}

func NewSpaceBackupInfoBuilder() *SpaceBackupInfoBuilder{
  return &SpaceBackupInfoBuilder{
    obj: NewSpaceBackupInfo(),
  }
}

func (p SpaceBackupInfoBuilder) Emit() *SpaceBackupInfo{
  return &SpaceBackupInfo{
    Space: p.obj.Space,
    HostBackups: p.obj.HostBackups,
  }
}

func (s *SpaceBackupInfoBuilder) Space(space *SpaceDesc) *SpaceBackupInfoBuilder {
  s.obj.Space = space
  return s
}

func (s *SpaceBackupInfoBuilder) HostBackups(hostBackups []*HostBackupInfo) *SpaceBackupInfoBuilder {
  s.obj.HostBackups = hostBackups
  return s
}

func (s *SpaceBackupInfo) SetSpace(space *SpaceDesc) *SpaceBackupInfo {
  s.Space = space
  return s
}

func (s *SpaceBackupInfo) SetHostBackups(hostBackups []*HostBackupInfo) *SpaceBackupInfo {
  s.HostBackups = hostBackups
  return s
}

func (p *SpaceBackupInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceBackupInfo)  ReadField1(iprot thrift.Protocol) error {
  p.Space = NewSpaceDesc()
  if err := p.Space.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Space), err)
  }
  return nil
}

func (p *SpaceBackupInfo)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostBackupInfo, 0, size)
  p.HostBackups =  tSlice
  for i := 0; i < size; i ++ {
    _elem75 := NewHostBackupInfo()
    if err := _elem75.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem75), err)
    }
    p.HostBackups = append(p.HostBackups, _elem75)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SpaceBackupInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceBackupInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceBackupInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := p.Space.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Space), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *SpaceBackupInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host_backups", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host_backups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostBackups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.HostBackups {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host_backups: ", p), err) }
  return err
}

func (p *SpaceBackupInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  var spaceVal string
  if p.Space == nil {
    spaceVal = "<nil>"
  } else {
    spaceVal = fmt.Sprintf("%v", p.Space)
  }
  hostBackupsVal := fmt.Sprintf("%v", p.HostBackups)
  return fmt.Sprintf("SpaceBackupInfo({Space:%s HostBackups:%s})", spaceVal, hostBackupsVal)
}

// Attributes:
//  - SpaceBackups
//  - MetaFiles
//  - BackupName
//  - Full
//  - AllSpaces
//  - CreateTime
//  - BaseBackupName
//  - StorageHosts
//  - ClusterID
type BackupMeta struct {
  SpaceBackups map[nebula0.GraphSpaceID]*SpaceBackupInfo `thrift:"space_backups,1" db:"space_backups" json:"space_backups"`
  MetaFiles [][]byte `thrift:"meta_files,2" db:"meta_files" json:"meta_files"`
  BackupName []byte `thrift:"backup_name,3" db:"backup_name" json:"backup_name"`
  Full bool `thrift:"full,4" db:"full" json:"full"`
  AllSpaces bool `thrift:"all_spaces,5" db:"all_spaces" json:"all_spaces"`
  CreateTime int64 `thrift:"create_time,6" db:"create_time" json:"create_time"`
  BaseBackupName []byte `thrift:"base_backup_name,7" db:"base_backup_name" json:"base_backup_name"`
  StorageHosts []*nebula0.HostAddr `thrift:"storage_hosts,8" db:"storage_hosts" json:"storage_hosts"`
  ClusterID ClusterID `thrift:"cluster_id,9" db:"cluster_id" json:"cluster_id"`
}

func NewBackupMeta() *BackupMeta {
  return &BackupMeta{}
}


func (p *BackupMeta) GetSpaceBackups() map[nebula0.GraphSpaceID]*SpaceBackupInfo {
  return p.SpaceBackups
}

func (p *BackupMeta) GetMetaFiles() [][]byte {
  return p.MetaFiles
}

func (p *BackupMeta) GetBackupName() []byte {
  return p.BackupName
}

func (p *BackupMeta) GetFull() bool {
  return p.Full
}

func (p *BackupMeta) GetAllSpaces() bool {
  return p.AllSpaces
}

func (p *BackupMeta) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *BackupMeta) GetBaseBackupName() []byte {
  return p.BaseBackupName
}

func (p *BackupMeta) GetStorageHosts() []*nebula0.HostAddr {
  return p.StorageHosts
}

func (p *BackupMeta) GetClusterID() ClusterID {
  return p.ClusterID
}
type BackupMetaBuilder struct {
  obj *BackupMeta
}

func NewBackupMetaBuilder() *BackupMetaBuilder{
  return &BackupMetaBuilder{
    obj: NewBackupMeta(),
  }
}

func (p BackupMetaBuilder) Emit() *BackupMeta{
  return &BackupMeta{
    SpaceBackups: p.obj.SpaceBackups,
    MetaFiles: p.obj.MetaFiles,
    BackupName: p.obj.BackupName,
    Full: p.obj.Full,
    AllSpaces: p.obj.AllSpaces,
    CreateTime: p.obj.CreateTime,
    BaseBackupName: p.obj.BaseBackupName,
    StorageHosts: p.obj.StorageHosts,
    ClusterID: p.obj.ClusterID,
  }
}

func (b *BackupMetaBuilder) SpaceBackups(spaceBackups map[nebula0.GraphSpaceID]*SpaceBackupInfo) *BackupMetaBuilder {
  b.obj.SpaceBackups = spaceBackups
  return b
}

func (b *BackupMetaBuilder) MetaFiles(metaFiles [][]byte) *BackupMetaBuilder {
  b.obj.MetaFiles = metaFiles
  return b
}

func (b *BackupMetaBuilder) BackupName(backupName []byte) *BackupMetaBuilder {
  b.obj.BackupName = backupName
  return b
}

func (b *BackupMetaBuilder) Full(full bool) *BackupMetaBuilder {
  b.obj.Full = full
  return b
}

func (b *BackupMetaBuilder) AllSpaces(allSpaces bool) *BackupMetaBuilder {
  b.obj.AllSpaces = allSpaces
  return b
}

func (b *BackupMetaBuilder) CreateTime(createTime int64) *BackupMetaBuilder {
  b.obj.CreateTime = createTime
  return b
}

func (b *BackupMetaBuilder) BaseBackupName(baseBackupName []byte) *BackupMetaBuilder {
  b.obj.BaseBackupName = baseBackupName
  return b
}

func (b *BackupMetaBuilder) StorageHosts(storageHosts []*nebula0.HostAddr) *BackupMetaBuilder {
  b.obj.StorageHosts = storageHosts
  return b
}

func (b *BackupMetaBuilder) ClusterID(clusterID ClusterID) *BackupMetaBuilder {
  b.obj.ClusterID = clusterID
  return b
}

func (b *BackupMeta) SetSpaceBackups(spaceBackups map[nebula0.GraphSpaceID]*SpaceBackupInfo) *BackupMeta {
  b.SpaceBackups = spaceBackups
  return b
}

func (b *BackupMeta) SetMetaFiles(metaFiles [][]byte) *BackupMeta {
  b.MetaFiles = metaFiles
  return b
}

func (b *BackupMeta) SetBackupName(backupName []byte) *BackupMeta {
  b.BackupName = backupName
  return b
}

func (b *BackupMeta) SetFull(full bool) *BackupMeta {
  b.Full = full
  return b
}

func (b *BackupMeta) SetAllSpaces(allSpaces bool) *BackupMeta {
  b.AllSpaces = allSpaces
  return b
}

func (b *BackupMeta) SetCreateTime(createTime int64) *BackupMeta {
  b.CreateTime = createTime
  return b
}

func (b *BackupMeta) SetBaseBackupName(baseBackupName []byte) *BackupMeta {
  b.BaseBackupName = baseBackupName
  return b
}

func (b *BackupMeta) SetStorageHosts(storageHosts []*nebula0.HostAddr) *BackupMeta {
  b.StorageHosts = storageHosts
  return b
}

func (b *BackupMeta) SetClusterID(clusterID ClusterID) *BackupMeta {
  b.ClusterID = clusterID
  return b
}

func (p *BackupMeta) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BackupMeta)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID]*SpaceBackupInfo, size)
  p.SpaceBackups =  tMap
  for i := 0; i < size; i ++ {
    var _key76 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _key76 = temp
    }
    _val77 := NewSpaceBackupInfo()
    if err := _val77.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val77), err)
    }
    p.SpaceBackups[_key76] = _val77
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.MetaFiles =  tSlice
  for i := 0; i < size; i ++ {
    var _elem78 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem78 = v
    }
    p.MetaFiles = append(p.MetaFiles, _elem78)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.BackupName = v
  }
  return nil
}

func (p *BackupMeta)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Full = v
  }
  return nil
}

func (p *BackupMeta)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.AllSpaces = v
  }
  return nil
}

func (p *BackupMeta)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.CreateTime = v
  }
  return nil
}

func (p *BackupMeta)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.BaseBackupName = v
  }
  return nil
}

func (p *BackupMeta)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.StorageHosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem79 := nebula0.NewHostAddr()
    if err := _elem79.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem79), err)
    }
    p.StorageHosts = append(p.StorageHosts, _elem79)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BackupMeta)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    temp := ClusterID(v)
    p.ClusterID = temp
  }
  return nil
}

func (p *BackupMeta) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BackupMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BackupMeta) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_backups", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_backups: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.SpaceBackups)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SpaceBackups {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_backups: ", p), err) }
  return err
}

func (p *BackupMeta) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("meta_files", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta_files: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MetaFiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MetaFiles {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta_files: ", p), err) }
  return err
}

func (p *BackupMeta) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("backup_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:backup_name: ", p), err) }
  if err := oprot.WriteBinary(p.BackupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backup_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:backup_name: ", p), err) }
  return err
}

func (p *BackupMeta) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("full", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:full: ", p), err) }
  if err := oprot.WriteBool(bool(p.Full)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.full (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:full: ", p), err) }
  return err
}

func (p *BackupMeta) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_spaces", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:all_spaces: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllSpaces)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all_spaces (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:all_spaces: ", p), err) }
  return err
}

func (p *BackupMeta) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("create_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:create_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:create_time: ", p), err) }
  return err
}

func (p *BackupMeta) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("base_backup_name", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:base_backup_name: ", p), err) }
  if err := oprot.WriteBinary(p.BaseBackupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.base_backup_name (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:base_backup_name: ", p), err) }
  return err
}

func (p *BackupMeta) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("storage_hosts", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:storage_hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StorageHosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StorageHosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:storage_hosts: ", p), err) }
  return err
}

func (p *BackupMeta) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cluster_id: ", p), err) }
  return err
}

func (p *BackupMeta) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceBackupsVal := fmt.Sprintf("%v", p.SpaceBackups)
  metaFilesVal := fmt.Sprintf("%v", p.MetaFiles)
  backupNameVal := fmt.Sprintf("%v", p.BackupName)
  fullVal := fmt.Sprintf("%v", p.Full)
  allSpacesVal := fmt.Sprintf("%v", p.AllSpaces)
  createTimeVal := fmt.Sprintf("%v", p.CreateTime)
  baseBackupNameVal := fmt.Sprintf("%v", p.BaseBackupName)
  storageHostsVal := fmt.Sprintf("%v", p.StorageHosts)
  clusterIDVal := fmt.Sprintf("%v", p.ClusterID)
  return fmt.Sprintf("BackupMeta({SpaceBackups:%s MetaFiles:%s BackupName:%s Full:%s AllSpaces:%s CreateTime:%s BaseBackupName:%s StorageHosts:%s ClusterID:%s})", spaceBackupsVal, metaFilesVal, backupNameVal, fullVal, allSpacesVal, createTimeVal, baseBackupNameVal, storageHostsVal, clusterIDVal)
}

// Attributes:
//  - Spaces
//  - BaseBackupName
//  - ClusterID
type CreateBackupReq struct {
  Spaces [][]byte `thrift:"spaces,1,optional" db:"spaces" json:"spaces,omitempty"`
  BaseBackupName []byte `thrift:"base_backup_name,2,optional" db:"base_backup_name" json:"base_backup_name,omitempty"`
  ClusterID *ClusterID `thrift:"cluster_id,3,optional" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewCreateBackupReq() *CreateBackupReq {
  return &CreateBackupReq{}
}

var CreateBackupReq_Spaces_DEFAULT [][]byte

func (p *CreateBackupReq) GetSpaces() [][]byte {
  return p.Spaces
}
var CreateBackupReq_BaseBackupName_DEFAULT []byte

func (p *CreateBackupReq) GetBaseBackupName() []byte {
  return p.BaseBackupName
}
var CreateBackupReq_ClusterID_DEFAULT ClusterID
func (p *CreateBackupReq) GetClusterID() ClusterID {
  if !p.IsSetClusterID() {
    return CreateBackupReq_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *CreateBackupReq) IsSetSpaces() bool {
  return p != nil && p.Spaces != nil
}

func (p *CreateBackupReq) IsSetBaseBackupName() bool {
  return p != nil && p.BaseBackupName != nil
}

func (p *CreateBackupReq) IsSetClusterID() bool {
  return p != nil && p.ClusterID != nil
}

type CreateBackupReqBuilder struct {
  obj *CreateBackupReq
}

func NewCreateBackupReqBuilder() *CreateBackupReqBuilder{
  return &CreateBackupReqBuilder{
    obj: NewCreateBackupReq(),
  }
}

func (p CreateBackupReqBuilder) Emit() *CreateBackupReq{
  return &CreateBackupReq{
    Spaces: p.obj.Spaces,
    BaseBackupName: p.obj.BaseBackupName,
    ClusterID: p.obj.ClusterID,
  }
}

func (c *CreateBackupReqBuilder) Spaces(spaces [][]byte) *CreateBackupReqBuilder {
  c.obj.Spaces = spaces
  return c
}

func (c *CreateBackupReqBuilder) BaseBackupName(baseBackupName []byte) *CreateBackupReqBuilder {
  c.obj.BaseBackupName = baseBackupName
  return c
}

func (c *CreateBackupReqBuilder) ClusterID(clusterID *ClusterID) *CreateBackupReqBuilder {
  c.obj.ClusterID = clusterID
  return c
}

func (c *CreateBackupReq) SetSpaces(spaces [][]byte) *CreateBackupReq {
  c.Spaces = spaces
  return c
}

func (c *CreateBackupReq) SetBaseBackupName(baseBackupName []byte) *CreateBackupReq {
  c.BaseBackupName = baseBackupName
  return c
}

func (c *CreateBackupReq) SetClusterID(clusterID *ClusterID) *CreateBackupReq {
  c.ClusterID = clusterID
  return c
}

func (p *CreateBackupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBackupReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    var _elem80 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem80 = v
    }
    p.Spaces = append(p.Spaces, _elem80)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateBackupReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.BaseBackupName = v
  }
  return nil
}

func (p *CreateBackupReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := ClusterID(v)
    p.ClusterID = &temp
  }
  return nil
}

func (p *CreateBackupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateBackupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBackupReq) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaces() {
    if err := oprot.WriteFieldBegin("spaces", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaces: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Spaces)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Spaces {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaces: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetBaseBackupName() {
    if err := oprot.WriteFieldBegin("base_backup_name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:base_backup_name: ", p), err) }
    if err := oprot.WriteBinary(p.BaseBackupName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.base_backup_name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:base_backup_name: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  }
  return err
}

func (p *CreateBackupReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spacesVal := fmt.Sprintf("%v", p.Spaces)
  baseBackupNameVal := fmt.Sprintf("%v", p.BaseBackupName)
  var clusterIDVal string
  if p.ClusterID == nil {
    clusterIDVal = "<nil>"
  } else {
    clusterIDVal = fmt.Sprintf("%v", *p.ClusterID)
  }
  return fmt.Sprintf("CreateBackupReq({Spaces:%s BaseBackupName:%s ClusterID:%s})", spacesVal, baseBackupNameVal, clusterIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Meta
type CreateBackupResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Meta *BackupMeta `thrift:"meta,3" db:"meta" json:"meta"`
}

func NewCreateBackupResp() *CreateBackupResp {
  return &CreateBackupResp{
    Leader: nebula0.NewHostAddr(),
    Meta: NewBackupMeta(),
  }
}


func (p *CreateBackupResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var CreateBackupResp_Leader_DEFAULT *nebula0.HostAddr
func (p *CreateBackupResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return CreateBackupResp_Leader_DEFAULT
  }
return p.Leader
}
var CreateBackupResp_Meta_DEFAULT *BackupMeta
func (p *CreateBackupResp) GetMeta() *BackupMeta {
  if !p.IsSetMeta() {
    return CreateBackupResp_Meta_DEFAULT
  }
return p.Meta
}
func (p *CreateBackupResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *CreateBackupResp) IsSetMeta() bool {
  return p != nil && p.Meta != nil
}

type CreateBackupRespBuilder struct {
  obj *CreateBackupResp
}

func NewCreateBackupRespBuilder() *CreateBackupRespBuilder{
  return &CreateBackupRespBuilder{
    obj: NewCreateBackupResp(),
  }
}

func (p CreateBackupRespBuilder) Emit() *CreateBackupResp{
  return &CreateBackupResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Meta: p.obj.Meta,
  }
}

func (c *CreateBackupRespBuilder) Code(code nebula0.ErrorCode) *CreateBackupRespBuilder {
  c.obj.Code = code
  return c
}

func (c *CreateBackupRespBuilder) Leader(leader *nebula0.HostAddr) *CreateBackupRespBuilder {
  c.obj.Leader = leader
  return c
}

func (c *CreateBackupRespBuilder) Meta(meta *BackupMeta) *CreateBackupRespBuilder {
  c.obj.Meta = meta
  return c
}

func (c *CreateBackupResp) SetCode(code nebula0.ErrorCode) *CreateBackupResp {
  c.Code = code
  return c
}

func (c *CreateBackupResp) SetLeader(leader *nebula0.HostAddr) *CreateBackupResp {
  c.Leader = leader
  return c
}

func (c *CreateBackupResp) SetMeta(meta *BackupMeta) *CreateBackupResp {
  c.Meta = meta
  return c
}

func (p *CreateBackupResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateBackupResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *CreateBackupResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *CreateBackupResp)  ReadField3(iprot thrift.Protocol) error {
  p.Meta = NewBackupMeta()
  if err := p.Meta.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Meta), err)
  }
  return nil
}

func (p *CreateBackupResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateBackupResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateBackupResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateBackupResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *CreateBackupResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta: ", p), err) }
  if err := p.Meta.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Meta), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta: ", p), err) }
  return err
}

func (p *CreateBackupResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var metaVal string
  if p.Meta == nil {
    metaVal = "<nil>"
  } else {
    metaVal = fmt.Sprintf("%v", p.Meta)
  }
  return fmt.Sprintf("CreateBackupResp({Code:%s Leader:%s Meta:%s})", codeVal, leaderVal, metaVal)
}

// Attributes:
//  - FromHost
//  - ToHost
type HostPair struct {
  FromHost *nebula0.HostAddr `thrift:"from_host,1" db:"from_host" json:"from_host"`
  ToHost *nebula0.HostAddr `thrift:"to_host,2" db:"to_host" json:"to_host"`
}

func NewHostPair() *HostPair {
  return &HostPair{
    FromHost: nebula0.NewHostAddr(),
    ToHost: nebula0.NewHostAddr(),
  }
}

var HostPair_FromHost_DEFAULT *nebula0.HostAddr
func (p *HostPair) GetFromHost() *nebula0.HostAddr {
  if !p.IsSetFromHost() {
    return HostPair_FromHost_DEFAULT
  }
return p.FromHost
}
var HostPair_ToHost_DEFAULT *nebula0.HostAddr
func (p *HostPair) GetToHost() *nebula0.HostAddr {
  if !p.IsSetToHost() {
    return HostPair_ToHost_DEFAULT
  }
return p.ToHost
}
func (p *HostPair) IsSetFromHost() bool {
  return p != nil && p.FromHost != nil
}

func (p *HostPair) IsSetToHost() bool {
  return p != nil && p.ToHost != nil
}

type HostPairBuilder struct {
  obj *HostPair
}

func NewHostPairBuilder() *HostPairBuilder{
  return &HostPairBuilder{
    obj: NewHostPair(),
  }
}

func (p HostPairBuilder) Emit() *HostPair{
  return &HostPair{
    FromHost: p.obj.FromHost,
    ToHost: p.obj.ToHost,
  }
}

func (h *HostPairBuilder) FromHost(fromHost *nebula0.HostAddr) *HostPairBuilder {
  h.obj.FromHost = fromHost
  return h
}

func (h *HostPairBuilder) ToHost(toHost *nebula0.HostAddr) *HostPairBuilder {
  h.obj.ToHost = toHost
  return h
}

func (h *HostPair) SetFromHost(fromHost *nebula0.HostAddr) *HostPair {
  h.FromHost = fromHost
  return h
}

func (h *HostPair) SetToHost(toHost *nebula0.HostAddr) *HostPair {
  h.ToHost = toHost
  return h
}

func (p *HostPair) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostPair)  ReadField1(iprot thrift.Protocol) error {
  p.FromHost = nebula0.NewHostAddr()
  if err := p.FromHost.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromHost), err)
  }
  return nil
}

func (p *HostPair)  ReadField2(iprot thrift.Protocol) error {
  p.ToHost = nebula0.NewHostAddr()
  if err := p.ToHost.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToHost), err)
  }
  return nil
}

func (p *HostPair) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostPair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostPair) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("from_host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_host: ", p), err) }
  if err := p.FromHost.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromHost), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_host: ", p), err) }
  return err
}

func (p *HostPair) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("to_host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to_host: ", p), err) }
  if err := p.ToHost.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToHost), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to_host: ", p), err) }
  return err
}

func (p *HostPair) String() string {
  if p == nil {
    return "<nil>"
  }

  var fromHostVal string
  if p.FromHost == nil {
    fromHostVal = "<nil>"
  } else {
    fromHostVal = fmt.Sprintf("%v", p.FromHost)
  }
  var toHostVal string
  if p.ToHost == nil {
    toHostVal = "<nil>"
  } else {
    toHostVal = fmt.Sprintf("%v", p.ToHost)
  }
  return fmt.Sprintf("HostPair({FromHost:%s ToHost:%s})", fromHostVal, toHostVal)
}

// Attributes:
//  - Files
//  - Hosts
type RestoreMetaReq struct {
  Files [][]byte `thrift:"files,1" db:"files" json:"files"`
  Hosts []*HostPair `thrift:"hosts,2" db:"hosts" json:"hosts"`
}

func NewRestoreMetaReq() *RestoreMetaReq {
  return &RestoreMetaReq{}
}


func (p *RestoreMetaReq) GetFiles() [][]byte {
  return p.Files
}

func (p *RestoreMetaReq) GetHosts() []*HostPair {
  return p.Hosts
}
type RestoreMetaReqBuilder struct {
  obj *RestoreMetaReq
}

func NewRestoreMetaReqBuilder() *RestoreMetaReqBuilder{
  return &RestoreMetaReqBuilder{
    obj: NewRestoreMetaReq(),
  }
}

func (p RestoreMetaReqBuilder) Emit() *RestoreMetaReq{
  return &RestoreMetaReq{
    Files: p.obj.Files,
    Hosts: p.obj.Hosts,
  }
}

func (r *RestoreMetaReqBuilder) Files(files [][]byte) *RestoreMetaReqBuilder {
  r.obj.Files = files
  return r
}

func (r *RestoreMetaReqBuilder) Hosts(hosts []*HostPair) *RestoreMetaReqBuilder {
  r.obj.Hosts = hosts
  return r
}

func (r *RestoreMetaReq) SetFiles(files [][]byte) *RestoreMetaReq {
  r.Files = files
  return r
}

func (r *RestoreMetaReq) SetHosts(hosts []*HostPair) *RestoreMetaReq {
  r.Hosts = hosts
  return r
}

func (p *RestoreMetaReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RestoreMetaReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Files =  tSlice
  for i := 0; i < size; i ++ {
    var _elem81 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem81 = v
    }
    p.Files = append(p.Files, _elem81)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RestoreMetaReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostPair, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem82 := NewHostPair()
    if err := _elem82.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem82), err)
    }
    p.Hosts = append(p.Hosts, _elem82)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RestoreMetaReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RestoreMetaReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RestoreMetaReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("files", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:files: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Files)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Files {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:files: ", p), err) }
  return err
}

func (p *RestoreMetaReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hosts: ", p), err) }
  return err
}

func (p *RestoreMetaReq) String() string {
  if p == nil {
    return "<nil>"
  }

  filesVal := fmt.Sprintf("%v", p.Files)
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("RestoreMetaReq({Files:%s Hosts:%s})", filesVal, hostsVal)
}

// Attributes:
//  - PartID
//  - Hosts
type PartInfo struct {
  PartID nebula0.PartitionID `thrift:"part_id,1" db:"part_id" json:"part_id"`
  Hosts []*nebula0.HostAddr `thrift:"hosts,2" db:"hosts" json:"hosts"`
}

func NewPartInfo() *PartInfo {
  return &PartInfo{}
}


func (p *PartInfo) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *PartInfo) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
type PartInfoBuilder struct {
  obj *PartInfo
}

func NewPartInfoBuilder() *PartInfoBuilder{
  return &PartInfoBuilder{
    obj: NewPartInfo(),
  }
}

func (p PartInfoBuilder) Emit() *PartInfo{
  return &PartInfo{
    PartID: p.obj.PartID,
    Hosts: p.obj.Hosts,
  }
}

func (p *PartInfoBuilder) PartID(partID nebula0.PartitionID) *PartInfoBuilder {
  p.obj.PartID = partID
  return p
}

func (p *PartInfoBuilder) Hosts(hosts []*nebula0.HostAddr) *PartInfoBuilder {
  p.obj.Hosts = hosts
  return p
}

func (p *PartInfo) SetPartID(partID nebula0.PartitionID) *PartInfo {
  p.PartID = partID
  return p
}

func (p *PartInfo) SetHosts(hosts []*nebula0.HostAddr) *PartInfo {
  p.Hosts = hosts
  return p
}

func (p *PartInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.PartitionID(v)
    p.PartID = temp
  }
  return nil
}

func (p *PartInfo)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem83 := nebula0.NewHostAddr()
    if err := _elem83.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
    }
    p.Hosts = append(p.Hosts, _elem83)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *PartInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hosts: ", p), err) }
  return err
}

func (p *PartInfo) String() string {
  if p == nil {
    return "<nil>"
  }

  partIDVal := fmt.Sprintf("%v", p.PartID)
  hostsVal := fmt.Sprintf("%v", p.Hosts)
  return fmt.Sprintf("PartInfo({PartID:%s Hosts:%s})", partIDVal, hostsVal)
}

// Attributes:
//  - Code
//  - Leader
//  - PartHosts
type RestoreMetaResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  PartHosts map[nebula0.GraphSpaceID][]*PartInfo `thrift:"part_hosts,3" db:"part_hosts" json:"part_hosts"`
}

func NewRestoreMetaResp() *RestoreMetaResp {
  return &RestoreMetaResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *RestoreMetaResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var RestoreMetaResp_Leader_DEFAULT *nebula0.HostAddr
func (p *RestoreMetaResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return RestoreMetaResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *RestoreMetaResp) GetPartHosts() map[nebula0.GraphSpaceID][]*PartInfo {
  return p.PartHosts
}
func (p *RestoreMetaResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type RestoreMetaRespBuilder struct {
  obj *RestoreMetaResp
}

func NewRestoreMetaRespBuilder() *RestoreMetaRespBuilder{
  return &RestoreMetaRespBuilder{
    obj: NewRestoreMetaResp(),
  }
}

func (p RestoreMetaRespBuilder) Emit() *RestoreMetaResp{
  return &RestoreMetaResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    PartHosts: p.obj.PartHosts,
  }
}

func (r *RestoreMetaRespBuilder) Code(code nebula0.ErrorCode) *RestoreMetaRespBuilder {
  r.obj.Code = code
  return r
}

func (r *RestoreMetaRespBuilder) Leader(leader *nebula0.HostAddr) *RestoreMetaRespBuilder {
  r.obj.Leader = leader
  return r
}

func (r *RestoreMetaRespBuilder) PartHosts(partHosts map[nebula0.GraphSpaceID][]*PartInfo) *RestoreMetaRespBuilder {
  r.obj.PartHosts = partHosts
  return r
}

func (r *RestoreMetaResp) SetCode(code nebula0.ErrorCode) *RestoreMetaResp {
  r.Code = code
  return r
}

func (r *RestoreMetaResp) SetLeader(leader *nebula0.HostAddr) *RestoreMetaResp {
  r.Leader = leader
  return r
}

func (r *RestoreMetaResp) SetPartHosts(partHosts map[nebula0.GraphSpaceID][]*PartInfo) *RestoreMetaResp {
  r.PartHosts = partHosts
  return r
}

func (p *RestoreMetaResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RestoreMetaResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *RestoreMetaResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *RestoreMetaResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID][]*PartInfo, size)
  p.PartHosts =  tMap
  for i := 0; i < size; i ++ {
    var _key84 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.GraphSpaceID(v)
      _key84 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*PartInfo, 0, size)
    _val85 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem86 := NewPartInfo()
      if err := _elem86.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem86), err)
      }
      _val85 = append(_val85, _elem86)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.PartHosts[_key84] = _val85
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RestoreMetaResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RestoreMetaResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RestoreMetaResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RestoreMetaResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *RestoreMetaResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_hosts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_hosts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.PartHosts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PartHosts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_hosts: ", p), err) }
  return err
}

func (p *RestoreMetaResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  partHostsVal := fmt.Sprintf("%v", p.PartHosts)
  return fmt.Sprintf("RestoreMetaResp({Code:%s Leader:%s PartHosts:%s})", codeVal, leaderVal, partHostsVal)
}

// Attributes:
//  - Host
//  - User
//  - Pwd
//  - ConnType
type ServiceClient struct {
  Host *nebula0.HostAddr `thrift:"host,1,required" db:"host" json:"host"`
  User []byte `thrift:"user,2,optional" db:"user" json:"user,omitempty"`
  Pwd []byte `thrift:"pwd,3,optional" db:"pwd" json:"pwd,omitempty"`
  ConnType []byte `thrift:"conn_type,4,optional" db:"conn_type" json:"conn_type,omitempty"`
}

func NewServiceClient() *ServiceClient {
  return &ServiceClient{
    Host: nebula0.NewHostAddr(),
  }
}

var ServiceClient_Host_DEFAULT *nebula0.HostAddr
func (p *ServiceClient) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return ServiceClient_Host_DEFAULT
  }
return p.Host
}
var ServiceClient_User_DEFAULT []byte

func (p *ServiceClient) GetUser() []byte {
  return p.User
}
var ServiceClient_Pwd_DEFAULT []byte

func (p *ServiceClient) GetPwd() []byte {
  return p.Pwd
}
var ServiceClient_ConnType_DEFAULT []byte

func (p *ServiceClient) GetConnType() []byte {
  return p.ConnType
}
func (p *ServiceClient) IsSetHost() bool {
  return p != nil && p.Host != nil
}

func (p *ServiceClient) IsSetUser() bool {
  return p != nil && p.User != nil
}

func (p *ServiceClient) IsSetPwd() bool {
  return p != nil && p.Pwd != nil
}

func (p *ServiceClient) IsSetConnType() bool {
  return p != nil && p.ConnType != nil
}

type ServiceClientBuilder struct {
  obj *ServiceClient
}

func NewServiceClientBuilder() *ServiceClientBuilder{
  return &ServiceClientBuilder{
    obj: NewServiceClient(),
  }
}

func (p ServiceClientBuilder) Emit() *ServiceClient{
  return &ServiceClient{
    Host: p.obj.Host,
    User: p.obj.User,
    Pwd: p.obj.Pwd,
    ConnType: p.obj.ConnType,
  }
}

func (s *ServiceClientBuilder) Host(host *nebula0.HostAddr) *ServiceClientBuilder {
  s.obj.Host = host
  return s
}

func (s *ServiceClientBuilder) User(user []byte) *ServiceClientBuilder {
  s.obj.User = user
  return s
}

func (s *ServiceClientBuilder) Pwd(pwd []byte) *ServiceClientBuilder {
  s.obj.Pwd = pwd
  return s
}

func (s *ServiceClientBuilder) ConnType(connType []byte) *ServiceClientBuilder {
  s.obj.ConnType = connType
  return s
}

func (s *ServiceClient) SetHost(host *nebula0.HostAddr) *ServiceClient {
  s.Host = host
  return s
}

func (s *ServiceClient) SetUser(user []byte) *ServiceClient {
  s.User = user
  return s
}

func (s *ServiceClient) SetPwd(pwd []byte) *ServiceClient {
  s.Pwd = pwd
  return s
}

func (s *ServiceClient) SetConnType(connType []byte) *ServiceClient {
  s.ConnType = connType
  return s
}

func (p *ServiceClient) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHost bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHost = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHost{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  return nil
}

func (p *ServiceClient)  ReadField1(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *ServiceClient)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.User = v
  }
  return nil
}

func (p *ServiceClient)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Pwd = v
  }
  return nil
}

func (p *ServiceClient)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.ConnType = v
  }
  return nil
}

func (p *ServiceClient) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ServiceClient"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceClient) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *ServiceClient) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetUser() {
    if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
    if err := oprot.WriteBinary(p.User); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  }
  return err
}

func (p *ServiceClient) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetPwd() {
    if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
    if err := oprot.WriteBinary(p.Pwd); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  }
  return err
}

func (p *ServiceClient) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetConnType() {
    if err := oprot.WriteFieldBegin("conn_type", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:conn_type: ", p), err) }
    if err := oprot.WriteBinary(p.ConnType); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.conn_type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:conn_type: ", p), err) }
  }
  return err
}

func (p *ServiceClient) String() string {
  if p == nil {
    return "<nil>"
  }

  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  userVal := fmt.Sprintf("%v", p.User)
  pwdVal := fmt.Sprintf("%v", p.Pwd)
  connTypeVal := fmt.Sprintf("%v", p.ConnType)
  return fmt.Sprintf("ServiceClient({Host:%s User:%s Pwd:%s ConnType:%s})", hostVal, userVal, pwdVal, connTypeVal)
}

// Attributes:
//  - Type
//  - Clients
type SignInServiceReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
  Clients []*ServiceClient `thrift:"clients,2" db:"clients" json:"clients"`
}

func NewSignInServiceReq() *SignInServiceReq {
  return &SignInServiceReq{}
}


func (p *SignInServiceReq) GetType() ExternalServiceType {
  return p.Type
}

func (p *SignInServiceReq) GetClients() []*ServiceClient {
  return p.Clients
}
type SignInServiceReqBuilder struct {
  obj *SignInServiceReq
}

func NewSignInServiceReqBuilder() *SignInServiceReqBuilder{
  return &SignInServiceReqBuilder{
    obj: NewSignInServiceReq(),
  }
}

func (p SignInServiceReqBuilder) Emit() *SignInServiceReq{
  return &SignInServiceReq{
    Type: p.obj.Type,
    Clients: p.obj.Clients,
  }
}

func (s *SignInServiceReqBuilder) Type(type_a1 ExternalServiceType) *SignInServiceReqBuilder {
  s.obj.Type = type_a1
  return s
}

func (s *SignInServiceReqBuilder) Clients(clients []*ServiceClient) *SignInServiceReqBuilder {
  s.obj.Clients = clients
  return s
}

func (s *SignInServiceReq) SetType(type_a1 ExternalServiceType) *SignInServiceReq {
  s.Type = type_a1
  return s
}

func (s *SignInServiceReq) SetClients(clients []*ServiceClient) *SignInServiceReq {
  s.Clients = clients
  return s
}

func (p *SignInServiceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignInServiceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ExternalServiceType(v)
    p.Type = temp
  }
  return nil
}

func (p *SignInServiceReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServiceClient, 0, size)
  p.Clients =  tSlice
  for i := 0; i < size; i ++ {
    _elem87 := NewServiceClient()
    if err := _elem87.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem87), err)
    }
    p.Clients = append(p.Clients, _elem87)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SignInServiceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SignInServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignInServiceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SignInServiceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clients", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clients: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Clients {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clients: ", p), err) }
  return err
}

func (p *SignInServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  clientsVal := fmt.Sprintf("%v", p.Clients)
  return fmt.Sprintf("SignInServiceReq({Type:%s Clients:%s})", typeVal, clientsVal)
}

// Attributes:
//  - Type
type SignOutServiceReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
}

func NewSignOutServiceReq() *SignOutServiceReq {
  return &SignOutServiceReq{}
}


func (p *SignOutServiceReq) GetType() ExternalServiceType {
  return p.Type
}
type SignOutServiceReqBuilder struct {
  obj *SignOutServiceReq
}

func NewSignOutServiceReqBuilder() *SignOutServiceReqBuilder{
  return &SignOutServiceReqBuilder{
    obj: NewSignOutServiceReq(),
  }
}

func (p SignOutServiceReqBuilder) Emit() *SignOutServiceReq{
  return &SignOutServiceReq{
    Type: p.obj.Type,
  }
}

func (s *SignOutServiceReqBuilder) Type(type_a1 ExternalServiceType) *SignOutServiceReqBuilder {
  s.obj.Type = type_a1
  return s
}

func (s *SignOutServiceReq) SetType(type_a1 ExternalServiceType) *SignOutServiceReq {
  s.Type = type_a1
  return s
}

func (p *SignOutServiceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignOutServiceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ExternalServiceType(v)
    p.Type = temp
  }
  return nil
}

func (p *SignOutServiceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SignOutServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignOutServiceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SignOutServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("SignOutServiceReq({Type:%s})", typeVal)
}

// Attributes:
//  - Type
type ListServiceClientsReq struct {
  Type ExternalServiceType `thrift:"type,1" db:"type" json:"type"`
}

func NewListServiceClientsReq() *ListServiceClientsReq {
  return &ListServiceClientsReq{}
}


func (p *ListServiceClientsReq) GetType() ExternalServiceType {
  return p.Type
}
type ListServiceClientsReqBuilder struct {
  obj *ListServiceClientsReq
}

func NewListServiceClientsReqBuilder() *ListServiceClientsReqBuilder{
  return &ListServiceClientsReqBuilder{
    obj: NewListServiceClientsReq(),
  }
}

func (p ListServiceClientsReqBuilder) Emit() *ListServiceClientsReq{
  return &ListServiceClientsReq{
    Type: p.obj.Type,
  }
}

func (l *ListServiceClientsReqBuilder) Type(type_a1 ExternalServiceType) *ListServiceClientsReqBuilder {
  l.obj.Type = type_a1
  return l
}

func (l *ListServiceClientsReq) SetType(type_a1 ExternalServiceType) *ListServiceClientsReq {
  l.Type = type_a1
  return l
}

func (p *ListServiceClientsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListServiceClientsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := ExternalServiceType(v)
    p.Type = temp
  }
  return nil
}

func (p *ListServiceClientsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListServiceClientsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListServiceClientsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListServiceClientsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("ListServiceClientsReq({Type:%s})", typeVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Clients
type ListServiceClientsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Clients map[ExternalServiceType][]*ServiceClient `thrift:"clients,3" db:"clients" json:"clients"`
}

func NewListServiceClientsResp() *ListServiceClientsResp {
  return &ListServiceClientsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListServiceClientsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListServiceClientsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListServiceClientsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListServiceClientsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListServiceClientsResp) GetClients() map[ExternalServiceType][]*ServiceClient {
  return p.Clients
}
func (p *ListServiceClientsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListServiceClientsRespBuilder struct {
  obj *ListServiceClientsResp
}

func NewListServiceClientsRespBuilder() *ListServiceClientsRespBuilder{
  return &ListServiceClientsRespBuilder{
    obj: NewListServiceClientsResp(),
  }
}

func (p ListServiceClientsRespBuilder) Emit() *ListServiceClientsResp{
  return &ListServiceClientsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Clients: p.obj.Clients,
  }
}

func (l *ListServiceClientsRespBuilder) Code(code nebula0.ErrorCode) *ListServiceClientsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListServiceClientsRespBuilder) Leader(leader *nebula0.HostAddr) *ListServiceClientsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListServiceClientsRespBuilder) Clients(clients map[ExternalServiceType][]*ServiceClient) *ListServiceClientsRespBuilder {
  l.obj.Clients = clients
  return l
}

func (l *ListServiceClientsResp) SetCode(code nebula0.ErrorCode) *ListServiceClientsResp {
  l.Code = code
  return l
}

func (l *ListServiceClientsResp) SetLeader(leader *nebula0.HostAddr) *ListServiceClientsResp {
  l.Leader = leader
  return l
}

func (l *ListServiceClientsResp) SetClients(clients map[ExternalServiceType][]*ServiceClient) *ListServiceClientsResp {
  l.Clients = clients
  return l
}

func (p *ListServiceClientsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListServiceClientsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListServiceClientsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListServiceClientsResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[ExternalServiceType][]*ServiceClient, size)
  p.Clients =  tMap
  for i := 0; i < size; i ++ {
    var _key88 ExternalServiceType
    if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := ExternalServiceType(v)
      _key88 = temp
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ServiceClient, 0, size)
    _val89 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem90 := NewServiceClient()
      if err := _elem90.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem90), err)
      }
      _val89 = append(_val89, _elem90)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Clients[_key88] = _val89
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListServiceClientsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListServiceClientsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListServiceClientsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clients", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clients: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Clients {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clients: ", p), err) }
  return err
}

func (p *ListServiceClientsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  clientsVal := fmt.Sprintf("%v", p.Clients)
  return fmt.Sprintf("ListServiceClientsResp({Code:%s Leader:%s Clients:%s})", codeVal, leaderVal, clientsVal)
}

// Attributes:
//  - SpaceID
//  - DependSchema
//  - Fields
type FTIndex struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  DependSchema *nebula0.SchemaID `thrift:"depend_schema,2" db:"depend_schema" json:"depend_schema"`
  Fields [][]byte `thrift:"fields,3" db:"fields" json:"fields"`
}

func NewFTIndex() *FTIndex {
  return &FTIndex{}
}


func (p *FTIndex) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var FTIndex_DependSchema_DEFAULT *nebula0.SchemaID
func (p *FTIndex) GetDependSchema() *nebula0.SchemaID {
  if !p.IsSetDependSchema() {
    return FTIndex_DependSchema_DEFAULT
  }
return p.DependSchema
}

func (p *FTIndex) GetFields() [][]byte {
  return p.Fields
}
func (p *FTIndex) IsSetDependSchema() bool {
  return p != nil && p.DependSchema != nil
}

type FTIndexBuilder struct {
  obj *FTIndex
}

func NewFTIndexBuilder() *FTIndexBuilder{
  return &FTIndexBuilder{
    obj: NewFTIndex(),
  }
}

func (p FTIndexBuilder) Emit() *FTIndex{
  return &FTIndex{
    SpaceID: p.obj.SpaceID,
    DependSchema: p.obj.DependSchema,
    Fields: p.obj.Fields,
  }
}

func (f *FTIndexBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *FTIndexBuilder {
  f.obj.SpaceID = spaceID
  return f
}

func (f *FTIndexBuilder) DependSchema(dependSchema *nebula0.SchemaID) *FTIndexBuilder {
  f.obj.DependSchema = dependSchema
  return f
}

func (f *FTIndexBuilder) Fields(fields [][]byte) *FTIndexBuilder {
  f.obj.Fields = fields
  return f
}

func (f *FTIndex) SetSpaceID(spaceID nebula0.GraphSpaceID) *FTIndex {
  f.SpaceID = spaceID
  return f
}

func (f *FTIndex) SetDependSchema(dependSchema *nebula0.SchemaID) *FTIndex {
  f.DependSchema = dependSchema
  return f
}

func (f *FTIndex) SetFields(fields [][]byte) *FTIndex {
  f.Fields = fields
  return f
}

func (p *FTIndex) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FTIndex)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *FTIndex)  ReadField2(iprot thrift.Protocol) error {
  p.DependSchema = nebula0.NewSchemaID()
  if err := p.DependSchema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DependSchema), err)
  }
  return nil
}

func (p *FTIndex)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    var _elem91 []byte
    if v, err := iprot.ReadBinary(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem91 = v
    }
    p.Fields = append(p.Fields, _elem91)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FTIndex) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("FTIndex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FTIndex) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *FTIndex) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("depend_schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depend_schema: ", p), err) }
  if err := p.DependSchema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DependSchema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depend_schema: ", p), err) }
  return err
}

func (p *FTIndex) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fields: ", p), err) }
  return err
}

func (p *FTIndex) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  var dependSchemaVal string
  if p.DependSchema == nil {
    dependSchemaVal = "<nil>"
  } else {
    dependSchemaVal = fmt.Sprintf("%v", p.DependSchema)
  }
  fieldsVal := fmt.Sprintf("%v", p.Fields)
  return fmt.Sprintf("FTIndex({SpaceID:%s DependSchema:%s Fields:%s})", spaceIDVal, dependSchemaVal, fieldsVal)
}

// Attributes:
//  - FulltextIndexName
//  - Index
type CreateFTIndexReq struct {
  FulltextIndexName []byte `thrift:"fulltext_index_name,1" db:"fulltext_index_name" json:"fulltext_index_name"`
  Index *FTIndex `thrift:"index,2" db:"index" json:"index"`
}

func NewCreateFTIndexReq() *CreateFTIndexReq {
  return &CreateFTIndexReq{
    Index: NewFTIndex(),
  }
}


func (p *CreateFTIndexReq) GetFulltextIndexName() []byte {
  return p.FulltextIndexName
}
var CreateFTIndexReq_Index_DEFAULT *FTIndex
func (p *CreateFTIndexReq) GetIndex() *FTIndex {
  if !p.IsSetIndex() {
    return CreateFTIndexReq_Index_DEFAULT
  }
return p.Index
}
func (p *CreateFTIndexReq) IsSetIndex() bool {
  return p != nil && p.Index != nil
}

type CreateFTIndexReqBuilder struct {
  obj *CreateFTIndexReq
}

func NewCreateFTIndexReqBuilder() *CreateFTIndexReqBuilder{
  return &CreateFTIndexReqBuilder{
    obj: NewCreateFTIndexReq(),
  }
}

func (p CreateFTIndexReqBuilder) Emit() *CreateFTIndexReq{
  return &CreateFTIndexReq{
    FulltextIndexName: p.obj.FulltextIndexName,
    Index: p.obj.Index,
  }
}

func (c *CreateFTIndexReqBuilder) FulltextIndexName(fulltextIndexName []byte) *CreateFTIndexReqBuilder {
  c.obj.FulltextIndexName = fulltextIndexName
  return c
}

func (c *CreateFTIndexReqBuilder) Index(index *FTIndex) *CreateFTIndexReqBuilder {
  c.obj.Index = index
  return c
}

func (c *CreateFTIndexReq) SetFulltextIndexName(fulltextIndexName []byte) *CreateFTIndexReq {
  c.FulltextIndexName = fulltextIndexName
  return c
}

func (c *CreateFTIndexReq) SetIndex(index *FTIndex) *CreateFTIndexReq {
  c.Index = index
  return c
}

func (p *CreateFTIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateFTIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.FulltextIndexName = v
  }
  return nil
}

func (p *CreateFTIndexReq)  ReadField2(iprot thrift.Protocol) error {
  p.Index = NewFTIndex()
  if err := p.Index.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Index), err)
  }
  return nil
}

func (p *CreateFTIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateFTIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateFTIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fulltext_index_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fulltext_index_name: ", p), err) }
  if err := oprot.WriteBinary(p.FulltextIndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fulltext_index_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fulltext_index_name: ", p), err) }
  return err
}

func (p *CreateFTIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := p.Index.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Index), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *CreateFTIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  fulltextIndexNameVal := fmt.Sprintf("%v", p.FulltextIndexName)
  var indexVal string
  if p.Index == nil {
    indexVal = "<nil>"
  } else {
    indexVal = fmt.Sprintf("%v", p.Index)
  }
  return fmt.Sprintf("CreateFTIndexReq({FulltextIndexName:%s Index:%s})", fulltextIndexNameVal, indexVal)
}

// Attributes:
//  - SpaceID
//  - FulltextIndexName
type DropFTIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  FulltextIndexName []byte `thrift:"fulltext_index_name,2" db:"fulltext_index_name" json:"fulltext_index_name"`
}

func NewDropFTIndexReq() *DropFTIndexReq {
  return &DropFTIndexReq{}
}


func (p *DropFTIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropFTIndexReq) GetFulltextIndexName() []byte {
  return p.FulltextIndexName
}
type DropFTIndexReqBuilder struct {
  obj *DropFTIndexReq
}

func NewDropFTIndexReqBuilder() *DropFTIndexReqBuilder{
  return &DropFTIndexReqBuilder{
    obj: NewDropFTIndexReq(),
  }
}

func (p DropFTIndexReqBuilder) Emit() *DropFTIndexReq{
  return &DropFTIndexReq{
    SpaceID: p.obj.SpaceID,
    FulltextIndexName: p.obj.FulltextIndexName,
  }
}

func (d *DropFTIndexReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *DropFTIndexReqBuilder {
  d.obj.SpaceID = spaceID
  return d
}

func (d *DropFTIndexReqBuilder) FulltextIndexName(fulltextIndexName []byte) *DropFTIndexReqBuilder {
  d.obj.FulltextIndexName = fulltextIndexName
  return d
}

func (d *DropFTIndexReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *DropFTIndexReq {
  d.SpaceID = spaceID
  return d
}

func (d *DropFTIndexReq) SetFulltextIndexName(fulltextIndexName []byte) *DropFTIndexReq {
  d.FulltextIndexName = fulltextIndexName
  return d
}

func (p *DropFTIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropFTIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *DropFTIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.FulltextIndexName = v
  }
  return nil
}

func (p *DropFTIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropFTIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropFTIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropFTIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fulltext_index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fulltext_index_name: ", p), err) }
  if err := oprot.WriteBinary(p.FulltextIndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fulltext_index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fulltext_index_name: ", p), err) }
  return err
}

func (p *DropFTIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  fulltextIndexNameVal := fmt.Sprintf("%v", p.FulltextIndexName)
  return fmt.Sprintf("DropFTIndexReq({SpaceID:%s FulltextIndexName:%s})", spaceIDVal, fulltextIndexNameVal)
}

type ListFTIndexesReq struct {
}

func NewListFTIndexesReq() *ListFTIndexesReq {
  return &ListFTIndexesReq{}
}

type ListFTIndexesReqBuilder struct {
  obj *ListFTIndexesReq
}

func NewListFTIndexesReqBuilder() *ListFTIndexesReqBuilder{
  return &ListFTIndexesReqBuilder{
    obj: NewListFTIndexesReq(),
  }
}

func (p ListFTIndexesReqBuilder) Emit() *ListFTIndexesReq{
  return &ListFTIndexesReq{
  }
}

func (p *ListFTIndexesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTIndexesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListFTIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListFTIndexesReq({})")
}

// Attributes:
//  - Code
//  - Leader
//  - Indexes
type ListFTIndexesResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Indexes map[string]*FTIndex `thrift:"indexes,3" db:"indexes" json:"indexes"`
}

func NewListFTIndexesResp() *ListFTIndexesResp {
  return &ListFTIndexesResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListFTIndexesResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListFTIndexesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListFTIndexesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListFTIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListFTIndexesResp) GetIndexes() map[string]*FTIndex {
  return p.Indexes
}
func (p *ListFTIndexesResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListFTIndexesRespBuilder struct {
  obj *ListFTIndexesResp
}

func NewListFTIndexesRespBuilder() *ListFTIndexesRespBuilder{
  return &ListFTIndexesRespBuilder{
    obj: NewListFTIndexesResp(),
  }
}

func (p ListFTIndexesRespBuilder) Emit() *ListFTIndexesResp{
  return &ListFTIndexesResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Indexes: p.obj.Indexes,
  }
}

func (l *ListFTIndexesRespBuilder) Code(code nebula0.ErrorCode) *ListFTIndexesRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListFTIndexesRespBuilder) Leader(leader *nebula0.HostAddr) *ListFTIndexesRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListFTIndexesRespBuilder) Indexes(indexes map[string]*FTIndex) *ListFTIndexesRespBuilder {
  l.obj.Indexes = indexes
  return l
}

func (l *ListFTIndexesResp) SetCode(code nebula0.ErrorCode) *ListFTIndexesResp {
  l.Code = code
  return l
}

func (l *ListFTIndexesResp) SetLeader(leader *nebula0.HostAddr) *ListFTIndexesResp {
  l.Leader = leader
  return l
}

func (l *ListFTIndexesResp) SetIndexes(indexes map[string]*FTIndex) *ListFTIndexesResp {
  l.Indexes = indexes
  return l
}

func (p *ListFTIndexesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTIndexesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListFTIndexesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListFTIndexesResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*FTIndex, size)
  p.Indexes =  tMap
  for i := 0; i < size; i ++ {
    var _key92 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key92 = v
    }
    _val93 := NewFTIndex()
    if err := _val93.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val93), err)
    }
    p.Indexes[_key92] = _val93
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListFTIndexesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListFTIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTIndexesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("indexes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:indexes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Indexes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Indexes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:indexes: ", p), err) }
  return err
}

func (p *ListFTIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  indexesVal := fmt.Sprintf("%v", p.Indexes)
  return fmt.Sprintf("ListFTIndexesResp({Code:%s Leader:%s Indexes:%s})", codeVal, leaderVal, indexesVal)
}

// Attributes:
//  - StartTime
//  - Status
//  - Duration
//  - Query
//  - GraphAddr
type QueryDesc struct {
  StartTime nebula0.Timestamp `thrift:"start_time,1" db:"start_time" json:"start_time"`
  Status QueryStatus `thrift:"status,2" db:"status" json:"status"`
  Duration int64 `thrift:"duration,3" db:"duration" json:"duration"`
  Query []byte `thrift:"query,4" db:"query" json:"query"`
  GraphAddr *nebula0.HostAddr `thrift:"graph_addr,5" db:"graph_addr" json:"graph_addr"`
}

func NewQueryDesc() *QueryDesc {
  return &QueryDesc{
    GraphAddr: nebula0.NewHostAddr(),
  }
}


func (p *QueryDesc) GetStartTime() nebula0.Timestamp {
  return p.StartTime
}

func (p *QueryDesc) GetStatus() QueryStatus {
  return p.Status
}

func (p *QueryDesc) GetDuration() int64 {
  return p.Duration
}

func (p *QueryDesc) GetQuery() []byte {
  return p.Query
}
var QueryDesc_GraphAddr_DEFAULT *nebula0.HostAddr
func (p *QueryDesc) GetGraphAddr() *nebula0.HostAddr {
  if !p.IsSetGraphAddr() {
    return QueryDesc_GraphAddr_DEFAULT
  }
return p.GraphAddr
}
func (p *QueryDesc) IsSetGraphAddr() bool {
  return p != nil && p.GraphAddr != nil
}

type QueryDescBuilder struct {
  obj *QueryDesc
}

func NewQueryDescBuilder() *QueryDescBuilder{
  return &QueryDescBuilder{
    obj: NewQueryDesc(),
  }
}

func (p QueryDescBuilder) Emit() *QueryDesc{
  return &QueryDesc{
    StartTime: p.obj.StartTime,
    Status: p.obj.Status,
    Duration: p.obj.Duration,
    Query: p.obj.Query,
    GraphAddr: p.obj.GraphAddr,
  }
}

func (q *QueryDescBuilder) StartTime(startTime nebula0.Timestamp) *QueryDescBuilder {
  q.obj.StartTime = startTime
  return q
}

func (q *QueryDescBuilder) Status(status QueryStatus) *QueryDescBuilder {
  q.obj.Status = status
  return q
}

func (q *QueryDescBuilder) Duration(duration int64) *QueryDescBuilder {
  q.obj.Duration = duration
  return q
}

func (q *QueryDescBuilder) Query(query []byte) *QueryDescBuilder {
  q.obj.Query = query
  return q
}

func (q *QueryDescBuilder) GraphAddr(graphAddr *nebula0.HostAddr) *QueryDescBuilder {
  q.obj.GraphAddr = graphAddr
  return q
}

func (q *QueryDesc) SetStartTime(startTime nebula0.Timestamp) *QueryDesc {
  q.StartTime = startTime
  return q
}

func (q *QueryDesc) SetStatus(status QueryStatus) *QueryDesc {
  q.Status = status
  return q
}

func (q *QueryDesc) SetDuration(duration int64) *QueryDesc {
  q.Duration = duration
  return q
}

func (q *QueryDesc) SetQuery(query []byte) *QueryDesc {
  q.Query = query
  return q
}

func (q *QueryDesc) SetGraphAddr(graphAddr *nebula0.HostAddr) *QueryDesc {
  q.GraphAddr = graphAddr
  return q
}

func (p *QueryDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.Timestamp(v)
    p.StartTime = temp
  }
  return nil
}

func (p *QueryDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := QueryStatus(v)
    p.Status = temp
  }
  return nil
}

func (p *QueryDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.Duration = v
  }
  return nil
}

func (p *QueryDesc)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.Query = v
  }
  return nil
}

func (p *QueryDesc)  ReadField5(iprot thrift.Protocol) error {
  p.GraphAddr = nebula0.NewHostAddr()
  if err := p.GraphAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *QueryDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("QueryDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_time: ", p), err) }
  return err
}

func (p *QueryDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *QueryDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("duration", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:duration: ", p), err) }
  if err := oprot.WriteI64(int64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:duration: ", p), err) }
  return err
}

func (p *QueryDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query: ", p), err) }
  if err := oprot.WriteBinary(p.Query); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query: ", p), err) }
  return err
}

func (p *QueryDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("graph_addr", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:graph_addr: ", p), err) }
  return err
}

func (p *QueryDesc) String() string {
  if p == nil {
    return "<nil>"
  }

  startTimeVal := fmt.Sprintf("%v", p.StartTime)
  statusVal := fmt.Sprintf("%v", p.Status)
  durationVal := fmt.Sprintf("%v", p.Duration)
  queryVal := fmt.Sprintf("%v", p.Query)
  var graphAddrVal string
  if p.GraphAddr == nil {
    graphAddrVal = "<nil>"
  } else {
    graphAddrVal = fmt.Sprintf("%v", p.GraphAddr)
  }
  return fmt.Sprintf("QueryDesc({StartTime:%s Status:%s Duration:%s Query:%s GraphAddr:%s})", startTimeVal, statusVal, durationVal, queryVal, graphAddrVal)
}

// Attributes:
//  - SessionID
//  - CreateTime
//  - UpdateTime
//  - UserName
//  - SpaceName
//  - GraphAddr
//  - Timezone
//  - ClientIP
//  - Configs
//  - Queries
type Session struct {
  SessionID nebula0.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id"`
  CreateTime nebula0.Timestamp `thrift:"create_time,2" db:"create_time" json:"create_time"`
  UpdateTime nebula0.Timestamp `thrift:"update_time,3" db:"update_time" json:"update_time"`
  UserName []byte `thrift:"user_name,4" db:"user_name" json:"user_name"`
  SpaceName []byte `thrift:"space_name,5" db:"space_name" json:"space_name"`
  GraphAddr *nebula0.HostAddr `thrift:"graph_addr,6" db:"graph_addr" json:"graph_addr"`
  Timezone int32 `thrift:"timezone,7" db:"timezone" json:"timezone"`
  ClientIP []byte `thrift:"client_ip,8" db:"client_ip" json:"client_ip"`
  Configs map[string]*nebula0.Value `thrift:"configs,9" db:"configs" json:"configs"`
  Queries map[nebula0.ExecutionPlanID]*QueryDesc `thrift:"queries,10" db:"queries" json:"queries"`
}

func NewSession() *Session {
  return &Session{
    GraphAddr: nebula0.NewHostAddr(),
  }
}


func (p *Session) GetSessionID() nebula0.SessionID {
  return p.SessionID
}

func (p *Session) GetCreateTime() nebula0.Timestamp {
  return p.CreateTime
}

func (p *Session) GetUpdateTime() nebula0.Timestamp {
  return p.UpdateTime
}

func (p *Session) GetUserName() []byte {
  return p.UserName
}

func (p *Session) GetSpaceName() []byte {
  return p.SpaceName
}
var Session_GraphAddr_DEFAULT *nebula0.HostAddr
func (p *Session) GetGraphAddr() *nebula0.HostAddr {
  if !p.IsSetGraphAddr() {
    return Session_GraphAddr_DEFAULT
  }
return p.GraphAddr
}

func (p *Session) GetTimezone() int32 {
  return p.Timezone
}

func (p *Session) GetClientIP() []byte {
  return p.ClientIP
}

func (p *Session) GetConfigs() map[string]*nebula0.Value {
  return p.Configs
}

func (p *Session) GetQueries() map[nebula0.ExecutionPlanID]*QueryDesc {
  return p.Queries
}
func (p *Session) IsSetGraphAddr() bool {
  return p != nil && p.GraphAddr != nil
}

type SessionBuilder struct {
  obj *Session
}

func NewSessionBuilder() *SessionBuilder{
  return &SessionBuilder{
    obj: NewSession(),
  }
}

func (p SessionBuilder) Emit() *Session{
  return &Session{
    SessionID: p.obj.SessionID,
    CreateTime: p.obj.CreateTime,
    UpdateTime: p.obj.UpdateTime,
    UserName: p.obj.UserName,
    SpaceName: p.obj.SpaceName,
    GraphAddr: p.obj.GraphAddr,
    Timezone: p.obj.Timezone,
    ClientIP: p.obj.ClientIP,
    Configs: p.obj.Configs,
    Queries: p.obj.Queries,
  }
}

func (s *SessionBuilder) SessionID(sessionID nebula0.SessionID) *SessionBuilder {
  s.obj.SessionID = sessionID
  return s
}

func (s *SessionBuilder) CreateTime(createTime nebula0.Timestamp) *SessionBuilder {
  s.obj.CreateTime = createTime
  return s
}

func (s *SessionBuilder) UpdateTime(updateTime nebula0.Timestamp) *SessionBuilder {
  s.obj.UpdateTime = updateTime
  return s
}

func (s *SessionBuilder) UserName(userName []byte) *SessionBuilder {
  s.obj.UserName = userName
  return s
}

func (s *SessionBuilder) SpaceName(spaceName []byte) *SessionBuilder {
  s.obj.SpaceName = spaceName
  return s
}

func (s *SessionBuilder) GraphAddr(graphAddr *nebula0.HostAddr) *SessionBuilder {
  s.obj.GraphAddr = graphAddr
  return s
}

func (s *SessionBuilder) Timezone(timezone int32) *SessionBuilder {
  s.obj.Timezone = timezone
  return s
}

func (s *SessionBuilder) ClientIP(clientIP []byte) *SessionBuilder {
  s.obj.ClientIP = clientIP
  return s
}

func (s *SessionBuilder) Configs(configs map[string]*nebula0.Value) *SessionBuilder {
  s.obj.Configs = configs
  return s
}

func (s *SessionBuilder) Queries(queries map[nebula0.ExecutionPlanID]*QueryDesc) *SessionBuilder {
  s.obj.Queries = queries
  return s
}

func (s *Session) SetSessionID(sessionID nebula0.SessionID) *Session {
  s.SessionID = sessionID
  return s
}

func (s *Session) SetCreateTime(createTime nebula0.Timestamp) *Session {
  s.CreateTime = createTime
  return s
}

func (s *Session) SetUpdateTime(updateTime nebula0.Timestamp) *Session {
  s.UpdateTime = updateTime
  return s
}

func (s *Session) SetUserName(userName []byte) *Session {
  s.UserName = userName
  return s
}

func (s *Session) SetSpaceName(spaceName []byte) *Session {
  s.SpaceName = spaceName
  return s
}

func (s *Session) SetGraphAddr(graphAddr *nebula0.HostAddr) *Session {
  s.GraphAddr = graphAddr
  return s
}

func (s *Session) SetTimezone(timezone int32) *Session {
  s.Timezone = timezone
  return s
}

func (s *Session) SetClientIP(clientIP []byte) *Session {
  s.ClientIP = clientIP
  return s
}

func (s *Session) SetConfigs(configs map[string]*nebula0.Value) *Session {
  s.Configs = configs
  return s
}

func (s *Session) SetQueries(queries map[nebula0.ExecutionPlanID]*QueryDesc) *Session {
  s.Queries = queries
  return s
}

func (p *Session) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Session)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.SessionID(v)
    p.SessionID = temp
  }
  return nil
}

func (p *Session)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.Timestamp(v)
    p.CreateTime = temp
  }
  return nil
}

func (p *Session)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    temp := nebula0.Timestamp(v)
    p.UpdateTime = temp
  }
  return nil
}

func (p *Session)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.UserName = v
  }
  return nil
}

func (p *Session)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.SpaceName = v
  }
  return nil
}

func (p *Session)  ReadField6(iprot thrift.Protocol) error {
  p.GraphAddr = nebula0.NewHostAddr()
  if err := p.GraphAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *Session)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.Timezone = v
  }
  return nil
}

func (p *Session)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.ClientIP = v
  }
  return nil
}

func (p *Session)  ReadField9(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*nebula0.Value, size)
  p.Configs =  tMap
  for i := 0; i < size; i ++ {
    var _key94 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key94 = v
    }
    _val95 := nebula0.NewValue()
    if err := _val95.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val95), err)
    }
    p.Configs[_key94] = _val95
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Session)  ReadField10(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.ExecutionPlanID]*QueryDesc, size)
  p.Queries =  tMap
  for i := 0; i < size; i ++ {
    var _key96 nebula0.ExecutionPlanID
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.ExecutionPlanID(v)
      _key96 = temp
    }
    _val97 := NewQueryDesc()
    if err := _val97.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val97), err)
    }
    p.Queries[_key96] = _val97
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Session) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Session"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Session) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("session_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  return err
}

func (p *Session) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("create_time", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:create_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.create_time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:create_time: ", p), err) }
  return err
}

func (p *Session) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("update_time", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:update_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.update_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:update_time: ", p), err) }
  return err
}

func (p *Session) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_name: ", p), err) }
  if err := oprot.WriteBinary(p.UserName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_name: ", p), err) }
  return err
}

func (p *Session) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:space_name: ", p), err) }
  return err
}

func (p *Session) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("graph_addr", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:graph_addr: ", p), err) }
  return err
}

func (p *Session) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("timezone", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timezone: ", p), err) }
  if err := oprot.WriteI32(int32(p.Timezone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timezone (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timezone: ", p), err) }
  return err
}

func (p *Session) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("client_ip", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:client_ip: ", p), err) }
  if err := oprot.WriteBinary(p.ClientIP); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_ip (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:client_ip: ", p), err) }
  return err
}

func (p *Session) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("configs", thrift.MAP, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:configs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Configs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Configs {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:configs: ", p), err) }
  return err
}

func (p *Session) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("queries", thrift.MAP, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:queries: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Queries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Queries {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:queries: ", p), err) }
  return err
}

func (p *Session) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIDVal := fmt.Sprintf("%v", p.SessionID)
  createTimeVal := fmt.Sprintf("%v", p.CreateTime)
  updateTimeVal := fmt.Sprintf("%v", p.UpdateTime)
  userNameVal := fmt.Sprintf("%v", p.UserName)
  spaceNameVal := fmt.Sprintf("%v", p.SpaceName)
  var graphAddrVal string
  if p.GraphAddr == nil {
    graphAddrVal = "<nil>"
  } else {
    graphAddrVal = fmt.Sprintf("%v", p.GraphAddr)
  }
  timezoneVal := fmt.Sprintf("%v", p.Timezone)
  clientIPVal := fmt.Sprintf("%v", p.ClientIP)
  configsVal := fmt.Sprintf("%v", p.Configs)
  queriesVal := fmt.Sprintf("%v", p.Queries)
  return fmt.Sprintf("Session({SessionID:%s CreateTime:%s UpdateTime:%s UserName:%s SpaceName:%s GraphAddr:%s Timezone:%s ClientIP:%s Configs:%s Queries:%s})", sessionIDVal, createTimeVal, updateTimeVal, userNameVal, spaceNameVal, graphAddrVal, timezoneVal, clientIPVal, configsVal, queriesVal)
}

// Attributes:
//  - User
//  - GraphAddr
//  - ClientIP
type CreateSessionReq struct {
  User []byte `thrift:"user,1" db:"user" json:"user"`
  GraphAddr *nebula0.HostAddr `thrift:"graph_addr,2" db:"graph_addr" json:"graph_addr"`
  ClientIP []byte `thrift:"client_ip,3" db:"client_ip" json:"client_ip"`
}

func NewCreateSessionReq() *CreateSessionReq {
  return &CreateSessionReq{
    GraphAddr: nebula0.NewHostAddr(),
  }
}


func (p *CreateSessionReq) GetUser() []byte {
  return p.User
}
var CreateSessionReq_GraphAddr_DEFAULT *nebula0.HostAddr
func (p *CreateSessionReq) GetGraphAddr() *nebula0.HostAddr {
  if !p.IsSetGraphAddr() {
    return CreateSessionReq_GraphAddr_DEFAULT
  }
return p.GraphAddr
}

func (p *CreateSessionReq) GetClientIP() []byte {
  return p.ClientIP
}
func (p *CreateSessionReq) IsSetGraphAddr() bool {
  return p != nil && p.GraphAddr != nil
}

type CreateSessionReqBuilder struct {
  obj *CreateSessionReq
}

func NewCreateSessionReqBuilder() *CreateSessionReqBuilder{
  return &CreateSessionReqBuilder{
    obj: NewCreateSessionReq(),
  }
}

func (p CreateSessionReqBuilder) Emit() *CreateSessionReq{
  return &CreateSessionReq{
    User: p.obj.User,
    GraphAddr: p.obj.GraphAddr,
    ClientIP: p.obj.ClientIP,
  }
}

func (c *CreateSessionReqBuilder) User(user []byte) *CreateSessionReqBuilder {
  c.obj.User = user
  return c
}

func (c *CreateSessionReqBuilder) GraphAddr(graphAddr *nebula0.HostAddr) *CreateSessionReqBuilder {
  c.obj.GraphAddr = graphAddr
  return c
}

func (c *CreateSessionReqBuilder) ClientIP(clientIP []byte) *CreateSessionReqBuilder {
  c.obj.ClientIP = clientIP
  return c
}

func (c *CreateSessionReq) SetUser(user []byte) *CreateSessionReq {
  c.User = user
  return c
}

func (c *CreateSessionReq) SetGraphAddr(graphAddr *nebula0.HostAddr) *CreateSessionReq {
  c.GraphAddr = graphAddr
  return c
}

func (c *CreateSessionReq) SetClientIP(clientIP []byte) *CreateSessionReq {
  c.ClientIP = clientIP
  return c
}

func (p *CreateSessionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSessionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.User = v
  }
  return nil
}

func (p *CreateSessionReq)  ReadField2(iprot thrift.Protocol) error {
  p.GraphAddr = nebula0.NewHostAddr()
  if err := p.GraphAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GraphAddr), err)
  }
  return nil
}

func (p *CreateSessionReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ClientIP = v
  }
  return nil
}

func (p *CreateSessionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSessionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteBinary(p.User); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *CreateSessionReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("graph_addr", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:graph_addr: ", p), err) }
  if err := p.GraphAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GraphAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:graph_addr: ", p), err) }
  return err
}

func (p *CreateSessionReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("client_ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:client_ip: ", p), err) }
  if err := oprot.WriteBinary(p.ClientIP); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:client_ip: ", p), err) }
  return err
}

func (p *CreateSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  userVal := fmt.Sprintf("%v", p.User)
  var graphAddrVal string
  if p.GraphAddr == nil {
    graphAddrVal = "<nil>"
  } else {
    graphAddrVal = fmt.Sprintf("%v", p.GraphAddr)
  }
  clientIPVal := fmt.Sprintf("%v", p.ClientIP)
  return fmt.Sprintf("CreateSessionReq({User:%s GraphAddr:%s ClientIP:%s})", userVal, graphAddrVal, clientIPVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Session
type CreateSessionResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Session *Session `thrift:"session,3" db:"session" json:"session"`
}

func NewCreateSessionResp() *CreateSessionResp {
  return &CreateSessionResp{
    Leader: nebula0.NewHostAddr(),
    Session: NewSession(),
  }
}


func (p *CreateSessionResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var CreateSessionResp_Leader_DEFAULT *nebula0.HostAddr
func (p *CreateSessionResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return CreateSessionResp_Leader_DEFAULT
  }
return p.Leader
}
var CreateSessionResp_Session_DEFAULT *Session
func (p *CreateSessionResp) GetSession() *Session {
  if !p.IsSetSession() {
    return CreateSessionResp_Session_DEFAULT
  }
return p.Session
}
func (p *CreateSessionResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *CreateSessionResp) IsSetSession() bool {
  return p != nil && p.Session != nil
}

type CreateSessionRespBuilder struct {
  obj *CreateSessionResp
}

func NewCreateSessionRespBuilder() *CreateSessionRespBuilder{
  return &CreateSessionRespBuilder{
    obj: NewCreateSessionResp(),
  }
}

func (p CreateSessionRespBuilder) Emit() *CreateSessionResp{
  return &CreateSessionResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Session: p.obj.Session,
  }
}

func (c *CreateSessionRespBuilder) Code(code nebula0.ErrorCode) *CreateSessionRespBuilder {
  c.obj.Code = code
  return c
}

func (c *CreateSessionRespBuilder) Leader(leader *nebula0.HostAddr) *CreateSessionRespBuilder {
  c.obj.Leader = leader
  return c
}

func (c *CreateSessionRespBuilder) Session(session *Session) *CreateSessionRespBuilder {
  c.obj.Session = session
  return c
}

func (c *CreateSessionResp) SetCode(code nebula0.ErrorCode) *CreateSessionResp {
  c.Code = code
  return c
}

func (c *CreateSessionResp) SetLeader(leader *nebula0.HostAddr) *CreateSessionResp {
  c.Leader = leader
  return c
}

func (c *CreateSessionResp) SetSession(session *Session) *CreateSessionResp {
  c.Session = session
  return c
}

func (p *CreateSessionResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSessionResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *CreateSessionResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *CreateSessionResp)  ReadField3(iprot thrift.Protocol) error {
  p.Session = NewSession()
  if err := p.Session.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *CreateSessionResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSessionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSessionResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *CreateSessionResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *CreateSessionResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session: ", p), err) }
  if err := p.Session.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session: ", p), err) }
  return err
}

func (p *CreateSessionResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var sessionVal string
  if p.Session == nil {
    sessionVal = "<nil>"
  } else {
    sessionVal = fmt.Sprintf("%v", p.Session)
  }
  return fmt.Sprintf("CreateSessionResp({Code:%s Leader:%s Session:%s})", codeVal, leaderVal, sessionVal)
}

// Attributes:
//  - Sessions
type UpdateSessionsReq struct {
  Sessions []*Session `thrift:"sessions,1" db:"sessions" json:"sessions"`
}

func NewUpdateSessionsReq() *UpdateSessionsReq {
  return &UpdateSessionsReq{}
}


func (p *UpdateSessionsReq) GetSessions() []*Session {
  return p.Sessions
}
type UpdateSessionsReqBuilder struct {
  obj *UpdateSessionsReq
}

func NewUpdateSessionsReqBuilder() *UpdateSessionsReqBuilder{
  return &UpdateSessionsReqBuilder{
    obj: NewUpdateSessionsReq(),
  }
}

func (p UpdateSessionsReqBuilder) Emit() *UpdateSessionsReq{
  return &UpdateSessionsReq{
    Sessions: p.obj.Sessions,
  }
}

func (u *UpdateSessionsReqBuilder) Sessions(sessions []*Session) *UpdateSessionsReqBuilder {
  u.obj.Sessions = sessions
  return u
}

func (u *UpdateSessionsReq) SetSessions(sessions []*Session) *UpdateSessionsReq {
  u.Sessions = sessions
  return u
}

func (p *UpdateSessionsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateSessionsReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Session, 0, size)
  p.Sessions =  tSlice
  for i := 0; i < size; i ++ {
    _elem98 := NewSession()
    if err := _elem98.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem98), err)
    }
    p.Sessions = append(p.Sessions, _elem98)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateSessionsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateSessionsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateSessionsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sessions", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sessions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Sessions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessions: ", p), err) }
  return err
}

func (p *UpdateSessionsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionsVal := fmt.Sprintf("%v", p.Sessions)
  return fmt.Sprintf("UpdateSessionsReq({Sessions:%s})", sessionsVal)
}

// Attributes:
//  - Code
//  - Leader
//  - KilledQueries
type UpdateSessionsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  KilledQueries map[nebula0.SessionID]map[nebula0.ExecutionPlanID]*QueryDesc `thrift:"killed_queries,3" db:"killed_queries" json:"killed_queries"`
}

func NewUpdateSessionsResp() *UpdateSessionsResp {
  return &UpdateSessionsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *UpdateSessionsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var UpdateSessionsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *UpdateSessionsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return UpdateSessionsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *UpdateSessionsResp) GetKilledQueries() map[nebula0.SessionID]map[nebula0.ExecutionPlanID]*QueryDesc {
  return p.KilledQueries
}
func (p *UpdateSessionsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type UpdateSessionsRespBuilder struct {
  obj *UpdateSessionsResp
}

func NewUpdateSessionsRespBuilder() *UpdateSessionsRespBuilder{
  return &UpdateSessionsRespBuilder{
    obj: NewUpdateSessionsResp(),
  }
}

func (p UpdateSessionsRespBuilder) Emit() *UpdateSessionsResp{
  return &UpdateSessionsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    KilledQueries: p.obj.KilledQueries,
  }
}

func (u *UpdateSessionsRespBuilder) Code(code nebula0.ErrorCode) *UpdateSessionsRespBuilder {
  u.obj.Code = code
  return u
}

func (u *UpdateSessionsRespBuilder) Leader(leader *nebula0.HostAddr) *UpdateSessionsRespBuilder {
  u.obj.Leader = leader
  return u
}

func (u *UpdateSessionsRespBuilder) KilledQueries(killedQueries map[nebula0.SessionID]map[nebula0.ExecutionPlanID]*QueryDesc) *UpdateSessionsRespBuilder {
  u.obj.KilledQueries = killedQueries
  return u
}

func (u *UpdateSessionsResp) SetCode(code nebula0.ErrorCode) *UpdateSessionsResp {
  u.Code = code
  return u
}

func (u *UpdateSessionsResp) SetLeader(leader *nebula0.HostAddr) *UpdateSessionsResp {
  u.Leader = leader
  return u
}

func (u *UpdateSessionsResp) SetKilledQueries(killedQueries map[nebula0.SessionID]map[nebula0.ExecutionPlanID]*QueryDesc) *UpdateSessionsResp {
  u.KilledQueries = killedQueries
  return u
}

func (p *UpdateSessionsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *UpdateSessionsResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.SessionID]map[nebula0.ExecutionPlanID]*QueryDesc, size)
  p.KilledQueries =  tMap
  for i := 0; i < size; i ++ {
    var _key99 nebula0.SessionID
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.SessionID(v)
      _key99 = temp
    }
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[nebula0.ExecutionPlanID]*QueryDesc, size)
    _val100 :=  tMap
    for i := 0; i < size; i ++ {
      var _key101 nebula0.ExecutionPlanID
      if v, err := iprot.ReadI64(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := nebula0.ExecutionPlanID(v)
        _key101 = temp
      }
      _val102 := NewQueryDesc()
      if err := _val102.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val102), err)
      }
      _val100[_key101] = _val102
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.KilledQueries[_key99] = _val100
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateSessionsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UpdateSessionsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateSessionsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("killed_queries", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:killed_queries: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.KilledQueries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KilledQueries {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteI64(int64(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:killed_queries: ", p), err) }
  return err
}

func (p *UpdateSessionsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  killedQueriesVal := fmt.Sprintf("%v", p.KilledQueries)
  return fmt.Sprintf("UpdateSessionsResp({Code:%s Leader:%s KilledQueries:%s})", codeVal, leaderVal, killedQueriesVal)
}

type ListSessionsReq struct {
}

func NewListSessionsReq() *ListSessionsReq {
  return &ListSessionsReq{}
}

type ListSessionsReqBuilder struct {
  obj *ListSessionsReq
}

func NewListSessionsReqBuilder() *ListSessionsReqBuilder{
  return &ListSessionsReqBuilder{
    obj: NewListSessionsReq(),
  }
}

func (p ListSessionsReqBuilder) Emit() *ListSessionsReq{
  return &ListSessionsReq{
  }
}

func (p *ListSessionsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSessionsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSessionsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSessionsReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListSessionsReq({})")
}

// Attributes:
//  - Code
//  - Leader
//  - Sessions
type ListSessionsResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Sessions []*Session `thrift:"sessions,3" db:"sessions" json:"sessions"`
}

func NewListSessionsResp() *ListSessionsResp {
  return &ListSessionsResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListSessionsResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListSessionsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSessionsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSessionsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSessionsResp) GetSessions() []*Session {
  return p.Sessions
}
func (p *ListSessionsResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListSessionsRespBuilder struct {
  obj *ListSessionsResp
}

func NewListSessionsRespBuilder() *ListSessionsRespBuilder{
  return &ListSessionsRespBuilder{
    obj: NewListSessionsResp(),
  }
}

func (p ListSessionsRespBuilder) Emit() *ListSessionsResp{
  return &ListSessionsResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Sessions: p.obj.Sessions,
  }
}

func (l *ListSessionsRespBuilder) Code(code nebula0.ErrorCode) *ListSessionsRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListSessionsRespBuilder) Leader(leader *nebula0.HostAddr) *ListSessionsRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListSessionsRespBuilder) Sessions(sessions []*Session) *ListSessionsRespBuilder {
  l.obj.Sessions = sessions
  return l
}

func (l *ListSessionsResp) SetCode(code nebula0.ErrorCode) *ListSessionsResp {
  l.Code = code
  return l
}

func (l *ListSessionsResp) SetLeader(leader *nebula0.HostAddr) *ListSessionsResp {
  l.Leader = leader
  return l
}

func (l *ListSessionsResp) SetSessions(sessions []*Session) *ListSessionsResp {
  l.Sessions = sessions
  return l
}

func (p *ListSessionsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSessionsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListSessionsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSessionsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Session, 0, size)
  p.Sessions =  tSlice
  for i := 0; i < size; i ++ {
    _elem103 := NewSession()
    if err := _elem103.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
    }
    p.Sessions = append(p.Sessions, _elem103)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSessionsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSessionsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSessionsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSessionsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSessionsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("sessions", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sessions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Sessions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessions: ", p), err) }
  return err
}

func (p *ListSessionsResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  sessionsVal := fmt.Sprintf("%v", p.Sessions)
  return fmt.Sprintf("ListSessionsResp({Code:%s Leader:%s Sessions:%s})", codeVal, leaderVal, sessionsVal)
}

// Attributes:
//  - SessionID
type GetSessionReq struct {
  SessionID nebula0.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id"`
}

func NewGetSessionReq() *GetSessionReq {
  return &GetSessionReq{}
}


func (p *GetSessionReq) GetSessionID() nebula0.SessionID {
  return p.SessionID
}
type GetSessionReqBuilder struct {
  obj *GetSessionReq
}

func NewGetSessionReqBuilder() *GetSessionReqBuilder{
  return &GetSessionReqBuilder{
    obj: NewGetSessionReq(),
  }
}

func (p GetSessionReqBuilder) Emit() *GetSessionReq{
  return &GetSessionReq{
    SessionID: p.obj.SessionID,
  }
}

func (g *GetSessionReqBuilder) SessionID(sessionID nebula0.SessionID) *GetSessionReqBuilder {
  g.obj.SessionID = sessionID
  return g
}

func (g *GetSessionReq) SetSessionID(sessionID nebula0.SessionID) *GetSessionReq {
  g.SessionID = sessionID
  return g
}

func (p *GetSessionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSessionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.SessionID(v)
    p.SessionID = temp
  }
  return nil
}

func (p *GetSessionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSessionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("session_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  return err
}

func (p *GetSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIDVal := fmt.Sprintf("%v", p.SessionID)
  return fmt.Sprintf("GetSessionReq({SessionID:%s})", sessionIDVal)
}

// Attributes:
//  - Code
//  - Leader
//  - Session
type GetSessionResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Session *Session `thrift:"session,3" db:"session" json:"session"`
}

func NewGetSessionResp() *GetSessionResp {
  return &GetSessionResp{
    Leader: nebula0.NewHostAddr(),
    Session: NewSession(),
  }
}


func (p *GetSessionResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetSessionResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetSessionResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetSessionResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSessionResp_Session_DEFAULT *Session
func (p *GetSessionResp) GetSession() *Session {
  if !p.IsSetSession() {
    return GetSessionResp_Session_DEFAULT
  }
return p.Session
}
func (p *GetSessionResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *GetSessionResp) IsSetSession() bool {
  return p != nil && p.Session != nil
}

type GetSessionRespBuilder struct {
  obj *GetSessionResp
}

func NewGetSessionRespBuilder() *GetSessionRespBuilder{
  return &GetSessionRespBuilder{
    obj: NewGetSessionResp(),
  }
}

func (p GetSessionRespBuilder) Emit() *GetSessionResp{
  return &GetSessionResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    Session: p.obj.Session,
  }
}

func (g *GetSessionRespBuilder) Code(code nebula0.ErrorCode) *GetSessionRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetSessionRespBuilder) Leader(leader *nebula0.HostAddr) *GetSessionRespBuilder {
  g.obj.Leader = leader
  return g
}

func (g *GetSessionRespBuilder) Session(session *Session) *GetSessionRespBuilder {
  g.obj.Session = session
  return g
}

func (g *GetSessionResp) SetCode(code nebula0.ErrorCode) *GetSessionResp {
  g.Code = code
  return g
}

func (g *GetSessionResp) SetLeader(leader *nebula0.HostAddr) *GetSessionResp {
  g.Leader = leader
  return g
}

func (g *GetSessionResp) SetSession(session *Session) *GetSessionResp {
  g.Session = session
  return g
}

func (p *GetSessionResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSessionResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetSessionResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSessionResp)  ReadField3(iprot thrift.Protocol) error {
  p.Session = NewSession()
  if err := p.Session.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Session), err)
  }
  return nil
}

func (p *GetSessionResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSessionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSessionResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSessionResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSessionResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("session", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session: ", p), err) }
  if err := p.Session.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Session), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session: ", p), err) }
  return err
}

func (p *GetSessionResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  var sessionVal string
  if p.Session == nil {
    sessionVal = "<nil>"
  } else {
    sessionVal = fmt.Sprintf("%v", p.Session)
  }
  return fmt.Sprintf("GetSessionResp({Code:%s Leader:%s Session:%s})", codeVal, leaderVal, sessionVal)
}

// Attributes:
//  - SessionID
type RemoveSessionReq struct {
  SessionID nebula0.SessionID `thrift:"session_id,1" db:"session_id" json:"session_id"`
}

func NewRemoveSessionReq() *RemoveSessionReq {
  return &RemoveSessionReq{}
}


func (p *RemoveSessionReq) GetSessionID() nebula0.SessionID {
  return p.SessionID
}
type RemoveSessionReqBuilder struct {
  obj *RemoveSessionReq
}

func NewRemoveSessionReqBuilder() *RemoveSessionReqBuilder{
  return &RemoveSessionReqBuilder{
    obj: NewRemoveSessionReq(),
  }
}

func (p RemoveSessionReqBuilder) Emit() *RemoveSessionReq{
  return &RemoveSessionReq{
    SessionID: p.obj.SessionID,
  }
}

func (r *RemoveSessionReqBuilder) SessionID(sessionID nebula0.SessionID) *RemoveSessionReqBuilder {
  r.obj.SessionID = sessionID
  return r
}

func (r *RemoveSessionReq) SetSessionID(sessionID nebula0.SessionID) *RemoveSessionReq {
  r.SessionID = sessionID
  return r
}

func (p *RemoveSessionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveSessionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.SessionID(v)
    p.SessionID = temp
  }
  return nil
}

func (p *RemoveSessionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveSessionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveSessionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("session_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:session_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:session_id: ", p), err) }
  return err
}

func (p *RemoveSessionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  sessionIDVal := fmt.Sprintf("%v", p.SessionID)
  return fmt.Sprintf("RemoveSessionReq({SessionID:%s})", sessionIDVal)
}

// Attributes:
//  - KillQueries
type KillQueryReq struct {
  KillQueries map[nebula0.SessionID][]nebula0.ExecutionPlanID `thrift:"kill_queries,1" db:"kill_queries" json:"kill_queries"`
}

func NewKillQueryReq() *KillQueryReq {
  return &KillQueryReq{}
}


func (p *KillQueryReq) GetKillQueries() map[nebula0.SessionID][]nebula0.ExecutionPlanID {
  return p.KillQueries
}
type KillQueryReqBuilder struct {
  obj *KillQueryReq
}

func NewKillQueryReqBuilder() *KillQueryReqBuilder{
  return &KillQueryReqBuilder{
    obj: NewKillQueryReq(),
  }
}

func (p KillQueryReqBuilder) Emit() *KillQueryReq{
  return &KillQueryReq{
    KillQueries: p.obj.KillQueries,
  }
}

func (k *KillQueryReqBuilder) KillQueries(killQueries map[nebula0.SessionID][]nebula0.ExecutionPlanID) *KillQueryReqBuilder {
  k.obj.KillQueries = killQueries
  return k
}

func (k *KillQueryReq) SetKillQueries(killQueries map[nebula0.SessionID][]nebula0.ExecutionPlanID) *KillQueryReq {
  k.KillQueries = killQueries
  return k
}

func (p *KillQueryReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KillQueryReq)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.SessionID][]nebula0.ExecutionPlanID, size)
  p.KillQueries =  tMap
  for i := 0; i < size; i ++ {
    var _key104 nebula0.SessionID
    if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      temp := nebula0.SessionID(v)
      _key104 = temp
    }
    _, size, err := iprot.ReadSetBegin()
    if err != nil {
      return thrift.PrependError("error reading set begin: ", err)
    }
    tSet := make([]nebula0.ExecutionPlanID, 0, size)
    _val105 :=  tSet
    for i := 0; i < size; i ++ {
      var _elem106 nebula0.ExecutionPlanID
      if v, err := iprot.ReadI64(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
      } else {
        temp := nebula0.ExecutionPlanID(v)
        _elem106 = temp
      }
      _val105 = append(_val105, _elem106)
    }
    if err := iprot.ReadSetEnd(); err != nil {
      return thrift.PrependError("error reading set end: ", err)
    }
    p.KillQueries[_key104] = _val105
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *KillQueryReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("KillQueryReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KillQueryReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("kill_queries", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kill_queries: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.SET, len(p.KillQueries)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KillQueries {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.I64, len(v)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[nebula0.ExecutionPlanID]bool, len(v))
    for _, v := range v {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range v {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kill_queries: ", p), err) }
  return err
}

func (p *KillQueryReq) String() string {
  if p == nil {
    return "<nil>"
  }

  killQueriesVal := fmt.Sprintf("%v", p.KillQueries)
  return fmt.Sprintf("KillQueryReq({KillQueries:%s})", killQueriesVal)
}

// Attributes:
//  - Code
//  - SpaceID
//  - JobID
//  - TaskID
//  - Stats
type ReportTaskReq struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  JobID int32 `thrift:"job_id,3" db:"job_id" json:"job_id"`
  TaskID int32 `thrift:"task_id,4" db:"task_id" json:"task_id"`
  Stats *StatsItem `thrift:"stats,5,optional" db:"stats" json:"stats,omitempty"`
}

func NewReportTaskReq() *ReportTaskReq {
  return &ReportTaskReq{}
}


func (p *ReportTaskReq) GetCode() nebula0.ErrorCode {
  return p.Code
}

func (p *ReportTaskReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ReportTaskReq) GetJobID() int32 {
  return p.JobID
}

func (p *ReportTaskReq) GetTaskID() int32 {
  return p.TaskID
}
var ReportTaskReq_Stats_DEFAULT *StatsItem
func (p *ReportTaskReq) GetStats() *StatsItem {
  if !p.IsSetStats() {
    return ReportTaskReq_Stats_DEFAULT
  }
return p.Stats
}
func (p *ReportTaskReq) IsSetStats() bool {
  return p != nil && p.Stats != nil
}

type ReportTaskReqBuilder struct {
  obj *ReportTaskReq
}

func NewReportTaskReqBuilder() *ReportTaskReqBuilder{
  return &ReportTaskReqBuilder{
    obj: NewReportTaskReq(),
  }
}

func (p ReportTaskReqBuilder) Emit() *ReportTaskReq{
  return &ReportTaskReq{
    Code: p.obj.Code,
    SpaceID: p.obj.SpaceID,
    JobID: p.obj.JobID,
    TaskID: p.obj.TaskID,
    Stats: p.obj.Stats,
  }
}

func (r *ReportTaskReqBuilder) Code(code nebula0.ErrorCode) *ReportTaskReqBuilder {
  r.obj.Code = code
  return r
}

func (r *ReportTaskReqBuilder) SpaceID(spaceID nebula0.GraphSpaceID) *ReportTaskReqBuilder {
  r.obj.SpaceID = spaceID
  return r
}

func (r *ReportTaskReqBuilder) JobID(jobID int32) *ReportTaskReqBuilder {
  r.obj.JobID = jobID
  return r
}

func (r *ReportTaskReqBuilder) TaskID(taskID int32) *ReportTaskReqBuilder {
  r.obj.TaskID = taskID
  return r
}

func (r *ReportTaskReqBuilder) Stats(stats *StatsItem) *ReportTaskReqBuilder {
  r.obj.Stats = stats
  return r
}

func (r *ReportTaskReq) SetCode(code nebula0.ErrorCode) *ReportTaskReq {
  r.Code = code
  return r
}

func (r *ReportTaskReq) SetSpaceID(spaceID nebula0.GraphSpaceID) *ReportTaskReq {
  r.SpaceID = spaceID
  return r
}

func (r *ReportTaskReq) SetJobID(jobID int32) *ReportTaskReq {
  r.JobID = jobID
  return r
}

func (r *ReportTaskReq) SetTaskID(taskID int32) *ReportTaskReq {
  r.TaskID = taskID
  return r
}

func (r *ReportTaskReq) SetStats(stats *StatsItem) *ReportTaskReq {
  r.Stats = stats
  return r
}

func (p *ReportTaskReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportTaskReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ReportTaskReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := nebula0.GraphSpaceID(v)
    p.SpaceID = temp
  }
  return nil
}

func (p *ReportTaskReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.JobID = v
  }
  return nil
}

func (p *ReportTaskReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.TaskID = v
  }
  return nil
}

func (p *ReportTaskReq)  ReadField5(iprot thrift.Protocol) error {
  p.Stats = NewStatsItem()
  if err := p.Stats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stats), err)
  }
  return nil
}

func (p *ReportTaskReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ReportTaskReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportTaskReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:job_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("task_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:task_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:task_id: ", p), err) }
  return err
}

func (p *ReportTaskReq) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetStats() {
    if err := oprot.WriteFieldBegin("stats", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stats: ", p), err) }
    if err := p.Stats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stats: ", p), err) }
  }
  return err
}

func (p *ReportTaskReq) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  spaceIDVal := fmt.Sprintf("%v", p.SpaceID)
  jobIDVal := fmt.Sprintf("%v", p.JobID)
  taskIDVal := fmt.Sprintf("%v", p.TaskID)
  var statsVal string
  if p.Stats == nil {
    statsVal = "<nil>"
  } else {
    statsVal = fmt.Sprintf("%v", p.Stats)
  }
  return fmt.Sprintf("ReportTaskReq({Code:%s SpaceID:%s JobID:%s TaskID:%s Stats:%s})", codeVal, spaceIDVal, jobIDVal, taskIDVal, statsVal)
}

// Attributes:
//  - Code
//  - Leader
//  - HostServices
type ListClusterInfoResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  HostServices map[string][]*ServiceInfo `thrift:"host_services,3" db:"host_services" json:"host_services"`
}

func NewListClusterInfoResp() *ListClusterInfoResp {
  return &ListClusterInfoResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *ListClusterInfoResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var ListClusterInfoResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListClusterInfoResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListClusterInfoResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListClusterInfoResp) GetHostServices() map[string][]*ServiceInfo {
  return p.HostServices
}
func (p *ListClusterInfoResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

type ListClusterInfoRespBuilder struct {
  obj *ListClusterInfoResp
}

func NewListClusterInfoRespBuilder() *ListClusterInfoRespBuilder{
  return &ListClusterInfoRespBuilder{
    obj: NewListClusterInfoResp(),
  }
}

func (p ListClusterInfoRespBuilder) Emit() *ListClusterInfoResp{
  return &ListClusterInfoResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    HostServices: p.obj.HostServices,
  }
}

func (l *ListClusterInfoRespBuilder) Code(code nebula0.ErrorCode) *ListClusterInfoRespBuilder {
  l.obj.Code = code
  return l
}

func (l *ListClusterInfoRespBuilder) Leader(leader *nebula0.HostAddr) *ListClusterInfoRespBuilder {
  l.obj.Leader = leader
  return l
}

func (l *ListClusterInfoRespBuilder) HostServices(hostServices map[string][]*ServiceInfo) *ListClusterInfoRespBuilder {
  l.obj.HostServices = hostServices
  return l
}

func (l *ListClusterInfoResp) SetCode(code nebula0.ErrorCode) *ListClusterInfoResp {
  l.Code = code
  return l
}

func (l *ListClusterInfoResp) SetLeader(leader *nebula0.HostAddr) *ListClusterInfoResp {
  l.Leader = leader
  return l
}

func (l *ListClusterInfoResp) SetHostServices(hostServices map[string][]*ServiceInfo) *ListClusterInfoResp {
  l.HostServices = hostServices
  return l
}

func (p *ListClusterInfoResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListClusterInfoResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ServiceInfo, size)
  p.HostServices =  tMap
  for i := 0; i < size; i ++ {
    var _key107 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key107 = v
    }
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ServiceInfo, 0, size)
    _val108 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem109 := NewServiceInfo()
      if err := _elem109.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem109), err)
      }
      _val108 = append(_val108, _elem109)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.HostServices[_key107] = _val108
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListClusterInfoResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListClusterInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host_services", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host_services: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.HostServices)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.HostServices {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host_services: ", p), err) }
  return err
}

func (p *ListClusterInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  hostServicesVal := fmt.Sprintf("%v", p.HostServices)
  return fmt.Sprintf("ListClusterInfoResp({Code:%s Leader:%s HostServices:%s})", codeVal, leaderVal, hostServicesVal)
}

type ListClusterInfoReq struct {
}

func NewListClusterInfoReq() *ListClusterInfoReq {
  return &ListClusterInfoReq{}
}

type ListClusterInfoReqBuilder struct {
  obj *ListClusterInfoReq
}

func NewListClusterInfoReqBuilder() *ListClusterInfoReqBuilder{
  return &ListClusterInfoReqBuilder{
    obj: NewListClusterInfoReq(),
  }
}

func (p ListClusterInfoReqBuilder) Emit() *ListClusterInfoReq{
  return &ListClusterInfoReq{
  }
}

func (p *ListClusterInfoReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListClusterInfoReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListClusterInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListClusterInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("ListClusterInfoReq({})")
}

// Attributes:
//  - Code
//  - Dir
type GetMetaDirInfoResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Dir *nebula0.DirInfo `thrift:"dir,2" db:"dir" json:"dir"`
}

func NewGetMetaDirInfoResp() *GetMetaDirInfoResp {
  return &GetMetaDirInfoResp{
    Dir: nebula0.NewDirInfo(),
  }
}


func (p *GetMetaDirInfoResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var GetMetaDirInfoResp_Dir_DEFAULT *nebula0.DirInfo
func (p *GetMetaDirInfoResp) GetDir() *nebula0.DirInfo {
  if !p.IsSetDir() {
    return GetMetaDirInfoResp_Dir_DEFAULT
  }
return p.Dir
}
func (p *GetMetaDirInfoResp) IsSetDir() bool {
  return p != nil && p.Dir != nil
}

type GetMetaDirInfoRespBuilder struct {
  obj *GetMetaDirInfoResp
}

func NewGetMetaDirInfoRespBuilder() *GetMetaDirInfoRespBuilder{
  return &GetMetaDirInfoRespBuilder{
    obj: NewGetMetaDirInfoResp(),
  }
}

func (p GetMetaDirInfoRespBuilder) Emit() *GetMetaDirInfoResp{
  return &GetMetaDirInfoResp{
    Code: p.obj.Code,
    Dir: p.obj.Dir,
  }
}

func (g *GetMetaDirInfoRespBuilder) Code(code nebula0.ErrorCode) *GetMetaDirInfoRespBuilder {
  g.obj.Code = code
  return g
}

func (g *GetMetaDirInfoRespBuilder) Dir(dir *nebula0.DirInfo) *GetMetaDirInfoRespBuilder {
  g.obj.Dir = dir
  return g
}

func (g *GetMetaDirInfoResp) SetCode(code nebula0.ErrorCode) *GetMetaDirInfoResp {
  g.Code = code
  return g
}

func (g *GetMetaDirInfoResp) SetDir(dir *nebula0.DirInfo) *GetMetaDirInfoResp {
  g.Dir = dir
  return g
}

func (p *GetMetaDirInfoResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMetaDirInfoResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *GetMetaDirInfoResp)  ReadField2(iprot thrift.Protocol) error {
  p.Dir = nebula0.NewDirInfo()
  if err := p.Dir.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Dir), err)
  }
  return nil
}

func (p *GetMetaDirInfoResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetMetaDirInfoResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMetaDirInfoResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetMetaDirInfoResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dir: ", p), err) }
  if err := p.Dir.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Dir), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dir: ", p), err) }
  return err
}

func (p *GetMetaDirInfoResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var dirVal string
  if p.Dir == nil {
    dirVal = "<nil>"
  } else {
    dirVal = fmt.Sprintf("%v", p.Dir)
  }
  return fmt.Sprintf("GetMetaDirInfoResp({Code:%s Dir:%s})", codeVal, dirVal)
}

type GetMetaDirInfoReq struct {
}

func NewGetMetaDirInfoReq() *GetMetaDirInfoReq {
  return &GetMetaDirInfoReq{}
}

type GetMetaDirInfoReqBuilder struct {
  obj *GetMetaDirInfoReq
}

func NewGetMetaDirInfoReqBuilder() *GetMetaDirInfoReqBuilder{
  return &GetMetaDirInfoReqBuilder{
    obj: NewGetMetaDirInfoReq(),
  }
}

func (p GetMetaDirInfoReqBuilder) Emit() *GetMetaDirInfoReq{
  return &GetMetaDirInfoReq{
  }
}

func (p *GetMetaDirInfoReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetMetaDirInfoReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetMetaDirInfoReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetMetaDirInfoReq) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("GetMetaDirInfoReq({})")
}

// Attributes:
//  - Code
//  - Leader
//  - ErrorMsg
type VerifyClientVersionResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ErrorMsg []byte `thrift:"error_msg,3,optional" db:"error_msg" json:"error_msg,omitempty"`
}

func NewVerifyClientVersionResp() *VerifyClientVersionResp {
  return &VerifyClientVersionResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *VerifyClientVersionResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var VerifyClientVersionResp_Leader_DEFAULT *nebula0.HostAddr
func (p *VerifyClientVersionResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return VerifyClientVersionResp_Leader_DEFAULT
  }
return p.Leader
}
var VerifyClientVersionResp_ErrorMsg_DEFAULT []byte

func (p *VerifyClientVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *VerifyClientVersionResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *VerifyClientVersionResp) IsSetErrorMsg() bool {
  return p != nil && p.ErrorMsg != nil
}

type VerifyClientVersionRespBuilder struct {
  obj *VerifyClientVersionResp
}

func NewVerifyClientVersionRespBuilder() *VerifyClientVersionRespBuilder{
  return &VerifyClientVersionRespBuilder{
    obj: NewVerifyClientVersionResp(),
  }
}

func (p VerifyClientVersionRespBuilder) Emit() *VerifyClientVersionResp{
  return &VerifyClientVersionResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    ErrorMsg: p.obj.ErrorMsg,
  }
}

func (v *VerifyClientVersionRespBuilder) Code(code nebula0.ErrorCode) *VerifyClientVersionRespBuilder {
  v.obj.Code = code
  return v
}

func (v *VerifyClientVersionRespBuilder) Leader(leader *nebula0.HostAddr) *VerifyClientVersionRespBuilder {
  v.obj.Leader = leader
  return v
}

func (v *VerifyClientVersionRespBuilder) ErrorMsg(errorMsg []byte) *VerifyClientVersionRespBuilder {
  v.obj.ErrorMsg = errorMsg
  return v
}

func (v *VerifyClientVersionResp) SetCode(code nebula0.ErrorCode) *VerifyClientVersionResp {
  v.Code = code
  return v
}

func (v *VerifyClientVersionResp) SetLeader(leader *nebula0.HostAddr) *VerifyClientVersionResp {
  v.Leader = leader
  return v
}

func (v *VerifyClientVersionResp) SetErrorMsg(errorMsg []byte) *VerifyClientVersionResp {
  v.ErrorMsg = errorMsg
  return v
}

func (p *VerifyClientVersionResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ErrorMsg = v
  }
  return nil
}

func (p *VerifyClientVersionResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VerifyClientVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error_msg: ", p), err) }
  }
  return err
}

func (p *VerifyClientVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  errorMsgVal := fmt.Sprintf("%v", p.ErrorMsg)
  return fmt.Sprintf("VerifyClientVersionResp({Code:%s Leader:%s ErrorMsg:%s})", codeVal, leaderVal, errorMsgVal)
}

// Attributes:
//  - ClientVersion
//  - Host
//  - BuildVersion
type VerifyClientVersionReq struct {
  ClientVersion []byte `thrift:"client_version,1,required" db:"client_version" json:"client_version"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  BuildVersion []byte `thrift:"build_version,3" db:"build_version" json:"build_version"`
}

func NewVerifyClientVersionReq() *VerifyClientVersionReq {
  return &VerifyClientVersionReq{
    ClientVersion: []byte("3.0.0"),
    Host: nebula0.NewHostAddr(),
  }
}


func (p *VerifyClientVersionReq) GetClientVersion() []byte {
  return p.ClientVersion
}
var VerifyClientVersionReq_Host_DEFAULT *nebula0.HostAddr
func (p *VerifyClientVersionReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return VerifyClientVersionReq_Host_DEFAULT
  }
return p.Host
}

func (p *VerifyClientVersionReq) GetBuildVersion() []byte {
  return p.BuildVersion
}
func (p *VerifyClientVersionReq) IsSetHost() bool {
  return p != nil && p.Host != nil
}

type VerifyClientVersionReqBuilder struct {
  obj *VerifyClientVersionReq
}

func NewVerifyClientVersionReqBuilder() *VerifyClientVersionReqBuilder{
  return &VerifyClientVersionReqBuilder{
    obj: NewVerifyClientVersionReq(),
  }
}

func (p VerifyClientVersionReqBuilder) Emit() *VerifyClientVersionReq{
  return &VerifyClientVersionReq{
    ClientVersion: p.obj.ClientVersion,
    Host: p.obj.Host,
    BuildVersion: p.obj.BuildVersion,
  }
}

func (v *VerifyClientVersionReqBuilder) ClientVersion(clientVersion []byte) *VerifyClientVersionReqBuilder {
  v.obj.ClientVersion = clientVersion
  return v
}

func (v *VerifyClientVersionReqBuilder) Host(host *nebula0.HostAddr) *VerifyClientVersionReqBuilder {
  v.obj.Host = host
  return v
}

func (v *VerifyClientVersionReqBuilder) BuildVersion(buildVersion []byte) *VerifyClientVersionReqBuilder {
  v.obj.BuildVersion = buildVersion
  return v
}

func (v *VerifyClientVersionReq) SetClientVersion(clientVersion []byte) *VerifyClientVersionReq {
  v.ClientVersion = clientVersion
  return v
}

func (v *VerifyClientVersionReq) SetHost(host *nebula0.HostAddr) *VerifyClientVersionReq {
  v.Host = host
  return v
}

func (v *VerifyClientVersionReq) SetBuildVersion(buildVersion []byte) *VerifyClientVersionReq {
  v.BuildVersion = buildVersion
  return v
}

func (p *VerifyClientVersionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClientVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetClientVersion = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClientVersion{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientVersion is not set"));
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ClientVersion = v
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.BuildVersion = v
  }
  return nil
}

func (p *VerifyClientVersionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("VerifyClientVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("client_version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_version: ", p), err) }
  if err := oprot.WriteBinary(p.ClientVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("build_version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:build_version: ", p), err) }
  if err := oprot.WriteBinary(p.BuildVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.build_version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:build_version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  clientVersionVal := fmt.Sprintf("%v", p.ClientVersion)
  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  buildVersionVal := fmt.Sprintf("%v", p.BuildVersion)
  return fmt.Sprintf("VerifyClientVersionReq({ClientVersion:%s Host:%s BuildVersion:%s})", clientVersionVal, hostVal, buildVersionVal)
}

// Attributes:
//  - Code
//  - Leader
//  - ErrorMsg
type SaveGraphVersionResp struct {
  Code nebula0.ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ErrorMsg []byte `thrift:"error_msg,3,optional" db:"error_msg" json:"error_msg,omitempty"`
}

func NewSaveGraphVersionResp() *SaveGraphVersionResp {
  return &SaveGraphVersionResp{
    Leader: nebula0.NewHostAddr(),
  }
}


func (p *SaveGraphVersionResp) GetCode() nebula0.ErrorCode {
  return p.Code
}
var SaveGraphVersionResp_Leader_DEFAULT *nebula0.HostAddr
func (p *SaveGraphVersionResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return SaveGraphVersionResp_Leader_DEFAULT
  }
return p.Leader
}
var SaveGraphVersionResp_ErrorMsg_DEFAULT []byte

func (p *SaveGraphVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *SaveGraphVersionResp) IsSetLeader() bool {
  return p != nil && p.Leader != nil
}

func (p *SaveGraphVersionResp) IsSetErrorMsg() bool {
  return p != nil && p.ErrorMsg != nil
}

type SaveGraphVersionRespBuilder struct {
  obj *SaveGraphVersionResp
}

func NewSaveGraphVersionRespBuilder() *SaveGraphVersionRespBuilder{
  return &SaveGraphVersionRespBuilder{
    obj: NewSaveGraphVersionResp(),
  }
}

func (p SaveGraphVersionRespBuilder) Emit() *SaveGraphVersionResp{
  return &SaveGraphVersionResp{
    Code: p.obj.Code,
    Leader: p.obj.Leader,
    ErrorMsg: p.obj.ErrorMsg,
  }
}

func (s *SaveGraphVersionRespBuilder) Code(code nebula0.ErrorCode) *SaveGraphVersionRespBuilder {
  s.obj.Code = code
  return s
}

func (s *SaveGraphVersionRespBuilder) Leader(leader *nebula0.HostAddr) *SaveGraphVersionRespBuilder {
  s.obj.Leader = leader
  return s
}

func (s *SaveGraphVersionRespBuilder) ErrorMsg(errorMsg []byte) *SaveGraphVersionRespBuilder {
  s.obj.ErrorMsg = errorMsg
  return s
}

func (s *SaveGraphVersionResp) SetCode(code nebula0.ErrorCode) *SaveGraphVersionResp {
  s.Code = code
  return s
}

func (s *SaveGraphVersionResp) SetLeader(leader *nebula0.HostAddr) *SaveGraphVersionResp {
  s.Leader = leader
  return s
}

func (s *SaveGraphVersionResp) SetErrorMsg(errorMsg []byte) *SaveGraphVersionResp {
  s.ErrorMsg = errorMsg
  return s
}

func (p *SaveGraphVersionResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SaveGraphVersionResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := nebula0.ErrorCode(v)
    p.Code = temp
  }
  return nil
}

func (p *SaveGraphVersionResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *SaveGraphVersionResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.ErrorMsg = v
  }
  return nil
}

func (p *SaveGraphVersionResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SaveGraphVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveGraphVersionResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *SaveGraphVersionResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *SaveGraphVersionResp) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error_msg: ", p), err) }
  }
  return err
}

func (p *SaveGraphVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }

  codeVal := fmt.Sprintf("%v", p.Code)
  var leaderVal string
  if p.Leader == nil {
    leaderVal = "<nil>"
  } else {
    leaderVal = fmt.Sprintf("%v", p.Leader)
  }
  errorMsgVal := fmt.Sprintf("%v", p.ErrorMsg)
  return fmt.Sprintf("SaveGraphVersionResp({Code:%s Leader:%s ErrorMsg:%s})", codeVal, leaderVal, errorMsgVal)
}

// Attributes:
//  - ClientVersion
//  - Host
//  - BuildVersion
type SaveGraphVersionReq struct {
  ClientVersion []byte `thrift:"client_version,1,required" db:"client_version" json:"client_version"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  BuildVersion []byte `thrift:"build_version,3" db:"build_version" json:"build_version"`
}

func NewSaveGraphVersionReq() *SaveGraphVersionReq {
  return &SaveGraphVersionReq{
    ClientVersion: []byte("3.0.0"),
    Host: nebula0.NewHostAddr(),
  }
}


func (p *SaveGraphVersionReq) GetClientVersion() []byte {
  return p.ClientVersion
}
var SaveGraphVersionReq_Host_DEFAULT *nebula0.HostAddr
func (p *SaveGraphVersionReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return SaveGraphVersionReq_Host_DEFAULT
  }
return p.Host
}

func (p *SaveGraphVersionReq) GetBuildVersion() []byte {
  return p.BuildVersion
}
func (p *SaveGraphVersionReq) IsSetHost() bool {
  return p != nil && p.Host != nil
}

type SaveGraphVersionReqBuilder struct {
  obj *SaveGraphVersionReq
}

func NewSaveGraphVersionReqBuilder() *SaveGraphVersionReqBuilder{
  return &SaveGraphVersionReqBuilder{
    obj: NewSaveGraphVersionReq(),
  }
}

func (p SaveGraphVersionReqBuilder) Emit() *SaveGraphVersionReq{
  return &SaveGraphVersionReq{
    ClientVersion: p.obj.ClientVersion,
    Host: p.obj.Host,
    BuildVersion: p.obj.BuildVersion,
  }
}

func (s *SaveGraphVersionReqBuilder) ClientVersion(clientVersion []byte) *SaveGraphVersionReqBuilder {
  s.obj.ClientVersion = clientVersion
  return s
}

func (s *SaveGraphVersionReqBuilder) Host(host *nebula0.HostAddr) *SaveGraphVersionReqBuilder {
  s.obj.Host = host
  return s
}

func (s *SaveGraphVersionReqBuilder) BuildVersion(buildVersion []byte) *SaveGraphVersionReqBuilder {
  s.obj.BuildVersion = buildVersion
  return s
}

func (s *SaveGraphVersionReq) SetClientVersion(clientVersion []byte) *SaveGraphVersionReq {
  s.ClientVersion = clientVersion
  return s
}

func (s *SaveGraphVersionReq) SetHost(host *nebula0.HostAddr) *SaveGraphVersionReq {
  s.Host = host
  return s
}

func (s *SaveGraphVersionReq) SetBuildVersion(buildVersion []byte) *SaveGraphVersionReq {
  s.BuildVersion = buildVersion
  return s
}

func (p *SaveGraphVersionReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetClientVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetClientVersion = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetClientVersion{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClientVersion is not set"));
  }
  return nil
}

func (p *SaveGraphVersionReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.ClientVersion = v
  }
  return nil
}

func (p *SaveGraphVersionReq)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *SaveGraphVersionReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.BuildVersion = v
  }
  return nil
}

func (p *SaveGraphVersionReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SaveGraphVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveGraphVersionReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("client_version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client_version: ", p), err) }
  if err := oprot.WriteBinary(p.ClientVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client_version: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("build_version", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:build_version: ", p), err) }
  if err := oprot.WriteBinary(p.BuildVersion); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.build_version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:build_version: ", p), err) }
  return err
}

func (p *SaveGraphVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }

  clientVersionVal := fmt.Sprintf("%v", p.ClientVersion)
  var hostVal string
  if p.Host == nil {
    hostVal = "<nil>"
  } else {
    hostVal = fmt.Sprintf("%v", p.Host)
  }
  buildVersionVal := fmt.Sprintf("%v", p.BuildVersion)
  return fmt.Sprintf("SaveGraphVersionReq({ClientVersion:%s Host:%s BuildVersion:%s})", clientVersionVal, hostVal, buildVersionVal)
}

