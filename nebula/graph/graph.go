// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/vesoft-inc/nebula-go/v3/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = nebula.GoUnusedProtection__
// Attributes:
//  - Rows
//  - ExecDurationInUs
//  - TotalDurationInUs
//  - OtherStats
type ProfilingStats struct {
  Rows int64 `thrift:"rows,1,required" db:"rows" json:"rows"`
  ExecDurationInUs int64 `thrift:"exec_duration_in_us,2,required" db:"exec_duration_in_us" json:"exec_duration_in_us"`
  TotalDurationInUs int64 `thrift:"total_duration_in_us,3,required" db:"total_duration_in_us" json:"total_duration_in_us"`
  OtherStats map[string][]byte `thrift:"other_stats,4" db:"other_stats" json:"other_stats,omitempty"`
}

func NewProfilingStats() *ProfilingStats {
  return &ProfilingStats{}
}


func (p *ProfilingStats) GetRows() int64 {
  return p.Rows
}

func (p *ProfilingStats) GetExecDurationInUs() int64 {
  return p.ExecDurationInUs
}

func (p *ProfilingStats) GetTotalDurationInUs() int64 {
  return p.TotalDurationInUs
}
var ProfilingStats_OtherStats_DEFAULT map[string][]byte

func (p *ProfilingStats) GetOtherStats() map[string][]byte {
  return p.OtherStats
}
func (p *ProfilingStats) IsSetOtherStats() bool {
  return p.OtherStats != nil
}

func (p *ProfilingStats) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRows bool = false;
  var issetExecDurationInUs bool = false;
  var issetTotalDurationInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRows = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetExecDurationInUs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTotalDurationInUs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRows{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Rows is not set"));
  }
  if !issetExecDurationInUs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ExecDurationInUs is not set"));
  }
  if !issetTotalDurationInUs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalDurationInUs is not set"));
  }
  return nil
}

func (p *ProfilingStats)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Rows = v
}
  return nil
}

func (p *ProfilingStats)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExecDurationInUs = v
}
  return nil
}

func (p *ProfilingStats)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalDurationInUs = v
}
  return nil
}

func (p *ProfilingStats)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.OtherStats =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.OtherStats[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfilingStats) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProfilingStats"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfilingStats) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rows", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rows: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Rows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rows: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "exec_duration_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:exec_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExecDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exec_duration_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:exec_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "total_duration_in_us", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_duration_in_us: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalDurationInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_duration_in_us (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_duration_in_us: ", p), err) }
  return err
}

func (p *ProfilingStats) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOtherStats() {
    if err := oprot.WriteFieldBegin(ctx, "other_stats", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:other_stats: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.OtherStats)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OtherStats {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:other_stats: ", p), err) }
  }
  return err
}

func (p *ProfilingStats) Equals(other *ProfilingStats) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Rows != other.Rows { return false }
  if p.ExecDurationInUs != other.ExecDurationInUs { return false }
  if p.TotalDurationInUs != other.TotalDurationInUs { return false }
  if len(p.OtherStats) != len(other.OtherStats) { return false }
  for k, _tgt := range p.OtherStats {
    _src2 := other.OtherStats[k]
    if bytes.Compare(_tgt, _src2) != 0 { return false }
  }
  return true
}

func (p *ProfilingStats) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfilingStats(%+v)", *p)
}

func (p *ProfilingStats) Validate() error {
  return nil
}
// Attributes:
//  - IsDoBranch
//  - ConditionNodeID
type PlanNodeBranchInfo struct {
  IsDoBranch bool `thrift:"is_do_branch,1,required" db:"is_do_branch" json:"is_do_branch"`
  ConditionNodeID int64 `thrift:"condition_node_id,2,required" db:"condition_node_id" json:"condition_node_id"`
}

func NewPlanNodeBranchInfo() *PlanNodeBranchInfo {
  return &PlanNodeBranchInfo{}
}


func (p *PlanNodeBranchInfo) GetIsDoBranch() bool {
  return p.IsDoBranch
}

func (p *PlanNodeBranchInfo) GetConditionNodeID() int64 {
  return p.ConditionNodeID
}
func (p *PlanNodeBranchInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsDoBranch bool = false;
  var issetConditionNodeID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIsDoBranch = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetConditionNodeID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsDoBranch{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsDoBranch is not set"));
  }
  if !issetConditionNodeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ConditionNodeID is not set"));
  }
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsDoBranch = v
}
  return nil
}

func (p *PlanNodeBranchInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConditionNodeID = v
}
  return nil
}

func (p *PlanNodeBranchInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PlanNodeBranchInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeBranchInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_do_branch", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_do_branch: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDoBranch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_do_branch (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_do_branch: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "condition_node_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:condition_node_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ConditionNodeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.condition_node_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:condition_node_id: ", p), err) }
  return err
}

func (p *PlanNodeBranchInfo) Equals(other *PlanNodeBranchInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsDoBranch != other.IsDoBranch { return false }
  if p.ConditionNodeID != other.ConditionNodeID { return false }
  return true
}

func (p *PlanNodeBranchInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanNodeBranchInfo(%+v)", *p)
}

func (p *PlanNodeBranchInfo) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Value
type Pair struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewPair() *Pair {
  return &Pair{}
}


func (p *Pair) GetKey() []byte {
  return p.Key
}

func (p *Pair) GetValue() []byte {
  return p.Value
}
func (p *Pair) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *Pair)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Pair)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Pair) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Pair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pair) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Pair) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Pair) Equals(other *Pair) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Key, other.Key) != 0 { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *Pair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pair(%+v)", *p)
}

func (p *Pair) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - ID
//  - OutputVar
//  - Description
//  - Profiles
//  - BranchInfo
//  - Dependencies
type PlanNodeDescription struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  ID int64 `thrift:"id,2,required" db:"id" json:"id"`
  OutputVar []byte `thrift:"output_var,3,required" db:"output_var" json:"output_var"`
  Description []*Pair `thrift:"description,4" db:"description" json:"description,omitempty"`
  Profiles []*ProfilingStats `thrift:"profiles,5" db:"profiles" json:"profiles,omitempty"`
  BranchInfo *PlanNodeBranchInfo `thrift:"branch_info,6" db:"branch_info" json:"branch_info,omitempty"`
  Dependencies []int64 `thrift:"dependencies,7" db:"dependencies" json:"dependencies,omitempty"`
}

func NewPlanNodeDescription() *PlanNodeDescription {
  return &PlanNodeDescription{}
}


func (p *PlanNodeDescription) GetName() []byte {
  return p.Name
}

func (p *PlanNodeDescription) GetID() int64 {
  return p.ID
}

func (p *PlanNodeDescription) GetOutputVar() []byte {
  return p.OutputVar
}
var PlanNodeDescription_Description_DEFAULT []*Pair

func (p *PlanNodeDescription) GetDescription() []*Pair {
  return p.Description
}
var PlanNodeDescription_Profiles_DEFAULT []*ProfilingStats

func (p *PlanNodeDescription) GetProfiles() []*ProfilingStats {
  return p.Profiles
}
var PlanNodeDescription_BranchInfo_DEFAULT *PlanNodeBranchInfo
func (p *PlanNodeDescription) GetBranchInfo() *PlanNodeBranchInfo {
  if !p.IsSetBranchInfo() {
    return PlanNodeDescription_BranchInfo_DEFAULT
  }
return p.BranchInfo
}
var PlanNodeDescription_Dependencies_DEFAULT []int64

func (p *PlanNodeDescription) GetDependencies() []int64 {
  return p.Dependencies
}
func (p *PlanNodeDescription) IsSetDescription() bool {
  return p.Description != nil
}

func (p *PlanNodeDescription) IsSetProfiles() bool {
  return p.Profiles != nil
}

func (p *PlanNodeDescription) IsSetBranchInfo() bool {
  return p.BranchInfo != nil
}

func (p *PlanNodeDescription) IsSetDependencies() bool {
  return p.Dependencies != nil
}

func (p *PlanNodeDescription) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetID bool = false;
  var issetOutputVar bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetOutputVar = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetOutputVar{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputVar is not set"));
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutputVar = v
}
  return nil
}

func (p *PlanNodeDescription)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Pair, 0, size)
  p.Description =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &Pair{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Description = append(p.Description, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProfilingStats, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &ProfilingStats{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Profiles = append(p.Profiles, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.BranchInfo = &PlanNodeBranchInfo{}
  if err := p.BranchInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BranchInfo), err)
  }
  return nil
}

func (p *PlanNodeDescription)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Dependencies =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Dependencies = append(p.Dependencies, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanNodeDescription) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PlanNodeDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanNodeDescription) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "output_var", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:output_var: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.OutputVar); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.output_var (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:output_var: ", p), err) }
  return err
}

func (p *PlanNodeDescription) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDescription() {
    if err := oprot.WriteFieldBegin(ctx, "description", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Description)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Description {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProfiles() {
    if err := oprot.WriteFieldBegin(ctx, "profiles", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:profiles: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Profiles)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Profiles {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:profiles: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBranchInfo() {
    if err := oprot.WriteFieldBegin(ctx, "branch_info", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch_info: ", p), err) }
    if err := p.BranchInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BranchInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch_info: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDependencies() {
    if err := oprot.WriteFieldBegin(ctx, "dependencies", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dependencies: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Dependencies)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Dependencies {
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dependencies: ", p), err) }
  }
  return err
}

func (p *PlanNodeDescription) Equals(other *PlanNodeDescription) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Name, other.Name) != 0 { return false }
  if p.ID != other.ID { return false }
  if bytes.Compare(p.OutputVar, other.OutputVar) != 0 { return false }
  if len(p.Description) != len(other.Description) { return false }
  for i, _tgt := range p.Description {
    _src6 := other.Description[i]
    if !_tgt.Equals(_src6) { return false }
  }
  if len(p.Profiles) != len(other.Profiles) { return false }
  for i, _tgt := range p.Profiles {
    _src7 := other.Profiles[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if !p.BranchInfo.Equals(other.BranchInfo) { return false }
  if len(p.Dependencies) != len(other.Dependencies) { return false }
  for i, _tgt := range p.Dependencies {
    _src8 := other.Dependencies[i]
    if _tgt != _src8 { return false }
  }
  return true
}

func (p *PlanNodeDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanNodeDescription(%+v)", *p)
}

func (p *PlanNodeDescription) Validate() error {
  return nil
}
// Attributes:
//  - PlanNodeDescs
//  - NodeIndexMap
//  - Format
//  - OptimizeTimeInUs
type PlanDescription struct {
  PlanNodeDescs []*PlanNodeDescription `thrift:"plan_node_descs,1,required" db:"plan_node_descs" json:"plan_node_descs"`
  NodeIndexMap map[int64]int64 `thrift:"node_index_map,2,required" db:"node_index_map" json:"node_index_map"`
  Format []byte `thrift:"format,3,required" db:"format" json:"format"`
  OptimizeTimeInUs int32 `thrift:"optimize_time_in_us,4,required" db:"optimize_time_in_us" json:"optimize_time_in_us"`
}

func NewPlanDescription() *PlanDescription {
  return &PlanDescription{}
}


func (p *PlanDescription) GetPlanNodeDescs() []*PlanNodeDescription {
  return p.PlanNodeDescs
}

func (p *PlanDescription) GetNodeIndexMap() map[int64]int64 {
  return p.NodeIndexMap
}

func (p *PlanDescription) GetFormat() []byte {
  return p.Format
}

func (p *PlanDescription) GetOptimizeTimeInUs() int32 {
  return p.OptimizeTimeInUs
}
func (p *PlanDescription) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPlanNodeDescs bool = false;
  var issetNodeIndexMap bool = false;
  var issetFormat bool = false;
  var issetOptimizeTimeInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPlanNodeDescs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetNodeIndexMap = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetFormat = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetOptimizeTimeInUs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPlanNodeDescs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PlanNodeDescs is not set"));
  }
  if !issetNodeIndexMap{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeIndexMap is not set"));
  }
  if !issetFormat{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Format is not set"));
  }
  if !issetOptimizeTimeInUs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OptimizeTimeInUs is not set"));
  }
  return nil
}

func (p *PlanDescription)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PlanNodeDescription, 0, size)
  p.PlanNodeDescs =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &PlanNodeDescription{}
    if err := _elem9.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.PlanNodeDescs = append(p.PlanNodeDescs, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]int64, size)
  p.NodeIndexMap =  tMap
  for i := 0; i < size; i ++ {
var _key10 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key10 = v
}
var _val11 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val11 = v
}
    p.NodeIndexMap[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PlanDescription)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *PlanDescription)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OptimizeTimeInUs = v
}
  return nil
}

func (p *PlanDescription) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PlanDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PlanDescription) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "plan_node_descs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:plan_node_descs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PlanNodeDescs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PlanNodeDescs {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:plan_node_descs: ", p), err) }
  return err
}

func (p *PlanDescription) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node_index_map", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node_index_map: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.I64, len(p.NodeIndexMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.NodeIndexMap {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node_index_map: ", p), err) }
  return err
}

func (p *PlanDescription) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "format", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:format: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Format); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:format: ", p), err) }
  return err
}

func (p *PlanDescription) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "optimize_time_in_us", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:optimize_time_in_us: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OptimizeTimeInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optimize_time_in_us (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:optimize_time_in_us: ", p), err) }
  return err
}

func (p *PlanDescription) Equals(other *PlanDescription) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.PlanNodeDescs) != len(other.PlanNodeDescs) { return false }
  for i, _tgt := range p.PlanNodeDescs {
    _src12 := other.PlanNodeDescs[i]
    if !_tgt.Equals(_src12) { return false }
  }
  if len(p.NodeIndexMap) != len(other.NodeIndexMap) { return false }
  for k, _tgt := range p.NodeIndexMap {
    _src13 := other.NodeIndexMap[k]
    if _tgt != _src13 { return false }
  }
  if bytes.Compare(p.Format, other.Format) != 0 { return false }
  if p.OptimizeTimeInUs != other.OptimizeTimeInUs { return false }
  return true
}

func (p *PlanDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PlanDescription(%+v)", *p)
}

func (p *PlanDescription) Validate() error {
  return nil
}
// Attributes:
//  - ErrorCode
//  - LatencyInUs
//  - Data
//  - SpaceName
//  - ErrorMsg
//  - PlanDesc
//  - Comment
type ExecutionResponse struct {
  ErrorCode nebula.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  LatencyInUs int64 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  Data *nebula.DataSet `thrift:"data,3" db:"data" json:"data,omitempty"`
  SpaceName []byte `thrift:"space_name,4" db:"space_name" json:"space_name,omitempty"`
  ErrorMsg []byte `thrift:"error_msg,5" db:"error_msg" json:"error_msg,omitempty"`
  PlanDesc *PlanDescription `thrift:"plan_desc,6" db:"plan_desc" json:"plan_desc,omitempty"`
  Comment []byte `thrift:"comment,7" db:"comment" json:"comment,omitempty"`
}

func NewExecutionResponse() *ExecutionResponse {
  return &ExecutionResponse{}
}


func (p *ExecutionResponse) GetErrorCode() nebula.ErrorCode {
  return p.ErrorCode
}

func (p *ExecutionResponse) GetLatencyInUs() int64 {
  return p.LatencyInUs
}
var ExecutionResponse_Data_DEFAULT *nebula.DataSet
func (p *ExecutionResponse) GetData() *nebula.DataSet {
  if !p.IsSetData() {
    return ExecutionResponse_Data_DEFAULT
  }
return p.Data
}
var ExecutionResponse_SpaceName_DEFAULT []byte

func (p *ExecutionResponse) GetSpaceName() []byte {
  return p.SpaceName
}
var ExecutionResponse_ErrorMsg_DEFAULT []byte

func (p *ExecutionResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var ExecutionResponse_PlanDesc_DEFAULT *PlanDescription
func (p *ExecutionResponse) GetPlanDesc() *PlanDescription {
  if !p.IsSetPlanDesc() {
    return ExecutionResponse_PlanDesc_DEFAULT
  }
return p.PlanDesc
}
var ExecutionResponse_Comment_DEFAULT []byte

func (p *ExecutionResponse) GetComment() []byte {
  return p.Comment
}
func (p *ExecutionResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *ExecutionResponse) IsSetSpaceName() bool {
  return p.SpaceName != nil
}

func (p *ExecutionResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *ExecutionResponse) IsSetPlanDesc() bool {
  return p.PlanDesc != nil
}

func (p *ExecutionResponse) IsSetComment() bool {
  return p.Comment != nil
}

func (p *ExecutionResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLatencyInUs = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ExecutionResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ExecutionResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LatencyInUs = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &nebula.DataSet{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.PlanDesc = &PlanDescription{}
  if err := p.PlanDesc.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PlanDesc), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Comment = v
}
  return nil
}

func (p *ExecutionResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExecutionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecutionResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latency_in_us", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpaceName() {
    if err := oprot.WriteFieldBegin(ctx, "space_name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_name: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.SpaceName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_name: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin(ctx, "error_msg", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_msg: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_msg: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPlanDesc() {
    if err := oprot.WriteFieldBegin(ctx, "plan_desc", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:plan_desc: ", p), err) }
    if err := p.PlanDesc.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PlanDesc), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:plan_desc: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin(ctx, "comment", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:comment: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Comment); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:comment: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) Equals(other *ExecutionResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.LatencyInUs != other.LatencyInUs { return false }
  if !p.Data.Equals(other.Data) { return false }
  if bytes.Compare(p.SpaceName, other.SpaceName) != 0 { return false }
  if bytes.Compare(p.ErrorMsg, other.ErrorMsg) != 0 { return false }
  if !p.PlanDesc.Equals(other.PlanDesc) { return false }
  if bytes.Compare(p.Comment, other.Comment) != 0 { return false }
  return true
}

func (p *ExecutionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecutionResponse(%+v)", *p)
}

func (p *ExecutionResponse) Validate() error {
  return nil
}
// Attributes:
//  - ErrorCode
//  - ErrorMsg
//  - SessionID
//  - TimeZoneOffsetSeconds
//  - TimeZoneName
type AuthResponse struct {
  ErrorCode nebula.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2" db:"error_msg" json:"error_msg,omitempty"`
  SessionID *int64 `thrift:"session_id,3" db:"session_id" json:"session_id,omitempty"`
  TimeZoneOffsetSeconds *int32 `thrift:"time_zone_offset_seconds,4" db:"time_zone_offset_seconds" json:"time_zone_offset_seconds,omitempty"`
  TimeZoneName []byte `thrift:"time_zone_name,5" db:"time_zone_name" json:"time_zone_name,omitempty"`
}

func NewAuthResponse() *AuthResponse {
  return &AuthResponse{}
}


func (p *AuthResponse) GetErrorCode() nebula.ErrorCode {
  return p.ErrorCode
}
var AuthResponse_ErrorMsg_DEFAULT []byte

func (p *AuthResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var AuthResponse_SessionID_DEFAULT int64
func (p *AuthResponse) GetSessionID() int64 {
  if !p.IsSetSessionID() {
    return AuthResponse_SessionID_DEFAULT
  }
return *p.SessionID
}
var AuthResponse_TimeZoneOffsetSeconds_DEFAULT int32
func (p *AuthResponse) GetTimeZoneOffsetSeconds() int32 {
  if !p.IsSetTimeZoneOffsetSeconds() {
    return AuthResponse_TimeZoneOffsetSeconds_DEFAULT
  }
return *p.TimeZoneOffsetSeconds
}
var AuthResponse_TimeZoneName_DEFAULT []byte

func (p *AuthResponse) GetTimeZoneName() []byte {
  return p.TimeZoneName
}
func (p *AuthResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *AuthResponse) IsSetSessionID() bool {
  return p.SessionID != nil
}

func (p *AuthResponse) IsSetTimeZoneOffsetSeconds() bool {
  return p.TimeZoneOffsetSeconds != nil
}

func (p *AuthResponse) IsSetTimeZoneName() bool {
  return p.TimeZoneName != nil
}

func (p *AuthResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *AuthResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AuthResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *AuthResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SessionID = &v
}
  return nil
}

func (p *AuthResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeZoneOffsetSeconds = &v
}
  return nil
}

func (p *AuthResponse)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TimeZoneName = v
}
  return nil
}

func (p *AuthResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AuthResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin(ctx, "error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin(ctx, "session_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session_id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session_id: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeZoneOffsetSeconds() {
    if err := oprot.WriteFieldBegin(ctx, "time_zone_offset_seconds", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:time_zone_offset_seconds: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TimeZoneOffsetSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_zone_offset_seconds (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:time_zone_offset_seconds: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeZoneName() {
    if err := oprot.WriteFieldBegin(ctx, "time_zone_name", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:time_zone_name: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.TimeZoneName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_zone_name (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:time_zone_name: ", p), err) }
  }
  return err
}

func (p *AuthResponse) Equals(other *AuthResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if bytes.Compare(p.ErrorMsg, other.ErrorMsg) != 0 { return false }
  if p.SessionID != other.SessionID {
    if p.SessionID == nil || other.SessionID == nil {
      return false
    }
    if (*p.SessionID) != (*other.SessionID) { return false }
  }
  if p.TimeZoneOffsetSeconds != other.TimeZoneOffsetSeconds {
    if p.TimeZoneOffsetSeconds == nil || other.TimeZoneOffsetSeconds == nil {
      return false
    }
    if (*p.TimeZoneOffsetSeconds) != (*other.TimeZoneOffsetSeconds) { return false }
  }
  if bytes.Compare(p.TimeZoneName, other.TimeZoneName) != 0 { return false }
  return true
}

func (p *AuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthResponse(%+v)", *p)
}

func (p *AuthResponse) Validate() error {
  return nil
}
// Attributes:
//  - ErrorCode
//  - ErrorMsg
type VerifyClientVersionResp struct {
  ErrorCode nebula.ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2" db:"error_msg" json:"error_msg,omitempty"`
}

func NewVerifyClientVersionResp() *VerifyClientVersionResp {
  return &VerifyClientVersionResp{}
}


func (p *VerifyClientVersionResp) GetErrorCode() nebula.ErrorCode {
  return p.ErrorCode
}
var VerifyClientVersionResp_ErrorMsg_DEFAULT []byte

func (p *VerifyClientVersionResp) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *VerifyClientVersionResp) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *VerifyClientVersionResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *VerifyClientVersionResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula.ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *VerifyClientVersionResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *VerifyClientVersionResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyClientVersionResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *VerifyClientVersionResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin(ctx, "error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *VerifyClientVersionResp) Equals(other *VerifyClientVersionResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if bytes.Compare(p.ErrorMsg, other.ErrorMsg) != 0 { return false }
  return true
}

func (p *VerifyClientVersionResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyClientVersionResp(%+v)", *p)
}

func (p *VerifyClientVersionResp) Validate() error {
  return nil
}
// Attributes:
//  - Version
type VerifyClientVersionReq struct {
  Version []byte `thrift:"version,1,required" db:"version" json:"version"`
}

func NewVerifyClientVersionReq() *VerifyClientVersionReq {
  return &VerifyClientVersionReq{
Version: []byte("3.0.0"),
}
}


func (p *VerifyClientVersionReq) GetVersion() []byte {
  return p.Version
}
func (p *VerifyClientVersionReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *VerifyClientVersionReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *VerifyClientVersionReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyClientVersionReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyClientVersionReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Version); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *VerifyClientVersionReq) Equals(other *VerifyClientVersionReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Version, other.Version) != 0 { return false }
  return true
}

func (p *VerifyClientVersionReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyClientVersionReq(%+v)", *p)
}

func (p *VerifyClientVersionReq) Validate() error {
  return nil
}
type GraphService interface {
  // Parameters:
  //  - Username
  //  - Password
  Authenticate(ctx context.Context, username []byte, password []byte) (_r *AuthResponse, _err error)
  // Parameters:
  //  - SessionId
  Signout(ctx context.Context, sessionId int64) (_err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  Execute(ctx context.Context, sessionId int64, stmt []byte) (_r *ExecutionResponse, _err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  //  - ParameterMap
  ExecuteWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) (_r *ExecutionResponse, _err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  ExecuteJson(ctx context.Context, sessionId int64, stmt []byte) (_r []byte, _err error)
  // Parameters:
  //  - SessionId
  //  - Stmt
  //  - ParameterMap
  ExecuteJsonWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) (_r []byte, _err error)
  // Parameters:
  //  - Req
  VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, _err error)
}

type GraphServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewGraphServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GraphServiceClient {
  return &GraphServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewGraphServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GraphServiceClient {
  return &GraphServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewGraphServiceClient(c thrift.TClient) *GraphServiceClient {
  return &GraphServiceClient{
    c: c,
  }
}

func (p *GraphServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *GraphServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *GraphServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Username
//  - Password
func (p *GraphServiceClient) Authenticate(ctx context.Context, username []byte, password []byte) (_r *AuthResponse, _err error) {
  var _args14 GraphServiceAuthenticateArgs
  _args14.Username = username
  _args14.Password = password
  var _result16 GraphServiceAuthenticateResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "authenticate", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "authenticate failed: unknown result")
}

// Parameters:
//  - SessionId
func (p *GraphServiceClient) Signout(ctx context.Context, sessionId int64) (_err error) {
  var _args18 GraphServiceSignoutArgs
  _args18.SessionId = sessionId
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "signout", &_args18, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceClient) Execute(ctx context.Context, sessionId int64, stmt []byte) (_r *ExecutionResponse, _err error) {
  var _args19 GraphServiceExecuteArgs
  _args19.SessionId = sessionId
  _args19.Stmt = stmt
  var _result21 GraphServiceExecuteResult
  var _meta20 thrift.ResponseMeta
  _meta20, _err = p.Client_().Call(ctx, "execute", &_args19, &_result21)
  p.SetLastResponseMeta_(_meta20)
  if _err != nil {
    return
  }
  if _ret22 := _result21.GetSuccess(); _ret22 != nil {
    return _ret22, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "execute failed: unknown result")
}

// Parameters:
//  - SessionId
//  - Stmt
//  - ParameterMap
func (p *GraphServiceClient) ExecuteWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) (_r *ExecutionResponse, _err error) {
  var _args23 GraphServiceExecuteWithParameterArgs
  _args23.SessionId = sessionId
  _args23.Stmt = stmt
  _args23.ParameterMap = parameterMap
  var _result25 GraphServiceExecuteWithParameterResult
  var _meta24 thrift.ResponseMeta
  _meta24, _err = p.Client_().Call(ctx, "executeWithParameter", &_args23, &_result25)
  p.SetLastResponseMeta_(_meta24)
  if _err != nil {
    return
  }
  if _ret26 := _result25.GetSuccess(); _ret26 != nil {
    return _ret26, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "executeWithParameter failed: unknown result")
}

// Parameters:
//  - SessionId
//  - Stmt
func (p *GraphServiceClient) ExecuteJson(ctx context.Context, sessionId int64, stmt []byte) (_r []byte, _err error) {
  var _args27 GraphServiceExecuteJsonArgs
  _args27.SessionId = sessionId
  _args27.Stmt = stmt
  var _result29 GraphServiceExecuteJsonResult
  var _meta28 thrift.ResponseMeta
  _meta28, _err = p.Client_().Call(ctx, "executeJson", &_args27, &_result29)
  p.SetLastResponseMeta_(_meta28)
  if _err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Stmt
//  - ParameterMap
func (p *GraphServiceClient) ExecuteJsonWithParameter(ctx context.Context, sessionId int64, stmt []byte, parameterMap map[string]*nebula.Value) (_r []byte, _err error) {
  var _args30 GraphServiceExecuteJsonWithParameterArgs
  _args30.SessionId = sessionId
  _args30.Stmt = stmt
  _args30.ParameterMap = parameterMap
  var _result32 GraphServiceExecuteJsonWithParameterResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "executeJsonWithParameter", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  return _result32.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphServiceClient) VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, _err error) {
  var _args33 GraphServiceVerifyClientVersionArgs
  _args33.Req = req
  var _result35 GraphServiceVerifyClientVersionResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "verifyClientVersion", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  if _ret36 := _result35.GetSuccess(); _ret36 != nil {
    return _ret36, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "verifyClientVersion failed: unknown result")
}

type GraphServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler GraphService
}

func (p *GraphServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GraphServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GraphServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGraphServiceProcessor(handler GraphService) *GraphServiceProcessor {

  self37 := &GraphServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self37.processorMap["authenticate"] = &graphServiceProcessorAuthenticate{handler:handler}
  self37.processorMap["signout"] = &graphServiceProcessorSignout{handler:handler}
  self37.processorMap["execute"] = &graphServiceProcessorExecute{handler:handler}
  self37.processorMap["executeWithParameter"] = &graphServiceProcessorExecuteWithParameter{handler:handler}
  self37.processorMap["executeJson"] = &graphServiceProcessorExecuteJson{handler:handler}
  self37.processorMap["executeJsonWithParameter"] = &graphServiceProcessorExecuteJsonWithParameter{handler:handler}
  self37.processorMap["verifyClientVersion"] = &graphServiceProcessorVerifyClientVersion{handler:handler}
return self37
}

func (p *GraphServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x38 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x38.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x38

}

type graphServiceProcessorAuthenticate struct {
  handler GraphService
}

func (p *graphServiceProcessorAuthenticate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err39 error
  args := GraphServiceAuthenticateArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "authenticate", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceAuthenticateResult{}
  if retval, err2 := p.handler.Authenticate(ctx, args.Username, args.Password); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc40 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticate: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "authenticate", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := _exc40.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
      _write_err39 = thrift.WrapTException(err2)
    }
    if _write_err39 != nil {
      return false, thrift.WrapTException(_write_err39)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "authenticate", thrift.REPLY, seqId); err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
    _write_err39 = thrift.WrapTException(err2)
  }
  if _write_err39 != nil {
    return false, thrift.WrapTException(_write_err39)
  }
  return true, err
}

type graphServiceProcessorSignout struct {
  handler GraphService
}

func (p *graphServiceProcessorSignout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GraphServiceSignoutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.Signout(ctx, args.SessionId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type graphServiceProcessorExecute struct {
  handler GraphService
}

func (p *graphServiceProcessorExecute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err41 error
  args := GraphServiceExecuteArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceExecuteResult{}
  if retval, err2 := p.handler.Execute(ctx, args.SessionId, args.Stmt); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc42 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "execute", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := _exc42.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
      _write_err41 = thrift.WrapTException(err2)
    }
    if _write_err41 != nil {
      return false, thrift.WrapTException(_write_err41)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "execute", thrift.REPLY, seqId); err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
    _write_err41 = thrift.WrapTException(err2)
  }
  if _write_err41 != nil {
    return false, thrift.WrapTException(_write_err41)
  }
  return true, err
}

type graphServiceProcessorExecuteWithParameter struct {
  handler GraphService
}

func (p *graphServiceProcessorExecuteWithParameter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err43 error
  args := GraphServiceExecuteWithParameterArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "executeWithParameter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceExecuteWithParameterResult{}
  if retval, err2 := p.handler.ExecuteWithParameter(ctx, args.SessionId, args.Stmt, args.ParameterMap); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc44 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeWithParameter: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "executeWithParameter", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := _exc44.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
      _write_err43 = thrift.WrapTException(err2)
    }
    if _write_err43 != nil {
      return false, thrift.WrapTException(_write_err43)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "executeWithParameter", thrift.REPLY, seqId); err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
    _write_err43 = thrift.WrapTException(err2)
  }
  if _write_err43 != nil {
    return false, thrift.WrapTException(_write_err43)
  }
  return true, err
}

type graphServiceProcessorExecuteJson struct {
  handler GraphService
}

func (p *graphServiceProcessorExecuteJson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err45 error
  args := GraphServiceExecuteJsonArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "executeJson", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceExecuteJsonResult{}
  if retval, err2 := p.handler.ExecuteJson(ctx, args.SessionId, args.Stmt); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc46 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeJson: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "executeJson", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := _exc46.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
      _write_err45 = thrift.WrapTException(err2)
    }
    if _write_err45 != nil {
      return false, thrift.WrapTException(_write_err45)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "executeJson", thrift.REPLY, seqId); err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
    _write_err45 = thrift.WrapTException(err2)
  }
  if _write_err45 != nil {
    return false, thrift.WrapTException(_write_err45)
  }
  return true, err
}

type graphServiceProcessorExecuteJsonWithParameter struct {
  handler GraphService
}

func (p *graphServiceProcessorExecuteJsonWithParameter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err47 error
  args := GraphServiceExecuteJsonWithParameterArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "executeJsonWithParameter", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceExecuteJsonWithParameterResult{}
  if retval, err2 := p.handler.ExecuteJsonWithParameter(ctx, args.SessionId, args.Stmt, args.ParameterMap); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc48 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeJsonWithParameter: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "executeJsonWithParameter", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := _exc48.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
      _write_err47 = thrift.WrapTException(err2)
    }
    if _write_err47 != nil {
      return false, thrift.WrapTException(_write_err47)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "executeJsonWithParameter", thrift.REPLY, seqId); err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
    _write_err47 = thrift.WrapTException(err2)
  }
  if _write_err47 != nil {
    return false, thrift.WrapTException(_write_err47)
  }
  return true, err
}

type graphServiceProcessorVerifyClientVersion struct {
  handler GraphService
}

func (p *graphServiceProcessorVerifyClientVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err49 error
  args := GraphServiceVerifyClientVersionArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := GraphServiceVerifyClientVersionResult{}
  if retval, err2 := p.handler.VerifyClientVersion(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc50 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyClientVersion: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := _exc50.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
      _write_err49 = thrift.WrapTException(err2)
    }
    if _write_err49 != nil {
      return false, thrift.WrapTException(_write_err49)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "verifyClientVersion", thrift.REPLY, seqId); err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if _write_err49 != nil {
    return false, thrift.WrapTException(_write_err49)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Username
//  - Password
type GraphServiceAuthenticateArgs struct {
  Username []byte `thrift:"username,1" db:"username" json:"username"`
  Password []byte `thrift:"password,2" db:"password" json:"password"`
}

func NewGraphServiceAuthenticateArgs() *GraphServiceAuthenticateArgs {
  return &GraphServiceAuthenticateArgs{}
}


func (p *GraphServiceAuthenticateArgs) GetUsername() []byte {
  return p.Username
}

func (p *GraphServiceAuthenticateArgs) GetPassword() []byte {
  return p.Password
}
func (p *GraphServiceAuthenticateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *GraphServiceAuthenticateArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *GraphServiceAuthenticateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "authenticate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceAuthenticateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Username); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *GraphServiceAuthenticateArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Password); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *GraphServiceAuthenticateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceAuthenticateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceAuthenticateResult struct {
  Success *AuthResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceAuthenticateResult() *GraphServiceAuthenticateResult {
  return &GraphServiceAuthenticateResult{}
}

var GraphServiceAuthenticateResult_Success_DEFAULT *AuthResponse
func (p *GraphServiceAuthenticateResult) GetSuccess() *AuthResponse {
  if !p.IsSetSuccess() {
    return GraphServiceAuthenticateResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceAuthenticateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceAuthenticateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AuthResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceAuthenticateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "authenticate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceAuthenticateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceAuthenticateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceAuthenticateResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type GraphServiceSignoutArgs struct {
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
}

func NewGraphServiceSignoutArgs() *GraphServiceSignoutArgs {
  return &GraphServiceSignoutArgs{}
}


func (p *GraphServiceSignoutArgs) GetSessionId() int64 {
  return p.SessionId
}
func (p *GraphServiceSignoutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceSignoutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceSignoutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "signout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceSignoutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceSignoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceSignoutArgs(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Stmt
type GraphServiceExecuteArgs struct {
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
}

func NewGraphServiceExecuteArgs() *GraphServiceExecuteArgs {
  return &GraphServiceExecuteArgs{}
}


func (p *GraphServiceExecuteArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteArgs) GetStmt() []byte {
  return p.Stmt
}
func (p *GraphServiceExecuteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceExecuteResult struct {
  Success *ExecutionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteResult() *GraphServiceExecuteResult {
  return &GraphServiceExecuteResult{}
}

var GraphServiceExecuteResult_Success_DEFAULT *ExecutionResponse
func (p *GraphServiceExecuteResult) GetSuccess() *ExecutionResponse {
  if !p.IsSetSuccess() {
    return GraphServiceExecuteResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceExecuteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceExecuteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecutionResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceExecuteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Stmt
//  - ParameterMap
type GraphServiceExecuteWithParameterArgs struct {
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
  ParameterMap map[string]*nebula.Value `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewGraphServiceExecuteWithParameterArgs() *GraphServiceExecuteWithParameterArgs {
  return &GraphServiceExecuteWithParameterArgs{}
}


func (p *GraphServiceExecuteWithParameterArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteWithParameterArgs) GetStmt() []byte {
  return p.Stmt
}

func (p *GraphServiceExecuteWithParameterArgs) GetParameterMap() map[string]*nebula.Value {
  return p.ParameterMap
}
func (p *GraphServiceExecuteWithParameterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteWithParameterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteWithParameterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteWithParameterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*nebula.Value, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key51 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key51 = v
}
    _val52 := &nebula.Value{}
    if err := _val52.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val52), err)
    }
    p.ParameterMap[_key51] = _val52
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GraphServiceExecuteWithParameterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeWithParameter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteWithParameterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteWithParameterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteWithParameterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *GraphServiceExecuteWithParameterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteWithParameterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceExecuteWithParameterResult struct {
  Success *ExecutionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteWithParameterResult() *GraphServiceExecuteWithParameterResult {
  return &GraphServiceExecuteWithParameterResult{}
}

var GraphServiceExecuteWithParameterResult_Success_DEFAULT *ExecutionResponse
func (p *GraphServiceExecuteWithParameterResult) GetSuccess() *ExecutionResponse {
  if !p.IsSetSuccess() {
    return GraphServiceExecuteWithParameterResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceExecuteWithParameterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceExecuteWithParameterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteWithParameterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ExecutionResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceExecuteWithParameterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeWithParameter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteWithParameterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteWithParameterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteWithParameterResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Stmt
type GraphServiceExecuteJsonArgs struct {
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
}

func NewGraphServiceExecuteJsonArgs() *GraphServiceExecuteJsonArgs {
  return &GraphServiceExecuteJsonArgs{}
}


func (p *GraphServiceExecuteJsonArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteJsonArgs) GetStmt() []byte {
  return p.Stmt
}
func (p *GraphServiceExecuteJsonArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteJsonArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteJsonArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceExecuteJsonResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteJsonResult() *GraphServiceExecuteJsonResult {
  return &GraphServiceExecuteJsonResult{}
}

var GraphServiceExecuteJsonResult_Success_DEFAULT []byte

func (p *GraphServiceExecuteJsonResult) GetSuccess() []byte {
  return p.Success
}
func (p *GraphServiceExecuteJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceExecuteJsonResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *GraphServiceExecuteJsonResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteJsonResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Stmt
//  - ParameterMap
type GraphServiceExecuteJsonWithParameterArgs struct {
  SessionId int64 `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Stmt []byte `thrift:"stmt,2" db:"stmt" json:"stmt"`
  ParameterMap map[string]*nebula.Value `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewGraphServiceExecuteJsonWithParameterArgs() *GraphServiceExecuteJsonWithParameterArgs {
  return &GraphServiceExecuteJsonWithParameterArgs{}
}


func (p *GraphServiceExecuteJsonWithParameterArgs) GetSessionId() int64 {
  return p.SessionId
}

func (p *GraphServiceExecuteJsonWithParameterArgs) GetStmt() []byte {
  return p.Stmt
}

func (p *GraphServiceExecuteJsonWithParameterArgs) GetParameterMap() map[string]*nebula.Value {
  return p.ParameterMap
}
func (p *GraphServiceExecuteJsonWithParameterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Stmt = v
}
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*nebula.Value, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key53 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key53 = v
}
    _val54 := &nebula.Value{}
    if err := _val54.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val54), err)
    }
    p.ParameterMap[_key53] = _val54
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeJsonWithParameter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonWithParameterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stmt", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stmt: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Stmt); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stmt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stmt: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonWithParameterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *GraphServiceExecuteJsonWithParameterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteJsonWithParameterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceExecuteJsonWithParameterResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceExecuteJsonWithParameterResult() *GraphServiceExecuteJsonWithParameterResult {
  return &GraphServiceExecuteJsonWithParameterResult{}
}

var GraphServiceExecuteJsonWithParameterResult_Success_DEFAULT []byte

func (p *GraphServiceExecuteJsonWithParameterResult) GetSuccess() []byte {
  return p.Success
}
func (p *GraphServiceExecuteJsonWithParameterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceExecuteJsonWithParameterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeJsonWithParameter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceExecuteJsonWithParameterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceExecuteJsonWithParameterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceExecuteJsonWithParameterResult(%+v)", *p)
}

// Attributes:
//  - Req
type GraphServiceVerifyClientVersionArgs struct {
  Req *VerifyClientVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphServiceVerifyClientVersionArgs() *GraphServiceVerifyClientVersionArgs {
  return &GraphServiceVerifyClientVersionArgs{}
}

var GraphServiceVerifyClientVersionArgs_Req_DEFAULT *VerifyClientVersionReq
func (p *GraphServiceVerifyClientVersionArgs) GetReq() *VerifyClientVersionReq {
  if !p.IsSetReq() {
    return GraphServiceVerifyClientVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphServiceVerifyClientVersionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *GraphServiceVerifyClientVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceVerifyClientVersionArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &VerifyClientVersionReq{
  Version: []byte("3.0.0"),
}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphServiceVerifyClientVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyClientVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceVerifyClientVersionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphServiceVerifyClientVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceVerifyClientVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GraphServiceVerifyClientVersionResult struct {
  Success *VerifyClientVersionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGraphServiceVerifyClientVersionResult() *GraphServiceVerifyClientVersionResult {
  return &GraphServiceVerifyClientVersionResult{}
}

var GraphServiceVerifyClientVersionResult_Success_DEFAULT *VerifyClientVersionResp
func (p *GraphServiceVerifyClientVersionResult) GetSuccess() *VerifyClientVersionResp {
  if !p.IsSetSuccess() {
    return GraphServiceVerifyClientVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphServiceVerifyClientVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GraphServiceVerifyClientVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphServiceVerifyClientVersionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyClientVersionResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphServiceVerifyClientVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyClientVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphServiceVerifyClientVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphServiceVerifyClientVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GraphServiceVerifyClientVersionResult(%+v)", *p)
}


