// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/vesoft-inc/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
type MetaService interface {
  // Parameters:
  //  - Req
  CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  AlterSpace(ctx context.Context, req *AlterSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateSpaceAs(ctx context.Context, req *CreateSpaceAsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  AddHosts(ctx context.Context, req *AddHostsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddHostsIntoZone(ctx context.Context, req *AddHostsIntoZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropHosts(ctx context.Context, req *DropHostsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, err error)
  // Parameters:
  //  - Req
  GetWorkerId(ctx context.Context, req *GetWorkerIdReq) (_r *GetWorkerIdResp, err error)
  // Parameters:
  //  - Req
  CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, err error)
  // Parameters:
  //  - Req
  AgentHeartbeat(ctx context.Context, req *AgentHBReq) (_r *AgentHBResp, err error)
  // Parameters:
  //  - Req
  RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, err error)
  // Parameters:
  //  - Req
  CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error)
  // Parameters:
  //  - Req
  RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, err error)
  // Parameters:
  //  - Req
  MergeZone(ctx context.Context, req *MergeZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DivideZone(ctx context.Context, req *DivideZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RenameZone(ctx context.Context, req *RenameZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, err error)
  // Parameters:
  //  - Req
  ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, err error)
  // Parameters:
  //  - Req
  AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, err error)
  // Parameters:
  //  - Req
  GetStats(ctx context.Context, req *GetStatsReq) (_r *GetStatsResp, err error)
  // Parameters:
  //  - Req
  SignInService(ctx context.Context, req *SignInServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  SignOutService(ctx context.Context, req *SignOutServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListServiceClients(ctx context.Context, req *ListServiceClientsReq) (_r *ListServiceClientsResp, err error)
  // Parameters:
  //  - Req
  CreateFTIndex(ctx context.Context, req *CreateFTIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropFTIndex(ctx context.Context, req *DropFTIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListFTIndexes(ctx context.Context, req *ListFTIndexesReq) (_r *ListFTIndexesResp, err error)
  // Parameters:
  //  - Req
  CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, err error)
  // Parameters:
  //  - Req
  UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *UpdateSessionsResp, err error)
  // Parameters:
  //  - Req
  ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, err error)
  // Parameters:
  //  - Req
  GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, err error)
  // Parameters:
  //  - Req
  RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  KillQuery(ctx context.Context, req *KillQueryReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, err error)
  // Parameters:
  //  - Req
  RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *RestoreMetaResp, err error)
  // Parameters:
  //  - Req
  ListCluster(ctx context.Context, req *ListClusterInfoReq) (_r *ListClusterInfoResp, err error)
  // Parameters:
  //  - Req
  GetMetaDirInfo(ctx context.Context, req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, err error)
  // Parameters:
  //  - Req
  VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, err error)
  // Parameters:
  //  - Req
  SaveGraphVersion(ctx context.Context, req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, err error)
  // Parameters:
  //  - Req
  GetSegmentId(ctx context.Context, req *GetSegmentIdReq) (_r *GetSegmentIdResp, err error)
}

type MetaServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Req
  CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(req *DropSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ClearSpace(req *ClearSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  AlterSpace(req *AlterSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateSpaceAs(req *CreateSpaceAsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateTag(req *CreateTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(req *AlterTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(req *DropTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(req *GetTagReq) (_r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(req *ListTagsReq) (_r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(req *DropEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  AddHosts(req *AddHostsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddHostsIntoZone(req *AddHostsIntoZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropHosts(req *DropHostsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  ListParts(req *ListPartsReq) (_r *ListPartsResp, err error)
  // Parameters:
  //  - Req
  GetWorkerId(req *GetWorkerIdReq) (_r *GetWorkerIdResp, err error)
  // Parameters:
  //  - Req
  CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateUser(req *CreateUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(req *DropUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(req *AlterUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(req *GrantRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(req *HBReq) (_r *HBResp, err error)
  // Parameters:
  //  - Req
  AgentHeartbeat(req *AgentHBReq) (_r *AgentHBResp, err error)
  // Parameters:
  //  - Req
  RegConfig(req *RegConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(req *SetConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error)
  // Parameters:
  //  - Req
  CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error)
  // Parameters:
  //  - Req
  RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error)
  // Parameters:
  //  - Req
  MergeZone(req *MergeZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZone(req *DropZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DivideZone(req *DivideZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RenameZone(req *RenameZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetZone(req *GetZoneReq) (_r *GetZoneResp, err error)
  // Parameters:
  //  - Req
  ListZones(req *ListZonesReq) (_r *ListZonesResp, err error)
  // Parameters:
  //  - Req
  AddListener(req *AddListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListListener(req *ListListenerReq) (_r *ListListenerResp, err error)
  // Parameters:
  //  - Req
  GetStats(req *GetStatsReq) (_r *GetStatsResp, err error)
  // Parameters:
  //  - Req
  SignInService(req *SignInServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  SignOutService(req *SignOutServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListServiceClients(req *ListServiceClientsReq) (_r *ListServiceClientsResp, err error)
  // Parameters:
  //  - Req
  CreateFTIndex(req *CreateFTIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropFTIndex(req *DropFTIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListFTIndexes(req *ListFTIndexesReq) (_r *ListFTIndexesResp, err error)
  // Parameters:
  //  - Req
  CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error)
  // Parameters:
  //  - Req
  UpdateSessions(req *UpdateSessionsReq) (_r *UpdateSessionsResp, err error)
  // Parameters:
  //  - Req
  ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error)
  // Parameters:
  //  - Req
  GetSession(req *GetSessionReq) (_r *GetSessionResp, err error)
  // Parameters:
  //  - Req
  RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  KillQuery(req *KillQueryReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error)
  // Parameters:
  //  - Req
  RestoreMeta(req *RestoreMetaReq) (_r *RestoreMetaResp, err error)
  // Parameters:
  //  - Req
  ListCluster(req *ListClusterInfoReq) (_r *ListClusterInfoResp, err error)
  // Parameters:
  //  - Req
  GetMetaDirInfo(req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, err error)
  // Parameters:
  //  - Req
  VerifyClientVersion(req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, err error)
  // Parameters:
  //  - Req
  SaveGraphVersion(req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, err error)
  // Parameters:
  //  - Req
  GetSegmentId(req *GetSegmentIdReq) (_r *GetSegmentIdResp, err error)
}

type MetaServiceClient struct {
  MetaServiceClientInterface
  CC thrift.ClientConn
}

func(client *MetaServiceClient) Open() error {
  return client.CC.Open()
}

func(client *MetaServiceClient) Close() error {
  return client.CC.Close()
}

func(client *MetaServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewMetaServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceClient {
  return &MetaServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMetaServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceClient {
  return &MetaServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMetaServiceClientProtocol(prot thrift.Protocol) *MetaServiceClient {
  return NewMetaServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpace()
}


func (p *MetaServiceClient) recvCreateSpace() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceResult
  err = p.CC.RecvMsg("createSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSpace(req *DropSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSpace()
}


func (p *MetaServiceClient) recvDropSpace() (value *ExecResp, err error) {
  var result MetaServiceDropSpaceResult
  err = p.CC.RecvMsg("dropSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ClearSpace(req *ClearSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceClearSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("clearSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvClearSpace()
}


func (p *MetaServiceClient) recvClearSpace() (value *ExecResp, err error) {
  var result MetaServiceClearSpaceResult
  err = p.CC.RecvMsg("clearSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSpace()
}


func (p *MetaServiceClient) recvGetSpace() (value *GetSpaceResp, err error) {
  var result MetaServiceGetSpaceResult
  err = p.CC.RecvMsg("getSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSpaces", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSpaces()
}


func (p *MetaServiceClient) recvListSpaces() (value *ListSpacesResp, err error) {
  var result MetaServiceListSpacesResult
  err = p.CC.RecvMsg("listSpaces", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterSpace(req *AlterSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterSpace()
}


func (p *MetaServiceClient) recvAlterSpace() (value *ExecResp, err error) {
  var result MetaServiceAlterSpaceResult
  err = p.CC.RecvMsg("alterSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpaceAs(req *CreateSpaceAsReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceAsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpaceAs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpaceAs()
}


func (p *MetaServiceClient) recvCreateSpaceAs() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceAsResult
  err = p.CC.RecvMsg("createSpaceAs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTag(req *CreateTagReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTag()
}


func (p *MetaServiceClient) recvCreateTag() (value *ExecResp, err error) {
  var result MetaServiceCreateTagResult
  err = p.CC.RecvMsg("createTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterTag(req *AlterTagReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterTag()
}


func (p *MetaServiceClient) recvAlterTag() (value *ExecResp, err error) {
  var result MetaServiceAlterTagResult
  err = p.CC.RecvMsg("alterTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTag(req *DropTagReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTag()
}


func (p *MetaServiceClient) recvDropTag() (value *ExecResp, err error) {
  var result MetaServiceDropTagResult
  err = p.CC.RecvMsg("dropTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTag(req *GetTagReq) (_r *GetTagResp, err error) {
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTag()
}


func (p *MetaServiceClient) recvGetTag() (value *GetTagResp, err error) {
  var result MetaServiceGetTagResult
  err = p.CC.RecvMsg("getTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTags(req *ListTagsReq) (_r *ListTagsResp, err error) {
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTags()
}


func (p *MetaServiceClient) recvListTags() (value *ListTagsResp, err error) {
  var result MetaServiceListTagsResult
  err = p.CC.RecvMsg("listTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdge()
}


func (p *MetaServiceClient) recvCreateEdge() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeResult
  err = p.CC.RecvMsg("createEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterEdge()
}


func (p *MetaServiceClient) recvAlterEdge() (value *ExecResp, err error) {
  var result MetaServiceAlterEdgeResult
  err = p.CC.RecvMsg("alterEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdge(req *DropEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdge()
}


func (p *MetaServiceClient) recvDropEdge() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeResult
  err = p.CC.RecvMsg("dropEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdge()
}


func (p *MetaServiceClient) recvGetEdge() (value *GetEdgeResp, err error) {
  var result MetaServiceGetEdgeResult
  err = p.CC.RecvMsg("getEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdges()
}


func (p *MetaServiceClient) recvListEdges() (value *ListEdgesResp, err error) {
  var result MetaServiceListEdgesResult
  err = p.CC.RecvMsg("listEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHosts(req *AddHostsReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHosts()
}


func (p *MetaServiceClient) recvAddHosts() (value *ExecResp, err error) {
  var result MetaServiceAddHostsResult
  err = p.CC.RecvMsg("addHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHostsIntoZone(req *AddHostsIntoZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostsIntoZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHostsIntoZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHostsIntoZone()
}


func (p *MetaServiceClient) recvAddHostsIntoZone() (value *ExecResp, err error) {
  var result MetaServiceAddHostsIntoZoneResult
  err = p.CC.RecvMsg("addHostsIntoZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropHosts(req *DropHostsReq) (_r *ExecResp, err error) {
  args := MetaServiceDropHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropHosts()
}


func (p *MetaServiceClient) recvDropHosts() (value *ExecResp, err error) {
  var result MetaServiceDropHostsResult
  err = p.CC.RecvMsg("dropHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error) {
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListHosts()
}


func (p *MetaServiceClient) recvListHosts() (value *ListHostsResp, err error) {
  var result MetaServiceListHostsResult
  err = p.CC.RecvMsg("listHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getPartsAlloc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetPartsAlloc()
}


func (p *MetaServiceClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  var result MetaServiceGetPartsAllocResult
  err = p.CC.RecvMsg("getPartsAlloc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListParts(req *ListPartsReq) (_r *ListPartsResp, err error) {
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListParts()
}


func (p *MetaServiceClient) recvListParts() (value *ListPartsResp, err error) {
  var result MetaServiceListPartsResult
  err = p.CC.RecvMsg("listParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetWorkerId(req *GetWorkerIdReq) (_r *GetWorkerIdResp, err error) {
  args := MetaServiceGetWorkerIdArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getWorkerId", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetWorkerId()
}


func (p *MetaServiceClient) recvGetWorkerId() (value *GetWorkerIdResp, err error) {
  var result MetaServiceGetWorkerIdResult
  err = p.CC.RecvMsg("getWorkerId", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTagIndex()
}


func (p *MetaServiceClient) recvCreateTagIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateTagIndexResult
  err = p.CC.RecvMsg("createTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTagIndex()
}


func (p *MetaServiceClient) recvDropTagIndex() (value *ExecResp, err error) {
  var result MetaServiceDropTagIndexResult
  err = p.CC.RecvMsg("dropTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTagIndex()
}


func (p *MetaServiceClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  var result MetaServiceGetTagIndexResult
  err = p.CC.RecvMsg("getTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexes()
}


func (p *MetaServiceClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  var result MetaServiceListTagIndexesResult
  err = p.CC.RecvMsg("listTagIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildTagIndex()
}


func (p *MetaServiceClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildTagIndexResult
  err = p.CC.RecvMsg("rebuildTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexStatus()
}


func (p *MetaServiceClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListTagIndexStatusResult
  err = p.CC.RecvMsg("listTagIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdgeIndex()
}


func (p *MetaServiceClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeIndexResult
  err = p.CC.RecvMsg("createEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdgeIndex()
}


func (p *MetaServiceClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeIndexResult
  err = p.CC.RecvMsg("dropEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdgeIndex()
}


func (p *MetaServiceClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  var result MetaServiceGetEdgeIndexResult
  err = p.CC.RecvMsg("getEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexes()
}


func (p *MetaServiceClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  var result MetaServiceListEdgeIndexesResult
  err = p.CC.RecvMsg("listEdgeIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildEdgeIndex()
}


func (p *MetaServiceClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildEdgeIndexResult
  err = p.CC.RecvMsg("rebuildEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexStatus()
}


func (p *MetaServiceClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListEdgeIndexStatusResult
  err = p.CC.RecvMsg("listEdgeIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateUser(req *CreateUserReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateUser()
}


func (p *MetaServiceClient) recvCreateUser() (value *ExecResp, err error) {
  var result MetaServiceCreateUserResult
  err = p.CC.RecvMsg("createUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropUser(req *DropUserReq) (_r *ExecResp, err error) {
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropUser()
}


func (p *MetaServiceClient) recvDropUser() (value *ExecResp, err error) {
  var result MetaServiceDropUserResult
  err = p.CC.RecvMsg("dropUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterUser(req *AlterUserReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterUser()
}


func (p *MetaServiceClient) recvAlterUser() (value *ExecResp, err error) {
  var result MetaServiceAlterUserResult
  err = p.CC.RecvMsg("alterUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GrantRole(req *GrantRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("grantRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGrantRole()
}


func (p *MetaServiceClient) recvGrantRole() (value *ExecResp, err error) {
  var result MetaServiceGrantRoleResult
  err = p.CC.RecvMsg("grantRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("revokeRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRevokeRole()
}


func (p *MetaServiceClient) recvRevokeRole() (value *ExecResp, err error) {
  var result MetaServiceRevokeRoleResult
  err = p.CC.RecvMsg("revokeRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error) {
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listUsers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListUsers()
}


func (p *MetaServiceClient) recvListUsers() (value *ListUsersResp, err error) {
  var result MetaServiceListUsersResult
  err = p.CC.RecvMsg("listUsers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListRoles()
}


func (p *MetaServiceClient) recvListRoles() (value *ListRolesResp, err error) {
  var result MetaServiceListRolesResult
  err = p.CC.RecvMsg("listRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUserRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUserRoles()
}


func (p *MetaServiceClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  var result MetaServiceGetUserRolesResult
  err = p.CC.RecvMsg("getUserRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error) {
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  err = p.CC.SendMsg("changePassword", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChangePassword()
}


func (p *MetaServiceClient) recvChangePassword() (value *ExecResp, err error) {
  var result MetaServiceChangePasswordResult
  err = p.CC.RecvMsg("changePassword", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) HeartBeat(req *HBReq) (_r *HBResp, err error) {
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartBeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartBeat()
}


func (p *MetaServiceClient) recvHeartBeat() (value *HBResp, err error) {
  var result MetaServiceHeartBeatResult
  err = p.CC.RecvMsg("heartBeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AgentHeartbeat(req *AgentHBReq) (_r *AgentHBResp, err error) {
  args := MetaServiceAgentHeartbeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("agentHeartbeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAgentHeartbeat()
}


func (p *MetaServiceClient) recvAgentHeartbeat() (value *AgentHBResp, err error) {
  var result MetaServiceAgentHeartbeatResult
  err = p.CC.RecvMsg("agentHeartbeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RegConfig(req *RegConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("regConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRegConfig()
}


func (p *MetaServiceClient) recvRegConfig() (value *ExecResp, err error) {
  var result MetaServiceRegConfigResult
  err = p.CC.RecvMsg("regConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error) {
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetConfig()
}


func (p *MetaServiceClient) recvGetConfig() (value *GetConfigResp, err error) {
  var result MetaServiceGetConfigResult
  err = p.CC.RecvMsg("getConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SetConfig(req *SetConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("setConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSetConfig()
}


func (p *MetaServiceClient) recvSetConfig() (value *ExecResp, err error) {
  var result MetaServiceSetConfigResult
  err = p.CC.RecvMsg("setConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listConfigs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListConfigs()
}


func (p *MetaServiceClient) recvListConfigs() (value *ListConfigsResp, err error) {
  var result MetaServiceListConfigsResult
  err = p.CC.RecvMsg("listConfigs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSnapshot()
}


func (p *MetaServiceClient) recvCreateSnapshot() (value *ExecResp, err error) {
  var result MetaServiceCreateSnapshotResult
  err = p.CC.RecvMsg("createSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSnapshot()
}


func (p *MetaServiceClient) recvDropSnapshot() (value *ExecResp, err error) {
  var result MetaServiceDropSnapshotResult
  err = p.CC.RecvMsg("dropSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSnapshots", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSnapshots()
}


func (p *MetaServiceClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  var result MetaServiceListSnapshotsResult
  err = p.CC.RecvMsg("listSnapshots", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error) {
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  err = p.CC.SendMsg("runAdminJob", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRunAdminJob()
}


func (p *MetaServiceClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  var result MetaServiceRunAdminJobResult
  err = p.CC.RecvMsg("runAdminJob", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MergeZone(req *MergeZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceMergeZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("mergeZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMergeZone()
}


func (p *MetaServiceClient) recvMergeZone() (value *ExecResp, err error) {
  var result MetaServiceMergeZoneResult
  err = p.CC.RecvMsg("mergeZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZone(req *DropZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZone()
}


func (p *MetaServiceClient) recvDropZone() (value *ExecResp, err error) {
  var result MetaServiceDropZoneResult
  err = p.CC.RecvMsg("dropZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DivideZone(req *DivideZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDivideZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("divideZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDivideZone()
}


func (p *MetaServiceClient) recvDivideZone() (value *ExecResp, err error) {
  var result MetaServiceDivideZoneResult
  err = p.CC.RecvMsg("divideZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RenameZone(req *RenameZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceRenameZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("renameZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRenameZone()
}


func (p *MetaServiceClient) recvRenameZone() (value *ExecResp, err error) {
  var result MetaServiceRenameZoneResult
  err = p.CC.RecvMsg("renameZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetZone(req *GetZoneReq) (_r *GetZoneResp, err error) {
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetZone()
}


func (p *MetaServiceClient) recvGetZone() (value *GetZoneResp, err error) {
  var result MetaServiceGetZoneResult
  err = p.CC.RecvMsg("getZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListZones(req *ListZonesReq) (_r *ListZonesResp, err error) {
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listZones", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListZones()
}


func (p *MetaServiceClient) recvListZones() (value *ListZonesResp, err error) {
  var result MetaServiceListZonesResult
  err = p.CC.RecvMsg("listZones", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddListener(req *AddListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddListener()
}


func (p *MetaServiceClient) recvAddListener() (value *ExecResp, err error) {
  var result MetaServiceAddListenerResult
  err = p.CC.RecvMsg("addListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveListener()
}


func (p *MetaServiceClient) recvRemoveListener() (value *ExecResp, err error) {
  var result MetaServiceRemoveListenerResult
  err = p.CC.RecvMsg("removeListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListListener(req *ListListenerReq) (_r *ListListenerResp, err error) {
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListListener()
}


func (p *MetaServiceClient) recvListListener() (value *ListListenerResp, err error) {
  var result MetaServiceListListenerResult
  err = p.CC.RecvMsg("listListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetStats(req *GetStatsReq) (_r *GetStatsResp, err error) {
  args := MetaServiceGetStatsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getStats", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetStats()
}


func (p *MetaServiceClient) recvGetStats() (value *GetStatsResp, err error) {
  var result MetaServiceGetStatsResult
  err = p.CC.RecvMsg("getStats", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignInService(req *SignInServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignInServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signInService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignInService()
}


func (p *MetaServiceClient) recvSignInService() (value *ExecResp, err error) {
  var result MetaServiceSignInServiceResult
  err = p.CC.RecvMsg("signInService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignOutService(req *SignOutServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignOutServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signOutService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignOutService()
}


func (p *MetaServiceClient) recvSignOutService() (value *ExecResp, err error) {
  var result MetaServiceSignOutServiceResult
  err = p.CC.RecvMsg("signOutService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListServiceClients(req *ListServiceClientsReq) (_r *ListServiceClientsResp, err error) {
  args := MetaServiceListServiceClientsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listServiceClients", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListServiceClients()
}


func (p *MetaServiceClient) recvListServiceClients() (value *ListServiceClientsResp, err error) {
  var result MetaServiceListServiceClientsResult
  err = p.CC.RecvMsg("listServiceClients", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateFTIndex(req *CreateFTIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateFTIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createFTIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateFTIndex()
}


func (p *MetaServiceClient) recvCreateFTIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateFTIndexResult
  err = p.CC.RecvMsg("createFTIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropFTIndex(req *DropFTIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropFTIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropFTIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropFTIndex()
}


func (p *MetaServiceClient) recvDropFTIndex() (value *ExecResp, err error) {
  var result MetaServiceDropFTIndexResult
  err = p.CC.RecvMsg("dropFTIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListFTIndexes(req *ListFTIndexesReq) (_r *ListFTIndexesResp, err error) {
  args := MetaServiceListFTIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listFTIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListFTIndexes()
}


func (p *MetaServiceClient) recvListFTIndexes() (value *ListFTIndexesResp, err error) {
  var result MetaServiceListFTIndexesResult
  err = p.CC.RecvMsg("listFTIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSession()
}


func (p *MetaServiceClient) recvCreateSession() (value *CreateSessionResp, err error) {
  var result MetaServiceCreateSessionResult
  err = p.CC.RecvMsg("createSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) UpdateSessions(req *UpdateSessionsReq) (_r *UpdateSessionsResp, err error) {
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateSessions()
}


func (p *MetaServiceClient) recvUpdateSessions() (value *UpdateSessionsResp, err error) {
  var result MetaServiceUpdateSessionsResult
  err = p.CC.RecvMsg("updateSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSessions()
}


func (p *MetaServiceClient) recvListSessions() (value *ListSessionsResp, err error) {
  var result MetaServiceListSessionsResult
  err = p.CC.RecvMsg("listSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSession(req *GetSessionReq) (_r *GetSessionResp, err error) {
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSession()
}


func (p *MetaServiceClient) recvGetSession() (value *GetSessionResp, err error) {
  var result MetaServiceGetSessionResult
  err = p.CC.RecvMsg("getSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveSession()
}


func (p *MetaServiceClient) recvRemoveSession() (value *ExecResp, err error) {
  var result MetaServiceRemoveSessionResult
  err = p.CC.RecvMsg("removeSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) KillQuery(req *KillQueryReq) (_r *ExecResp, err error) {
  args := MetaServiceKillQueryArgs{
    Req : req,
  }
  err = p.CC.SendMsg("killQuery", &args, thrift.CALL)
  if err != nil { return }
  return p.recvKillQuery()
}


func (p *MetaServiceClient) recvKillQuery() (value *ExecResp, err error) {
  var result MetaServiceKillQueryResult
  err = p.CC.RecvMsg("killQuery", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error) {
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  err = p.CC.SendMsg("reportTaskFinish", &args, thrift.CALL)
  if err != nil { return }
  return p.recvReportTaskFinish()
}


func (p *MetaServiceClient) recvReportTaskFinish() (value *ExecResp, err error) {
  var result MetaServiceReportTaskFinishResult
  err = p.CC.RecvMsg("reportTaskFinish", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createBackup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateBackup()
}


func (p *MetaServiceClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  var result MetaServiceCreateBackupResult
  err = p.CC.RecvMsg("createBackup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RestoreMeta(req *RestoreMetaReq) (_r *RestoreMetaResp, err error) {
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  err = p.CC.SendMsg("restoreMeta", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRestoreMeta()
}


func (p *MetaServiceClient) recvRestoreMeta() (value *RestoreMetaResp, err error) {
  var result MetaServiceRestoreMetaResult
  err = p.CC.RecvMsg("restoreMeta", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListCluster(req *ListClusterInfoReq) (_r *ListClusterInfoResp, err error) {
  args := MetaServiceListClusterArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listCluster", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListCluster()
}


func (p *MetaServiceClient) recvListCluster() (value *ListClusterInfoResp, err error) {
  var result MetaServiceListClusterResult
  err = p.CC.RecvMsg("listCluster", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetMetaDirInfo(req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, err error) {
  args := MetaServiceGetMetaDirInfoArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getMetaDirInfo", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetMetaDirInfo()
}


func (p *MetaServiceClient) recvGetMetaDirInfo() (value *GetMetaDirInfoResp, err error) {
  var result MetaServiceGetMetaDirInfoResult
  err = p.CC.RecvMsg("getMetaDirInfo", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) VerifyClientVersion(req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, err error) {
  args := MetaServiceVerifyClientVersionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("verifyClientVersion", &args, thrift.CALL)
  if err != nil { return }
  return p.recvVerifyClientVersion()
}


func (p *MetaServiceClient) recvVerifyClientVersion() (value *VerifyClientVersionResp, err error) {
  var result MetaServiceVerifyClientVersionResult
  err = p.CC.RecvMsg("verifyClientVersion", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SaveGraphVersion(req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, err error) {
  args := MetaServiceSaveGraphVersionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("saveGraphVersion", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSaveGraphVersion()
}


func (p *MetaServiceClient) recvSaveGraphVersion() (value *SaveGraphVersionResp, err error) {
  var result MetaServiceSaveGraphVersionResult
  err = p.CC.RecvMsg("saveGraphVersion", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSegmentId(req *GetSegmentIdReq) (_r *GetSegmentIdResp, err error) {
  args := MetaServiceGetSegmentIdArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSegmentId", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSegmentId()
}


func (p *MetaServiceClient) recvGetSegmentId() (value *GetSegmentIdResp, err error) {
  var result MetaServiceGetSegmentIdResult
  err = p.CC.RecvMsg("getSegmentId", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceThreadsafeClient struct {
  MetaServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *MetaServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *MetaServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *MetaServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewMetaServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMetaServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMetaServiceThreadsafeClientProtocol(prot thrift.Protocol) *MetaServiceThreadsafeClient {
  return NewMetaServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpace()
}


func (p *MetaServiceThreadsafeClient) recvCreateSpace() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceResult
  err = p.CC.RecvMsg("createSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSpace(req *DropSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSpace()
}


func (p *MetaServiceThreadsafeClient) recvDropSpace() (value *ExecResp, err error) {
  var result MetaServiceDropSpaceResult
  err = p.CC.RecvMsg("dropSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ClearSpace(req *ClearSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceClearSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("clearSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvClearSpace()
}


func (p *MetaServiceThreadsafeClient) recvClearSpace() (value *ExecResp, err error) {
  var result MetaServiceClearSpaceResult
  err = p.CC.RecvMsg("clearSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSpace()
}


func (p *MetaServiceThreadsafeClient) recvGetSpace() (value *GetSpaceResp, err error) {
  var result MetaServiceGetSpaceResult
  err = p.CC.RecvMsg("getSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSpaces", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSpaces()
}


func (p *MetaServiceThreadsafeClient) recvListSpaces() (value *ListSpacesResp, err error) {
  var result MetaServiceListSpacesResult
  err = p.CC.RecvMsg("listSpaces", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterSpace(req *AlterSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterSpace()
}


func (p *MetaServiceThreadsafeClient) recvAlterSpace() (value *ExecResp, err error) {
  var result MetaServiceAlterSpaceResult
  err = p.CC.RecvMsg("alterSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSpaceAs(req *CreateSpaceAsReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSpaceAsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpaceAs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpaceAs()
}


func (p *MetaServiceThreadsafeClient) recvCreateSpaceAs() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceAsResult
  err = p.CC.RecvMsg("createSpaceAs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTag(req *CreateTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTag()
}


func (p *MetaServiceThreadsafeClient) recvCreateTag() (value *ExecResp, err error) {
  var result MetaServiceCreateTagResult
  err = p.CC.RecvMsg("createTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterTag(req *AlterTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterTag()
}


func (p *MetaServiceThreadsafeClient) recvAlterTag() (value *ExecResp, err error) {
  var result MetaServiceAlterTagResult
  err = p.CC.RecvMsg("alterTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTag(req *DropTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTag()
}


func (p *MetaServiceThreadsafeClient) recvDropTag() (value *ExecResp, err error) {
  var result MetaServiceDropTagResult
  err = p.CC.RecvMsg("dropTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTag(req *GetTagReq) (_r *GetTagResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTag()
}


func (p *MetaServiceThreadsafeClient) recvGetTag() (value *GetTagResp, err error) {
  var result MetaServiceGetTagResult
  err = p.CC.RecvMsg("getTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTags(req *ListTagsReq) (_r *ListTagsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTags()
}


func (p *MetaServiceThreadsafeClient) recvListTags() (value *ListTagsResp, err error) {
  var result MetaServiceListTagsResult
  err = p.CC.RecvMsg("listTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdge()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdge() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeResult
  err = p.CC.RecvMsg("createEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterEdge()
}


func (p *MetaServiceThreadsafeClient) recvAlterEdge() (value *ExecResp, err error) {
  var result MetaServiceAlterEdgeResult
  err = p.CC.RecvMsg("alterEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdge(req *DropEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdge()
}


func (p *MetaServiceThreadsafeClient) recvDropEdge() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeResult
  err = p.CC.RecvMsg("dropEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdge()
}


func (p *MetaServiceThreadsafeClient) recvGetEdge() (value *GetEdgeResp, err error) {
  var result MetaServiceGetEdgeResult
  err = p.CC.RecvMsg("getEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdges()
}


func (p *MetaServiceThreadsafeClient) recvListEdges() (value *ListEdgesResp, err error) {
  var result MetaServiceListEdgesResult
  err = p.CC.RecvMsg("listEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddHosts(req *AddHostsReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHosts()
}


func (p *MetaServiceThreadsafeClient) recvAddHosts() (value *ExecResp, err error) {
  var result MetaServiceAddHostsResult
  err = p.CC.RecvMsg("addHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddHostsIntoZone(req *AddHostsIntoZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddHostsIntoZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHostsIntoZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHostsIntoZone()
}


func (p *MetaServiceThreadsafeClient) recvAddHostsIntoZone() (value *ExecResp, err error) {
  var result MetaServiceAddHostsIntoZoneResult
  err = p.CC.RecvMsg("addHostsIntoZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropHosts(req *DropHostsReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropHosts()
}


func (p *MetaServiceThreadsafeClient) recvDropHosts() (value *ExecResp, err error) {
  var result MetaServiceDropHostsResult
  err = p.CC.RecvMsg("dropHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListHosts()
}


func (p *MetaServiceThreadsafeClient) recvListHosts() (value *ListHostsResp, err error) {
  var result MetaServiceListHostsResult
  err = p.CC.RecvMsg("listHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getPartsAlloc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetPartsAlloc()
}


func (p *MetaServiceThreadsafeClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  var result MetaServiceGetPartsAllocResult
  err = p.CC.RecvMsg("getPartsAlloc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListParts(req *ListPartsReq) (_r *ListPartsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListParts()
}


func (p *MetaServiceThreadsafeClient) recvListParts() (value *ListPartsResp, err error) {
  var result MetaServiceListPartsResult
  err = p.CC.RecvMsg("listParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetWorkerId(req *GetWorkerIdReq) (_r *GetWorkerIdResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetWorkerIdArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getWorkerId", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetWorkerId()
}


func (p *MetaServiceThreadsafeClient) recvGetWorkerId() (value *GetWorkerIdResp, err error) {
  var result MetaServiceGetWorkerIdResult
  err = p.CC.RecvMsg("getWorkerId", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvCreateTagIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateTagIndexResult
  err = p.CC.RecvMsg("createTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvDropTagIndex() (value *ExecResp, err error) {
  var result MetaServiceDropTagIndexResult
  err = p.CC.RecvMsg("dropTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  var result MetaServiceGetTagIndexResult
  err = p.CC.RecvMsg("getTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexes()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  var result MetaServiceListTagIndexesResult
  err = p.CC.RecvMsg("listTagIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildTagIndexResult
  err = p.CC.RecvMsg("rebuildTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexStatus()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListTagIndexStatusResult
  err = p.CC.RecvMsg("listTagIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeIndexResult
  err = p.CC.RecvMsg("createEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeIndexResult
  err = p.CC.RecvMsg("dropEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  var result MetaServiceGetEdgeIndexResult
  err = p.CC.RecvMsg("getEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexes()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  var result MetaServiceListEdgeIndexesResult
  err = p.CC.RecvMsg("listEdgeIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildEdgeIndexResult
  err = p.CC.RecvMsg("rebuildEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexStatus()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListEdgeIndexStatusResult
  err = p.CC.RecvMsg("listEdgeIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateUser(req *CreateUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateUser()
}


func (p *MetaServiceThreadsafeClient) recvCreateUser() (value *ExecResp, err error) {
  var result MetaServiceCreateUserResult
  err = p.CC.RecvMsg("createUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropUser(req *DropUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropUser()
}


func (p *MetaServiceThreadsafeClient) recvDropUser() (value *ExecResp, err error) {
  var result MetaServiceDropUserResult
  err = p.CC.RecvMsg("dropUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterUser(req *AlterUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterUser()
}


func (p *MetaServiceThreadsafeClient) recvAlterUser() (value *ExecResp, err error) {
  var result MetaServiceAlterUserResult
  err = p.CC.RecvMsg("alterUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GrantRole(req *GrantRoleReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("grantRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGrantRole()
}


func (p *MetaServiceThreadsafeClient) recvGrantRole() (value *ExecResp, err error) {
  var result MetaServiceGrantRoleResult
  err = p.CC.RecvMsg("grantRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("revokeRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRevokeRole()
}


func (p *MetaServiceThreadsafeClient) recvRevokeRole() (value *ExecResp, err error) {
  var result MetaServiceRevokeRoleResult
  err = p.CC.RecvMsg("revokeRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listUsers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListUsers()
}


func (p *MetaServiceThreadsafeClient) recvListUsers() (value *ListUsersResp, err error) {
  var result MetaServiceListUsersResult
  err = p.CC.RecvMsg("listUsers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListRoles()
}


func (p *MetaServiceThreadsafeClient) recvListRoles() (value *ListRolesResp, err error) {
  var result MetaServiceListRolesResult
  err = p.CC.RecvMsg("listRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUserRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUserRoles()
}


func (p *MetaServiceThreadsafeClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  var result MetaServiceGetUserRolesResult
  err = p.CC.RecvMsg("getUserRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  err = p.CC.SendMsg("changePassword", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChangePassword()
}


func (p *MetaServiceThreadsafeClient) recvChangePassword() (value *ExecResp, err error) {
  var result MetaServiceChangePasswordResult
  err = p.CC.RecvMsg("changePassword", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) HeartBeat(req *HBReq) (_r *HBResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartBeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartBeat()
}


func (p *MetaServiceThreadsafeClient) recvHeartBeat() (value *HBResp, err error) {
  var result MetaServiceHeartBeatResult
  err = p.CC.RecvMsg("heartBeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AgentHeartbeat(req *AgentHBReq) (_r *AgentHBResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAgentHeartbeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("agentHeartbeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAgentHeartbeat()
}


func (p *MetaServiceThreadsafeClient) recvAgentHeartbeat() (value *AgentHBResp, err error) {
  var result MetaServiceAgentHeartbeatResult
  err = p.CC.RecvMsg("agentHeartbeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RegConfig(req *RegConfigReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("regConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRegConfig()
}


func (p *MetaServiceThreadsafeClient) recvRegConfig() (value *ExecResp, err error) {
  var result MetaServiceRegConfigResult
  err = p.CC.RecvMsg("regConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetConfig()
}


func (p *MetaServiceThreadsafeClient) recvGetConfig() (value *GetConfigResp, err error) {
  var result MetaServiceGetConfigResult
  err = p.CC.RecvMsg("getConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SetConfig(req *SetConfigReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("setConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSetConfig()
}


func (p *MetaServiceThreadsafeClient) recvSetConfig() (value *ExecResp, err error) {
  var result MetaServiceSetConfigResult
  err = p.CC.RecvMsg("setConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listConfigs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListConfigs()
}


func (p *MetaServiceThreadsafeClient) recvListConfigs() (value *ListConfigsResp, err error) {
  var result MetaServiceListConfigsResult
  err = p.CC.RecvMsg("listConfigs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSnapshot()
}


func (p *MetaServiceThreadsafeClient) recvCreateSnapshot() (value *ExecResp, err error) {
  var result MetaServiceCreateSnapshotResult
  err = p.CC.RecvMsg("createSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSnapshot()
}


func (p *MetaServiceThreadsafeClient) recvDropSnapshot() (value *ExecResp, err error) {
  var result MetaServiceDropSnapshotResult
  err = p.CC.RecvMsg("dropSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSnapshots", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSnapshots()
}


func (p *MetaServiceThreadsafeClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  var result MetaServiceListSnapshotsResult
  err = p.CC.RecvMsg("listSnapshots", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  err = p.CC.SendMsg("runAdminJob", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRunAdminJob()
}


func (p *MetaServiceThreadsafeClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  var result MetaServiceRunAdminJobResult
  err = p.CC.RecvMsg("runAdminJob", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MergeZone(req *MergeZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceMergeZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("mergeZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMergeZone()
}


func (p *MetaServiceThreadsafeClient) recvMergeZone() (value *ExecResp, err error) {
  var result MetaServiceMergeZoneResult
  err = p.CC.RecvMsg("mergeZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropZone(req *DropZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZone()
}


func (p *MetaServiceThreadsafeClient) recvDropZone() (value *ExecResp, err error) {
  var result MetaServiceDropZoneResult
  err = p.CC.RecvMsg("dropZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DivideZone(req *DivideZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDivideZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("divideZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDivideZone()
}


func (p *MetaServiceThreadsafeClient) recvDivideZone() (value *ExecResp, err error) {
  var result MetaServiceDivideZoneResult
  err = p.CC.RecvMsg("divideZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RenameZone(req *RenameZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRenameZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("renameZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRenameZone()
}


func (p *MetaServiceThreadsafeClient) recvRenameZone() (value *ExecResp, err error) {
  var result MetaServiceRenameZoneResult
  err = p.CC.RecvMsg("renameZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetZone(req *GetZoneReq) (_r *GetZoneResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetZone()
}


func (p *MetaServiceThreadsafeClient) recvGetZone() (value *GetZoneResp, err error) {
  var result MetaServiceGetZoneResult
  err = p.CC.RecvMsg("getZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListZones(req *ListZonesReq) (_r *ListZonesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listZones", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListZones()
}


func (p *MetaServiceThreadsafeClient) recvListZones() (value *ListZonesResp, err error) {
  var result MetaServiceListZonesResult
  err = p.CC.RecvMsg("listZones", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddListener(req *AddListenerReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddListener()
}


func (p *MetaServiceThreadsafeClient) recvAddListener() (value *ExecResp, err error) {
  var result MetaServiceAddListenerResult
  err = p.CC.RecvMsg("addListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveListener()
}


func (p *MetaServiceThreadsafeClient) recvRemoveListener() (value *ExecResp, err error) {
  var result MetaServiceRemoveListenerResult
  err = p.CC.RecvMsg("removeListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListListener(req *ListListenerReq) (_r *ListListenerResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListListener()
}


func (p *MetaServiceThreadsafeClient) recvListListener() (value *ListListenerResp, err error) {
  var result MetaServiceListListenerResult
  err = p.CC.RecvMsg("listListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetStats(req *GetStatsReq) (_r *GetStatsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetStatsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getStats", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetStats()
}


func (p *MetaServiceThreadsafeClient) recvGetStats() (value *GetStatsResp, err error) {
  var result MetaServiceGetStatsResult
  err = p.CC.RecvMsg("getStats", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignInService(req *SignInServiceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSignInServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signInService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignInService()
}


func (p *MetaServiceThreadsafeClient) recvSignInService() (value *ExecResp, err error) {
  var result MetaServiceSignInServiceResult
  err = p.CC.RecvMsg("signInService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignOutService(req *SignOutServiceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSignOutServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signOutService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignOutService()
}


func (p *MetaServiceThreadsafeClient) recvSignOutService() (value *ExecResp, err error) {
  var result MetaServiceSignOutServiceResult
  err = p.CC.RecvMsg("signOutService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListServiceClients(req *ListServiceClientsReq) (_r *ListServiceClientsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListServiceClientsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listServiceClients", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListServiceClients()
}


func (p *MetaServiceThreadsafeClient) recvListServiceClients() (value *ListServiceClientsResp, err error) {
  var result MetaServiceListServiceClientsResult
  err = p.CC.RecvMsg("listServiceClients", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateFTIndex(req *CreateFTIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateFTIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createFTIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateFTIndex()
}


func (p *MetaServiceThreadsafeClient) recvCreateFTIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateFTIndexResult
  err = p.CC.RecvMsg("createFTIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropFTIndex(req *DropFTIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropFTIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropFTIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropFTIndex()
}


func (p *MetaServiceThreadsafeClient) recvDropFTIndex() (value *ExecResp, err error) {
  var result MetaServiceDropFTIndexResult
  err = p.CC.RecvMsg("dropFTIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListFTIndexes(req *ListFTIndexesReq) (_r *ListFTIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListFTIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listFTIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListFTIndexes()
}


func (p *MetaServiceThreadsafeClient) recvListFTIndexes() (value *ListFTIndexesResp, err error) {
  var result MetaServiceListFTIndexesResult
  err = p.CC.RecvMsg("listFTIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSession()
}


func (p *MetaServiceThreadsafeClient) recvCreateSession() (value *CreateSessionResp, err error) {
  var result MetaServiceCreateSessionResult
  err = p.CC.RecvMsg("createSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) UpdateSessions(req *UpdateSessionsReq) (_r *UpdateSessionsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateSessions()
}


func (p *MetaServiceThreadsafeClient) recvUpdateSessions() (value *UpdateSessionsResp, err error) {
  var result MetaServiceUpdateSessionsResult
  err = p.CC.RecvMsg("updateSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSessions()
}


func (p *MetaServiceThreadsafeClient) recvListSessions() (value *ListSessionsResp, err error) {
  var result MetaServiceListSessionsResult
  err = p.CC.RecvMsg("listSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSession(req *GetSessionReq) (_r *GetSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSession()
}


func (p *MetaServiceThreadsafeClient) recvGetSession() (value *GetSessionResp, err error) {
  var result MetaServiceGetSessionResult
  err = p.CC.RecvMsg("getSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveSession()
}


func (p *MetaServiceThreadsafeClient) recvRemoveSession() (value *ExecResp, err error) {
  var result MetaServiceRemoveSessionResult
  err = p.CC.RecvMsg("removeSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) KillQuery(req *KillQueryReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceKillQueryArgs{
    Req : req,
  }
  err = p.CC.SendMsg("killQuery", &args, thrift.CALL)
  if err != nil { return }
  return p.recvKillQuery()
}


func (p *MetaServiceThreadsafeClient) recvKillQuery() (value *ExecResp, err error) {
  var result MetaServiceKillQueryResult
  err = p.CC.RecvMsg("killQuery", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  err = p.CC.SendMsg("reportTaskFinish", &args, thrift.CALL)
  if err != nil { return }
  return p.recvReportTaskFinish()
}


func (p *MetaServiceThreadsafeClient) recvReportTaskFinish() (value *ExecResp, err error) {
  var result MetaServiceReportTaskFinishResult
  err = p.CC.RecvMsg("reportTaskFinish", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createBackup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateBackup()
}


func (p *MetaServiceThreadsafeClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  var result MetaServiceCreateBackupResult
  err = p.CC.RecvMsg("createBackup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RestoreMeta(req *RestoreMetaReq) (_r *RestoreMetaResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  err = p.CC.SendMsg("restoreMeta", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRestoreMeta()
}


func (p *MetaServiceThreadsafeClient) recvRestoreMeta() (value *RestoreMetaResp, err error) {
  var result MetaServiceRestoreMetaResult
  err = p.CC.RecvMsg("restoreMeta", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListCluster(req *ListClusterInfoReq) (_r *ListClusterInfoResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListClusterArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listCluster", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListCluster()
}


func (p *MetaServiceThreadsafeClient) recvListCluster() (value *ListClusterInfoResp, err error) {
  var result MetaServiceListClusterResult
  err = p.CC.RecvMsg("listCluster", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetMetaDirInfo(req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetMetaDirInfoArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getMetaDirInfo", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetMetaDirInfo()
}


func (p *MetaServiceThreadsafeClient) recvGetMetaDirInfo() (value *GetMetaDirInfoResp, err error) {
  var result MetaServiceGetMetaDirInfoResult
  err = p.CC.RecvMsg("getMetaDirInfo", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) VerifyClientVersion(req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceVerifyClientVersionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("verifyClientVersion", &args, thrift.CALL)
  if err != nil { return }
  return p.recvVerifyClientVersion()
}


func (p *MetaServiceThreadsafeClient) recvVerifyClientVersion() (value *VerifyClientVersionResp, err error) {
  var result MetaServiceVerifyClientVersionResult
  err = p.CC.RecvMsg("verifyClientVersion", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SaveGraphVersion(req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSaveGraphVersionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("saveGraphVersion", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSaveGraphVersion()
}


func (p *MetaServiceThreadsafeClient) recvSaveGraphVersion() (value *SaveGraphVersionResp, err error) {
  var result MetaServiceSaveGraphVersionResult
  err = p.CC.RecvMsg("saveGraphVersion", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSegmentId(req *GetSegmentIdReq) (_r *GetSegmentIdResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetSegmentIdArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSegmentId", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSegmentId()
}


func (p *MetaServiceThreadsafeClient) recvGetSegmentId() (value *GetSegmentIdResp, err error) {
  var result MetaServiceGetSegmentIdResult
  err = p.CC.RecvMsg("getSegmentId", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *MetaServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *MetaServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *MetaServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewMetaServiceChannelClient(channel thrift.RequestChannel) *MetaServiceChannelClient {
  return &MetaServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  var result MetaServiceCreateSpaceResult
  err = p.RequestChannel.Call(ctx, "createSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  var result MetaServiceDropSpaceResult
  err = p.RequestChannel.Call(ctx, "dropSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceClearSpaceArgs{
    Req : req,
  }
  var result MetaServiceClearSpaceResult
  err = p.RequestChannel.Call(ctx, "clearSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  var result MetaServiceGetSpaceResult
  err = p.RequestChannel.Call(ctx, "getSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  var result MetaServiceListSpacesResult
  err = p.RequestChannel.Call(ctx, "listSpaces", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterSpace(ctx context.Context, req *AlterSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterSpaceArgs{
    Req : req,
  }
  var result MetaServiceAlterSpaceResult
  err = p.RequestChannel.Call(ctx, "alterSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSpaceAs(ctx context.Context, req *CreateSpaceAsReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceAsArgs{
    Req : req,
  }
  var result MetaServiceCreateSpaceAsResult
  err = p.RequestChannel.Call(ctx, "createSpaceAs", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  var result MetaServiceCreateTagResult
  err = p.RequestChannel.Call(ctx, "createTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  var result MetaServiceAlterTagResult
  err = p.RequestChannel.Call(ctx, "alterTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  var result MetaServiceDropTagResult
  err = p.RequestChannel.Call(ctx, "dropTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, err error) {
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  var result MetaServiceGetTagResult
  err = p.RequestChannel.Call(ctx, "getTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, err error) {
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  var result MetaServiceListTagsResult
  err = p.RequestChannel.Call(ctx, "listTags", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  var result MetaServiceCreateEdgeResult
  err = p.RequestChannel.Call(ctx, "createEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  var result MetaServiceAlterEdgeResult
  err = p.RequestChannel.Call(ctx, "alterEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  var result MetaServiceDropEdgeResult
  err = p.RequestChannel.Call(ctx, "dropEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  var result MetaServiceGetEdgeResult
  err = p.RequestChannel.Call(ctx, "getEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  var result MetaServiceListEdgesResult
  err = p.RequestChannel.Call(ctx, "listEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddHosts(ctx context.Context, req *AddHostsReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostsArgs{
    Req : req,
  }
  var result MetaServiceAddHostsResult
  err = p.RequestChannel.Call(ctx, "addHosts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddHostsIntoZone(ctx context.Context, req *AddHostsIntoZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostsIntoZoneArgs{
    Req : req,
  }
  var result MetaServiceAddHostsIntoZoneResult
  err = p.RequestChannel.Call(ctx, "addHostsIntoZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropHosts(ctx context.Context, req *DropHostsReq) (_r *ExecResp, err error) {
  args := MetaServiceDropHostsArgs{
    Req : req,
  }
  var result MetaServiceDropHostsResult
  err = p.RequestChannel.Call(ctx, "dropHosts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, err error) {
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  var result MetaServiceListHostsResult
  err = p.RequestChannel.Call(ctx, "listHosts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  var result MetaServiceGetPartsAllocResult
  err = p.RequestChannel.Call(ctx, "getPartsAlloc", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, err error) {
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  var result MetaServiceListPartsResult
  err = p.RequestChannel.Call(ctx, "listParts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetWorkerId(ctx context.Context, req *GetWorkerIdReq) (_r *GetWorkerIdResp, err error) {
  args := MetaServiceGetWorkerIdArgs{
    Req : req,
  }
  var result MetaServiceGetWorkerIdResult
  err = p.RequestChannel.Call(ctx, "getWorkerId", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  var result MetaServiceCreateTagIndexResult
  err = p.RequestChannel.Call(ctx, "createTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  var result MetaServiceDropTagIndexResult
  err = p.RequestChannel.Call(ctx, "dropTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  var result MetaServiceGetTagIndexResult
  err = p.RequestChannel.Call(ctx, "getTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  var result MetaServiceListTagIndexesResult
  err = p.RequestChannel.Call(ctx, "listTagIndexes", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  var result MetaServiceRebuildTagIndexResult
  err = p.RequestChannel.Call(ctx, "rebuildTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  var result MetaServiceListTagIndexStatusResult
  err = p.RequestChannel.Call(ctx, "listTagIndexStatus", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceCreateEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "createEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceDropEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "dropEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceGetEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "getEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  var result MetaServiceListEdgeIndexesResult
  err = p.RequestChannel.Call(ctx, "listEdgeIndexes", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceRebuildEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "rebuildEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  var result MetaServiceListEdgeIndexStatusResult
  err = p.RequestChannel.Call(ctx, "listEdgeIndexStatus", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  var result MetaServiceCreateUserResult
  err = p.RequestChannel.Call(ctx, "createUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, err error) {
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  var result MetaServiceDropUserResult
  err = p.RequestChannel.Call(ctx, "dropUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  var result MetaServiceAlterUserResult
  err = p.RequestChannel.Call(ctx, "alterUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  var result MetaServiceGrantRoleResult
  err = p.RequestChannel.Call(ctx, "grantRole", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  var result MetaServiceRevokeRoleResult
  err = p.RequestChannel.Call(ctx, "revokeRole", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, err error) {
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  var result MetaServiceListUsersResult
  err = p.RequestChannel.Call(ctx, "listUsers", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  var result MetaServiceListRolesResult
  err = p.RequestChannel.Call(ctx, "listRoles", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  var result MetaServiceGetUserRolesResult
  err = p.RequestChannel.Call(ctx, "getUserRoles", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, err error) {
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  var result MetaServiceChangePasswordResult
  err = p.RequestChannel.Call(ctx, "changePassword", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, err error) {
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  var result MetaServiceHeartBeatResult
  err = p.RequestChannel.Call(ctx, "heartBeat", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AgentHeartbeat(ctx context.Context, req *AgentHBReq) (_r *AgentHBResp, err error) {
  args := MetaServiceAgentHeartbeatArgs{
    Req : req,
  }
  var result MetaServiceAgentHeartbeatResult
  err = p.RequestChannel.Call(ctx, "agentHeartbeat", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  var result MetaServiceRegConfigResult
  err = p.RequestChannel.Call(ctx, "regConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, err error) {
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  var result MetaServiceGetConfigResult
  err = p.RequestChannel.Call(ctx, "getConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  var result MetaServiceSetConfigResult
  err = p.RequestChannel.Call(ctx, "setConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  var result MetaServiceListConfigsResult
  err = p.RequestChannel.Call(ctx, "listConfigs", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  var result MetaServiceCreateSnapshotResult
  err = p.RequestChannel.Call(ctx, "createSnapshot", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  var result MetaServiceDropSnapshotResult
  err = p.RequestChannel.Call(ctx, "dropSnapshot", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  var result MetaServiceListSnapshotsResult
  err = p.RequestChannel.Call(ctx, "listSnapshots", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, err error) {
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  var result MetaServiceRunAdminJobResult
  err = p.RequestChannel.Call(ctx, "runAdminJob", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) MergeZone(ctx context.Context, req *MergeZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceMergeZoneArgs{
    Req : req,
  }
  var result MetaServiceMergeZoneResult
  err = p.RequestChannel.Call(ctx, "mergeZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  var result MetaServiceDropZoneResult
  err = p.RequestChannel.Call(ctx, "dropZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DivideZone(ctx context.Context, req *DivideZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDivideZoneArgs{
    Req : req,
  }
  var result MetaServiceDivideZoneResult
  err = p.RequestChannel.Call(ctx, "divideZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RenameZone(ctx context.Context, req *RenameZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceRenameZoneArgs{
    Req : req,
  }
  var result MetaServiceRenameZoneResult
  err = p.RequestChannel.Call(ctx, "renameZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, err error) {
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  var result MetaServiceGetZoneResult
  err = p.RequestChannel.Call(ctx, "getZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, err error) {
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  var result MetaServiceListZonesResult
  err = p.RequestChannel.Call(ctx, "listZones", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  var result MetaServiceAddListenerResult
  err = p.RequestChannel.Call(ctx, "addListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  var result MetaServiceRemoveListenerResult
  err = p.RequestChannel.Call(ctx, "removeListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, err error) {
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  var result MetaServiceListListenerResult
  err = p.RequestChannel.Call(ctx, "listListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetStats(ctx context.Context, req *GetStatsReq) (_r *GetStatsResp, err error) {
  args := MetaServiceGetStatsArgs{
    Req : req,
  }
  var result MetaServiceGetStatsResult
  err = p.RequestChannel.Call(ctx, "getStats", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SignInService(ctx context.Context, req *SignInServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignInServiceArgs{
    Req : req,
  }
  var result MetaServiceSignInServiceResult
  err = p.RequestChannel.Call(ctx, "signInService", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SignOutService(ctx context.Context, req *SignOutServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignOutServiceArgs{
    Req : req,
  }
  var result MetaServiceSignOutServiceResult
  err = p.RequestChannel.Call(ctx, "signOutService", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListServiceClients(ctx context.Context, req *ListServiceClientsReq) (_r *ListServiceClientsResp, err error) {
  args := MetaServiceListServiceClientsArgs{
    Req : req,
  }
  var result MetaServiceListServiceClientsResult
  err = p.RequestChannel.Call(ctx, "listServiceClients", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateFTIndex(ctx context.Context, req *CreateFTIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateFTIndexArgs{
    Req : req,
  }
  var result MetaServiceCreateFTIndexResult
  err = p.RequestChannel.Call(ctx, "createFTIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropFTIndex(ctx context.Context, req *DropFTIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropFTIndexArgs{
    Req : req,
  }
  var result MetaServiceDropFTIndexResult
  err = p.RequestChannel.Call(ctx, "dropFTIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListFTIndexes(ctx context.Context, req *ListFTIndexesReq) (_r *ListFTIndexesResp, err error) {
  args := MetaServiceListFTIndexesArgs{
    Req : req,
  }
  var result MetaServiceListFTIndexesResult
  err = p.RequestChannel.Call(ctx, "listFTIndexes", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  var result MetaServiceCreateSessionResult
  err = p.RequestChannel.Call(ctx, "createSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *UpdateSessionsResp, err error) {
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  var result MetaServiceUpdateSessionsResult
  err = p.RequestChannel.Call(ctx, "updateSessions", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  var result MetaServiceListSessionsResult
  err = p.RequestChannel.Call(ctx, "listSessions", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, err error) {
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  var result MetaServiceGetSessionResult
  err = p.RequestChannel.Call(ctx, "getSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  var result MetaServiceRemoveSessionResult
  err = p.RequestChannel.Call(ctx, "removeSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) KillQuery(ctx context.Context, req *KillQueryReq) (_r *ExecResp, err error) {
  args := MetaServiceKillQueryArgs{
    Req : req,
  }
  var result MetaServiceKillQueryResult
  err = p.RequestChannel.Call(ctx, "killQuery", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, err error) {
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  var result MetaServiceReportTaskFinishResult
  err = p.RequestChannel.Call(ctx, "reportTaskFinish", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  var result MetaServiceCreateBackupResult
  err = p.RequestChannel.Call(ctx, "createBackup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *RestoreMetaResp, err error) {
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  var result MetaServiceRestoreMetaResult
  err = p.RequestChannel.Call(ctx, "restoreMeta", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListCluster(ctx context.Context, req *ListClusterInfoReq) (_r *ListClusterInfoResp, err error) {
  args := MetaServiceListClusterArgs{
    Req : req,
  }
  var result MetaServiceListClusterResult
  err = p.RequestChannel.Call(ctx, "listCluster", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetMetaDirInfo(ctx context.Context, req *GetMetaDirInfoReq) (_r *GetMetaDirInfoResp, err error) {
  args := MetaServiceGetMetaDirInfoArgs{
    Req : req,
  }
  var result MetaServiceGetMetaDirInfoResult
  err = p.RequestChannel.Call(ctx, "getMetaDirInfo", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) VerifyClientVersion(ctx context.Context, req *VerifyClientVersionReq) (_r *VerifyClientVersionResp, err error) {
  args := MetaServiceVerifyClientVersionArgs{
    Req : req,
  }
  var result MetaServiceVerifyClientVersionResult
  err = p.RequestChannel.Call(ctx, "verifyClientVersion", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SaveGraphVersion(ctx context.Context, req *SaveGraphVersionReq) (_r *SaveGraphVersionResp, err error) {
  args := MetaServiceSaveGraphVersionArgs{
    Req : req,
  }
  var result MetaServiceSaveGraphVersionResult
  err = p.RequestChannel.Call(ctx, "saveGraphVersion", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetSegmentId(ctx context.Context, req *GetSegmentIdReq) (_r *GetSegmentIdResp, err error) {
  args := MetaServiceGetSegmentIdArgs{
    Req : req,
  }
  var result MetaServiceGetSegmentIdResult
  err = p.RequestChannel.Call(ctx, "getSegmentId", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  functionServiceMap map[string]string
  handler MetaService
}

func (p *MetaServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *MetaServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *MetaServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *MetaServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func (p *MetaServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewMetaServiceProcessor(handler MetaService) *MetaServiceProcessor {
  self110 := &MetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext), functionServiceMap:make(map[string]string)}
  self110.processorMap["createSpace"] = &metaServiceProcessorCreateSpace{handler:handler}
  self110.processorMap["dropSpace"] = &metaServiceProcessorDropSpace{handler:handler}
  self110.processorMap["clearSpace"] = &metaServiceProcessorClearSpace{handler:handler}
  self110.processorMap["getSpace"] = &metaServiceProcessorGetSpace{handler:handler}
  self110.processorMap["listSpaces"] = &metaServiceProcessorListSpaces{handler:handler}
  self110.processorMap["alterSpace"] = &metaServiceProcessorAlterSpace{handler:handler}
  self110.processorMap["createSpaceAs"] = &metaServiceProcessorCreateSpaceAs{handler:handler}
  self110.processorMap["createTag"] = &metaServiceProcessorCreateTag{handler:handler}
  self110.processorMap["alterTag"] = &metaServiceProcessorAlterTag{handler:handler}
  self110.processorMap["dropTag"] = &metaServiceProcessorDropTag{handler:handler}
  self110.processorMap["getTag"] = &metaServiceProcessorGetTag{handler:handler}
  self110.processorMap["listTags"] = &metaServiceProcessorListTags{handler:handler}
  self110.processorMap["createEdge"] = &metaServiceProcessorCreateEdge{handler:handler}
  self110.processorMap["alterEdge"] = &metaServiceProcessorAlterEdge{handler:handler}
  self110.processorMap["dropEdge"] = &metaServiceProcessorDropEdge{handler:handler}
  self110.processorMap["getEdge"] = &metaServiceProcessorGetEdge{handler:handler}
  self110.processorMap["listEdges"] = &metaServiceProcessorListEdges{handler:handler}
  self110.processorMap["addHosts"] = &metaServiceProcessorAddHosts{handler:handler}
  self110.processorMap["addHostsIntoZone"] = &metaServiceProcessorAddHostsIntoZone{handler:handler}
  self110.processorMap["dropHosts"] = &metaServiceProcessorDropHosts{handler:handler}
  self110.processorMap["listHosts"] = &metaServiceProcessorListHosts{handler:handler}
  self110.processorMap["getPartsAlloc"] = &metaServiceProcessorGetPartsAlloc{handler:handler}
  self110.processorMap["listParts"] = &metaServiceProcessorListParts{handler:handler}
  self110.processorMap["getWorkerId"] = &metaServiceProcessorGetWorkerId{handler:handler}
  self110.processorMap["createTagIndex"] = &metaServiceProcessorCreateTagIndex{handler:handler}
  self110.processorMap["dropTagIndex"] = &metaServiceProcessorDropTagIndex{handler:handler}
  self110.processorMap["getTagIndex"] = &metaServiceProcessorGetTagIndex{handler:handler}
  self110.processorMap["listTagIndexes"] = &metaServiceProcessorListTagIndexes{handler:handler}
  self110.processorMap["rebuildTagIndex"] = &metaServiceProcessorRebuildTagIndex{handler:handler}
  self110.processorMap["listTagIndexStatus"] = &metaServiceProcessorListTagIndexStatus{handler:handler}
  self110.processorMap["createEdgeIndex"] = &metaServiceProcessorCreateEdgeIndex{handler:handler}
  self110.processorMap["dropEdgeIndex"] = &metaServiceProcessorDropEdgeIndex{handler:handler}
  self110.processorMap["getEdgeIndex"] = &metaServiceProcessorGetEdgeIndex{handler:handler}
  self110.processorMap["listEdgeIndexes"] = &metaServiceProcessorListEdgeIndexes{handler:handler}
  self110.processorMap["rebuildEdgeIndex"] = &metaServiceProcessorRebuildEdgeIndex{handler:handler}
  self110.processorMap["listEdgeIndexStatus"] = &metaServiceProcessorListEdgeIndexStatus{handler:handler}
  self110.processorMap["createUser"] = &metaServiceProcessorCreateUser{handler:handler}
  self110.processorMap["dropUser"] = &metaServiceProcessorDropUser{handler:handler}
  self110.processorMap["alterUser"] = &metaServiceProcessorAlterUser{handler:handler}
  self110.processorMap["grantRole"] = &metaServiceProcessorGrantRole{handler:handler}
  self110.processorMap["revokeRole"] = &metaServiceProcessorRevokeRole{handler:handler}
  self110.processorMap["listUsers"] = &metaServiceProcessorListUsers{handler:handler}
  self110.processorMap["listRoles"] = &metaServiceProcessorListRoles{handler:handler}
  self110.processorMap["getUserRoles"] = &metaServiceProcessorGetUserRoles{handler:handler}
  self110.processorMap["changePassword"] = &metaServiceProcessorChangePassword{handler:handler}
  self110.processorMap["heartBeat"] = &metaServiceProcessorHeartBeat{handler:handler}
  self110.processorMap["agentHeartbeat"] = &metaServiceProcessorAgentHeartbeat{handler:handler}
  self110.processorMap["regConfig"] = &metaServiceProcessorRegConfig{handler:handler}
  self110.processorMap["getConfig"] = &metaServiceProcessorGetConfig{handler:handler}
  self110.processorMap["setConfig"] = &metaServiceProcessorSetConfig{handler:handler}
  self110.processorMap["listConfigs"] = &metaServiceProcessorListConfigs{handler:handler}
  self110.processorMap["createSnapshot"] = &metaServiceProcessorCreateSnapshot{handler:handler}
  self110.processorMap["dropSnapshot"] = &metaServiceProcessorDropSnapshot{handler:handler}
  self110.processorMap["listSnapshots"] = &metaServiceProcessorListSnapshots{handler:handler}
  self110.processorMap["runAdminJob"] = &metaServiceProcessorRunAdminJob{handler:handler}
  self110.processorMap["mergeZone"] = &metaServiceProcessorMergeZone{handler:handler}
  self110.processorMap["dropZone"] = &metaServiceProcessorDropZone{handler:handler}
  self110.processorMap["divideZone"] = &metaServiceProcessorDivideZone{handler:handler}
  self110.processorMap["renameZone"] = &metaServiceProcessorRenameZone{handler:handler}
  self110.processorMap["getZone"] = &metaServiceProcessorGetZone{handler:handler}
  self110.processorMap["listZones"] = &metaServiceProcessorListZones{handler:handler}
  self110.processorMap["addListener"] = &metaServiceProcessorAddListener{handler:handler}
  self110.processorMap["removeListener"] = &metaServiceProcessorRemoveListener{handler:handler}
  self110.processorMap["listListener"] = &metaServiceProcessorListListener{handler:handler}
  self110.processorMap["getStats"] = &metaServiceProcessorGetStats{handler:handler}
  self110.processorMap["signInService"] = &metaServiceProcessorSignInService{handler:handler}
  self110.processorMap["signOutService"] = &metaServiceProcessorSignOutService{handler:handler}
  self110.processorMap["listServiceClients"] = &metaServiceProcessorListServiceClients{handler:handler}
  self110.processorMap["createFTIndex"] = &metaServiceProcessorCreateFTIndex{handler:handler}
  self110.processorMap["dropFTIndex"] = &metaServiceProcessorDropFTIndex{handler:handler}
  self110.processorMap["listFTIndexes"] = &metaServiceProcessorListFTIndexes{handler:handler}
  self110.processorMap["createSession"] = &metaServiceProcessorCreateSession{handler:handler}
  self110.processorMap["updateSessions"] = &metaServiceProcessorUpdateSessions{handler:handler}
  self110.processorMap["listSessions"] = &metaServiceProcessorListSessions{handler:handler}
  self110.processorMap["getSession"] = &metaServiceProcessorGetSession{handler:handler}
  self110.processorMap["removeSession"] = &metaServiceProcessorRemoveSession{handler:handler}
  self110.processorMap["killQuery"] = &metaServiceProcessorKillQuery{handler:handler}
  self110.processorMap["reportTaskFinish"] = &metaServiceProcessorReportTaskFinish{handler:handler}
  self110.processorMap["createBackup"] = &metaServiceProcessorCreateBackup{handler:handler}
  self110.processorMap["restoreMeta"] = &metaServiceProcessorRestoreMeta{handler:handler}
  self110.processorMap["listCluster"] = &metaServiceProcessorListCluster{handler:handler}
  self110.processorMap["getMetaDirInfo"] = &metaServiceProcessorGetMetaDirInfo{handler:handler}
  self110.processorMap["verifyClientVersion"] = &metaServiceProcessorVerifyClientVersion{handler:handler}
  self110.processorMap["saveGraphVersion"] = &metaServiceProcessorSaveGraphVersion{handler:handler}
  self110.processorMap["getSegmentId"] = &metaServiceProcessorGetSegmentId{handler:handler}
  self110.functionServiceMap["createSpace"] = "MetaService"
  self110.functionServiceMap["dropSpace"] = "MetaService"
  self110.functionServiceMap["clearSpace"] = "MetaService"
  self110.functionServiceMap["getSpace"] = "MetaService"
  self110.functionServiceMap["listSpaces"] = "MetaService"
  self110.functionServiceMap["alterSpace"] = "MetaService"
  self110.functionServiceMap["createSpaceAs"] = "MetaService"
  self110.functionServiceMap["createTag"] = "MetaService"
  self110.functionServiceMap["alterTag"] = "MetaService"
  self110.functionServiceMap["dropTag"] = "MetaService"
  self110.functionServiceMap["getTag"] = "MetaService"
  self110.functionServiceMap["listTags"] = "MetaService"
  self110.functionServiceMap["createEdge"] = "MetaService"
  self110.functionServiceMap["alterEdge"] = "MetaService"
  self110.functionServiceMap["dropEdge"] = "MetaService"
  self110.functionServiceMap["getEdge"] = "MetaService"
  self110.functionServiceMap["listEdges"] = "MetaService"
  self110.functionServiceMap["addHosts"] = "MetaService"
  self110.functionServiceMap["addHostsIntoZone"] = "MetaService"
  self110.functionServiceMap["dropHosts"] = "MetaService"
  self110.functionServiceMap["listHosts"] = "MetaService"
  self110.functionServiceMap["getPartsAlloc"] = "MetaService"
  self110.functionServiceMap["listParts"] = "MetaService"
  self110.functionServiceMap["getWorkerId"] = "MetaService"
  self110.functionServiceMap["createTagIndex"] = "MetaService"
  self110.functionServiceMap["dropTagIndex"] = "MetaService"
  self110.functionServiceMap["getTagIndex"] = "MetaService"
  self110.functionServiceMap["listTagIndexes"] = "MetaService"
  self110.functionServiceMap["rebuildTagIndex"] = "MetaService"
  self110.functionServiceMap["listTagIndexStatus"] = "MetaService"
  self110.functionServiceMap["createEdgeIndex"] = "MetaService"
  self110.functionServiceMap["dropEdgeIndex"] = "MetaService"
  self110.functionServiceMap["getEdgeIndex"] = "MetaService"
  self110.functionServiceMap["listEdgeIndexes"] = "MetaService"
  self110.functionServiceMap["rebuildEdgeIndex"] = "MetaService"
  self110.functionServiceMap["listEdgeIndexStatus"] = "MetaService"
  self110.functionServiceMap["createUser"] = "MetaService"
  self110.functionServiceMap["dropUser"] = "MetaService"
  self110.functionServiceMap["alterUser"] = "MetaService"
  self110.functionServiceMap["grantRole"] = "MetaService"
  self110.functionServiceMap["revokeRole"] = "MetaService"
  self110.functionServiceMap["listUsers"] = "MetaService"
  self110.functionServiceMap["listRoles"] = "MetaService"
  self110.functionServiceMap["getUserRoles"] = "MetaService"
  self110.functionServiceMap["changePassword"] = "MetaService"
  self110.functionServiceMap["heartBeat"] = "MetaService"
  self110.functionServiceMap["agentHeartbeat"] = "MetaService"
  self110.functionServiceMap["regConfig"] = "MetaService"
  self110.functionServiceMap["getConfig"] = "MetaService"
  self110.functionServiceMap["setConfig"] = "MetaService"
  self110.functionServiceMap["listConfigs"] = "MetaService"
  self110.functionServiceMap["createSnapshot"] = "MetaService"
  self110.functionServiceMap["dropSnapshot"] = "MetaService"
  self110.functionServiceMap["listSnapshots"] = "MetaService"
  self110.functionServiceMap["runAdminJob"] = "MetaService"
  self110.functionServiceMap["mergeZone"] = "MetaService"
  self110.functionServiceMap["dropZone"] = "MetaService"
  self110.functionServiceMap["divideZone"] = "MetaService"
  self110.functionServiceMap["renameZone"] = "MetaService"
  self110.functionServiceMap["getZone"] = "MetaService"
  self110.functionServiceMap["listZones"] = "MetaService"
  self110.functionServiceMap["addListener"] = "MetaService"
  self110.functionServiceMap["removeListener"] = "MetaService"
  self110.functionServiceMap["listListener"] = "MetaService"
  self110.functionServiceMap["getStats"] = "MetaService"
  self110.functionServiceMap["signInService"] = "MetaService"
  self110.functionServiceMap["signOutService"] = "MetaService"
  self110.functionServiceMap["listServiceClients"] = "MetaService"
  self110.functionServiceMap["createFTIndex"] = "MetaService"
  self110.functionServiceMap["dropFTIndex"] = "MetaService"
  self110.functionServiceMap["listFTIndexes"] = "MetaService"
  self110.functionServiceMap["createSession"] = "MetaService"
  self110.functionServiceMap["updateSessions"] = "MetaService"
  self110.functionServiceMap["listSessions"] = "MetaService"
  self110.functionServiceMap["getSession"] = "MetaService"
  self110.functionServiceMap["removeSession"] = "MetaService"
  self110.functionServiceMap["killQuery"] = "MetaService"
  self110.functionServiceMap["reportTaskFinish"] = "MetaService"
  self110.functionServiceMap["createBackup"] = "MetaService"
  self110.functionServiceMap["restoreMeta"] = "MetaService"
  self110.functionServiceMap["listCluster"] = "MetaService"
  self110.functionServiceMap["getMetaDirInfo"] = "MetaService"
  self110.functionServiceMap["verifyClientVersion"] = "MetaService"
  self110.functionServiceMap["saveGraphVersion"] = "MetaService"
  self110.functionServiceMap["getSegmentId"] = "MetaService"
  return self110
}

type metaServiceProcessorCreateSpace struct {
  handler MetaService
}

func (p *MetaServiceCreateSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSpaceArgs)
  var result MetaServiceCreateSpaceResult
  if retval, err := p.handler.CreateSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSpace struct {
  handler MetaService
}

func (p *MetaServiceDropSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSpaceArgs)
  var result MetaServiceDropSpaceResult
  if retval, err := p.handler.DropSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorClearSpace struct {
  handler MetaService
}

func (p *MetaServiceClearSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorClearSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceClearSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorClearSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("clearSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorClearSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceClearSpaceArgs)
  var result MetaServiceClearSpaceResult
  if retval, err := p.handler.ClearSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSpace struct {
  handler MetaService
}

func (p *MetaServiceGetSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSpaceArgs)
  var result MetaServiceGetSpaceResult
  if retval, err := p.handler.GetSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSpaces struct {
  handler MetaService
}

func (p *MetaServiceListSpacesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListSpaces) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSpacesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSpaces) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSpaces", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSpaces) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSpacesArgs)
  var result MetaServiceListSpacesResult
  if retval, err := p.handler.ListSpaces(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSpaces: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterSpace struct {
  handler MetaService
}

func (p *MetaServiceAlterSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAlterSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterSpaceArgs)
  var result MetaServiceAlterSpaceResult
  if retval, err := p.handler.AlterSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSpaceAs struct {
  handler MetaService
}

func (p *MetaServiceCreateSpaceAsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateSpaceAs) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSpaceAsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSpaceAs) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSpaceAs", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSpaceAs) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSpaceAsArgs)
  var result MetaServiceCreateSpaceAsResult
  if retval, err := p.handler.CreateSpaceAs(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpaceAs: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTag struct {
  handler MetaService
}

func (p *MetaServiceCreateTagResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagArgs)
  var result MetaServiceCreateTagResult
  if retval, err := p.handler.CreateTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterTag struct {
  handler MetaService
}

func (p *MetaServiceAlterTagResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAlterTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterTagArgs)
  var result MetaServiceAlterTagResult
  if retval, err := p.handler.AlterTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTag struct {
  handler MetaService
}

func (p *MetaServiceDropTagResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagArgs)
  var result MetaServiceDropTagResult
  if retval, err := p.handler.DropTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTag struct {
  handler MetaService
}

func (p *MetaServiceGetTagResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagArgs)
  var result MetaServiceGetTagResult
  if retval, err := p.handler.GetTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTags struct {
  handler MetaService
}

func (p *MetaServiceListTagsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListTags) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTags) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTags", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTags) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagsArgs)
  var result MetaServiceListTagsResult
  if retval, err := p.handler.ListTags(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdge struct {
  handler MetaService
}

func (p *MetaServiceCreateEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeArgs)
  var result MetaServiceCreateEdgeResult
  if retval, err := p.handler.CreateEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterEdge struct {
  handler MetaService
}

func (p *MetaServiceAlterEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAlterEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterEdgeArgs)
  var result MetaServiceAlterEdgeResult
  if retval, err := p.handler.AlterEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdge struct {
  handler MetaService
}

func (p *MetaServiceDropEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeArgs)
  var result MetaServiceDropEdgeResult
  if retval, err := p.handler.DropEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdge struct {
  handler MetaService
}

func (p *MetaServiceGetEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeArgs)
  var result MetaServiceGetEdgeResult
  if retval, err := p.handler.GetEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdges struct {
  handler MetaService
}

func (p *MetaServiceListEdgesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgesArgs)
  var result MetaServiceListEdgesResult
  if retval, err := p.handler.ListEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddHosts struct {
  handler MetaService
}

func (p *MetaServiceAddHostsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAddHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddHosts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddHostsArgs)
  var result MetaServiceAddHostsResult
  if retval, err := p.handler.AddHosts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddHostsIntoZone struct {
  handler MetaService
}

func (p *MetaServiceAddHostsIntoZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAddHostsIntoZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddHostsIntoZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddHostsIntoZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addHostsIntoZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddHostsIntoZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddHostsIntoZoneArgs)
  var result MetaServiceAddHostsIntoZoneResult
  if retval, err := p.handler.AddHostsIntoZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHostsIntoZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropHosts struct {
  handler MetaService
}

func (p *MetaServiceDropHostsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropHosts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropHostsArgs)
  var result MetaServiceDropHostsResult
  if retval, err := p.handler.DropHosts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListHosts struct {
  handler MetaService
}

func (p *MetaServiceListHostsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListHosts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListHostsArgs)
  var result MetaServiceListHostsResult
  if retval, err := p.handler.ListHosts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetPartsAlloc struct {
  handler MetaService
}

func (p *MetaServiceGetPartsAllocResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetPartsAlloc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetPartsAllocArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetPartsAlloc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getPartsAlloc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetPartsAlloc) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetPartsAllocArgs)
  var result MetaServiceGetPartsAllocResult
  if retval, err := p.handler.GetPartsAlloc(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartsAlloc: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListParts struct {
  handler MetaService
}

func (p *MetaServiceListPartsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListParts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListPartsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListParts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listParts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListParts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListPartsArgs)
  var result MetaServiceListPartsResult
  if retval, err := p.handler.ListParts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listParts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetWorkerId struct {
  handler MetaService
}

func (p *MetaServiceGetWorkerIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetWorkerId) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetWorkerIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetWorkerId) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getWorkerId", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetWorkerId) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetWorkerIdArgs)
  var result MetaServiceGetWorkerIdResult
  if retval, err := p.handler.GetWorkerId(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkerId: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTagIndex struct {
  handler MetaService
}

func (p *MetaServiceCreateTagIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagIndexArgs)
  var result MetaServiceCreateTagIndexResult
  if retval, err := p.handler.CreateTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTagIndex struct {
  handler MetaService
}

func (p *MetaServiceDropTagIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagIndexArgs)
  var result MetaServiceDropTagIndexResult
  if retval, err := p.handler.DropTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTagIndex struct {
  handler MetaService
}

func (p *MetaServiceGetTagIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagIndexArgs)
  var result MetaServiceGetTagIndexResult
  if retval, err := p.handler.GetTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexes struct {
  handler MetaService
}

func (p *MetaServiceListTagIndexesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListTagIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexes) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexesArgs)
  var result MetaServiceListTagIndexesResult
  if retval, err := p.handler.ListTagIndexes(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildTagIndex struct {
  handler MetaService
}

func (p *MetaServiceRebuildTagIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRebuildTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildTagIndexArgs)
  var result MetaServiceRebuildTagIndexResult
  if retval, err := p.handler.RebuildTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexStatus struct {
  handler MetaService
}

func (p *MetaServiceListTagIndexStatusResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListTagIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexStatus) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexStatusArgs)
  var result MetaServiceListTagIndexStatusResult
  if retval, err := p.handler.ListTagIndexStatus(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdgeIndex struct {
  handler MetaService
}

func (p *MetaServiceCreateEdgeIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeIndexArgs)
  var result MetaServiceCreateEdgeIndexResult
  if retval, err := p.handler.CreateEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdgeIndex struct {
  handler MetaService
}

func (p *MetaServiceDropEdgeIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeIndexArgs)
  var result MetaServiceDropEdgeIndexResult
  if retval, err := p.handler.DropEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdgeIndex struct {
  handler MetaService
}

func (p *MetaServiceGetEdgeIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeIndexArgs)
  var result MetaServiceGetEdgeIndexResult
  if retval, err := p.handler.GetEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexes struct {
  handler MetaService
}

func (p *MetaServiceListEdgeIndexesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListEdgeIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexes) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexesArgs)
  var result MetaServiceListEdgeIndexesResult
  if retval, err := p.handler.ListEdgeIndexes(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildEdgeIndex struct {
  handler MetaService
}

func (p *MetaServiceRebuildEdgeIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRebuildEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildEdgeIndexArgs)
  var result MetaServiceRebuildEdgeIndexResult
  if retval, err := p.handler.RebuildEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexStatus struct {
  handler MetaService
}

func (p *MetaServiceListEdgeIndexStatusResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListEdgeIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexStatus) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexStatusArgs)
  var result MetaServiceListEdgeIndexStatusResult
  if retval, err := p.handler.ListEdgeIndexStatus(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateUser struct {
  handler MetaService
}

func (p *MetaServiceCreateUserResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateUserArgs)
  var result MetaServiceCreateUserResult
  if retval, err := p.handler.CreateUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropUser struct {
  handler MetaService
}

func (p *MetaServiceDropUserResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropUserArgs)
  var result MetaServiceDropUserResult
  if retval, err := p.handler.DropUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterUser struct {
  handler MetaService
}

func (p *MetaServiceAlterUserResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAlterUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterUserArgs)
  var result MetaServiceAlterUserResult
  if retval, err := p.handler.AlterUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGrantRole struct {
  handler MetaService
}

func (p *MetaServiceGrantRoleResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGrantRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGrantRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGrantRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("grantRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGrantRole) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGrantRoleArgs)
  var result MetaServiceGrantRoleResult
  if retval, err := p.handler.GrantRole(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRevokeRole struct {
  handler MetaService
}

func (p *MetaServiceRevokeRoleResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRevokeRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRevokeRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRevokeRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("revokeRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRevokeRole) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRevokeRoleArgs)
  var result MetaServiceRevokeRoleResult
  if retval, err := p.handler.RevokeRole(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListUsers struct {
  handler MetaService
}

func (p *MetaServiceListUsersResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListUsers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListUsersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListUsers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listUsers", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListUsers) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListUsersArgs)
  var result MetaServiceListUsersResult
  if retval, err := p.handler.ListUsers(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUsers: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListRoles struct {
  handler MetaService
}

func (p *MetaServiceListRolesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListRoles) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListRolesArgs)
  var result MetaServiceListRolesResult
  if retval, err := p.handler.ListRoles(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetUserRoles struct {
  handler MetaService
}

func (p *MetaServiceGetUserRolesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetUserRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetUserRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetUserRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getUserRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetUserRoles) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetUserRolesArgs)
  var result MetaServiceGetUserRolesResult
  if retval, err := p.handler.GetUserRoles(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorChangePassword struct {
  handler MetaService
}

func (p *MetaServiceChangePasswordResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorChangePassword) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceChangePasswordArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorChangePassword) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("changePassword", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorChangePassword) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceChangePasswordArgs)
  var result MetaServiceChangePasswordResult
  if retval, err := p.handler.ChangePassword(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorHeartBeat struct {
  handler MetaService
}

func (p *MetaServiceHeartBeatResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorHeartBeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceHeartBeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorHeartBeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("heartBeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorHeartBeat) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceHeartBeatArgs)
  var result MetaServiceHeartBeatResult
  if retval, err := p.handler.HeartBeat(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAgentHeartbeat struct {
  handler MetaService
}

func (p *MetaServiceAgentHeartbeatResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAgentHeartbeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAgentHeartbeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAgentHeartbeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("agentHeartbeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAgentHeartbeat) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAgentHeartbeatArgs)
  var result MetaServiceAgentHeartbeatResult
  if retval, err := p.handler.AgentHeartbeat(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing agentHeartbeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRegConfig struct {
  handler MetaService
}

func (p *MetaServiceRegConfigResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRegConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRegConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRegConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("regConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRegConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRegConfigArgs)
  var result MetaServiceRegConfigResult
  if retval, err := p.handler.RegConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing regConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetConfig struct {
  handler MetaService
}

func (p *MetaServiceGetConfigResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetConfigArgs)
  var result MetaServiceGetConfigResult
  if retval, err := p.handler.GetConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSetConfig struct {
  handler MetaService
}

func (p *MetaServiceSetConfigResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorSetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("setConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSetConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSetConfigArgs)
  var result MetaServiceSetConfigResult
  if retval, err := p.handler.SetConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListConfigs struct {
  handler MetaService
}

func (p *MetaServiceListConfigsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListConfigs) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListConfigsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListConfigs) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listConfigs", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListConfigs) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListConfigsArgs)
  var result MetaServiceListConfigsResult
  if retval, err := p.handler.ListConfigs(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConfigs: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSnapshot struct {
  handler MetaService
}

func (p *MetaServiceCreateSnapshotResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSnapshot) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSnapshotArgs)
  var result MetaServiceCreateSnapshotResult
  if retval, err := p.handler.CreateSnapshot(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSnapshot struct {
  handler MetaService
}

func (p *MetaServiceDropSnapshotResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSnapshot) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSnapshotArgs)
  var result MetaServiceDropSnapshotResult
  if retval, err := p.handler.DropSnapshot(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSnapshots struct {
  handler MetaService
}

func (p *MetaServiceListSnapshotsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListSnapshots) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSnapshotsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSnapshots) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSnapshots", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSnapshots) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSnapshotsArgs)
  var result MetaServiceListSnapshotsResult
  if retval, err := p.handler.ListSnapshots(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSnapshots: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRunAdminJob struct {
  handler MetaService
}

func (p *MetaServiceRunAdminJobResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRunAdminJob) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRunAdminJobArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRunAdminJob) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("runAdminJob", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRunAdminJob) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRunAdminJobArgs)
  var result MetaServiceRunAdminJobResult
  if retval, err := p.handler.RunAdminJob(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing runAdminJob: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMergeZone struct {
  handler MetaService
}

func (p *MetaServiceMergeZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorMergeZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMergeZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMergeZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("mergeZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMergeZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMergeZoneArgs)
  var result MetaServiceMergeZoneResult
  if retval, err := p.handler.MergeZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropZone struct {
  handler MetaService
}

func (p *MetaServiceDropZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropZoneArgs)
  var result MetaServiceDropZoneResult
  if retval, err := p.handler.DropZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDivideZone struct {
  handler MetaService
}

func (p *MetaServiceDivideZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDivideZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDivideZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDivideZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("divideZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDivideZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDivideZoneArgs)
  var result MetaServiceDivideZoneResult
  if retval, err := p.handler.DivideZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing divideZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRenameZone struct {
  handler MetaService
}

func (p *MetaServiceRenameZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRenameZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRenameZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRenameZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("renameZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRenameZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRenameZoneArgs)
  var result MetaServiceRenameZoneResult
  if retval, err := p.handler.RenameZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renameZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetZone struct {
  handler MetaService
}

func (p *MetaServiceGetZoneResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetZoneArgs)
  var result MetaServiceGetZoneResult
  if retval, err := p.handler.GetZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListZones struct {
  handler MetaService
}

func (p *MetaServiceListZonesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListZones) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListZonesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListZones) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listZones", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListZones) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListZonesArgs)
  var result MetaServiceListZonesResult
  if retval, err := p.handler.ListZones(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listZones: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddListener struct {
  handler MetaService
}

func (p *MetaServiceAddListenerResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorAddListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddListenerArgs)
  var result MetaServiceAddListenerResult
  if retval, err := p.handler.AddListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveListener struct {
  handler MetaService
}

func (p *MetaServiceRemoveListenerResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRemoveListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveListenerArgs)
  var result MetaServiceRemoveListenerResult
  if retval, err := p.handler.RemoveListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListListener struct {
  handler MetaService
}

func (p *MetaServiceListListenerResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListListenerArgs)
  var result MetaServiceListListenerResult
  if retval, err := p.handler.ListListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetStats struct {
  handler MetaService
}

func (p *MetaServiceGetStatsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetStats) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetStatsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetStats) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getStats", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetStats) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetStatsArgs)
  var result MetaServiceGetStatsResult
  if retval, err := p.handler.GetStats(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStats: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignInService struct {
  handler MetaService
}

func (p *MetaServiceSignInServiceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorSignInService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignInServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignInService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signInService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignInService) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignInServiceArgs)
  var result MetaServiceSignInServiceResult
  if retval, err := p.handler.SignInService(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signInService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignOutService struct {
  handler MetaService
}

func (p *MetaServiceSignOutServiceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorSignOutService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignOutServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignOutService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signOutService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignOutService) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignOutServiceArgs)
  var result MetaServiceSignOutServiceResult
  if retval, err := p.handler.SignOutService(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signOutService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListServiceClients struct {
  handler MetaService
}

func (p *MetaServiceListServiceClientsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListServiceClients) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListServiceClientsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListServiceClients) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listServiceClients", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListServiceClients) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListServiceClientsArgs)
  var result MetaServiceListServiceClientsResult
  if retval, err := p.handler.ListServiceClients(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listServiceClients: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateFTIndex struct {
  handler MetaService
}

func (p *MetaServiceCreateFTIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateFTIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateFTIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateFTIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createFTIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateFTIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateFTIndexArgs)
  var result MetaServiceCreateFTIndexResult
  if retval, err := p.handler.CreateFTIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createFTIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropFTIndex struct {
  handler MetaService
}

func (p *MetaServiceDropFTIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorDropFTIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropFTIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropFTIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropFTIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropFTIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropFTIndexArgs)
  var result MetaServiceDropFTIndexResult
  if retval, err := p.handler.DropFTIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropFTIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListFTIndexes struct {
  handler MetaService
}

func (p *MetaServiceListFTIndexesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListFTIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListFTIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListFTIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listFTIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListFTIndexes) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListFTIndexesArgs)
  var result MetaServiceListFTIndexesResult
  if retval, err := p.handler.ListFTIndexes(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listFTIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSession struct {
  handler MetaService
}

func (p *MetaServiceCreateSessionResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSessionArgs)
  var result MetaServiceCreateSessionResult
  if retval, err := p.handler.CreateSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorUpdateSessions struct {
  handler MetaService
}

func (p *MetaServiceUpdateSessionsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorUpdateSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceUpdateSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorUpdateSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("updateSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorUpdateSessions) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceUpdateSessionsArgs)
  var result MetaServiceUpdateSessionsResult
  if retval, err := p.handler.UpdateSessions(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSessions struct {
  handler MetaService
}

func (p *MetaServiceListSessionsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSessions) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSessionsArgs)
  var result MetaServiceListSessionsResult
  if retval, err := p.handler.ListSessions(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSession struct {
  handler MetaService
}

func (p *MetaServiceGetSessionResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSessionArgs)
  var result MetaServiceGetSessionResult
  if retval, err := p.handler.GetSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveSession struct {
  handler MetaService
}

func (p *MetaServiceRemoveSessionResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRemoveSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveSessionArgs)
  var result MetaServiceRemoveSessionResult
  if retval, err := p.handler.RemoveSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorKillQuery struct {
  handler MetaService
}

func (p *MetaServiceKillQueryResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorKillQuery) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceKillQueryArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorKillQuery) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("killQuery", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorKillQuery) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceKillQueryArgs)
  var result MetaServiceKillQueryResult
  if retval, err := p.handler.KillQuery(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing killQuery: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorReportTaskFinish struct {
  handler MetaService
}

func (p *MetaServiceReportTaskFinishResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorReportTaskFinish) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceReportTaskFinishArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorReportTaskFinish) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("reportTaskFinish", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorReportTaskFinish) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceReportTaskFinishArgs)
  var result MetaServiceReportTaskFinishResult
  if retval, err := p.handler.ReportTaskFinish(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskFinish: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateBackup struct {
  handler MetaService
}

func (p *MetaServiceCreateBackupResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorCreateBackup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateBackupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateBackup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createBackup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateBackup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateBackupArgs)
  var result MetaServiceCreateBackupResult
  if retval, err := p.handler.CreateBackup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createBackup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRestoreMeta struct {
  handler MetaService
}

func (p *MetaServiceRestoreMetaResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorRestoreMeta) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRestoreMetaArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRestoreMeta) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("restoreMeta", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRestoreMeta) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRestoreMetaArgs)
  var result MetaServiceRestoreMetaResult
  if retval, err := p.handler.RestoreMeta(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restoreMeta: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListCluster struct {
  handler MetaService
}

func (p *MetaServiceListClusterResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorListCluster) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListClusterArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListCluster) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listCluster", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListCluster) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListClusterArgs)
  var result MetaServiceListClusterResult
  if retval, err := p.handler.ListCluster(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listCluster: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetMetaDirInfo struct {
  handler MetaService
}

func (p *MetaServiceGetMetaDirInfoResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetMetaDirInfo) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetMetaDirInfoArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetMetaDirInfo) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getMetaDirInfo", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetMetaDirInfo) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetMetaDirInfoArgs)
  var result MetaServiceGetMetaDirInfoResult
  if retval, err := p.handler.GetMetaDirInfo(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaDirInfo: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorVerifyClientVersion struct {
  handler MetaService
}

func (p *MetaServiceVerifyClientVersionResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorVerifyClientVersion) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceVerifyClientVersionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorVerifyClientVersion) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("verifyClientVersion", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorVerifyClientVersion) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceVerifyClientVersionArgs)
  var result MetaServiceVerifyClientVersionResult
  if retval, err := p.handler.VerifyClientVersion(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyClientVersion: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSaveGraphVersion struct {
  handler MetaService
}

func (p *MetaServiceSaveGraphVersionResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorSaveGraphVersion) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSaveGraphVersionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSaveGraphVersion) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("saveGraphVersion", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSaveGraphVersion) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSaveGraphVersionArgs)
  var result MetaServiceSaveGraphVersionResult
  if retval, err := p.handler.SaveGraphVersion(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing saveGraphVersion: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSegmentId struct {
  handler MetaService
}

func (p *MetaServiceGetSegmentIdResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *metaServiceProcessorGetSegmentId) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSegmentIdArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSegmentId) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSegmentId", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSegmentId) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSegmentIdArgs)
  var result MetaServiceGetSegmentIdResult
  if retval, err := p.handler.GetSegmentId(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSegmentId: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type MetaServiceCreateSpaceArgs struct {
  thrift.IRequest
  Req *CreateSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceArgs() *MetaServiceCreateSpaceArgs {
  return &MetaServiceCreateSpaceArgs{
    Req: NewCreateSpaceReq(),
  }
}

var MetaServiceCreateSpaceArgs_Req_DEFAULT *CreateSpaceReq
func (p *MetaServiceCreateSpaceArgs) GetReq() *CreateSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateSpaceArgsBuilder struct {
  obj *MetaServiceCreateSpaceArgs
}

func NewMetaServiceCreateSpaceArgsBuilder() *MetaServiceCreateSpaceArgsBuilder{
  return &MetaServiceCreateSpaceArgsBuilder{
    obj: NewMetaServiceCreateSpaceArgs(),
  }
}

func (p MetaServiceCreateSpaceArgsBuilder) Emit() *MetaServiceCreateSpaceArgs{
  return &MetaServiceCreateSpaceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateSpaceArgsBuilder) Req(req *CreateSpaceReq) *MetaServiceCreateSpaceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateSpaceArgs) SetReq(req *CreateSpaceReq) *MetaServiceCreateSpaceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceResult() *MetaServiceCreateSpaceResult {
  return &MetaServiceCreateSpaceResult{}
}

var MetaServiceCreateSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateSpaceResultBuilder struct {
  obj *MetaServiceCreateSpaceResult
}

func NewMetaServiceCreateSpaceResultBuilder() *MetaServiceCreateSpaceResultBuilder{
  return &MetaServiceCreateSpaceResultBuilder{
    obj: NewMetaServiceCreateSpaceResult(),
  }
}

func (p MetaServiceCreateSpaceResultBuilder) Emit() *MetaServiceCreateSpaceResult{
  return &MetaServiceCreateSpaceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateSpaceResultBuilder) Success(success *ExecResp) *MetaServiceCreateSpaceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateSpaceResult) SetSuccess(success *ExecResp) *MetaServiceCreateSpaceResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropSpaceArgs struct {
  thrift.IRequest
  Req *DropSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSpaceArgs() *MetaServiceDropSpaceArgs {
  return &MetaServiceDropSpaceArgs{
    Req: NewDropSpaceReq(),
  }
}

var MetaServiceDropSpaceArgs_Req_DEFAULT *DropSpaceReq
func (p *MetaServiceDropSpaceArgs) GetReq() *DropSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceDropSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropSpaceArgsBuilder struct {
  obj *MetaServiceDropSpaceArgs
}

func NewMetaServiceDropSpaceArgsBuilder() *MetaServiceDropSpaceArgsBuilder{
  return &MetaServiceDropSpaceArgsBuilder{
    obj: NewMetaServiceDropSpaceArgs(),
  }
}

func (p MetaServiceDropSpaceArgsBuilder) Emit() *MetaServiceDropSpaceArgs{
  return &MetaServiceDropSpaceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropSpaceArgsBuilder) Req(req *DropSpaceReq) *MetaServiceDropSpaceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropSpaceArgs) SetReq(req *DropSpaceReq) *MetaServiceDropSpaceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSpaceResult() *MetaServiceDropSpaceResult {
  return &MetaServiceDropSpaceResult{}
}

var MetaServiceDropSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropSpaceResultBuilder struct {
  obj *MetaServiceDropSpaceResult
}

func NewMetaServiceDropSpaceResultBuilder() *MetaServiceDropSpaceResultBuilder{
  return &MetaServiceDropSpaceResultBuilder{
    obj: NewMetaServiceDropSpaceResult(),
  }
}

func (p MetaServiceDropSpaceResultBuilder) Emit() *MetaServiceDropSpaceResult{
  return &MetaServiceDropSpaceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropSpaceResultBuilder) Success(success *ExecResp) *MetaServiceDropSpaceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropSpaceResult) SetSuccess(success *ExecResp) *MetaServiceDropSpaceResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceClearSpaceArgs struct {
  thrift.IRequest
  Req *ClearSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceClearSpaceArgs() *MetaServiceClearSpaceArgs {
  return &MetaServiceClearSpaceArgs{
    Req: NewClearSpaceReq(),
  }
}

var MetaServiceClearSpaceArgs_Req_DEFAULT *ClearSpaceReq
func (p *MetaServiceClearSpaceArgs) GetReq() *ClearSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceClearSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceClearSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceClearSpaceArgsBuilder struct {
  obj *MetaServiceClearSpaceArgs
}

func NewMetaServiceClearSpaceArgsBuilder() *MetaServiceClearSpaceArgsBuilder{
  return &MetaServiceClearSpaceArgsBuilder{
    obj: NewMetaServiceClearSpaceArgs(),
  }
}

func (p MetaServiceClearSpaceArgsBuilder) Emit() *MetaServiceClearSpaceArgs{
  return &MetaServiceClearSpaceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceClearSpaceArgsBuilder) Req(req *ClearSpaceReq) *MetaServiceClearSpaceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceClearSpaceArgs) SetReq(req *ClearSpaceReq) *MetaServiceClearSpaceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceClearSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewClearSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("clearSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceClearSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceClearSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceClearSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceClearSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceClearSpaceResult() *MetaServiceClearSpaceResult {
  return &MetaServiceClearSpaceResult{}
}

var MetaServiceClearSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceClearSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceClearSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceClearSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceClearSpaceResultBuilder struct {
  obj *MetaServiceClearSpaceResult
}

func NewMetaServiceClearSpaceResultBuilder() *MetaServiceClearSpaceResultBuilder{
  return &MetaServiceClearSpaceResultBuilder{
    obj: NewMetaServiceClearSpaceResult(),
  }
}

func (p MetaServiceClearSpaceResultBuilder) Emit() *MetaServiceClearSpaceResult{
  return &MetaServiceClearSpaceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceClearSpaceResultBuilder) Success(success *ExecResp) *MetaServiceClearSpaceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceClearSpaceResult) SetSuccess(success *ExecResp) *MetaServiceClearSpaceResult {
  m.Success = success
  return m
}

func (p *MetaServiceClearSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceClearSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("clearSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceClearSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceClearSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceClearSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetSpaceArgs struct {
  thrift.IRequest
  Req *GetSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSpaceArgs() *MetaServiceGetSpaceArgs {
  return &MetaServiceGetSpaceArgs{
    Req: NewGetSpaceReq(),
  }
}

var MetaServiceGetSpaceArgs_Req_DEFAULT *GetSpaceReq
func (p *MetaServiceGetSpaceArgs) GetReq() *GetSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceGetSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetSpaceArgsBuilder struct {
  obj *MetaServiceGetSpaceArgs
}

func NewMetaServiceGetSpaceArgsBuilder() *MetaServiceGetSpaceArgsBuilder{
  return &MetaServiceGetSpaceArgsBuilder{
    obj: NewMetaServiceGetSpaceArgs(),
  }
}

func (p MetaServiceGetSpaceArgsBuilder) Emit() *MetaServiceGetSpaceArgs{
  return &MetaServiceGetSpaceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetSpaceArgsBuilder) Req(req *GetSpaceReq) *MetaServiceGetSpaceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetSpaceArgs) SetReq(req *GetSpaceReq) *MetaServiceGetSpaceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetSpaceResult struct {
  thrift.IResponse
  Success *GetSpaceResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSpaceResult() *MetaServiceGetSpaceResult {
  return &MetaServiceGetSpaceResult{}
}

var MetaServiceGetSpaceResult_Success_DEFAULT *GetSpaceResp
func (p *MetaServiceGetSpaceResult) GetSuccess() *GetSpaceResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetSpaceResultBuilder struct {
  obj *MetaServiceGetSpaceResult
}

func NewMetaServiceGetSpaceResultBuilder() *MetaServiceGetSpaceResultBuilder{
  return &MetaServiceGetSpaceResultBuilder{
    obj: NewMetaServiceGetSpaceResult(),
  }
}

func (p MetaServiceGetSpaceResultBuilder) Emit() *MetaServiceGetSpaceResult{
  return &MetaServiceGetSpaceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetSpaceResultBuilder) Success(success *GetSpaceResp) *MetaServiceGetSpaceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetSpaceResult) SetSuccess(success *GetSpaceResp) *MetaServiceGetSpaceResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSpaceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSpacesArgs struct {
  thrift.IRequest
  Req *ListSpacesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSpacesArgs() *MetaServiceListSpacesArgs {
  return &MetaServiceListSpacesArgs{
    Req: NewListSpacesReq(),
  }
}

var MetaServiceListSpacesArgs_Req_DEFAULT *ListSpacesReq
func (p *MetaServiceListSpacesArgs) GetReq() *ListSpacesReq {
  if !p.IsSetReq() {
    return MetaServiceListSpacesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSpacesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListSpacesArgsBuilder struct {
  obj *MetaServiceListSpacesArgs
}

func NewMetaServiceListSpacesArgsBuilder() *MetaServiceListSpacesArgsBuilder{
  return &MetaServiceListSpacesArgsBuilder{
    obj: NewMetaServiceListSpacesArgs(),
  }
}

func (p MetaServiceListSpacesArgsBuilder) Emit() *MetaServiceListSpacesArgs{
  return &MetaServiceListSpacesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListSpacesArgsBuilder) Req(req *ListSpacesReq) *MetaServiceListSpacesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListSpacesArgs) SetReq(req *ListSpacesReq) *MetaServiceListSpacesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListSpacesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSpacesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSpacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSpacesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSpacesResult struct {
  thrift.IResponse
  Success *ListSpacesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSpacesResult() *MetaServiceListSpacesResult {
  return &MetaServiceListSpacesResult{}
}

var MetaServiceListSpacesResult_Success_DEFAULT *ListSpacesResp
func (p *MetaServiceListSpacesResult) GetSuccess() *ListSpacesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSpacesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSpacesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListSpacesResultBuilder struct {
  obj *MetaServiceListSpacesResult
}

func NewMetaServiceListSpacesResultBuilder() *MetaServiceListSpacesResultBuilder{
  return &MetaServiceListSpacesResultBuilder{
    obj: NewMetaServiceListSpacesResult(),
  }
}

func (p MetaServiceListSpacesResultBuilder) Emit() *MetaServiceListSpacesResult{
  return &MetaServiceListSpacesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListSpacesResultBuilder) Success(success *ListSpacesResp) *MetaServiceListSpacesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListSpacesResult) SetSuccess(success *ListSpacesResp) *MetaServiceListSpacesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListSpacesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSpacesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSpacesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSpacesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterSpaceArgs struct {
  thrift.IRequest
  Req *AlterSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterSpaceArgs() *MetaServiceAlterSpaceArgs {
  return &MetaServiceAlterSpaceArgs{
    Req: NewAlterSpaceReq(),
  }
}

var MetaServiceAlterSpaceArgs_Req_DEFAULT *AlterSpaceReq
func (p *MetaServiceAlterSpaceArgs) GetReq() *AlterSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceAlterSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAlterSpaceArgsBuilder struct {
  obj *MetaServiceAlterSpaceArgs
}

func NewMetaServiceAlterSpaceArgsBuilder() *MetaServiceAlterSpaceArgsBuilder{
  return &MetaServiceAlterSpaceArgsBuilder{
    obj: NewMetaServiceAlterSpaceArgs(),
  }
}

func (p MetaServiceAlterSpaceArgsBuilder) Emit() *MetaServiceAlterSpaceArgs{
  return &MetaServiceAlterSpaceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAlterSpaceArgsBuilder) Req(req *AlterSpaceReq) *MetaServiceAlterSpaceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAlterSpaceArgs) SetReq(req *AlterSpaceReq) *MetaServiceAlterSpaceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAlterSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterSpaceResult() *MetaServiceAlterSpaceResult {
  return &MetaServiceAlterSpaceResult{}
}

var MetaServiceAlterSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAlterSpaceResultBuilder struct {
  obj *MetaServiceAlterSpaceResult
}

func NewMetaServiceAlterSpaceResultBuilder() *MetaServiceAlterSpaceResultBuilder{
  return &MetaServiceAlterSpaceResultBuilder{
    obj: NewMetaServiceAlterSpaceResult(),
  }
}

func (p MetaServiceAlterSpaceResultBuilder) Emit() *MetaServiceAlterSpaceResult{
  return &MetaServiceAlterSpaceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAlterSpaceResultBuilder) Success(success *ExecResp) *MetaServiceAlterSpaceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAlterSpaceResult) SetSuccess(success *ExecResp) *MetaServiceAlterSpaceResult {
  m.Success = success
  return m
}

func (p *MetaServiceAlterSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateSpaceAsArgs struct {
  thrift.IRequest
  Req *CreateSpaceAsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceAsArgs() *MetaServiceCreateSpaceAsArgs {
  return &MetaServiceCreateSpaceAsArgs{
    Req: NewCreateSpaceAsReq(),
  }
}

var MetaServiceCreateSpaceAsArgs_Req_DEFAULT *CreateSpaceAsReq
func (p *MetaServiceCreateSpaceAsArgs) GetReq() *CreateSpaceAsReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceAsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceAsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateSpaceAsArgsBuilder struct {
  obj *MetaServiceCreateSpaceAsArgs
}

func NewMetaServiceCreateSpaceAsArgsBuilder() *MetaServiceCreateSpaceAsArgsBuilder{
  return &MetaServiceCreateSpaceAsArgsBuilder{
    obj: NewMetaServiceCreateSpaceAsArgs(),
  }
}

func (p MetaServiceCreateSpaceAsArgsBuilder) Emit() *MetaServiceCreateSpaceAsArgs{
  return &MetaServiceCreateSpaceAsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateSpaceAsArgsBuilder) Req(req *CreateSpaceAsReq) *MetaServiceCreateSpaceAsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateSpaceAsArgs) SetReq(req *CreateSpaceAsReq) *MetaServiceCreateSpaceAsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateSpaceAsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSpaceAsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpaceAs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceAsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceAsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceAsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceAsResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceAsResult() *MetaServiceCreateSpaceAsResult {
  return &MetaServiceCreateSpaceAsResult{}
}

var MetaServiceCreateSpaceAsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceAsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceAsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceAsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateSpaceAsResultBuilder struct {
  obj *MetaServiceCreateSpaceAsResult
}

func NewMetaServiceCreateSpaceAsResultBuilder() *MetaServiceCreateSpaceAsResultBuilder{
  return &MetaServiceCreateSpaceAsResultBuilder{
    obj: NewMetaServiceCreateSpaceAsResult(),
  }
}

func (p MetaServiceCreateSpaceAsResultBuilder) Emit() *MetaServiceCreateSpaceAsResult{
  return &MetaServiceCreateSpaceAsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateSpaceAsResultBuilder) Success(success *ExecResp) *MetaServiceCreateSpaceAsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateSpaceAsResult) SetSuccess(success *ExecResp) *MetaServiceCreateSpaceAsResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateSpaceAsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpaceAs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceAsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceAsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceAsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateTagArgs struct {
  thrift.IRequest
  Req *CreateTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagArgs() *MetaServiceCreateTagArgs {
  return &MetaServiceCreateTagArgs{
    Req: NewCreateTagReq(),
  }
}

var MetaServiceCreateTagArgs_Req_DEFAULT *CreateTagReq
func (p *MetaServiceCreateTagArgs) GetReq() *CreateTagReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateTagArgsBuilder struct {
  obj *MetaServiceCreateTagArgs
}

func NewMetaServiceCreateTagArgsBuilder() *MetaServiceCreateTagArgsBuilder{
  return &MetaServiceCreateTagArgsBuilder{
    obj: NewMetaServiceCreateTagArgs(),
  }
}

func (p MetaServiceCreateTagArgsBuilder) Emit() *MetaServiceCreateTagArgs{
  return &MetaServiceCreateTagArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateTagArgsBuilder) Req(req *CreateTagReq) *MetaServiceCreateTagArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateTagArgs) SetReq(req *CreateTagReq) *MetaServiceCreateTagArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagResult() *MetaServiceCreateTagResult {
  return &MetaServiceCreateTagResult{}
}

var MetaServiceCreateTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateTagResultBuilder struct {
  obj *MetaServiceCreateTagResult
}

func NewMetaServiceCreateTagResultBuilder() *MetaServiceCreateTagResultBuilder{
  return &MetaServiceCreateTagResultBuilder{
    obj: NewMetaServiceCreateTagResult(),
  }
}

func (p MetaServiceCreateTagResultBuilder) Emit() *MetaServiceCreateTagResult{
  return &MetaServiceCreateTagResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateTagResultBuilder) Success(success *ExecResp) *MetaServiceCreateTagResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateTagResult) SetSuccess(success *ExecResp) *MetaServiceCreateTagResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterTagArgs struct {
  thrift.IRequest
  Req *AlterTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterTagArgs() *MetaServiceAlterTagArgs {
  return &MetaServiceAlterTagArgs{
    Req: NewAlterTagReq(),
  }
}

var MetaServiceAlterTagArgs_Req_DEFAULT *AlterTagReq
func (p *MetaServiceAlterTagArgs) GetReq() *AlterTagReq {
  if !p.IsSetReq() {
    return MetaServiceAlterTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAlterTagArgsBuilder struct {
  obj *MetaServiceAlterTagArgs
}

func NewMetaServiceAlterTagArgsBuilder() *MetaServiceAlterTagArgsBuilder{
  return &MetaServiceAlterTagArgsBuilder{
    obj: NewMetaServiceAlterTagArgs(),
  }
}

func (p MetaServiceAlterTagArgsBuilder) Emit() *MetaServiceAlterTagArgs{
  return &MetaServiceAlterTagArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAlterTagArgsBuilder) Req(req *AlterTagReq) *MetaServiceAlterTagArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAlterTagArgs) SetReq(req *AlterTagReq) *MetaServiceAlterTagArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAlterTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterTagResult() *MetaServiceAlterTagResult {
  return &MetaServiceAlterTagResult{}
}

var MetaServiceAlterTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAlterTagResultBuilder struct {
  obj *MetaServiceAlterTagResult
}

func NewMetaServiceAlterTagResultBuilder() *MetaServiceAlterTagResultBuilder{
  return &MetaServiceAlterTagResultBuilder{
    obj: NewMetaServiceAlterTagResult(),
  }
}

func (p MetaServiceAlterTagResultBuilder) Emit() *MetaServiceAlterTagResult{
  return &MetaServiceAlterTagResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAlterTagResultBuilder) Success(success *ExecResp) *MetaServiceAlterTagResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAlterTagResult) SetSuccess(success *ExecResp) *MetaServiceAlterTagResult {
  m.Success = success
  return m
}

func (p *MetaServiceAlterTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropTagArgs struct {
  thrift.IRequest
  Req *DropTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagArgs() *MetaServiceDropTagArgs {
  return &MetaServiceDropTagArgs{
    Req: NewDropTagReq(),
  }
}

var MetaServiceDropTagArgs_Req_DEFAULT *DropTagReq
func (p *MetaServiceDropTagArgs) GetReq() *DropTagReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropTagArgsBuilder struct {
  obj *MetaServiceDropTagArgs
}

func NewMetaServiceDropTagArgsBuilder() *MetaServiceDropTagArgsBuilder{
  return &MetaServiceDropTagArgsBuilder{
    obj: NewMetaServiceDropTagArgs(),
  }
}

func (p MetaServiceDropTagArgsBuilder) Emit() *MetaServiceDropTagArgs{
  return &MetaServiceDropTagArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropTagArgsBuilder) Req(req *DropTagReq) *MetaServiceDropTagArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropTagArgs) SetReq(req *DropTagReq) *MetaServiceDropTagArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagResult() *MetaServiceDropTagResult {
  return &MetaServiceDropTagResult{}
}

var MetaServiceDropTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropTagResultBuilder struct {
  obj *MetaServiceDropTagResult
}

func NewMetaServiceDropTagResultBuilder() *MetaServiceDropTagResultBuilder{
  return &MetaServiceDropTagResultBuilder{
    obj: NewMetaServiceDropTagResult(),
  }
}

func (p MetaServiceDropTagResultBuilder) Emit() *MetaServiceDropTagResult{
  return &MetaServiceDropTagResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropTagResultBuilder) Success(success *ExecResp) *MetaServiceDropTagResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropTagResult) SetSuccess(success *ExecResp) *MetaServiceDropTagResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetTagArgs struct {
  thrift.IRequest
  Req *GetTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagArgs() *MetaServiceGetTagArgs {
  return &MetaServiceGetTagArgs{
    Req: NewGetTagReq(),
  }
}

var MetaServiceGetTagArgs_Req_DEFAULT *GetTagReq
func (p *MetaServiceGetTagArgs) GetReq() *GetTagReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetTagArgsBuilder struct {
  obj *MetaServiceGetTagArgs
}

func NewMetaServiceGetTagArgsBuilder() *MetaServiceGetTagArgsBuilder{
  return &MetaServiceGetTagArgsBuilder{
    obj: NewMetaServiceGetTagArgs(),
  }
}

func (p MetaServiceGetTagArgsBuilder) Emit() *MetaServiceGetTagArgs{
  return &MetaServiceGetTagArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetTagArgsBuilder) Req(req *GetTagReq) *MetaServiceGetTagArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetTagArgs) SetReq(req *GetTagReq) *MetaServiceGetTagArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetTagResult struct {
  thrift.IResponse
  Success *GetTagResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagResult() *MetaServiceGetTagResult {
  return &MetaServiceGetTagResult{}
}

var MetaServiceGetTagResult_Success_DEFAULT *GetTagResp
func (p *MetaServiceGetTagResult) GetSuccess() *GetTagResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetTagResultBuilder struct {
  obj *MetaServiceGetTagResult
}

func NewMetaServiceGetTagResultBuilder() *MetaServiceGetTagResultBuilder{
  return &MetaServiceGetTagResultBuilder{
    obj: NewMetaServiceGetTagResult(),
  }
}

func (p MetaServiceGetTagResultBuilder) Emit() *MetaServiceGetTagResult{
  return &MetaServiceGetTagResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetTagResultBuilder) Success(success *GetTagResp) *MetaServiceGetTagResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetTagResult) SetSuccess(success *GetTagResp) *MetaServiceGetTagResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagsArgs struct {
  thrift.IRequest
  Req *ListTagsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagsArgs() *MetaServiceListTagsArgs {
  return &MetaServiceListTagsArgs{
    Req: NewListTagsReq(),
  }
}

var MetaServiceListTagsArgs_Req_DEFAULT *ListTagsReq
func (p *MetaServiceListTagsArgs) GetReq() *ListTagsReq {
  if !p.IsSetReq() {
    return MetaServiceListTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListTagsArgsBuilder struct {
  obj *MetaServiceListTagsArgs
}

func NewMetaServiceListTagsArgsBuilder() *MetaServiceListTagsArgsBuilder{
  return &MetaServiceListTagsArgsBuilder{
    obj: NewMetaServiceListTagsArgs(),
  }
}

func (p MetaServiceListTagsArgsBuilder) Emit() *MetaServiceListTagsArgs{
  return &MetaServiceListTagsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListTagsArgsBuilder) Req(req *ListTagsReq) *MetaServiceListTagsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListTagsArgs) SetReq(req *ListTagsReq) *MetaServiceListTagsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListTagsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagsResult struct {
  thrift.IResponse
  Success *ListTagsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagsResult() *MetaServiceListTagsResult {
  return &MetaServiceListTagsResult{}
}

var MetaServiceListTagsResult_Success_DEFAULT *ListTagsResp
func (p *MetaServiceListTagsResult) GetSuccess() *ListTagsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListTagsResultBuilder struct {
  obj *MetaServiceListTagsResult
}

func NewMetaServiceListTagsResultBuilder() *MetaServiceListTagsResultBuilder{
  return &MetaServiceListTagsResultBuilder{
    obj: NewMetaServiceListTagsResult(),
  }
}

func (p MetaServiceListTagsResultBuilder) Emit() *MetaServiceListTagsResult{
  return &MetaServiceListTagsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListTagsResultBuilder) Success(success *ListTagsResp) *MetaServiceListTagsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListTagsResult) SetSuccess(success *ListTagsResp) *MetaServiceListTagsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListTagsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeArgs struct {
  thrift.IRequest
  Req *CreateEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeArgs() *MetaServiceCreateEdgeArgs {
  return &MetaServiceCreateEdgeArgs{
    Req: NewCreateEdgeReq(),
  }
}

var MetaServiceCreateEdgeArgs_Req_DEFAULT *CreateEdgeReq
func (p *MetaServiceCreateEdgeArgs) GetReq() *CreateEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateEdgeArgsBuilder struct {
  obj *MetaServiceCreateEdgeArgs
}

func NewMetaServiceCreateEdgeArgsBuilder() *MetaServiceCreateEdgeArgsBuilder{
  return &MetaServiceCreateEdgeArgsBuilder{
    obj: NewMetaServiceCreateEdgeArgs(),
  }
}

func (p MetaServiceCreateEdgeArgsBuilder) Emit() *MetaServiceCreateEdgeArgs{
  return &MetaServiceCreateEdgeArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateEdgeArgsBuilder) Req(req *CreateEdgeReq) *MetaServiceCreateEdgeArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateEdgeArgs) SetReq(req *CreateEdgeReq) *MetaServiceCreateEdgeArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeResult() *MetaServiceCreateEdgeResult {
  return &MetaServiceCreateEdgeResult{}
}

var MetaServiceCreateEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateEdgeResultBuilder struct {
  obj *MetaServiceCreateEdgeResult
}

func NewMetaServiceCreateEdgeResultBuilder() *MetaServiceCreateEdgeResultBuilder{
  return &MetaServiceCreateEdgeResultBuilder{
    obj: NewMetaServiceCreateEdgeResult(),
  }
}

func (p MetaServiceCreateEdgeResultBuilder) Emit() *MetaServiceCreateEdgeResult{
  return &MetaServiceCreateEdgeResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateEdgeResultBuilder) Success(success *ExecResp) *MetaServiceCreateEdgeResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateEdgeResult) SetSuccess(success *ExecResp) *MetaServiceCreateEdgeResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterEdgeArgs struct {
  thrift.IRequest
  Req *AlterEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterEdgeArgs() *MetaServiceAlterEdgeArgs {
  return &MetaServiceAlterEdgeArgs{
    Req: NewAlterEdgeReq(),
  }
}

var MetaServiceAlterEdgeArgs_Req_DEFAULT *AlterEdgeReq
func (p *MetaServiceAlterEdgeArgs) GetReq() *AlterEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceAlterEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAlterEdgeArgsBuilder struct {
  obj *MetaServiceAlterEdgeArgs
}

func NewMetaServiceAlterEdgeArgsBuilder() *MetaServiceAlterEdgeArgsBuilder{
  return &MetaServiceAlterEdgeArgsBuilder{
    obj: NewMetaServiceAlterEdgeArgs(),
  }
}

func (p MetaServiceAlterEdgeArgsBuilder) Emit() *MetaServiceAlterEdgeArgs{
  return &MetaServiceAlterEdgeArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAlterEdgeArgsBuilder) Req(req *AlterEdgeReq) *MetaServiceAlterEdgeArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAlterEdgeArgs) SetReq(req *AlterEdgeReq) *MetaServiceAlterEdgeArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAlterEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterEdgeResult() *MetaServiceAlterEdgeResult {
  return &MetaServiceAlterEdgeResult{}
}

var MetaServiceAlterEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAlterEdgeResultBuilder struct {
  obj *MetaServiceAlterEdgeResult
}

func NewMetaServiceAlterEdgeResultBuilder() *MetaServiceAlterEdgeResultBuilder{
  return &MetaServiceAlterEdgeResultBuilder{
    obj: NewMetaServiceAlterEdgeResult(),
  }
}

func (p MetaServiceAlterEdgeResultBuilder) Emit() *MetaServiceAlterEdgeResult{
  return &MetaServiceAlterEdgeResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAlterEdgeResultBuilder) Success(success *ExecResp) *MetaServiceAlterEdgeResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAlterEdgeResult) SetSuccess(success *ExecResp) *MetaServiceAlterEdgeResult {
  m.Success = success
  return m
}

func (p *MetaServiceAlterEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeArgs struct {
  thrift.IRequest
  Req *DropEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeArgs() *MetaServiceDropEdgeArgs {
  return &MetaServiceDropEdgeArgs{
    Req: NewDropEdgeReq(),
  }
}

var MetaServiceDropEdgeArgs_Req_DEFAULT *DropEdgeReq
func (p *MetaServiceDropEdgeArgs) GetReq() *DropEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropEdgeArgsBuilder struct {
  obj *MetaServiceDropEdgeArgs
}

func NewMetaServiceDropEdgeArgsBuilder() *MetaServiceDropEdgeArgsBuilder{
  return &MetaServiceDropEdgeArgsBuilder{
    obj: NewMetaServiceDropEdgeArgs(),
  }
}

func (p MetaServiceDropEdgeArgsBuilder) Emit() *MetaServiceDropEdgeArgs{
  return &MetaServiceDropEdgeArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropEdgeArgsBuilder) Req(req *DropEdgeReq) *MetaServiceDropEdgeArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropEdgeArgs) SetReq(req *DropEdgeReq) *MetaServiceDropEdgeArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeResult() *MetaServiceDropEdgeResult {
  return &MetaServiceDropEdgeResult{}
}

var MetaServiceDropEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropEdgeResultBuilder struct {
  obj *MetaServiceDropEdgeResult
}

func NewMetaServiceDropEdgeResultBuilder() *MetaServiceDropEdgeResultBuilder{
  return &MetaServiceDropEdgeResultBuilder{
    obj: NewMetaServiceDropEdgeResult(),
  }
}

func (p MetaServiceDropEdgeResultBuilder) Emit() *MetaServiceDropEdgeResult{
  return &MetaServiceDropEdgeResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropEdgeResultBuilder) Success(success *ExecResp) *MetaServiceDropEdgeResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropEdgeResult) SetSuccess(success *ExecResp) *MetaServiceDropEdgeResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeArgs struct {
  thrift.IRequest
  Req *GetEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeArgs() *MetaServiceGetEdgeArgs {
  return &MetaServiceGetEdgeArgs{
    Req: NewGetEdgeReq(),
  }
}

var MetaServiceGetEdgeArgs_Req_DEFAULT *GetEdgeReq
func (p *MetaServiceGetEdgeArgs) GetReq() *GetEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetEdgeArgsBuilder struct {
  obj *MetaServiceGetEdgeArgs
}

func NewMetaServiceGetEdgeArgsBuilder() *MetaServiceGetEdgeArgsBuilder{
  return &MetaServiceGetEdgeArgsBuilder{
    obj: NewMetaServiceGetEdgeArgs(),
  }
}

func (p MetaServiceGetEdgeArgsBuilder) Emit() *MetaServiceGetEdgeArgs{
  return &MetaServiceGetEdgeArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetEdgeArgsBuilder) Req(req *GetEdgeReq) *MetaServiceGetEdgeArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetEdgeArgs) SetReq(req *GetEdgeReq) *MetaServiceGetEdgeArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeResult struct {
  thrift.IResponse
  Success *GetEdgeResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeResult() *MetaServiceGetEdgeResult {
  return &MetaServiceGetEdgeResult{}
}

var MetaServiceGetEdgeResult_Success_DEFAULT *GetEdgeResp
func (p *MetaServiceGetEdgeResult) GetSuccess() *GetEdgeResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetEdgeResultBuilder struct {
  obj *MetaServiceGetEdgeResult
}

func NewMetaServiceGetEdgeResultBuilder() *MetaServiceGetEdgeResultBuilder{
  return &MetaServiceGetEdgeResultBuilder{
    obj: NewMetaServiceGetEdgeResult(),
  }
}

func (p MetaServiceGetEdgeResultBuilder) Emit() *MetaServiceGetEdgeResult{
  return &MetaServiceGetEdgeResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetEdgeResultBuilder) Success(success *GetEdgeResp) *MetaServiceGetEdgeResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetEdgeResult) SetSuccess(success *GetEdgeResp) *MetaServiceGetEdgeResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgesArgs struct {
  thrift.IRequest
  Req *ListEdgesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgesArgs() *MetaServiceListEdgesArgs {
  return &MetaServiceListEdgesArgs{
    Req: NewListEdgesReq(),
  }
}

var MetaServiceListEdgesArgs_Req_DEFAULT *ListEdgesReq
func (p *MetaServiceListEdgesArgs) GetReq() *ListEdgesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListEdgesArgsBuilder struct {
  obj *MetaServiceListEdgesArgs
}

func NewMetaServiceListEdgesArgsBuilder() *MetaServiceListEdgesArgsBuilder{
  return &MetaServiceListEdgesArgsBuilder{
    obj: NewMetaServiceListEdgesArgs(),
  }
}

func (p MetaServiceListEdgesArgsBuilder) Emit() *MetaServiceListEdgesArgs{
  return &MetaServiceListEdgesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListEdgesArgsBuilder) Req(req *ListEdgesReq) *MetaServiceListEdgesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListEdgesArgs) SetReq(req *ListEdgesReq) *MetaServiceListEdgesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgesResult struct {
  thrift.IResponse
  Success *ListEdgesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgesResult() *MetaServiceListEdgesResult {
  return &MetaServiceListEdgesResult{}
}

var MetaServiceListEdgesResult_Success_DEFAULT *ListEdgesResp
func (p *MetaServiceListEdgesResult) GetSuccess() *ListEdgesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListEdgesResultBuilder struct {
  obj *MetaServiceListEdgesResult
}

func NewMetaServiceListEdgesResultBuilder() *MetaServiceListEdgesResultBuilder{
  return &MetaServiceListEdgesResultBuilder{
    obj: NewMetaServiceListEdgesResult(),
  }
}

func (p MetaServiceListEdgesResultBuilder) Emit() *MetaServiceListEdgesResult{
  return &MetaServiceListEdgesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListEdgesResultBuilder) Success(success *ListEdgesResp) *MetaServiceListEdgesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListEdgesResult) SetSuccess(success *ListEdgesResp) *MetaServiceListEdgesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddHostsArgs struct {
  thrift.IRequest
  Req *AddHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostsArgs() *MetaServiceAddHostsArgs {
  return &MetaServiceAddHostsArgs{
    Req: NewAddHostsReq(),
  }
}

var MetaServiceAddHostsArgs_Req_DEFAULT *AddHostsReq
func (p *MetaServiceAddHostsArgs) GetReq() *AddHostsReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAddHostsArgsBuilder struct {
  obj *MetaServiceAddHostsArgs
}

func NewMetaServiceAddHostsArgsBuilder() *MetaServiceAddHostsArgsBuilder{
  return &MetaServiceAddHostsArgsBuilder{
    obj: NewMetaServiceAddHostsArgs(),
  }
}

func (p MetaServiceAddHostsArgsBuilder) Emit() *MetaServiceAddHostsArgs{
  return &MetaServiceAddHostsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAddHostsArgsBuilder) Req(req *AddHostsReq) *MetaServiceAddHostsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAddHostsArgs) SetReq(req *AddHostsReq) *MetaServiceAddHostsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAddHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddHostsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddHostsResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostsResult() *MetaServiceAddHostsResult {
  return &MetaServiceAddHostsResult{}
}

var MetaServiceAddHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAddHostsResultBuilder struct {
  obj *MetaServiceAddHostsResult
}

func NewMetaServiceAddHostsResultBuilder() *MetaServiceAddHostsResultBuilder{
  return &MetaServiceAddHostsResultBuilder{
    obj: NewMetaServiceAddHostsResult(),
  }
}

func (p MetaServiceAddHostsResultBuilder) Emit() *MetaServiceAddHostsResult{
  return &MetaServiceAddHostsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAddHostsResultBuilder) Success(success *ExecResp) *MetaServiceAddHostsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAddHostsResult) SetSuccess(success *ExecResp) *MetaServiceAddHostsResult {
  m.Success = success
  return m
}

func (p *MetaServiceAddHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddHostsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddHostsIntoZoneArgs struct {
  thrift.IRequest
  Req *AddHostsIntoZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostsIntoZoneArgs() *MetaServiceAddHostsIntoZoneArgs {
  return &MetaServiceAddHostsIntoZoneArgs{
    Req: NewAddHostsIntoZoneReq(),
  }
}

var MetaServiceAddHostsIntoZoneArgs_Req_DEFAULT *AddHostsIntoZoneReq
func (p *MetaServiceAddHostsIntoZoneArgs) GetReq() *AddHostsIntoZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostsIntoZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostsIntoZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAddHostsIntoZoneArgsBuilder struct {
  obj *MetaServiceAddHostsIntoZoneArgs
}

func NewMetaServiceAddHostsIntoZoneArgsBuilder() *MetaServiceAddHostsIntoZoneArgsBuilder{
  return &MetaServiceAddHostsIntoZoneArgsBuilder{
    obj: NewMetaServiceAddHostsIntoZoneArgs(),
  }
}

func (p MetaServiceAddHostsIntoZoneArgsBuilder) Emit() *MetaServiceAddHostsIntoZoneArgs{
  return &MetaServiceAddHostsIntoZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAddHostsIntoZoneArgsBuilder) Req(req *AddHostsIntoZoneReq) *MetaServiceAddHostsIntoZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAddHostsIntoZoneArgs) SetReq(req *AddHostsIntoZoneReq) *MetaServiceAddHostsIntoZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAddHostsIntoZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddHostsIntoZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostsIntoZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostsIntoZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddHostsIntoZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddHostsIntoZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostsIntoZoneResult() *MetaServiceAddHostsIntoZoneResult {
  return &MetaServiceAddHostsIntoZoneResult{}
}

var MetaServiceAddHostsIntoZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostsIntoZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostsIntoZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostsIntoZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAddHostsIntoZoneResultBuilder struct {
  obj *MetaServiceAddHostsIntoZoneResult
}

func NewMetaServiceAddHostsIntoZoneResultBuilder() *MetaServiceAddHostsIntoZoneResultBuilder{
  return &MetaServiceAddHostsIntoZoneResultBuilder{
    obj: NewMetaServiceAddHostsIntoZoneResult(),
  }
}

func (p MetaServiceAddHostsIntoZoneResultBuilder) Emit() *MetaServiceAddHostsIntoZoneResult{
  return &MetaServiceAddHostsIntoZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAddHostsIntoZoneResultBuilder) Success(success *ExecResp) *MetaServiceAddHostsIntoZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAddHostsIntoZoneResult) SetSuccess(success *ExecResp) *MetaServiceAddHostsIntoZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceAddHostsIntoZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostsIntoZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostsIntoZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostsIntoZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddHostsIntoZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropHostsArgs struct {
  thrift.IRequest
  Req *DropHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropHostsArgs() *MetaServiceDropHostsArgs {
  return &MetaServiceDropHostsArgs{
    Req: NewDropHostsReq(),
  }
}

var MetaServiceDropHostsArgs_Req_DEFAULT *DropHostsReq
func (p *MetaServiceDropHostsArgs) GetReq() *DropHostsReq {
  if !p.IsSetReq() {
    return MetaServiceDropHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropHostsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropHostsArgsBuilder struct {
  obj *MetaServiceDropHostsArgs
}

func NewMetaServiceDropHostsArgsBuilder() *MetaServiceDropHostsArgsBuilder{
  return &MetaServiceDropHostsArgsBuilder{
    obj: NewMetaServiceDropHostsArgs(),
  }
}

func (p MetaServiceDropHostsArgsBuilder) Emit() *MetaServiceDropHostsArgs{
  return &MetaServiceDropHostsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropHostsArgsBuilder) Req(req *DropHostsReq) *MetaServiceDropHostsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropHostsArgs) SetReq(req *DropHostsReq) *MetaServiceDropHostsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropHostsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropHostsResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropHostsResult() *MetaServiceDropHostsResult {
  return &MetaServiceDropHostsResult{}
}

var MetaServiceDropHostsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropHostsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropHostsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropHostsResultBuilder struct {
  obj *MetaServiceDropHostsResult
}

func NewMetaServiceDropHostsResultBuilder() *MetaServiceDropHostsResultBuilder{
  return &MetaServiceDropHostsResultBuilder{
    obj: NewMetaServiceDropHostsResult(),
  }
}

func (p MetaServiceDropHostsResultBuilder) Emit() *MetaServiceDropHostsResult{
  return &MetaServiceDropHostsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropHostsResultBuilder) Success(success *ExecResp) *MetaServiceDropHostsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropHostsResult) SetSuccess(success *ExecResp) *MetaServiceDropHostsResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropHostsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListHostsArgs struct {
  thrift.IRequest
  Req *ListHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListHostsArgs() *MetaServiceListHostsArgs {
  return &MetaServiceListHostsArgs{
    Req: NewListHostsReq(),
  }
}

var MetaServiceListHostsArgs_Req_DEFAULT *ListHostsReq
func (p *MetaServiceListHostsArgs) GetReq() *ListHostsReq {
  if !p.IsSetReq() {
    return MetaServiceListHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListHostsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListHostsArgsBuilder struct {
  obj *MetaServiceListHostsArgs
}

func NewMetaServiceListHostsArgsBuilder() *MetaServiceListHostsArgsBuilder{
  return &MetaServiceListHostsArgsBuilder{
    obj: NewMetaServiceListHostsArgs(),
  }
}

func (p MetaServiceListHostsArgsBuilder) Emit() *MetaServiceListHostsArgs{
  return &MetaServiceListHostsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListHostsArgsBuilder) Req(req *ListHostsReq) *MetaServiceListHostsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListHostsArgs) SetReq(req *ListHostsReq) *MetaServiceListHostsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListHostsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListHostsResult struct {
  thrift.IResponse
  Success *ListHostsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListHostsResult() *MetaServiceListHostsResult {
  return &MetaServiceListHostsResult{}
}

var MetaServiceListHostsResult_Success_DEFAULT *ListHostsResp
func (p *MetaServiceListHostsResult) GetSuccess() *ListHostsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListHostsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListHostsResultBuilder struct {
  obj *MetaServiceListHostsResult
}

func NewMetaServiceListHostsResultBuilder() *MetaServiceListHostsResultBuilder{
  return &MetaServiceListHostsResultBuilder{
    obj: NewMetaServiceListHostsResult(),
  }
}

func (p MetaServiceListHostsResultBuilder) Emit() *MetaServiceListHostsResult{
  return &MetaServiceListHostsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListHostsResultBuilder) Success(success *ListHostsResp) *MetaServiceListHostsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListHostsResult) SetSuccess(success *ListHostsResp) *MetaServiceListHostsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListHostsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListHostsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetPartsAllocArgs struct {
  thrift.IRequest
  Req *GetPartsAllocReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetPartsAllocArgs() *MetaServiceGetPartsAllocArgs {
  return &MetaServiceGetPartsAllocArgs{
    Req: NewGetPartsAllocReq(),
  }
}

var MetaServiceGetPartsAllocArgs_Req_DEFAULT *GetPartsAllocReq
func (p *MetaServiceGetPartsAllocArgs) GetReq() *GetPartsAllocReq {
  if !p.IsSetReq() {
    return MetaServiceGetPartsAllocArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetPartsAllocArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetPartsAllocArgsBuilder struct {
  obj *MetaServiceGetPartsAllocArgs
}

func NewMetaServiceGetPartsAllocArgsBuilder() *MetaServiceGetPartsAllocArgsBuilder{
  return &MetaServiceGetPartsAllocArgsBuilder{
    obj: NewMetaServiceGetPartsAllocArgs(),
  }
}

func (p MetaServiceGetPartsAllocArgsBuilder) Emit() *MetaServiceGetPartsAllocArgs{
  return &MetaServiceGetPartsAllocArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetPartsAllocArgsBuilder) Req(req *GetPartsAllocReq) *MetaServiceGetPartsAllocArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetPartsAllocArgs) SetReq(req *GetPartsAllocReq) *MetaServiceGetPartsAllocArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetPartsAllocArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetPartsAllocReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetPartsAllocArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetPartsAllocResult struct {
  thrift.IResponse
  Success *GetPartsAllocResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetPartsAllocResult() *MetaServiceGetPartsAllocResult {
  return &MetaServiceGetPartsAllocResult{}
}

var MetaServiceGetPartsAllocResult_Success_DEFAULT *GetPartsAllocResp
func (p *MetaServiceGetPartsAllocResult) GetSuccess() *GetPartsAllocResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetPartsAllocResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetPartsAllocResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetPartsAllocResultBuilder struct {
  obj *MetaServiceGetPartsAllocResult
}

func NewMetaServiceGetPartsAllocResultBuilder() *MetaServiceGetPartsAllocResultBuilder{
  return &MetaServiceGetPartsAllocResultBuilder{
    obj: NewMetaServiceGetPartsAllocResult(),
  }
}

func (p MetaServiceGetPartsAllocResultBuilder) Emit() *MetaServiceGetPartsAllocResult{
  return &MetaServiceGetPartsAllocResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetPartsAllocResultBuilder) Success(success *GetPartsAllocResp) *MetaServiceGetPartsAllocResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetPartsAllocResult) SetSuccess(success *GetPartsAllocResp) *MetaServiceGetPartsAllocResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetPartsAllocResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetPartsAllocResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetPartsAllocResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListPartsArgs struct {
  thrift.IRequest
  Req *ListPartsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListPartsArgs() *MetaServiceListPartsArgs {
  return &MetaServiceListPartsArgs{
    Req: NewListPartsReq(),
  }
}

var MetaServiceListPartsArgs_Req_DEFAULT *ListPartsReq
func (p *MetaServiceListPartsArgs) GetReq() *ListPartsReq {
  if !p.IsSetReq() {
    return MetaServiceListPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListPartsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListPartsArgsBuilder struct {
  obj *MetaServiceListPartsArgs
}

func NewMetaServiceListPartsArgsBuilder() *MetaServiceListPartsArgsBuilder{
  return &MetaServiceListPartsArgsBuilder{
    obj: NewMetaServiceListPartsArgs(),
  }
}

func (p MetaServiceListPartsArgsBuilder) Emit() *MetaServiceListPartsArgs{
  return &MetaServiceListPartsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListPartsArgsBuilder) Req(req *ListPartsReq) *MetaServiceListPartsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListPartsArgs) SetReq(req *ListPartsReq) *MetaServiceListPartsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListPartsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListPartsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListPartsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListPartsResult struct {
  thrift.IResponse
  Success *ListPartsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListPartsResult() *MetaServiceListPartsResult {
  return &MetaServiceListPartsResult{}
}

var MetaServiceListPartsResult_Success_DEFAULT *ListPartsResp
func (p *MetaServiceListPartsResult) GetSuccess() *ListPartsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListPartsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListPartsResultBuilder struct {
  obj *MetaServiceListPartsResult
}

func NewMetaServiceListPartsResultBuilder() *MetaServiceListPartsResultBuilder{
  return &MetaServiceListPartsResultBuilder{
    obj: NewMetaServiceListPartsResult(),
  }
}

func (p MetaServiceListPartsResultBuilder) Emit() *MetaServiceListPartsResult{
  return &MetaServiceListPartsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListPartsResultBuilder) Success(success *ListPartsResp) *MetaServiceListPartsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListPartsResult) SetSuccess(success *ListPartsResp) *MetaServiceListPartsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListPartsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListPartsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListPartsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetWorkerIdArgs struct {
  thrift.IRequest
  Req *GetWorkerIdReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetWorkerIdArgs() *MetaServiceGetWorkerIdArgs {
  return &MetaServiceGetWorkerIdArgs{
    Req: NewGetWorkerIdReq(),
  }
}

var MetaServiceGetWorkerIdArgs_Req_DEFAULT *GetWorkerIdReq
func (p *MetaServiceGetWorkerIdArgs) GetReq() *GetWorkerIdReq {
  if !p.IsSetReq() {
    return MetaServiceGetWorkerIdArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetWorkerIdArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetWorkerIdArgsBuilder struct {
  obj *MetaServiceGetWorkerIdArgs
}

func NewMetaServiceGetWorkerIdArgsBuilder() *MetaServiceGetWorkerIdArgsBuilder{
  return &MetaServiceGetWorkerIdArgsBuilder{
    obj: NewMetaServiceGetWorkerIdArgs(),
  }
}

func (p MetaServiceGetWorkerIdArgsBuilder) Emit() *MetaServiceGetWorkerIdArgs{
  return &MetaServiceGetWorkerIdArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetWorkerIdArgsBuilder) Req(req *GetWorkerIdReq) *MetaServiceGetWorkerIdArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetWorkerIdArgs) SetReq(req *GetWorkerIdReq) *MetaServiceGetWorkerIdArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetWorkerIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetWorkerIdReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getWorkerId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetWorkerIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetWorkerIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetWorkerIdArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetWorkerIdResult struct {
  thrift.IResponse
  Success *GetWorkerIdResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetWorkerIdResult() *MetaServiceGetWorkerIdResult {
  return &MetaServiceGetWorkerIdResult{}
}

var MetaServiceGetWorkerIdResult_Success_DEFAULT *GetWorkerIdResp
func (p *MetaServiceGetWorkerIdResult) GetSuccess() *GetWorkerIdResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetWorkerIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetWorkerIdResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetWorkerIdResultBuilder struct {
  obj *MetaServiceGetWorkerIdResult
}

func NewMetaServiceGetWorkerIdResultBuilder() *MetaServiceGetWorkerIdResultBuilder{
  return &MetaServiceGetWorkerIdResultBuilder{
    obj: NewMetaServiceGetWorkerIdResult(),
  }
}

func (p MetaServiceGetWorkerIdResultBuilder) Emit() *MetaServiceGetWorkerIdResult{
  return &MetaServiceGetWorkerIdResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetWorkerIdResultBuilder) Success(success *GetWorkerIdResp) *MetaServiceGetWorkerIdResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetWorkerIdResult) SetSuccess(success *GetWorkerIdResp) *MetaServiceGetWorkerIdResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetWorkerIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetWorkerIdResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetWorkerIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getWorkerId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetWorkerIdResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetWorkerIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetWorkerIdResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateTagIndexArgs struct {
  thrift.IRequest
  Req *CreateTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagIndexArgs() *MetaServiceCreateTagIndexArgs {
  return &MetaServiceCreateTagIndexArgs{
    Req: NewCreateTagIndexReq(),
  }
}

var MetaServiceCreateTagIndexArgs_Req_DEFAULT *CreateTagIndexReq
func (p *MetaServiceCreateTagIndexArgs) GetReq() *CreateTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateTagIndexArgsBuilder struct {
  obj *MetaServiceCreateTagIndexArgs
}

func NewMetaServiceCreateTagIndexArgsBuilder() *MetaServiceCreateTagIndexArgsBuilder{
  return &MetaServiceCreateTagIndexArgsBuilder{
    obj: NewMetaServiceCreateTagIndexArgs(),
  }
}

func (p MetaServiceCreateTagIndexArgsBuilder) Emit() *MetaServiceCreateTagIndexArgs{
  return &MetaServiceCreateTagIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateTagIndexArgsBuilder) Req(req *CreateTagIndexReq) *MetaServiceCreateTagIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateTagIndexArgs) SetReq(req *CreateTagIndexReq) *MetaServiceCreateTagIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagIndexResult() *MetaServiceCreateTagIndexResult {
  return &MetaServiceCreateTagIndexResult{}
}

var MetaServiceCreateTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateTagIndexResultBuilder struct {
  obj *MetaServiceCreateTagIndexResult
}

func NewMetaServiceCreateTagIndexResultBuilder() *MetaServiceCreateTagIndexResultBuilder{
  return &MetaServiceCreateTagIndexResultBuilder{
    obj: NewMetaServiceCreateTagIndexResult(),
  }
}

func (p MetaServiceCreateTagIndexResultBuilder) Emit() *MetaServiceCreateTagIndexResult{
  return &MetaServiceCreateTagIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateTagIndexResultBuilder) Success(success *ExecResp) *MetaServiceCreateTagIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateTagIndexResult) SetSuccess(success *ExecResp) *MetaServiceCreateTagIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropTagIndexArgs struct {
  thrift.IRequest
  Req *DropTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagIndexArgs() *MetaServiceDropTagIndexArgs {
  return &MetaServiceDropTagIndexArgs{
    Req: NewDropTagIndexReq(),
  }
}

var MetaServiceDropTagIndexArgs_Req_DEFAULT *DropTagIndexReq
func (p *MetaServiceDropTagIndexArgs) GetReq() *DropTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropTagIndexArgsBuilder struct {
  obj *MetaServiceDropTagIndexArgs
}

func NewMetaServiceDropTagIndexArgsBuilder() *MetaServiceDropTagIndexArgsBuilder{
  return &MetaServiceDropTagIndexArgsBuilder{
    obj: NewMetaServiceDropTagIndexArgs(),
  }
}

func (p MetaServiceDropTagIndexArgsBuilder) Emit() *MetaServiceDropTagIndexArgs{
  return &MetaServiceDropTagIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropTagIndexArgsBuilder) Req(req *DropTagIndexReq) *MetaServiceDropTagIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropTagIndexArgs) SetReq(req *DropTagIndexReq) *MetaServiceDropTagIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagIndexResult() *MetaServiceDropTagIndexResult {
  return &MetaServiceDropTagIndexResult{}
}

var MetaServiceDropTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropTagIndexResultBuilder struct {
  obj *MetaServiceDropTagIndexResult
}

func NewMetaServiceDropTagIndexResultBuilder() *MetaServiceDropTagIndexResultBuilder{
  return &MetaServiceDropTagIndexResultBuilder{
    obj: NewMetaServiceDropTagIndexResult(),
  }
}

func (p MetaServiceDropTagIndexResultBuilder) Emit() *MetaServiceDropTagIndexResult{
  return &MetaServiceDropTagIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropTagIndexResultBuilder) Success(success *ExecResp) *MetaServiceDropTagIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropTagIndexResult) SetSuccess(success *ExecResp) *MetaServiceDropTagIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetTagIndexArgs struct {
  thrift.IRequest
  Req *GetTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagIndexArgs() *MetaServiceGetTagIndexArgs {
  return &MetaServiceGetTagIndexArgs{
    Req: NewGetTagIndexReq(),
  }
}

var MetaServiceGetTagIndexArgs_Req_DEFAULT *GetTagIndexReq
func (p *MetaServiceGetTagIndexArgs) GetReq() *GetTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetTagIndexArgsBuilder struct {
  obj *MetaServiceGetTagIndexArgs
}

func NewMetaServiceGetTagIndexArgsBuilder() *MetaServiceGetTagIndexArgsBuilder{
  return &MetaServiceGetTagIndexArgsBuilder{
    obj: NewMetaServiceGetTagIndexArgs(),
  }
}

func (p MetaServiceGetTagIndexArgsBuilder) Emit() *MetaServiceGetTagIndexArgs{
  return &MetaServiceGetTagIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetTagIndexArgsBuilder) Req(req *GetTagIndexReq) *MetaServiceGetTagIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetTagIndexArgs) SetReq(req *GetTagIndexReq) *MetaServiceGetTagIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetTagIndexResult struct {
  thrift.IResponse
  Success *GetTagIndexResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagIndexResult() *MetaServiceGetTagIndexResult {
  return &MetaServiceGetTagIndexResult{}
}

var MetaServiceGetTagIndexResult_Success_DEFAULT *GetTagIndexResp
func (p *MetaServiceGetTagIndexResult) GetSuccess() *GetTagIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetTagIndexResultBuilder struct {
  obj *MetaServiceGetTagIndexResult
}

func NewMetaServiceGetTagIndexResultBuilder() *MetaServiceGetTagIndexResultBuilder{
  return &MetaServiceGetTagIndexResultBuilder{
    obj: NewMetaServiceGetTagIndexResult(),
  }
}

func (p MetaServiceGetTagIndexResultBuilder) Emit() *MetaServiceGetTagIndexResult{
  return &MetaServiceGetTagIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetTagIndexResultBuilder) Success(success *GetTagIndexResp) *MetaServiceGetTagIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetTagIndexResult) SetSuccess(success *GetTagIndexResp) *MetaServiceGetTagIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexesArgs struct {
  thrift.IRequest
  Req *ListTagIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexesArgs() *MetaServiceListTagIndexesArgs {
  return &MetaServiceListTagIndexesArgs{
    Req: NewListTagIndexesReq(),
  }
}

var MetaServiceListTagIndexesArgs_Req_DEFAULT *ListTagIndexesReq
func (p *MetaServiceListTagIndexesArgs) GetReq() *ListTagIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListTagIndexesArgsBuilder struct {
  obj *MetaServiceListTagIndexesArgs
}

func NewMetaServiceListTagIndexesArgsBuilder() *MetaServiceListTagIndexesArgsBuilder{
  return &MetaServiceListTagIndexesArgsBuilder{
    obj: NewMetaServiceListTagIndexesArgs(),
  }
}

func (p MetaServiceListTagIndexesArgsBuilder) Emit() *MetaServiceListTagIndexesArgs{
  return &MetaServiceListTagIndexesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListTagIndexesArgsBuilder) Req(req *ListTagIndexesReq) *MetaServiceListTagIndexesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListTagIndexesArgs) SetReq(req *ListTagIndexesReq) *MetaServiceListTagIndexesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListTagIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagIndexesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexesResult struct {
  thrift.IResponse
  Success *ListTagIndexesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexesResult() *MetaServiceListTagIndexesResult {
  return &MetaServiceListTagIndexesResult{}
}

var MetaServiceListTagIndexesResult_Success_DEFAULT *ListTagIndexesResp
func (p *MetaServiceListTagIndexesResult) GetSuccess() *ListTagIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListTagIndexesResultBuilder struct {
  obj *MetaServiceListTagIndexesResult
}

func NewMetaServiceListTagIndexesResultBuilder() *MetaServiceListTagIndexesResultBuilder{
  return &MetaServiceListTagIndexesResultBuilder{
    obj: NewMetaServiceListTagIndexesResult(),
  }
}

func (p MetaServiceListTagIndexesResultBuilder) Emit() *MetaServiceListTagIndexesResult{
  return &MetaServiceListTagIndexesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListTagIndexesResultBuilder) Success(success *ListTagIndexesResp) *MetaServiceListTagIndexesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListTagIndexesResult) SetSuccess(success *ListTagIndexesResp) *MetaServiceListTagIndexesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListTagIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagIndexesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRebuildTagIndexArgs struct {
  thrift.IRequest
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildTagIndexArgs() *MetaServiceRebuildTagIndexArgs {
  return &MetaServiceRebuildTagIndexArgs{
    Req: NewRebuildIndexReq(),
  }
}

var MetaServiceRebuildTagIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildTagIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRebuildTagIndexArgsBuilder struct {
  obj *MetaServiceRebuildTagIndexArgs
}

func NewMetaServiceRebuildTagIndexArgsBuilder() *MetaServiceRebuildTagIndexArgsBuilder{
  return &MetaServiceRebuildTagIndexArgsBuilder{
    obj: NewMetaServiceRebuildTagIndexArgs(),
  }
}

func (p MetaServiceRebuildTagIndexArgsBuilder) Emit() *MetaServiceRebuildTagIndexArgs{
  return &MetaServiceRebuildTagIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRebuildTagIndexArgsBuilder) Req(req *RebuildIndexReq) *MetaServiceRebuildTagIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRebuildTagIndexArgs) SetReq(req *RebuildIndexReq) *MetaServiceRebuildTagIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRebuildTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRebuildTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildTagIndexResult() *MetaServiceRebuildTagIndexResult {
  return &MetaServiceRebuildTagIndexResult{}
}

var MetaServiceRebuildTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRebuildTagIndexResultBuilder struct {
  obj *MetaServiceRebuildTagIndexResult
}

func NewMetaServiceRebuildTagIndexResultBuilder() *MetaServiceRebuildTagIndexResultBuilder{
  return &MetaServiceRebuildTagIndexResultBuilder{
    obj: NewMetaServiceRebuildTagIndexResult(),
  }
}

func (p MetaServiceRebuildTagIndexResultBuilder) Emit() *MetaServiceRebuildTagIndexResult{
  return &MetaServiceRebuildTagIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRebuildTagIndexResultBuilder) Success(success *ExecResp) *MetaServiceRebuildTagIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRebuildTagIndexResult) SetSuccess(success *ExecResp) *MetaServiceRebuildTagIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceRebuildTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexStatusArgs struct {
  thrift.IRequest
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexStatusArgs() *MetaServiceListTagIndexStatusArgs {
  return &MetaServiceListTagIndexStatusArgs{
    Req: NewListIndexStatusReq(),
  }
}

var MetaServiceListTagIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListTagIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexStatusArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListTagIndexStatusArgsBuilder struct {
  obj *MetaServiceListTagIndexStatusArgs
}

func NewMetaServiceListTagIndexStatusArgsBuilder() *MetaServiceListTagIndexStatusArgsBuilder{
  return &MetaServiceListTagIndexStatusArgsBuilder{
    obj: NewMetaServiceListTagIndexStatusArgs(),
  }
}

func (p MetaServiceListTagIndexStatusArgsBuilder) Emit() *MetaServiceListTagIndexStatusArgs{
  return &MetaServiceListTagIndexStatusArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListTagIndexStatusArgsBuilder) Req(req *ListIndexStatusReq) *MetaServiceListTagIndexStatusArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListTagIndexStatusArgs) SetReq(req *ListIndexStatusReq) *MetaServiceListTagIndexStatusArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListTagIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexStatusResult struct {
  thrift.IResponse
  Success *ListIndexStatusResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexStatusResult() *MetaServiceListTagIndexStatusResult {
  return &MetaServiceListTagIndexStatusResult{}
}

var MetaServiceListTagIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListTagIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexStatusResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListTagIndexStatusResultBuilder struct {
  obj *MetaServiceListTagIndexStatusResult
}

func NewMetaServiceListTagIndexStatusResultBuilder() *MetaServiceListTagIndexStatusResultBuilder{
  return &MetaServiceListTagIndexStatusResultBuilder{
    obj: NewMetaServiceListTagIndexStatusResult(),
  }
}

func (p MetaServiceListTagIndexStatusResultBuilder) Emit() *MetaServiceListTagIndexStatusResult{
  return &MetaServiceListTagIndexStatusResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListTagIndexStatusResultBuilder) Success(success *ListIndexStatusResp) *MetaServiceListTagIndexStatusResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListTagIndexStatusResult) SetSuccess(success *ListIndexStatusResp) *MetaServiceListTagIndexStatusResult {
  m.Success = success
  return m
}

func (p *MetaServiceListTagIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeIndexArgs struct {
  thrift.IRequest
  Req *CreateEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeIndexArgs() *MetaServiceCreateEdgeIndexArgs {
  return &MetaServiceCreateEdgeIndexArgs{
    Req: NewCreateEdgeIndexReq(),
  }
}

var MetaServiceCreateEdgeIndexArgs_Req_DEFAULT *CreateEdgeIndexReq
func (p *MetaServiceCreateEdgeIndexArgs) GetReq() *CreateEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateEdgeIndexArgsBuilder struct {
  obj *MetaServiceCreateEdgeIndexArgs
}

func NewMetaServiceCreateEdgeIndexArgsBuilder() *MetaServiceCreateEdgeIndexArgsBuilder{
  return &MetaServiceCreateEdgeIndexArgsBuilder{
    obj: NewMetaServiceCreateEdgeIndexArgs(),
  }
}

func (p MetaServiceCreateEdgeIndexArgsBuilder) Emit() *MetaServiceCreateEdgeIndexArgs{
  return &MetaServiceCreateEdgeIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateEdgeIndexArgsBuilder) Req(req *CreateEdgeIndexReq) *MetaServiceCreateEdgeIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateEdgeIndexArgs) SetReq(req *CreateEdgeIndexReq) *MetaServiceCreateEdgeIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeIndexResult() *MetaServiceCreateEdgeIndexResult {
  return &MetaServiceCreateEdgeIndexResult{}
}

var MetaServiceCreateEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateEdgeIndexResultBuilder struct {
  obj *MetaServiceCreateEdgeIndexResult
}

func NewMetaServiceCreateEdgeIndexResultBuilder() *MetaServiceCreateEdgeIndexResultBuilder{
  return &MetaServiceCreateEdgeIndexResultBuilder{
    obj: NewMetaServiceCreateEdgeIndexResult(),
  }
}

func (p MetaServiceCreateEdgeIndexResultBuilder) Emit() *MetaServiceCreateEdgeIndexResult{
  return &MetaServiceCreateEdgeIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateEdgeIndexResultBuilder) Success(success *ExecResp) *MetaServiceCreateEdgeIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateEdgeIndexResult) SetSuccess(success *ExecResp) *MetaServiceCreateEdgeIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeIndexArgs struct {
  thrift.IRequest
  Req *DropEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeIndexArgs() *MetaServiceDropEdgeIndexArgs {
  return &MetaServiceDropEdgeIndexArgs{
    Req: NewDropEdgeIndexReq(),
  }
}

var MetaServiceDropEdgeIndexArgs_Req_DEFAULT *DropEdgeIndexReq
func (p *MetaServiceDropEdgeIndexArgs) GetReq() *DropEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropEdgeIndexArgsBuilder struct {
  obj *MetaServiceDropEdgeIndexArgs
}

func NewMetaServiceDropEdgeIndexArgsBuilder() *MetaServiceDropEdgeIndexArgsBuilder{
  return &MetaServiceDropEdgeIndexArgsBuilder{
    obj: NewMetaServiceDropEdgeIndexArgs(),
  }
}

func (p MetaServiceDropEdgeIndexArgsBuilder) Emit() *MetaServiceDropEdgeIndexArgs{
  return &MetaServiceDropEdgeIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropEdgeIndexArgsBuilder) Req(req *DropEdgeIndexReq) *MetaServiceDropEdgeIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropEdgeIndexArgs) SetReq(req *DropEdgeIndexReq) *MetaServiceDropEdgeIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeIndexResult() *MetaServiceDropEdgeIndexResult {
  return &MetaServiceDropEdgeIndexResult{}
}

var MetaServiceDropEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropEdgeIndexResultBuilder struct {
  obj *MetaServiceDropEdgeIndexResult
}

func NewMetaServiceDropEdgeIndexResultBuilder() *MetaServiceDropEdgeIndexResultBuilder{
  return &MetaServiceDropEdgeIndexResultBuilder{
    obj: NewMetaServiceDropEdgeIndexResult(),
  }
}

func (p MetaServiceDropEdgeIndexResultBuilder) Emit() *MetaServiceDropEdgeIndexResult{
  return &MetaServiceDropEdgeIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropEdgeIndexResultBuilder) Success(success *ExecResp) *MetaServiceDropEdgeIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropEdgeIndexResult) SetSuccess(success *ExecResp) *MetaServiceDropEdgeIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeIndexArgs struct {
  thrift.IRequest
  Req *GetEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeIndexArgs() *MetaServiceGetEdgeIndexArgs {
  return &MetaServiceGetEdgeIndexArgs{
    Req: NewGetEdgeIndexReq(),
  }
}

var MetaServiceGetEdgeIndexArgs_Req_DEFAULT *GetEdgeIndexReq
func (p *MetaServiceGetEdgeIndexArgs) GetReq() *GetEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetEdgeIndexArgsBuilder struct {
  obj *MetaServiceGetEdgeIndexArgs
}

func NewMetaServiceGetEdgeIndexArgsBuilder() *MetaServiceGetEdgeIndexArgsBuilder{
  return &MetaServiceGetEdgeIndexArgsBuilder{
    obj: NewMetaServiceGetEdgeIndexArgs(),
  }
}

func (p MetaServiceGetEdgeIndexArgsBuilder) Emit() *MetaServiceGetEdgeIndexArgs{
  return &MetaServiceGetEdgeIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetEdgeIndexArgsBuilder) Req(req *GetEdgeIndexReq) *MetaServiceGetEdgeIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetEdgeIndexArgs) SetReq(req *GetEdgeIndexReq) *MetaServiceGetEdgeIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeIndexResult struct {
  thrift.IResponse
  Success *GetEdgeIndexResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeIndexResult() *MetaServiceGetEdgeIndexResult {
  return &MetaServiceGetEdgeIndexResult{}
}

var MetaServiceGetEdgeIndexResult_Success_DEFAULT *GetEdgeIndexResp
func (p *MetaServiceGetEdgeIndexResult) GetSuccess() *GetEdgeIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetEdgeIndexResultBuilder struct {
  obj *MetaServiceGetEdgeIndexResult
}

func NewMetaServiceGetEdgeIndexResultBuilder() *MetaServiceGetEdgeIndexResultBuilder{
  return &MetaServiceGetEdgeIndexResultBuilder{
    obj: NewMetaServiceGetEdgeIndexResult(),
  }
}

func (p MetaServiceGetEdgeIndexResultBuilder) Emit() *MetaServiceGetEdgeIndexResult{
  return &MetaServiceGetEdgeIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetEdgeIndexResultBuilder) Success(success *GetEdgeIndexResp) *MetaServiceGetEdgeIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetEdgeIndexResult) SetSuccess(success *GetEdgeIndexResp) *MetaServiceGetEdgeIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexesArgs struct {
  thrift.IRequest
  Req *ListEdgeIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexesArgs() *MetaServiceListEdgeIndexesArgs {
  return &MetaServiceListEdgeIndexesArgs{
    Req: NewListEdgeIndexesReq(),
  }
}

var MetaServiceListEdgeIndexesArgs_Req_DEFAULT *ListEdgeIndexesReq
func (p *MetaServiceListEdgeIndexesArgs) GetReq() *ListEdgeIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListEdgeIndexesArgsBuilder struct {
  obj *MetaServiceListEdgeIndexesArgs
}

func NewMetaServiceListEdgeIndexesArgsBuilder() *MetaServiceListEdgeIndexesArgsBuilder{
  return &MetaServiceListEdgeIndexesArgsBuilder{
    obj: NewMetaServiceListEdgeIndexesArgs(),
  }
}

func (p MetaServiceListEdgeIndexesArgsBuilder) Emit() *MetaServiceListEdgeIndexesArgs{
  return &MetaServiceListEdgeIndexesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListEdgeIndexesArgsBuilder) Req(req *ListEdgeIndexesReq) *MetaServiceListEdgeIndexesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListEdgeIndexesArgs) SetReq(req *ListEdgeIndexesReq) *MetaServiceListEdgeIndexesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListEdgeIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgeIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexesResult struct {
  thrift.IResponse
  Success *ListEdgeIndexesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexesResult() *MetaServiceListEdgeIndexesResult {
  return &MetaServiceListEdgeIndexesResult{}
}

var MetaServiceListEdgeIndexesResult_Success_DEFAULT *ListEdgeIndexesResp
func (p *MetaServiceListEdgeIndexesResult) GetSuccess() *ListEdgeIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListEdgeIndexesResultBuilder struct {
  obj *MetaServiceListEdgeIndexesResult
}

func NewMetaServiceListEdgeIndexesResultBuilder() *MetaServiceListEdgeIndexesResultBuilder{
  return &MetaServiceListEdgeIndexesResultBuilder{
    obj: NewMetaServiceListEdgeIndexesResult(),
  }
}

func (p MetaServiceListEdgeIndexesResultBuilder) Emit() *MetaServiceListEdgeIndexesResult{
  return &MetaServiceListEdgeIndexesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListEdgeIndexesResultBuilder) Success(success *ListEdgeIndexesResp) *MetaServiceListEdgeIndexesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListEdgeIndexesResult) SetSuccess(success *ListEdgeIndexesResp) *MetaServiceListEdgeIndexesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListEdgeIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgeIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRebuildEdgeIndexArgs struct {
  thrift.IRequest
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildEdgeIndexArgs() *MetaServiceRebuildEdgeIndexArgs {
  return &MetaServiceRebuildEdgeIndexArgs{
    Req: NewRebuildIndexReq(),
  }
}

var MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildEdgeIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRebuildEdgeIndexArgsBuilder struct {
  obj *MetaServiceRebuildEdgeIndexArgs
}

func NewMetaServiceRebuildEdgeIndexArgsBuilder() *MetaServiceRebuildEdgeIndexArgsBuilder{
  return &MetaServiceRebuildEdgeIndexArgsBuilder{
    obj: NewMetaServiceRebuildEdgeIndexArgs(),
  }
}

func (p MetaServiceRebuildEdgeIndexArgsBuilder) Emit() *MetaServiceRebuildEdgeIndexArgs{
  return &MetaServiceRebuildEdgeIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRebuildEdgeIndexArgsBuilder) Req(req *RebuildIndexReq) *MetaServiceRebuildEdgeIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRebuildEdgeIndexArgs) SetReq(req *RebuildIndexReq) *MetaServiceRebuildEdgeIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRebuildEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRebuildEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildEdgeIndexResult() *MetaServiceRebuildEdgeIndexResult {
  return &MetaServiceRebuildEdgeIndexResult{}
}

var MetaServiceRebuildEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRebuildEdgeIndexResultBuilder struct {
  obj *MetaServiceRebuildEdgeIndexResult
}

func NewMetaServiceRebuildEdgeIndexResultBuilder() *MetaServiceRebuildEdgeIndexResultBuilder{
  return &MetaServiceRebuildEdgeIndexResultBuilder{
    obj: NewMetaServiceRebuildEdgeIndexResult(),
  }
}

func (p MetaServiceRebuildEdgeIndexResultBuilder) Emit() *MetaServiceRebuildEdgeIndexResult{
  return &MetaServiceRebuildEdgeIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRebuildEdgeIndexResultBuilder) Success(success *ExecResp) *MetaServiceRebuildEdgeIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRebuildEdgeIndexResult) SetSuccess(success *ExecResp) *MetaServiceRebuildEdgeIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceRebuildEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexStatusArgs struct {
  thrift.IRequest
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexStatusArgs() *MetaServiceListEdgeIndexStatusArgs {
  return &MetaServiceListEdgeIndexStatusArgs{
    Req: NewListIndexStatusReq(),
  }
}

var MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListEdgeIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexStatusArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListEdgeIndexStatusArgsBuilder struct {
  obj *MetaServiceListEdgeIndexStatusArgs
}

func NewMetaServiceListEdgeIndexStatusArgsBuilder() *MetaServiceListEdgeIndexStatusArgsBuilder{
  return &MetaServiceListEdgeIndexStatusArgsBuilder{
    obj: NewMetaServiceListEdgeIndexStatusArgs(),
  }
}

func (p MetaServiceListEdgeIndexStatusArgsBuilder) Emit() *MetaServiceListEdgeIndexStatusArgs{
  return &MetaServiceListEdgeIndexStatusArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListEdgeIndexStatusArgsBuilder) Req(req *ListIndexStatusReq) *MetaServiceListEdgeIndexStatusArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListEdgeIndexStatusArgs) SetReq(req *ListIndexStatusReq) *MetaServiceListEdgeIndexStatusArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListEdgeIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexStatusResult struct {
  thrift.IResponse
  Success *ListIndexStatusResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexStatusResult() *MetaServiceListEdgeIndexStatusResult {
  return &MetaServiceListEdgeIndexStatusResult{}
}

var MetaServiceListEdgeIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListEdgeIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexStatusResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListEdgeIndexStatusResultBuilder struct {
  obj *MetaServiceListEdgeIndexStatusResult
}

func NewMetaServiceListEdgeIndexStatusResultBuilder() *MetaServiceListEdgeIndexStatusResultBuilder{
  return &MetaServiceListEdgeIndexStatusResultBuilder{
    obj: NewMetaServiceListEdgeIndexStatusResult(),
  }
}

func (p MetaServiceListEdgeIndexStatusResultBuilder) Emit() *MetaServiceListEdgeIndexStatusResult{
  return &MetaServiceListEdgeIndexStatusResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListEdgeIndexStatusResultBuilder) Success(success *ListIndexStatusResp) *MetaServiceListEdgeIndexStatusResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListEdgeIndexStatusResult) SetSuccess(success *ListIndexStatusResp) *MetaServiceListEdgeIndexStatusResult {
  m.Success = success
  return m
}

func (p *MetaServiceListEdgeIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateUserArgs struct {
  thrift.IRequest
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateUserArgs() *MetaServiceCreateUserArgs {
  return &MetaServiceCreateUserArgs{
    Req: NewCreateUserReq(),
  }
}

var MetaServiceCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *MetaServiceCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return MetaServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateUserArgsBuilder struct {
  obj *MetaServiceCreateUserArgs
}

func NewMetaServiceCreateUserArgsBuilder() *MetaServiceCreateUserArgsBuilder{
  return &MetaServiceCreateUserArgsBuilder{
    obj: NewMetaServiceCreateUserArgs(),
  }
}

func (p MetaServiceCreateUserArgsBuilder) Emit() *MetaServiceCreateUserArgs{
  return &MetaServiceCreateUserArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateUserArgsBuilder) Req(req *CreateUserReq) *MetaServiceCreateUserArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateUserArgs) SetReq(req *CreateUserReq) *MetaServiceCreateUserArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateUserResult() *MetaServiceCreateUserResult {
  return &MetaServiceCreateUserResult{}
}

var MetaServiceCreateUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateUserResultBuilder struct {
  obj *MetaServiceCreateUserResult
}

func NewMetaServiceCreateUserResultBuilder() *MetaServiceCreateUserResultBuilder{
  return &MetaServiceCreateUserResultBuilder{
    obj: NewMetaServiceCreateUserResult(),
  }
}

func (p MetaServiceCreateUserResultBuilder) Emit() *MetaServiceCreateUserResult{
  return &MetaServiceCreateUserResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateUserResultBuilder) Success(success *ExecResp) *MetaServiceCreateUserResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateUserResult) SetSuccess(success *ExecResp) *MetaServiceCreateUserResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropUserArgs struct {
  thrift.IRequest
  Req *DropUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropUserArgs() *MetaServiceDropUserArgs {
  return &MetaServiceDropUserArgs{
    Req: NewDropUserReq(),
  }
}

var MetaServiceDropUserArgs_Req_DEFAULT *DropUserReq
func (p *MetaServiceDropUserArgs) GetReq() *DropUserReq {
  if !p.IsSetReq() {
    return MetaServiceDropUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropUserArgsBuilder struct {
  obj *MetaServiceDropUserArgs
}

func NewMetaServiceDropUserArgsBuilder() *MetaServiceDropUserArgsBuilder{
  return &MetaServiceDropUserArgsBuilder{
    obj: NewMetaServiceDropUserArgs(),
  }
}

func (p MetaServiceDropUserArgsBuilder) Emit() *MetaServiceDropUserArgs{
  return &MetaServiceDropUserArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropUserArgsBuilder) Req(req *DropUserReq) *MetaServiceDropUserArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropUserArgs) SetReq(req *DropUserReq) *MetaServiceDropUserArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropUserResult() *MetaServiceDropUserResult {
  return &MetaServiceDropUserResult{}
}

var MetaServiceDropUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropUserResultBuilder struct {
  obj *MetaServiceDropUserResult
}

func NewMetaServiceDropUserResultBuilder() *MetaServiceDropUserResultBuilder{
  return &MetaServiceDropUserResultBuilder{
    obj: NewMetaServiceDropUserResult(),
  }
}

func (p MetaServiceDropUserResultBuilder) Emit() *MetaServiceDropUserResult{
  return &MetaServiceDropUserResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropUserResultBuilder) Success(success *ExecResp) *MetaServiceDropUserResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropUserResult) SetSuccess(success *ExecResp) *MetaServiceDropUserResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterUserArgs struct {
  thrift.IRequest
  Req *AlterUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterUserArgs() *MetaServiceAlterUserArgs {
  return &MetaServiceAlterUserArgs{
    Req: NewAlterUserReq(),
  }
}

var MetaServiceAlterUserArgs_Req_DEFAULT *AlterUserReq
func (p *MetaServiceAlterUserArgs) GetReq() *AlterUserReq {
  if !p.IsSetReq() {
    return MetaServiceAlterUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAlterUserArgsBuilder struct {
  obj *MetaServiceAlterUserArgs
}

func NewMetaServiceAlterUserArgsBuilder() *MetaServiceAlterUserArgsBuilder{
  return &MetaServiceAlterUserArgsBuilder{
    obj: NewMetaServiceAlterUserArgs(),
  }
}

func (p MetaServiceAlterUserArgsBuilder) Emit() *MetaServiceAlterUserArgs{
  return &MetaServiceAlterUserArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAlterUserArgsBuilder) Req(req *AlterUserReq) *MetaServiceAlterUserArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAlterUserArgs) SetReq(req *AlterUserReq) *MetaServiceAlterUserArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAlterUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterUserResult() *MetaServiceAlterUserResult {
  return &MetaServiceAlterUserResult{}
}

var MetaServiceAlterUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAlterUserResultBuilder struct {
  obj *MetaServiceAlterUserResult
}

func NewMetaServiceAlterUserResultBuilder() *MetaServiceAlterUserResultBuilder{
  return &MetaServiceAlterUserResultBuilder{
    obj: NewMetaServiceAlterUserResult(),
  }
}

func (p MetaServiceAlterUserResultBuilder) Emit() *MetaServiceAlterUserResult{
  return &MetaServiceAlterUserResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAlterUserResultBuilder) Success(success *ExecResp) *MetaServiceAlterUserResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAlterUserResult) SetSuccess(success *ExecResp) *MetaServiceAlterUserResult {
  m.Success = success
  return m
}

func (p *MetaServiceAlterUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGrantRoleArgs struct {
  thrift.IRequest
  Req *GrantRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGrantRoleArgs() *MetaServiceGrantRoleArgs {
  return &MetaServiceGrantRoleArgs{
    Req: NewGrantRoleReq(),
  }
}

var MetaServiceGrantRoleArgs_Req_DEFAULT *GrantRoleReq
func (p *MetaServiceGrantRoleArgs) GetReq() *GrantRoleReq {
  if !p.IsSetReq() {
    return MetaServiceGrantRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGrantRoleArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGrantRoleArgsBuilder struct {
  obj *MetaServiceGrantRoleArgs
}

func NewMetaServiceGrantRoleArgsBuilder() *MetaServiceGrantRoleArgsBuilder{
  return &MetaServiceGrantRoleArgsBuilder{
    obj: NewMetaServiceGrantRoleArgs(),
  }
}

func (p MetaServiceGrantRoleArgsBuilder) Emit() *MetaServiceGrantRoleArgs{
  return &MetaServiceGrantRoleArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGrantRoleArgsBuilder) Req(req *GrantRoleReq) *MetaServiceGrantRoleArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGrantRoleArgs) SetReq(req *GrantRoleReq) *MetaServiceGrantRoleArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGrantRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGrantRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGrantRoleArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGrantRoleResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGrantRoleResult() *MetaServiceGrantRoleResult {
  return &MetaServiceGrantRoleResult{}
}

var MetaServiceGrantRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceGrantRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceGrantRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGrantRoleResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGrantRoleResultBuilder struct {
  obj *MetaServiceGrantRoleResult
}

func NewMetaServiceGrantRoleResultBuilder() *MetaServiceGrantRoleResultBuilder{
  return &MetaServiceGrantRoleResultBuilder{
    obj: NewMetaServiceGrantRoleResult(),
  }
}

func (p MetaServiceGrantRoleResultBuilder) Emit() *MetaServiceGrantRoleResult{
  return &MetaServiceGrantRoleResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGrantRoleResultBuilder) Success(success *ExecResp) *MetaServiceGrantRoleResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGrantRoleResult) SetSuccess(success *ExecResp) *MetaServiceGrantRoleResult {
  m.Success = success
  return m
}

func (p *MetaServiceGrantRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGrantRoleResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRevokeRoleArgs struct {
  thrift.IRequest
  Req *RevokeRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRevokeRoleArgs() *MetaServiceRevokeRoleArgs {
  return &MetaServiceRevokeRoleArgs{
    Req: NewRevokeRoleReq(),
  }
}

var MetaServiceRevokeRoleArgs_Req_DEFAULT *RevokeRoleReq
func (p *MetaServiceRevokeRoleArgs) GetReq() *RevokeRoleReq {
  if !p.IsSetReq() {
    return MetaServiceRevokeRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRevokeRoleArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRevokeRoleArgsBuilder struct {
  obj *MetaServiceRevokeRoleArgs
}

func NewMetaServiceRevokeRoleArgsBuilder() *MetaServiceRevokeRoleArgsBuilder{
  return &MetaServiceRevokeRoleArgsBuilder{
    obj: NewMetaServiceRevokeRoleArgs(),
  }
}

func (p MetaServiceRevokeRoleArgsBuilder) Emit() *MetaServiceRevokeRoleArgs{
  return &MetaServiceRevokeRoleArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRevokeRoleArgsBuilder) Req(req *RevokeRoleReq) *MetaServiceRevokeRoleArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRevokeRoleArgs) SetReq(req *RevokeRoleReq) *MetaServiceRevokeRoleArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRevokeRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRevokeRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRevokeRoleArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRevokeRoleResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRevokeRoleResult() *MetaServiceRevokeRoleResult {
  return &MetaServiceRevokeRoleResult{}
}

var MetaServiceRevokeRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRevokeRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRevokeRoleResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRevokeRoleResultBuilder struct {
  obj *MetaServiceRevokeRoleResult
}

func NewMetaServiceRevokeRoleResultBuilder() *MetaServiceRevokeRoleResultBuilder{
  return &MetaServiceRevokeRoleResultBuilder{
    obj: NewMetaServiceRevokeRoleResult(),
  }
}

func (p MetaServiceRevokeRoleResultBuilder) Emit() *MetaServiceRevokeRoleResult{
  return &MetaServiceRevokeRoleResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRevokeRoleResultBuilder) Success(success *ExecResp) *MetaServiceRevokeRoleResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRevokeRoleResult) SetSuccess(success *ExecResp) *MetaServiceRevokeRoleResult {
  m.Success = success
  return m
}

func (p *MetaServiceRevokeRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRevokeRoleResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListUsersArgs struct {
  thrift.IRequest
  Req *ListUsersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListUsersArgs() *MetaServiceListUsersArgs {
  return &MetaServiceListUsersArgs{
    Req: NewListUsersReq(),
  }
}

var MetaServiceListUsersArgs_Req_DEFAULT *ListUsersReq
func (p *MetaServiceListUsersArgs) GetReq() *ListUsersReq {
  if !p.IsSetReq() {
    return MetaServiceListUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListUsersArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListUsersArgsBuilder struct {
  obj *MetaServiceListUsersArgs
}

func NewMetaServiceListUsersArgsBuilder() *MetaServiceListUsersArgsBuilder{
  return &MetaServiceListUsersArgsBuilder{
    obj: NewMetaServiceListUsersArgs(),
  }
}

func (p MetaServiceListUsersArgsBuilder) Emit() *MetaServiceListUsersArgs{
  return &MetaServiceListUsersArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListUsersArgsBuilder) Req(req *ListUsersReq) *MetaServiceListUsersArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListUsersArgs) SetReq(req *ListUsersReq) *MetaServiceListUsersArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListUsersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListUsersReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListUsersArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListUsersResult struct {
  thrift.IResponse
  Success *ListUsersResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListUsersResult() *MetaServiceListUsersResult {
  return &MetaServiceListUsersResult{}
}

var MetaServiceListUsersResult_Success_DEFAULT *ListUsersResp
func (p *MetaServiceListUsersResult) GetSuccess() *ListUsersResp {
  if !p.IsSetSuccess() {
    return MetaServiceListUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListUsersResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListUsersResultBuilder struct {
  obj *MetaServiceListUsersResult
}

func NewMetaServiceListUsersResultBuilder() *MetaServiceListUsersResultBuilder{
  return &MetaServiceListUsersResultBuilder{
    obj: NewMetaServiceListUsersResult(),
  }
}

func (p MetaServiceListUsersResultBuilder) Emit() *MetaServiceListUsersResult{
  return &MetaServiceListUsersResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListUsersResultBuilder) Success(success *ListUsersResp) *MetaServiceListUsersResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListUsersResult) SetSuccess(success *ListUsersResp) *MetaServiceListUsersResult {
  m.Success = success
  return m
}

func (p *MetaServiceListUsersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListUsersResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListUsersResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListRolesArgs struct {
  thrift.IRequest
  Req *ListRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListRolesArgs() *MetaServiceListRolesArgs {
  return &MetaServiceListRolesArgs{
    Req: NewListRolesReq(),
  }
}

var MetaServiceListRolesArgs_Req_DEFAULT *ListRolesReq
func (p *MetaServiceListRolesArgs) GetReq() *ListRolesReq {
  if !p.IsSetReq() {
    return MetaServiceListRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListRolesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListRolesArgsBuilder struct {
  obj *MetaServiceListRolesArgs
}

func NewMetaServiceListRolesArgsBuilder() *MetaServiceListRolesArgsBuilder{
  return &MetaServiceListRolesArgsBuilder{
    obj: NewMetaServiceListRolesArgs(),
  }
}

func (p MetaServiceListRolesArgsBuilder) Emit() *MetaServiceListRolesArgs{
  return &MetaServiceListRolesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListRolesArgsBuilder) Req(req *ListRolesReq) *MetaServiceListRolesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListRolesArgs) SetReq(req *ListRolesReq) *MetaServiceListRolesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListRolesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListRolesResult struct {
  thrift.IResponse
  Success *ListRolesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListRolesResult() *MetaServiceListRolesResult {
  return &MetaServiceListRolesResult{}
}

var MetaServiceListRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceListRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListRolesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListRolesResultBuilder struct {
  obj *MetaServiceListRolesResult
}

func NewMetaServiceListRolesResultBuilder() *MetaServiceListRolesResultBuilder{
  return &MetaServiceListRolesResultBuilder{
    obj: NewMetaServiceListRolesResult(),
  }
}

func (p MetaServiceListRolesResultBuilder) Emit() *MetaServiceListRolesResult{
  return &MetaServiceListRolesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListRolesResultBuilder) Success(success *ListRolesResp) *MetaServiceListRolesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListRolesResult) SetSuccess(success *ListRolesResp) *MetaServiceListRolesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListRolesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetUserRolesArgs struct {
  thrift.IRequest
  Req *GetUserRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetUserRolesArgs() *MetaServiceGetUserRolesArgs {
  return &MetaServiceGetUserRolesArgs{
    Req: NewGetUserRolesReq(),
  }
}

var MetaServiceGetUserRolesArgs_Req_DEFAULT *GetUserRolesReq
func (p *MetaServiceGetUserRolesArgs) GetReq() *GetUserRolesReq {
  if !p.IsSetReq() {
    return MetaServiceGetUserRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetUserRolesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetUserRolesArgsBuilder struct {
  obj *MetaServiceGetUserRolesArgs
}

func NewMetaServiceGetUserRolesArgsBuilder() *MetaServiceGetUserRolesArgsBuilder{
  return &MetaServiceGetUserRolesArgsBuilder{
    obj: NewMetaServiceGetUserRolesArgs(),
  }
}

func (p MetaServiceGetUserRolesArgsBuilder) Emit() *MetaServiceGetUserRolesArgs{
  return &MetaServiceGetUserRolesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetUserRolesArgsBuilder) Req(req *GetUserRolesReq) *MetaServiceGetUserRolesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetUserRolesArgs) SetReq(req *GetUserRolesReq) *MetaServiceGetUserRolesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetUserRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetUserRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetUserRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetUserRolesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetUserRolesResult struct {
  thrift.IResponse
  Success *ListRolesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetUserRolesResult() *MetaServiceGetUserRolesResult {
  return &MetaServiceGetUserRolesResult{}
}

var MetaServiceGetUserRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceGetUserRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetUserRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetUserRolesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetUserRolesResultBuilder struct {
  obj *MetaServiceGetUserRolesResult
}

func NewMetaServiceGetUserRolesResultBuilder() *MetaServiceGetUserRolesResultBuilder{
  return &MetaServiceGetUserRolesResultBuilder{
    obj: NewMetaServiceGetUserRolesResult(),
  }
}

func (p MetaServiceGetUserRolesResultBuilder) Emit() *MetaServiceGetUserRolesResult{
  return &MetaServiceGetUserRolesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetUserRolesResultBuilder) Success(success *ListRolesResp) *MetaServiceGetUserRolesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetUserRolesResult) SetSuccess(success *ListRolesResp) *MetaServiceGetUserRolesResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetUserRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetUserRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetUserRolesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceChangePasswordArgs struct {
  thrift.IRequest
  Req *ChangePasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceChangePasswordArgs() *MetaServiceChangePasswordArgs {
  return &MetaServiceChangePasswordArgs{
    Req: NewChangePasswordReq(),
  }
}

var MetaServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq
func (p *MetaServiceChangePasswordArgs) GetReq() *ChangePasswordReq {
  if !p.IsSetReq() {
    return MetaServiceChangePasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceChangePasswordArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceChangePasswordArgsBuilder struct {
  obj *MetaServiceChangePasswordArgs
}

func NewMetaServiceChangePasswordArgsBuilder() *MetaServiceChangePasswordArgsBuilder{
  return &MetaServiceChangePasswordArgsBuilder{
    obj: NewMetaServiceChangePasswordArgs(),
  }
}

func (p MetaServiceChangePasswordArgsBuilder) Emit() *MetaServiceChangePasswordArgs{
  return &MetaServiceChangePasswordArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceChangePasswordArgsBuilder) Req(req *ChangePasswordReq) *MetaServiceChangePasswordArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceChangePasswordArgs) SetReq(req *ChangePasswordReq) *MetaServiceChangePasswordArgs {
  m.Req = req
  return m
}

func (p *MetaServiceChangePasswordArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewChangePasswordReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceChangePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceChangePasswordArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceChangePasswordResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceChangePasswordResult() *MetaServiceChangePasswordResult {
  return &MetaServiceChangePasswordResult{}
}

var MetaServiceChangePasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceChangePasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceChangePasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceChangePasswordResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceChangePasswordResultBuilder struct {
  obj *MetaServiceChangePasswordResult
}

func NewMetaServiceChangePasswordResultBuilder() *MetaServiceChangePasswordResultBuilder{
  return &MetaServiceChangePasswordResultBuilder{
    obj: NewMetaServiceChangePasswordResult(),
  }
}

func (p MetaServiceChangePasswordResultBuilder) Emit() *MetaServiceChangePasswordResult{
  return &MetaServiceChangePasswordResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceChangePasswordResultBuilder) Success(success *ExecResp) *MetaServiceChangePasswordResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceChangePasswordResult) SetSuccess(success *ExecResp) *MetaServiceChangePasswordResult {
  m.Success = success
  return m
}

func (p *MetaServiceChangePasswordResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceChangePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceChangePasswordResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceHeartBeatArgs struct {
  thrift.IRequest
  Req *HBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceHeartBeatArgs() *MetaServiceHeartBeatArgs {
  return &MetaServiceHeartBeatArgs{
    Req: NewHBReq(),
  }
}

var MetaServiceHeartBeatArgs_Req_DEFAULT *HBReq
func (p *MetaServiceHeartBeatArgs) GetReq() *HBReq {
  if !p.IsSetReq() {
    return MetaServiceHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceHeartBeatArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceHeartBeatArgsBuilder struct {
  obj *MetaServiceHeartBeatArgs
}

func NewMetaServiceHeartBeatArgsBuilder() *MetaServiceHeartBeatArgsBuilder{
  return &MetaServiceHeartBeatArgsBuilder{
    obj: NewMetaServiceHeartBeatArgs(),
  }
}

func (p MetaServiceHeartBeatArgsBuilder) Emit() *MetaServiceHeartBeatArgs{
  return &MetaServiceHeartBeatArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceHeartBeatArgsBuilder) Req(req *HBReq) *MetaServiceHeartBeatArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceHeartBeatArgs) SetReq(req *HBReq) *MetaServiceHeartBeatArgs {
  m.Req = req
  return m
}

func (p *MetaServiceHeartBeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewHBReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceHeartBeatArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceHeartBeatResult struct {
  thrift.IResponse
  Success *HBResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceHeartBeatResult() *MetaServiceHeartBeatResult {
  return &MetaServiceHeartBeatResult{}
}

var MetaServiceHeartBeatResult_Success_DEFAULT *HBResp
func (p *MetaServiceHeartBeatResult) GetSuccess() *HBResp {
  if !p.IsSetSuccess() {
    return MetaServiceHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceHeartBeatResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceHeartBeatResultBuilder struct {
  obj *MetaServiceHeartBeatResult
}

func NewMetaServiceHeartBeatResultBuilder() *MetaServiceHeartBeatResultBuilder{
  return &MetaServiceHeartBeatResultBuilder{
    obj: NewMetaServiceHeartBeatResult(),
  }
}

func (p MetaServiceHeartBeatResultBuilder) Emit() *MetaServiceHeartBeatResult{
  return &MetaServiceHeartBeatResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceHeartBeatResultBuilder) Success(success *HBResp) *MetaServiceHeartBeatResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceHeartBeatResult) SetSuccess(success *HBResp) *MetaServiceHeartBeatResult {
  m.Success = success
  return m
}

func (p *MetaServiceHeartBeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHBResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceHeartBeatResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAgentHeartbeatArgs struct {
  thrift.IRequest
  Req *AgentHBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAgentHeartbeatArgs() *MetaServiceAgentHeartbeatArgs {
  return &MetaServiceAgentHeartbeatArgs{
    Req: NewAgentHBReq(),
  }
}

var MetaServiceAgentHeartbeatArgs_Req_DEFAULT *AgentHBReq
func (p *MetaServiceAgentHeartbeatArgs) GetReq() *AgentHBReq {
  if !p.IsSetReq() {
    return MetaServiceAgentHeartbeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAgentHeartbeatArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAgentHeartbeatArgsBuilder struct {
  obj *MetaServiceAgentHeartbeatArgs
}

func NewMetaServiceAgentHeartbeatArgsBuilder() *MetaServiceAgentHeartbeatArgsBuilder{
  return &MetaServiceAgentHeartbeatArgsBuilder{
    obj: NewMetaServiceAgentHeartbeatArgs(),
  }
}

func (p MetaServiceAgentHeartbeatArgsBuilder) Emit() *MetaServiceAgentHeartbeatArgs{
  return &MetaServiceAgentHeartbeatArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAgentHeartbeatArgsBuilder) Req(req *AgentHBReq) *MetaServiceAgentHeartbeatArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAgentHeartbeatArgs) SetReq(req *AgentHBReq) *MetaServiceAgentHeartbeatArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAgentHeartbeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAgentHBReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("agentHeartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAgentHeartbeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAgentHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAgentHeartbeatArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAgentHeartbeatResult struct {
  thrift.IResponse
  Success *AgentHBResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAgentHeartbeatResult() *MetaServiceAgentHeartbeatResult {
  return &MetaServiceAgentHeartbeatResult{}
}

var MetaServiceAgentHeartbeatResult_Success_DEFAULT *AgentHBResp
func (p *MetaServiceAgentHeartbeatResult) GetSuccess() *AgentHBResp {
  if !p.IsSetSuccess() {
    return MetaServiceAgentHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAgentHeartbeatResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAgentHeartbeatResultBuilder struct {
  obj *MetaServiceAgentHeartbeatResult
}

func NewMetaServiceAgentHeartbeatResultBuilder() *MetaServiceAgentHeartbeatResultBuilder{
  return &MetaServiceAgentHeartbeatResultBuilder{
    obj: NewMetaServiceAgentHeartbeatResult(),
  }
}

func (p MetaServiceAgentHeartbeatResultBuilder) Emit() *MetaServiceAgentHeartbeatResult{
  return &MetaServiceAgentHeartbeatResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAgentHeartbeatResultBuilder) Success(success *AgentHBResp) *MetaServiceAgentHeartbeatResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAgentHeartbeatResult) SetSuccess(success *AgentHBResp) *MetaServiceAgentHeartbeatResult {
  m.Success = success
  return m
}

func (p *MetaServiceAgentHeartbeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAgentHBResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("agentHeartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAgentHeartbeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAgentHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAgentHeartbeatResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRegConfigArgs struct {
  thrift.IRequest
  Req *RegConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRegConfigArgs() *MetaServiceRegConfigArgs {
  return &MetaServiceRegConfigArgs{
    Req: NewRegConfigReq(),
  }
}

var MetaServiceRegConfigArgs_Req_DEFAULT *RegConfigReq
func (p *MetaServiceRegConfigArgs) GetReq() *RegConfigReq {
  if !p.IsSetReq() {
    return MetaServiceRegConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRegConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRegConfigArgsBuilder struct {
  obj *MetaServiceRegConfigArgs
}

func NewMetaServiceRegConfigArgsBuilder() *MetaServiceRegConfigArgsBuilder{
  return &MetaServiceRegConfigArgsBuilder{
    obj: NewMetaServiceRegConfigArgs(),
  }
}

func (p MetaServiceRegConfigArgsBuilder) Emit() *MetaServiceRegConfigArgs{
  return &MetaServiceRegConfigArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRegConfigArgsBuilder) Req(req *RegConfigReq) *MetaServiceRegConfigArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRegConfigArgs) SetReq(req *RegConfigReq) *MetaServiceRegConfigArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRegConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRegConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRegConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRegConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRegConfigResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRegConfigResult() *MetaServiceRegConfigResult {
  return &MetaServiceRegConfigResult{}
}

var MetaServiceRegConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRegConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRegConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRegConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRegConfigResultBuilder struct {
  obj *MetaServiceRegConfigResult
}

func NewMetaServiceRegConfigResultBuilder() *MetaServiceRegConfigResultBuilder{
  return &MetaServiceRegConfigResultBuilder{
    obj: NewMetaServiceRegConfigResult(),
  }
}

func (p MetaServiceRegConfigResultBuilder) Emit() *MetaServiceRegConfigResult{
  return &MetaServiceRegConfigResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRegConfigResultBuilder) Success(success *ExecResp) *MetaServiceRegConfigResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRegConfigResult) SetSuccess(success *ExecResp) *MetaServiceRegConfigResult {
  m.Success = success
  return m
}

func (p *MetaServiceRegConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRegConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRegConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetConfigArgs struct {
  thrift.IRequest
  Req *GetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetConfigArgs() *MetaServiceGetConfigArgs {
  return &MetaServiceGetConfigArgs{
    Req: NewGetConfigReq(),
  }
}

var MetaServiceGetConfigArgs_Req_DEFAULT *GetConfigReq
func (p *MetaServiceGetConfigArgs) GetReq() *GetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceGetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetConfigArgsBuilder struct {
  obj *MetaServiceGetConfigArgs
}

func NewMetaServiceGetConfigArgsBuilder() *MetaServiceGetConfigArgsBuilder{
  return &MetaServiceGetConfigArgsBuilder{
    obj: NewMetaServiceGetConfigArgs(),
  }
}

func (p MetaServiceGetConfigArgsBuilder) Emit() *MetaServiceGetConfigArgs{
  return &MetaServiceGetConfigArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetConfigArgsBuilder) Req(req *GetConfigReq) *MetaServiceGetConfigArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetConfigArgs) SetReq(req *GetConfigReq) *MetaServiceGetConfigArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetConfigResult struct {
  thrift.IResponse
  Success *GetConfigResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetConfigResult() *MetaServiceGetConfigResult {
  return &MetaServiceGetConfigResult{}
}

var MetaServiceGetConfigResult_Success_DEFAULT *GetConfigResp
func (p *MetaServiceGetConfigResult) GetSuccess() *GetConfigResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetConfigResultBuilder struct {
  obj *MetaServiceGetConfigResult
}

func NewMetaServiceGetConfigResultBuilder() *MetaServiceGetConfigResultBuilder{
  return &MetaServiceGetConfigResultBuilder{
    obj: NewMetaServiceGetConfigResult(),
  }
}

func (p MetaServiceGetConfigResultBuilder) Emit() *MetaServiceGetConfigResult{
  return &MetaServiceGetConfigResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetConfigResultBuilder) Success(success *GetConfigResp) *MetaServiceGetConfigResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetConfigResult) SetSuccess(success *GetConfigResp) *MetaServiceGetConfigResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetConfigResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSetConfigArgs struct {
  thrift.IRequest
  Req *SetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSetConfigArgs() *MetaServiceSetConfigArgs {
  return &MetaServiceSetConfigArgs{
    Req: NewSetConfigReq(),
  }
}

var MetaServiceSetConfigArgs_Req_DEFAULT *SetConfigReq
func (p *MetaServiceSetConfigArgs) GetReq() *SetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceSetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSetConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceSetConfigArgsBuilder struct {
  obj *MetaServiceSetConfigArgs
}

func NewMetaServiceSetConfigArgsBuilder() *MetaServiceSetConfigArgsBuilder{
  return &MetaServiceSetConfigArgsBuilder{
    obj: NewMetaServiceSetConfigArgs(),
  }
}

func (p MetaServiceSetConfigArgsBuilder) Emit() *MetaServiceSetConfigArgs{
  return &MetaServiceSetConfigArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceSetConfigArgsBuilder) Req(req *SetConfigReq) *MetaServiceSetConfigArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceSetConfigArgs) SetReq(req *SetConfigReq) *MetaServiceSetConfigArgs {
  m.Req = req
  return m
}

func (p *MetaServiceSetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSetConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSetConfigResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSetConfigResult() *MetaServiceSetConfigResult {
  return &MetaServiceSetConfigResult{}
}

var MetaServiceSetConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSetConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSetConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceSetConfigResultBuilder struct {
  obj *MetaServiceSetConfigResult
}

func NewMetaServiceSetConfigResultBuilder() *MetaServiceSetConfigResultBuilder{
  return &MetaServiceSetConfigResultBuilder{
    obj: NewMetaServiceSetConfigResult(),
  }
}

func (p MetaServiceSetConfigResultBuilder) Emit() *MetaServiceSetConfigResult{
  return &MetaServiceSetConfigResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceSetConfigResultBuilder) Success(success *ExecResp) *MetaServiceSetConfigResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceSetConfigResult) SetSuccess(success *ExecResp) *MetaServiceSetConfigResult {
  m.Success = success
  return m
}

func (p *MetaServiceSetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSetConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListConfigsArgs struct {
  thrift.IRequest
  Req *ListConfigsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListConfigsArgs() *MetaServiceListConfigsArgs {
  return &MetaServiceListConfigsArgs{
    Req: NewListConfigsReq(),
  }
}

var MetaServiceListConfigsArgs_Req_DEFAULT *ListConfigsReq
func (p *MetaServiceListConfigsArgs) GetReq() *ListConfigsReq {
  if !p.IsSetReq() {
    return MetaServiceListConfigsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListConfigsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListConfigsArgsBuilder struct {
  obj *MetaServiceListConfigsArgs
}

func NewMetaServiceListConfigsArgsBuilder() *MetaServiceListConfigsArgsBuilder{
  return &MetaServiceListConfigsArgsBuilder{
    obj: NewMetaServiceListConfigsArgs(),
  }
}

func (p MetaServiceListConfigsArgsBuilder) Emit() *MetaServiceListConfigsArgs{
  return &MetaServiceListConfigsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListConfigsArgsBuilder) Req(req *ListConfigsReq) *MetaServiceListConfigsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListConfigsArgs) SetReq(req *ListConfigsReq) *MetaServiceListConfigsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListConfigsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListConfigsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListConfigsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListConfigsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListConfigsResult struct {
  thrift.IResponse
  Success *ListConfigsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListConfigsResult() *MetaServiceListConfigsResult {
  return &MetaServiceListConfigsResult{}
}

var MetaServiceListConfigsResult_Success_DEFAULT *ListConfigsResp
func (p *MetaServiceListConfigsResult) GetSuccess() *ListConfigsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListConfigsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListConfigsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListConfigsResultBuilder struct {
  obj *MetaServiceListConfigsResult
}

func NewMetaServiceListConfigsResultBuilder() *MetaServiceListConfigsResultBuilder{
  return &MetaServiceListConfigsResultBuilder{
    obj: NewMetaServiceListConfigsResult(),
  }
}

func (p MetaServiceListConfigsResultBuilder) Emit() *MetaServiceListConfigsResult{
  return &MetaServiceListConfigsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListConfigsResultBuilder) Success(success *ListConfigsResp) *MetaServiceListConfigsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListConfigsResult) SetSuccess(success *ListConfigsResp) *MetaServiceListConfigsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListConfigsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListConfigsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListConfigsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListConfigsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateSnapshotArgs struct {
  thrift.IRequest
  Req *CreateSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSnapshotArgs() *MetaServiceCreateSnapshotArgs {
  return &MetaServiceCreateSnapshotArgs{
    Req: NewCreateSnapshotReq(),
  }
}

var MetaServiceCreateSnapshotArgs_Req_DEFAULT *CreateSnapshotReq
func (p *MetaServiceCreateSnapshotArgs) GetReq() *CreateSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSnapshotArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateSnapshotArgsBuilder struct {
  obj *MetaServiceCreateSnapshotArgs
}

func NewMetaServiceCreateSnapshotArgsBuilder() *MetaServiceCreateSnapshotArgsBuilder{
  return &MetaServiceCreateSnapshotArgsBuilder{
    obj: NewMetaServiceCreateSnapshotArgs(),
  }
}

func (p MetaServiceCreateSnapshotArgsBuilder) Emit() *MetaServiceCreateSnapshotArgs{
  return &MetaServiceCreateSnapshotArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateSnapshotArgsBuilder) Req(req *CreateSnapshotReq) *MetaServiceCreateSnapshotArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateSnapshotArgs) SetReq(req *CreateSnapshotReq) *MetaServiceCreateSnapshotArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSnapshotResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSnapshotResult() *MetaServiceCreateSnapshotResult {
  return &MetaServiceCreateSnapshotResult{}
}

var MetaServiceCreateSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSnapshotResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateSnapshotResultBuilder struct {
  obj *MetaServiceCreateSnapshotResult
}

func NewMetaServiceCreateSnapshotResultBuilder() *MetaServiceCreateSnapshotResultBuilder{
  return &MetaServiceCreateSnapshotResultBuilder{
    obj: NewMetaServiceCreateSnapshotResult(),
  }
}

func (p MetaServiceCreateSnapshotResultBuilder) Emit() *MetaServiceCreateSnapshotResult{
  return &MetaServiceCreateSnapshotResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateSnapshotResultBuilder) Success(success *ExecResp) *MetaServiceCreateSnapshotResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateSnapshotResult) SetSuccess(success *ExecResp) *MetaServiceCreateSnapshotResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropSnapshotArgs struct {
  thrift.IRequest
  Req *DropSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSnapshotArgs() *MetaServiceDropSnapshotArgs {
  return &MetaServiceDropSnapshotArgs{
    Req: NewDropSnapshotReq(),
  }
}

var MetaServiceDropSnapshotArgs_Req_DEFAULT *DropSnapshotReq
func (p *MetaServiceDropSnapshotArgs) GetReq() *DropSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceDropSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSnapshotArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropSnapshotArgsBuilder struct {
  obj *MetaServiceDropSnapshotArgs
}

func NewMetaServiceDropSnapshotArgsBuilder() *MetaServiceDropSnapshotArgsBuilder{
  return &MetaServiceDropSnapshotArgsBuilder{
    obj: NewMetaServiceDropSnapshotArgs(),
  }
}

func (p MetaServiceDropSnapshotArgsBuilder) Emit() *MetaServiceDropSnapshotArgs{
  return &MetaServiceDropSnapshotArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropSnapshotArgsBuilder) Req(req *DropSnapshotReq) *MetaServiceDropSnapshotArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropSnapshotArgs) SetReq(req *DropSnapshotReq) *MetaServiceDropSnapshotArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropSnapshotArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropSnapshotResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSnapshotResult() *MetaServiceDropSnapshotResult {
  return &MetaServiceDropSnapshotResult{}
}

var MetaServiceDropSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSnapshotResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropSnapshotResultBuilder struct {
  obj *MetaServiceDropSnapshotResult
}

func NewMetaServiceDropSnapshotResultBuilder() *MetaServiceDropSnapshotResultBuilder{
  return &MetaServiceDropSnapshotResultBuilder{
    obj: NewMetaServiceDropSnapshotResult(),
  }
}

func (p MetaServiceDropSnapshotResultBuilder) Emit() *MetaServiceDropSnapshotResult{
  return &MetaServiceDropSnapshotResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropSnapshotResultBuilder) Success(success *ExecResp) *MetaServiceDropSnapshotResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropSnapshotResult) SetSuccess(success *ExecResp) *MetaServiceDropSnapshotResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropSnapshotResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSnapshotsArgs struct {
  thrift.IRequest
  Req *ListSnapshotsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSnapshotsArgs() *MetaServiceListSnapshotsArgs {
  return &MetaServiceListSnapshotsArgs{
    Req: NewListSnapshotsReq(),
  }
}

var MetaServiceListSnapshotsArgs_Req_DEFAULT *ListSnapshotsReq
func (p *MetaServiceListSnapshotsArgs) GetReq() *ListSnapshotsReq {
  if !p.IsSetReq() {
    return MetaServiceListSnapshotsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSnapshotsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListSnapshotsArgsBuilder struct {
  obj *MetaServiceListSnapshotsArgs
}

func NewMetaServiceListSnapshotsArgsBuilder() *MetaServiceListSnapshotsArgsBuilder{
  return &MetaServiceListSnapshotsArgsBuilder{
    obj: NewMetaServiceListSnapshotsArgs(),
  }
}

func (p MetaServiceListSnapshotsArgsBuilder) Emit() *MetaServiceListSnapshotsArgs{
  return &MetaServiceListSnapshotsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListSnapshotsArgsBuilder) Req(req *ListSnapshotsReq) *MetaServiceListSnapshotsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListSnapshotsArgs) SetReq(req *ListSnapshotsReq) *MetaServiceListSnapshotsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListSnapshotsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSnapshotsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSnapshotsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSnapshotsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSnapshotsResult struct {
  thrift.IResponse
  Success *ListSnapshotsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSnapshotsResult() *MetaServiceListSnapshotsResult {
  return &MetaServiceListSnapshotsResult{}
}

var MetaServiceListSnapshotsResult_Success_DEFAULT *ListSnapshotsResp
func (p *MetaServiceListSnapshotsResult) GetSuccess() *ListSnapshotsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSnapshotsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSnapshotsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListSnapshotsResultBuilder struct {
  obj *MetaServiceListSnapshotsResult
}

func NewMetaServiceListSnapshotsResultBuilder() *MetaServiceListSnapshotsResultBuilder{
  return &MetaServiceListSnapshotsResultBuilder{
    obj: NewMetaServiceListSnapshotsResult(),
  }
}

func (p MetaServiceListSnapshotsResultBuilder) Emit() *MetaServiceListSnapshotsResult{
  return &MetaServiceListSnapshotsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListSnapshotsResultBuilder) Success(success *ListSnapshotsResp) *MetaServiceListSnapshotsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListSnapshotsResult) SetSuccess(success *ListSnapshotsResp) *MetaServiceListSnapshotsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListSnapshotsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSnapshotsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSnapshotsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSnapshotsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRunAdminJobArgs struct {
  thrift.IRequest
  Req *AdminJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRunAdminJobArgs() *MetaServiceRunAdminJobArgs {
  return &MetaServiceRunAdminJobArgs{
    Req: NewAdminJobReq(),
  }
}

var MetaServiceRunAdminJobArgs_Req_DEFAULT *AdminJobReq
func (p *MetaServiceRunAdminJobArgs) GetReq() *AdminJobReq {
  if !p.IsSetReq() {
    return MetaServiceRunAdminJobArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRunAdminJobArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRunAdminJobArgsBuilder struct {
  obj *MetaServiceRunAdminJobArgs
}

func NewMetaServiceRunAdminJobArgsBuilder() *MetaServiceRunAdminJobArgsBuilder{
  return &MetaServiceRunAdminJobArgsBuilder{
    obj: NewMetaServiceRunAdminJobArgs(),
  }
}

func (p MetaServiceRunAdminJobArgsBuilder) Emit() *MetaServiceRunAdminJobArgs{
  return &MetaServiceRunAdminJobArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRunAdminJobArgsBuilder) Req(req *AdminJobReq) *MetaServiceRunAdminJobArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRunAdminJobArgs) SetReq(req *AdminJobReq) *MetaServiceRunAdminJobArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRunAdminJobArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAdminJobReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRunAdminJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRunAdminJobArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRunAdminJobResult struct {
  thrift.IResponse
  Success *AdminJobResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRunAdminJobResult() *MetaServiceRunAdminJobResult {
  return &MetaServiceRunAdminJobResult{}
}

var MetaServiceRunAdminJobResult_Success_DEFAULT *AdminJobResp
func (p *MetaServiceRunAdminJobResult) GetSuccess() *AdminJobResp {
  if !p.IsSetSuccess() {
    return MetaServiceRunAdminJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRunAdminJobResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRunAdminJobResultBuilder struct {
  obj *MetaServiceRunAdminJobResult
}

func NewMetaServiceRunAdminJobResultBuilder() *MetaServiceRunAdminJobResultBuilder{
  return &MetaServiceRunAdminJobResultBuilder{
    obj: NewMetaServiceRunAdminJobResult(),
  }
}

func (p MetaServiceRunAdminJobResultBuilder) Emit() *MetaServiceRunAdminJobResult{
  return &MetaServiceRunAdminJobResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRunAdminJobResultBuilder) Success(success *AdminJobResp) *MetaServiceRunAdminJobResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRunAdminJobResult) SetSuccess(success *AdminJobResp) *MetaServiceRunAdminJobResult {
  m.Success = success
  return m
}

func (p *MetaServiceRunAdminJobResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminJobResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRunAdminJobResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRunAdminJobResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceMergeZoneArgs struct {
  thrift.IRequest
  Req *MergeZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMergeZoneArgs() *MetaServiceMergeZoneArgs {
  return &MetaServiceMergeZoneArgs{
    Req: NewMergeZoneReq(),
  }
}

var MetaServiceMergeZoneArgs_Req_DEFAULT *MergeZoneReq
func (p *MetaServiceMergeZoneArgs) GetReq() *MergeZoneReq {
  if !p.IsSetReq() {
    return MetaServiceMergeZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMergeZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceMergeZoneArgsBuilder struct {
  obj *MetaServiceMergeZoneArgs
}

func NewMetaServiceMergeZoneArgsBuilder() *MetaServiceMergeZoneArgsBuilder{
  return &MetaServiceMergeZoneArgsBuilder{
    obj: NewMetaServiceMergeZoneArgs(),
  }
}

func (p MetaServiceMergeZoneArgsBuilder) Emit() *MetaServiceMergeZoneArgs{
  return &MetaServiceMergeZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceMergeZoneArgsBuilder) Req(req *MergeZoneReq) *MetaServiceMergeZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceMergeZoneArgs) SetReq(req *MergeZoneReq) *MetaServiceMergeZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceMergeZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMergeZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("mergeZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMergeZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMergeZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceMergeZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceMergeZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMergeZoneResult() *MetaServiceMergeZoneResult {
  return &MetaServiceMergeZoneResult{}
}

var MetaServiceMergeZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceMergeZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceMergeZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMergeZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceMergeZoneResultBuilder struct {
  obj *MetaServiceMergeZoneResult
}

func NewMetaServiceMergeZoneResultBuilder() *MetaServiceMergeZoneResultBuilder{
  return &MetaServiceMergeZoneResultBuilder{
    obj: NewMetaServiceMergeZoneResult(),
  }
}

func (p MetaServiceMergeZoneResultBuilder) Emit() *MetaServiceMergeZoneResult{
  return &MetaServiceMergeZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceMergeZoneResultBuilder) Success(success *ExecResp) *MetaServiceMergeZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceMergeZoneResult) SetSuccess(success *ExecResp) *MetaServiceMergeZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceMergeZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMergeZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("mergeZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMergeZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMergeZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceMergeZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropZoneArgs struct {
  thrift.IRequest
  Req *DropZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneArgs() *MetaServiceDropZoneArgs {
  return &MetaServiceDropZoneArgs{
    Req: NewDropZoneReq(),
  }
}

var MetaServiceDropZoneArgs_Req_DEFAULT *DropZoneReq
func (p *MetaServiceDropZoneArgs) GetReq() *DropZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropZoneArgsBuilder struct {
  obj *MetaServiceDropZoneArgs
}

func NewMetaServiceDropZoneArgsBuilder() *MetaServiceDropZoneArgsBuilder{
  return &MetaServiceDropZoneArgsBuilder{
    obj: NewMetaServiceDropZoneArgs(),
  }
}

func (p MetaServiceDropZoneArgsBuilder) Emit() *MetaServiceDropZoneArgs{
  return &MetaServiceDropZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropZoneArgsBuilder) Req(req *DropZoneReq) *MetaServiceDropZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropZoneArgs) SetReq(req *DropZoneReq) *MetaServiceDropZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneResult() *MetaServiceDropZoneResult {
  return &MetaServiceDropZoneResult{}
}

var MetaServiceDropZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropZoneResultBuilder struct {
  obj *MetaServiceDropZoneResult
}

func NewMetaServiceDropZoneResultBuilder() *MetaServiceDropZoneResultBuilder{
  return &MetaServiceDropZoneResultBuilder{
    obj: NewMetaServiceDropZoneResult(),
  }
}

func (p MetaServiceDropZoneResultBuilder) Emit() *MetaServiceDropZoneResult{
  return &MetaServiceDropZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropZoneResultBuilder) Success(success *ExecResp) *MetaServiceDropZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropZoneResult) SetSuccess(success *ExecResp) *MetaServiceDropZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDivideZoneArgs struct {
  thrift.IRequest
  Req *DivideZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDivideZoneArgs() *MetaServiceDivideZoneArgs {
  return &MetaServiceDivideZoneArgs{
    Req: NewDivideZoneReq(),
  }
}

var MetaServiceDivideZoneArgs_Req_DEFAULT *DivideZoneReq
func (p *MetaServiceDivideZoneArgs) GetReq() *DivideZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDivideZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDivideZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDivideZoneArgsBuilder struct {
  obj *MetaServiceDivideZoneArgs
}

func NewMetaServiceDivideZoneArgsBuilder() *MetaServiceDivideZoneArgsBuilder{
  return &MetaServiceDivideZoneArgsBuilder{
    obj: NewMetaServiceDivideZoneArgs(),
  }
}

func (p MetaServiceDivideZoneArgsBuilder) Emit() *MetaServiceDivideZoneArgs{
  return &MetaServiceDivideZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDivideZoneArgsBuilder) Req(req *DivideZoneReq) *MetaServiceDivideZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDivideZoneArgs) SetReq(req *DivideZoneReq) *MetaServiceDivideZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDivideZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDivideZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("divideZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDivideZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDivideZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDivideZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDivideZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDivideZoneResult() *MetaServiceDivideZoneResult {
  return &MetaServiceDivideZoneResult{}
}

var MetaServiceDivideZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDivideZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDivideZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDivideZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDivideZoneResultBuilder struct {
  obj *MetaServiceDivideZoneResult
}

func NewMetaServiceDivideZoneResultBuilder() *MetaServiceDivideZoneResultBuilder{
  return &MetaServiceDivideZoneResultBuilder{
    obj: NewMetaServiceDivideZoneResult(),
  }
}

func (p MetaServiceDivideZoneResultBuilder) Emit() *MetaServiceDivideZoneResult{
  return &MetaServiceDivideZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDivideZoneResultBuilder) Success(success *ExecResp) *MetaServiceDivideZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDivideZoneResult) SetSuccess(success *ExecResp) *MetaServiceDivideZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceDivideZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDivideZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("divideZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDivideZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDivideZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDivideZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRenameZoneArgs struct {
  thrift.IRequest
  Req *RenameZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRenameZoneArgs() *MetaServiceRenameZoneArgs {
  return &MetaServiceRenameZoneArgs{
    Req: NewRenameZoneReq(),
  }
}

var MetaServiceRenameZoneArgs_Req_DEFAULT *RenameZoneReq
func (p *MetaServiceRenameZoneArgs) GetReq() *RenameZoneReq {
  if !p.IsSetReq() {
    return MetaServiceRenameZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRenameZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRenameZoneArgsBuilder struct {
  obj *MetaServiceRenameZoneArgs
}

func NewMetaServiceRenameZoneArgsBuilder() *MetaServiceRenameZoneArgsBuilder{
  return &MetaServiceRenameZoneArgsBuilder{
    obj: NewMetaServiceRenameZoneArgs(),
  }
}

func (p MetaServiceRenameZoneArgsBuilder) Emit() *MetaServiceRenameZoneArgs{
  return &MetaServiceRenameZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRenameZoneArgsBuilder) Req(req *RenameZoneReq) *MetaServiceRenameZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRenameZoneArgs) SetReq(req *RenameZoneReq) *MetaServiceRenameZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRenameZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRenameZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("renameZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRenameZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRenameZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRenameZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRenameZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRenameZoneResult() *MetaServiceRenameZoneResult {
  return &MetaServiceRenameZoneResult{}
}

var MetaServiceRenameZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRenameZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRenameZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRenameZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRenameZoneResultBuilder struct {
  obj *MetaServiceRenameZoneResult
}

func NewMetaServiceRenameZoneResultBuilder() *MetaServiceRenameZoneResultBuilder{
  return &MetaServiceRenameZoneResultBuilder{
    obj: NewMetaServiceRenameZoneResult(),
  }
}

func (p MetaServiceRenameZoneResultBuilder) Emit() *MetaServiceRenameZoneResult{
  return &MetaServiceRenameZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRenameZoneResultBuilder) Success(success *ExecResp) *MetaServiceRenameZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRenameZoneResult) SetSuccess(success *ExecResp) *MetaServiceRenameZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceRenameZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRenameZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("renameZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRenameZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRenameZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRenameZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetZoneArgs struct {
  thrift.IRequest
  Req *GetZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetZoneArgs() *MetaServiceGetZoneArgs {
  return &MetaServiceGetZoneArgs{
    Req: NewGetZoneReq(),
  }
}

var MetaServiceGetZoneArgs_Req_DEFAULT *GetZoneReq
func (p *MetaServiceGetZoneArgs) GetReq() *GetZoneReq {
  if !p.IsSetReq() {
    return MetaServiceGetZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetZoneArgsBuilder struct {
  obj *MetaServiceGetZoneArgs
}

func NewMetaServiceGetZoneArgsBuilder() *MetaServiceGetZoneArgsBuilder{
  return &MetaServiceGetZoneArgsBuilder{
    obj: NewMetaServiceGetZoneArgs(),
  }
}

func (p MetaServiceGetZoneArgsBuilder) Emit() *MetaServiceGetZoneArgs{
  return &MetaServiceGetZoneArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetZoneArgsBuilder) Req(req *GetZoneReq) *MetaServiceGetZoneArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetZoneArgs) SetReq(req *GetZoneReq) *MetaServiceGetZoneArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetZoneResult struct {
  thrift.IResponse
  Success *GetZoneResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetZoneResult() *MetaServiceGetZoneResult {
  return &MetaServiceGetZoneResult{}
}

var MetaServiceGetZoneResult_Success_DEFAULT *GetZoneResp
func (p *MetaServiceGetZoneResult) GetSuccess() *GetZoneResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetZoneResultBuilder struct {
  obj *MetaServiceGetZoneResult
}

func NewMetaServiceGetZoneResultBuilder() *MetaServiceGetZoneResultBuilder{
  return &MetaServiceGetZoneResultBuilder{
    obj: NewMetaServiceGetZoneResult(),
  }
}

func (p MetaServiceGetZoneResultBuilder) Emit() *MetaServiceGetZoneResult{
  return &MetaServiceGetZoneResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetZoneResultBuilder) Success(success *GetZoneResp) *MetaServiceGetZoneResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetZoneResult) SetSuccess(success *GetZoneResp) *MetaServiceGetZoneResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetZoneResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListZonesArgs struct {
  thrift.IRequest
  Req *ListZonesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListZonesArgs() *MetaServiceListZonesArgs {
  return &MetaServiceListZonesArgs{
    Req: NewListZonesReq(),
  }
}

var MetaServiceListZonesArgs_Req_DEFAULT *ListZonesReq
func (p *MetaServiceListZonesArgs) GetReq() *ListZonesReq {
  if !p.IsSetReq() {
    return MetaServiceListZonesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListZonesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListZonesArgsBuilder struct {
  obj *MetaServiceListZonesArgs
}

func NewMetaServiceListZonesArgsBuilder() *MetaServiceListZonesArgsBuilder{
  return &MetaServiceListZonesArgsBuilder{
    obj: NewMetaServiceListZonesArgs(),
  }
}

func (p MetaServiceListZonesArgsBuilder) Emit() *MetaServiceListZonesArgs{
  return &MetaServiceListZonesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListZonesArgsBuilder) Req(req *ListZonesReq) *MetaServiceListZonesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListZonesArgs) SetReq(req *ListZonesReq) *MetaServiceListZonesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListZonesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListZonesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListZonesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListZonesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListZonesResult struct {
  thrift.IResponse
  Success *ListZonesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListZonesResult() *MetaServiceListZonesResult {
  return &MetaServiceListZonesResult{}
}

var MetaServiceListZonesResult_Success_DEFAULT *ListZonesResp
func (p *MetaServiceListZonesResult) GetSuccess() *ListZonesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListZonesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListZonesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListZonesResultBuilder struct {
  obj *MetaServiceListZonesResult
}

func NewMetaServiceListZonesResultBuilder() *MetaServiceListZonesResultBuilder{
  return &MetaServiceListZonesResultBuilder{
    obj: NewMetaServiceListZonesResult(),
  }
}

func (p MetaServiceListZonesResultBuilder) Emit() *MetaServiceListZonesResult{
  return &MetaServiceListZonesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListZonesResultBuilder) Success(success *ListZonesResp) *MetaServiceListZonesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListZonesResult) SetSuccess(success *ListZonesResp) *MetaServiceListZonesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListZonesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListZonesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListZonesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListZonesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddListenerArgs struct {
  thrift.IRequest
  Req *AddListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddListenerArgs() *MetaServiceAddListenerArgs {
  return &MetaServiceAddListenerArgs{
    Req: NewAddListenerReq(),
  }
}

var MetaServiceAddListenerArgs_Req_DEFAULT *AddListenerReq
func (p *MetaServiceAddListenerArgs) GetReq() *AddListenerReq {
  if !p.IsSetReq() {
    return MetaServiceAddListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceAddListenerArgsBuilder struct {
  obj *MetaServiceAddListenerArgs
}

func NewMetaServiceAddListenerArgsBuilder() *MetaServiceAddListenerArgsBuilder{
  return &MetaServiceAddListenerArgsBuilder{
    obj: NewMetaServiceAddListenerArgs(),
  }
}

func (p MetaServiceAddListenerArgsBuilder) Emit() *MetaServiceAddListenerArgs{
  return &MetaServiceAddListenerArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceAddListenerArgsBuilder) Req(req *AddListenerReq) *MetaServiceAddListenerArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceAddListenerArgs) SetReq(req *AddListenerReq) *MetaServiceAddListenerArgs {
  m.Req = req
  return m
}

func (p *MetaServiceAddListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddListenerResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddListenerResult() *MetaServiceAddListenerResult {
  return &MetaServiceAddListenerResult{}
}

var MetaServiceAddListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceAddListenerResultBuilder struct {
  obj *MetaServiceAddListenerResult
}

func NewMetaServiceAddListenerResultBuilder() *MetaServiceAddListenerResultBuilder{
  return &MetaServiceAddListenerResultBuilder{
    obj: NewMetaServiceAddListenerResult(),
  }
}

func (p MetaServiceAddListenerResultBuilder) Emit() *MetaServiceAddListenerResult{
  return &MetaServiceAddListenerResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceAddListenerResultBuilder) Success(success *ExecResp) *MetaServiceAddListenerResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceAddListenerResult) SetSuccess(success *ExecResp) *MetaServiceAddListenerResult {
  m.Success = success
  return m
}

func (p *MetaServiceAddListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveListenerArgs struct {
  thrift.IRequest
  Req *RemoveListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveListenerArgs() *MetaServiceRemoveListenerArgs {
  return &MetaServiceRemoveListenerArgs{
    Req: NewRemoveListenerReq(),
  }
}

var MetaServiceRemoveListenerArgs_Req_DEFAULT *RemoveListenerReq
func (p *MetaServiceRemoveListenerArgs) GetReq() *RemoveListenerReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRemoveListenerArgsBuilder struct {
  obj *MetaServiceRemoveListenerArgs
}

func NewMetaServiceRemoveListenerArgsBuilder() *MetaServiceRemoveListenerArgsBuilder{
  return &MetaServiceRemoveListenerArgsBuilder{
    obj: NewMetaServiceRemoveListenerArgs(),
  }
}

func (p MetaServiceRemoveListenerArgsBuilder) Emit() *MetaServiceRemoveListenerArgs{
  return &MetaServiceRemoveListenerArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRemoveListenerArgsBuilder) Req(req *RemoveListenerReq) *MetaServiceRemoveListenerArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRemoveListenerArgs) SetReq(req *RemoveListenerReq) *MetaServiceRemoveListenerArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRemoveListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveListenerResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveListenerResult() *MetaServiceRemoveListenerResult {
  return &MetaServiceRemoveListenerResult{}
}

var MetaServiceRemoveListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRemoveListenerResultBuilder struct {
  obj *MetaServiceRemoveListenerResult
}

func NewMetaServiceRemoveListenerResultBuilder() *MetaServiceRemoveListenerResultBuilder{
  return &MetaServiceRemoveListenerResultBuilder{
    obj: NewMetaServiceRemoveListenerResult(),
  }
}

func (p MetaServiceRemoveListenerResultBuilder) Emit() *MetaServiceRemoveListenerResult{
  return &MetaServiceRemoveListenerResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRemoveListenerResultBuilder) Success(success *ExecResp) *MetaServiceRemoveListenerResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRemoveListenerResult) SetSuccess(success *ExecResp) *MetaServiceRemoveListenerResult {
  m.Success = success
  return m
}

func (p *MetaServiceRemoveListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListListenerArgs struct {
  thrift.IRequest
  Req *ListListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListListenerArgs() *MetaServiceListListenerArgs {
  return &MetaServiceListListenerArgs{
    Req: NewListListenerReq(),
  }
}

var MetaServiceListListenerArgs_Req_DEFAULT *ListListenerReq
func (p *MetaServiceListListenerArgs) GetReq() *ListListenerReq {
  if !p.IsSetReq() {
    return MetaServiceListListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListListenerArgsBuilder struct {
  obj *MetaServiceListListenerArgs
}

func NewMetaServiceListListenerArgsBuilder() *MetaServiceListListenerArgsBuilder{
  return &MetaServiceListListenerArgsBuilder{
    obj: NewMetaServiceListListenerArgs(),
  }
}

func (p MetaServiceListListenerArgsBuilder) Emit() *MetaServiceListListenerArgs{
  return &MetaServiceListListenerArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListListenerArgsBuilder) Req(req *ListListenerReq) *MetaServiceListListenerArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListListenerArgs) SetReq(req *ListListenerReq) *MetaServiceListListenerArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListListenerResult struct {
  thrift.IResponse
  Success *ListListenerResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListListenerResult() *MetaServiceListListenerResult {
  return &MetaServiceListListenerResult{}
}

var MetaServiceListListenerResult_Success_DEFAULT *ListListenerResp
func (p *MetaServiceListListenerResult) GetSuccess() *ListListenerResp {
  if !p.IsSetSuccess() {
    return MetaServiceListListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListListenerResultBuilder struct {
  obj *MetaServiceListListenerResult
}

func NewMetaServiceListListenerResultBuilder() *MetaServiceListListenerResultBuilder{
  return &MetaServiceListListenerResultBuilder{
    obj: NewMetaServiceListListenerResult(),
  }
}

func (p MetaServiceListListenerResultBuilder) Emit() *MetaServiceListListenerResult{
  return &MetaServiceListListenerResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListListenerResultBuilder) Success(success *ListListenerResp) *MetaServiceListListenerResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListListenerResult) SetSuccess(success *ListListenerResp) *MetaServiceListListenerResult {
  m.Success = success
  return m
}

func (p *MetaServiceListListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListListenerResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetStatsArgs struct {
  thrift.IRequest
  Req *GetStatsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetStatsArgs() *MetaServiceGetStatsArgs {
  return &MetaServiceGetStatsArgs{
    Req: NewGetStatsReq(),
  }
}

var MetaServiceGetStatsArgs_Req_DEFAULT *GetStatsReq
func (p *MetaServiceGetStatsArgs) GetReq() *GetStatsReq {
  if !p.IsSetReq() {
    return MetaServiceGetStatsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetStatsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetStatsArgsBuilder struct {
  obj *MetaServiceGetStatsArgs
}

func NewMetaServiceGetStatsArgsBuilder() *MetaServiceGetStatsArgsBuilder{
  return &MetaServiceGetStatsArgsBuilder{
    obj: NewMetaServiceGetStatsArgs(),
  }
}

func (p MetaServiceGetStatsArgsBuilder) Emit() *MetaServiceGetStatsArgs{
  return &MetaServiceGetStatsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetStatsArgsBuilder) Req(req *GetStatsReq) *MetaServiceGetStatsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetStatsArgs) SetReq(req *GetStatsReq) *MetaServiceGetStatsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetStatsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetStatsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetStatsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetStatsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetStatsResult struct {
  thrift.IResponse
  Success *GetStatsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetStatsResult() *MetaServiceGetStatsResult {
  return &MetaServiceGetStatsResult{}
}

var MetaServiceGetStatsResult_Success_DEFAULT *GetStatsResp
func (p *MetaServiceGetStatsResult) GetSuccess() *GetStatsResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetStatsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetStatsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetStatsResultBuilder struct {
  obj *MetaServiceGetStatsResult
}

func NewMetaServiceGetStatsResultBuilder() *MetaServiceGetStatsResultBuilder{
  return &MetaServiceGetStatsResultBuilder{
    obj: NewMetaServiceGetStatsResult(),
  }
}

func (p MetaServiceGetStatsResultBuilder) Emit() *MetaServiceGetStatsResult{
  return &MetaServiceGetStatsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetStatsResultBuilder) Success(success *GetStatsResp) *MetaServiceGetStatsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetStatsResult) SetSuccess(success *GetStatsResp) *MetaServiceGetStatsResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetStatsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetStatsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetStatsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetStatsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSignInServiceArgs struct {
  thrift.IRequest
  Req *SignInServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignInServiceArgs() *MetaServiceSignInServiceArgs {
  return &MetaServiceSignInServiceArgs{
    Req: NewSignInServiceReq(),
  }
}

var MetaServiceSignInServiceArgs_Req_DEFAULT *SignInServiceReq
func (p *MetaServiceSignInServiceArgs) GetReq() *SignInServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignInServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignInServiceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceSignInServiceArgsBuilder struct {
  obj *MetaServiceSignInServiceArgs
}

func NewMetaServiceSignInServiceArgsBuilder() *MetaServiceSignInServiceArgsBuilder{
  return &MetaServiceSignInServiceArgsBuilder{
    obj: NewMetaServiceSignInServiceArgs(),
  }
}

func (p MetaServiceSignInServiceArgsBuilder) Emit() *MetaServiceSignInServiceArgs{
  return &MetaServiceSignInServiceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceSignInServiceArgsBuilder) Req(req *SignInServiceReq) *MetaServiceSignInServiceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceSignInServiceArgs) SetReq(req *SignInServiceReq) *MetaServiceSignInServiceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceSignInServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignInServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignInServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSignInServiceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSignInServiceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignInServiceResult() *MetaServiceSignInServiceResult {
  return &MetaServiceSignInServiceResult{}
}

var MetaServiceSignInServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignInServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignInServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignInServiceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceSignInServiceResultBuilder struct {
  obj *MetaServiceSignInServiceResult
}

func NewMetaServiceSignInServiceResultBuilder() *MetaServiceSignInServiceResultBuilder{
  return &MetaServiceSignInServiceResultBuilder{
    obj: NewMetaServiceSignInServiceResult(),
  }
}

func (p MetaServiceSignInServiceResultBuilder) Emit() *MetaServiceSignInServiceResult{
  return &MetaServiceSignInServiceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceSignInServiceResultBuilder) Success(success *ExecResp) *MetaServiceSignInServiceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceSignInServiceResult) SetSuccess(success *ExecResp) *MetaServiceSignInServiceResult {
  m.Success = success
  return m
}

func (p *MetaServiceSignInServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignInServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignInServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSignInServiceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSignOutServiceArgs struct {
  thrift.IRequest
  Req *SignOutServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignOutServiceArgs() *MetaServiceSignOutServiceArgs {
  return &MetaServiceSignOutServiceArgs{
    Req: NewSignOutServiceReq(),
  }
}

var MetaServiceSignOutServiceArgs_Req_DEFAULT *SignOutServiceReq
func (p *MetaServiceSignOutServiceArgs) GetReq() *SignOutServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignOutServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignOutServiceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceSignOutServiceArgsBuilder struct {
  obj *MetaServiceSignOutServiceArgs
}

func NewMetaServiceSignOutServiceArgsBuilder() *MetaServiceSignOutServiceArgsBuilder{
  return &MetaServiceSignOutServiceArgsBuilder{
    obj: NewMetaServiceSignOutServiceArgs(),
  }
}

func (p MetaServiceSignOutServiceArgsBuilder) Emit() *MetaServiceSignOutServiceArgs{
  return &MetaServiceSignOutServiceArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceSignOutServiceArgsBuilder) Req(req *SignOutServiceReq) *MetaServiceSignOutServiceArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceSignOutServiceArgs) SetReq(req *SignOutServiceReq) *MetaServiceSignOutServiceArgs {
  m.Req = req
  return m
}

func (p *MetaServiceSignOutServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignOutServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignOutServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSignOutServiceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSignOutServiceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignOutServiceResult() *MetaServiceSignOutServiceResult {
  return &MetaServiceSignOutServiceResult{}
}

var MetaServiceSignOutServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignOutServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignOutServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignOutServiceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceSignOutServiceResultBuilder struct {
  obj *MetaServiceSignOutServiceResult
}

func NewMetaServiceSignOutServiceResultBuilder() *MetaServiceSignOutServiceResultBuilder{
  return &MetaServiceSignOutServiceResultBuilder{
    obj: NewMetaServiceSignOutServiceResult(),
  }
}

func (p MetaServiceSignOutServiceResultBuilder) Emit() *MetaServiceSignOutServiceResult{
  return &MetaServiceSignOutServiceResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceSignOutServiceResultBuilder) Success(success *ExecResp) *MetaServiceSignOutServiceResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceSignOutServiceResult) SetSuccess(success *ExecResp) *MetaServiceSignOutServiceResult {
  m.Success = success
  return m
}

func (p *MetaServiceSignOutServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignOutServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignOutServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSignOutServiceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListServiceClientsArgs struct {
  thrift.IRequest
  Req *ListServiceClientsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListServiceClientsArgs() *MetaServiceListServiceClientsArgs {
  return &MetaServiceListServiceClientsArgs{
    Req: NewListServiceClientsReq(),
  }
}

var MetaServiceListServiceClientsArgs_Req_DEFAULT *ListServiceClientsReq
func (p *MetaServiceListServiceClientsArgs) GetReq() *ListServiceClientsReq {
  if !p.IsSetReq() {
    return MetaServiceListServiceClientsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListServiceClientsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListServiceClientsArgsBuilder struct {
  obj *MetaServiceListServiceClientsArgs
}

func NewMetaServiceListServiceClientsArgsBuilder() *MetaServiceListServiceClientsArgsBuilder{
  return &MetaServiceListServiceClientsArgsBuilder{
    obj: NewMetaServiceListServiceClientsArgs(),
  }
}

func (p MetaServiceListServiceClientsArgsBuilder) Emit() *MetaServiceListServiceClientsArgs{
  return &MetaServiceListServiceClientsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListServiceClientsArgsBuilder) Req(req *ListServiceClientsReq) *MetaServiceListServiceClientsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListServiceClientsArgs) SetReq(req *ListServiceClientsReq) *MetaServiceListServiceClientsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListServiceClientsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListServiceClientsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listServiceClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListServiceClientsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListServiceClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListServiceClientsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListServiceClientsResult struct {
  thrift.IResponse
  Success *ListServiceClientsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListServiceClientsResult() *MetaServiceListServiceClientsResult {
  return &MetaServiceListServiceClientsResult{}
}

var MetaServiceListServiceClientsResult_Success_DEFAULT *ListServiceClientsResp
func (p *MetaServiceListServiceClientsResult) GetSuccess() *ListServiceClientsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListServiceClientsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListServiceClientsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListServiceClientsResultBuilder struct {
  obj *MetaServiceListServiceClientsResult
}

func NewMetaServiceListServiceClientsResultBuilder() *MetaServiceListServiceClientsResultBuilder{
  return &MetaServiceListServiceClientsResultBuilder{
    obj: NewMetaServiceListServiceClientsResult(),
  }
}

func (p MetaServiceListServiceClientsResultBuilder) Emit() *MetaServiceListServiceClientsResult{
  return &MetaServiceListServiceClientsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListServiceClientsResultBuilder) Success(success *ListServiceClientsResp) *MetaServiceListServiceClientsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListServiceClientsResult) SetSuccess(success *ListServiceClientsResp) *MetaServiceListServiceClientsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListServiceClientsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListServiceClientsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListServiceClientsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listServiceClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListServiceClientsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListServiceClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListServiceClientsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateFTIndexArgs struct {
  thrift.IRequest
  Req *CreateFTIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateFTIndexArgs() *MetaServiceCreateFTIndexArgs {
  return &MetaServiceCreateFTIndexArgs{
    Req: NewCreateFTIndexReq(),
  }
}

var MetaServiceCreateFTIndexArgs_Req_DEFAULT *CreateFTIndexReq
func (p *MetaServiceCreateFTIndexArgs) GetReq() *CreateFTIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateFTIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateFTIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateFTIndexArgsBuilder struct {
  obj *MetaServiceCreateFTIndexArgs
}

func NewMetaServiceCreateFTIndexArgsBuilder() *MetaServiceCreateFTIndexArgsBuilder{
  return &MetaServiceCreateFTIndexArgsBuilder{
    obj: NewMetaServiceCreateFTIndexArgs(),
  }
}

func (p MetaServiceCreateFTIndexArgsBuilder) Emit() *MetaServiceCreateFTIndexArgs{
  return &MetaServiceCreateFTIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateFTIndexArgsBuilder) Req(req *CreateFTIndexReq) *MetaServiceCreateFTIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateFTIndexArgs) SetReq(req *CreateFTIndexReq) *MetaServiceCreateFTIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateFTIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateFTIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createFTIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateFTIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateFTIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateFTIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateFTIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateFTIndexResult() *MetaServiceCreateFTIndexResult {
  return &MetaServiceCreateFTIndexResult{}
}

var MetaServiceCreateFTIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateFTIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateFTIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateFTIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateFTIndexResultBuilder struct {
  obj *MetaServiceCreateFTIndexResult
}

func NewMetaServiceCreateFTIndexResultBuilder() *MetaServiceCreateFTIndexResultBuilder{
  return &MetaServiceCreateFTIndexResultBuilder{
    obj: NewMetaServiceCreateFTIndexResult(),
  }
}

func (p MetaServiceCreateFTIndexResultBuilder) Emit() *MetaServiceCreateFTIndexResult{
  return &MetaServiceCreateFTIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateFTIndexResultBuilder) Success(success *ExecResp) *MetaServiceCreateFTIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateFTIndexResult) SetSuccess(success *ExecResp) *MetaServiceCreateFTIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateFTIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateFTIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createFTIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateFTIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateFTIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateFTIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropFTIndexArgs struct {
  thrift.IRequest
  Req *DropFTIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropFTIndexArgs() *MetaServiceDropFTIndexArgs {
  return &MetaServiceDropFTIndexArgs{
    Req: NewDropFTIndexReq(),
  }
}

var MetaServiceDropFTIndexArgs_Req_DEFAULT *DropFTIndexReq
func (p *MetaServiceDropFTIndexArgs) GetReq() *DropFTIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropFTIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropFTIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceDropFTIndexArgsBuilder struct {
  obj *MetaServiceDropFTIndexArgs
}

func NewMetaServiceDropFTIndexArgsBuilder() *MetaServiceDropFTIndexArgsBuilder{
  return &MetaServiceDropFTIndexArgsBuilder{
    obj: NewMetaServiceDropFTIndexArgs(),
  }
}

func (p MetaServiceDropFTIndexArgsBuilder) Emit() *MetaServiceDropFTIndexArgs{
  return &MetaServiceDropFTIndexArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceDropFTIndexArgsBuilder) Req(req *DropFTIndexReq) *MetaServiceDropFTIndexArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceDropFTIndexArgs) SetReq(req *DropFTIndexReq) *MetaServiceDropFTIndexArgs {
  m.Req = req
  return m
}

func (p *MetaServiceDropFTIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropFTIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropFTIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropFTIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropFTIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropFTIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropFTIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropFTIndexResult() *MetaServiceDropFTIndexResult {
  return &MetaServiceDropFTIndexResult{}
}

var MetaServiceDropFTIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropFTIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropFTIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropFTIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceDropFTIndexResultBuilder struct {
  obj *MetaServiceDropFTIndexResult
}

func NewMetaServiceDropFTIndexResultBuilder() *MetaServiceDropFTIndexResultBuilder{
  return &MetaServiceDropFTIndexResultBuilder{
    obj: NewMetaServiceDropFTIndexResult(),
  }
}

func (p MetaServiceDropFTIndexResultBuilder) Emit() *MetaServiceDropFTIndexResult{
  return &MetaServiceDropFTIndexResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceDropFTIndexResultBuilder) Success(success *ExecResp) *MetaServiceDropFTIndexResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceDropFTIndexResult) SetSuccess(success *ExecResp) *MetaServiceDropFTIndexResult {
  m.Success = success
  return m
}

func (p *MetaServiceDropFTIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropFTIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropFTIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropFTIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropFTIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropFTIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListFTIndexesArgs struct {
  thrift.IRequest
  Req *ListFTIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListFTIndexesArgs() *MetaServiceListFTIndexesArgs {
  return &MetaServiceListFTIndexesArgs{
    Req: NewListFTIndexesReq(),
  }
}

var MetaServiceListFTIndexesArgs_Req_DEFAULT *ListFTIndexesReq
func (p *MetaServiceListFTIndexesArgs) GetReq() *ListFTIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListFTIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListFTIndexesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListFTIndexesArgsBuilder struct {
  obj *MetaServiceListFTIndexesArgs
}

func NewMetaServiceListFTIndexesArgsBuilder() *MetaServiceListFTIndexesArgsBuilder{
  return &MetaServiceListFTIndexesArgsBuilder{
    obj: NewMetaServiceListFTIndexesArgs(),
  }
}

func (p MetaServiceListFTIndexesArgsBuilder) Emit() *MetaServiceListFTIndexesArgs{
  return &MetaServiceListFTIndexesArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListFTIndexesArgsBuilder) Req(req *ListFTIndexesReq) *MetaServiceListFTIndexesArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListFTIndexesArgs) SetReq(req *ListFTIndexesReq) *MetaServiceListFTIndexesArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListFTIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListFTIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListFTIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListFTIndexesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListFTIndexesResult struct {
  thrift.IResponse
  Success *ListFTIndexesResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListFTIndexesResult() *MetaServiceListFTIndexesResult {
  return &MetaServiceListFTIndexesResult{}
}

var MetaServiceListFTIndexesResult_Success_DEFAULT *ListFTIndexesResp
func (p *MetaServiceListFTIndexesResult) GetSuccess() *ListFTIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListFTIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListFTIndexesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListFTIndexesResultBuilder struct {
  obj *MetaServiceListFTIndexesResult
}

func NewMetaServiceListFTIndexesResultBuilder() *MetaServiceListFTIndexesResultBuilder{
  return &MetaServiceListFTIndexesResultBuilder{
    obj: NewMetaServiceListFTIndexesResult(),
  }
}

func (p MetaServiceListFTIndexesResultBuilder) Emit() *MetaServiceListFTIndexesResult{
  return &MetaServiceListFTIndexesResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListFTIndexesResultBuilder) Success(success *ListFTIndexesResp) *MetaServiceListFTIndexesResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListFTIndexesResult) SetSuccess(success *ListFTIndexesResp) *MetaServiceListFTIndexesResult {
  m.Success = success
  return m
}

func (p *MetaServiceListFTIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListFTIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListFTIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListFTIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListFTIndexesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateSessionArgs struct {
  thrift.IRequest
  Req *CreateSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSessionArgs() *MetaServiceCreateSessionArgs {
  return &MetaServiceCreateSessionArgs{
    Req: NewCreateSessionReq(),
  }
}

var MetaServiceCreateSessionArgs_Req_DEFAULT *CreateSessionReq
func (p *MetaServiceCreateSessionArgs) GetReq() *CreateSessionReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateSessionArgsBuilder struct {
  obj *MetaServiceCreateSessionArgs
}

func NewMetaServiceCreateSessionArgsBuilder() *MetaServiceCreateSessionArgsBuilder{
  return &MetaServiceCreateSessionArgsBuilder{
    obj: NewMetaServiceCreateSessionArgs(),
  }
}

func (p MetaServiceCreateSessionArgsBuilder) Emit() *MetaServiceCreateSessionArgs{
  return &MetaServiceCreateSessionArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateSessionArgsBuilder) Req(req *CreateSessionReq) *MetaServiceCreateSessionArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateSessionArgs) SetReq(req *CreateSessionReq) *MetaServiceCreateSessionArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSessionResult struct {
  thrift.IResponse
  Success *CreateSessionResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSessionResult() *MetaServiceCreateSessionResult {
  return &MetaServiceCreateSessionResult{}
}

var MetaServiceCreateSessionResult_Success_DEFAULT *CreateSessionResp
func (p *MetaServiceCreateSessionResult) GetSuccess() *CreateSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateSessionResultBuilder struct {
  obj *MetaServiceCreateSessionResult
}

func NewMetaServiceCreateSessionResultBuilder() *MetaServiceCreateSessionResultBuilder{
  return &MetaServiceCreateSessionResultBuilder{
    obj: NewMetaServiceCreateSessionResult(),
  }
}

func (p MetaServiceCreateSessionResultBuilder) Emit() *MetaServiceCreateSessionResult{
  return &MetaServiceCreateSessionResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateSessionResultBuilder) Success(success *CreateSessionResp) *MetaServiceCreateSessionResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateSessionResult) SetSuccess(success *CreateSessionResp) *MetaServiceCreateSessionResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceUpdateSessionsArgs struct {
  thrift.IRequest
  Req *UpdateSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceUpdateSessionsArgs() *MetaServiceUpdateSessionsArgs {
  return &MetaServiceUpdateSessionsArgs{
    Req: NewUpdateSessionsReq(),
  }
}

var MetaServiceUpdateSessionsArgs_Req_DEFAULT *UpdateSessionsReq
func (p *MetaServiceUpdateSessionsArgs) GetReq() *UpdateSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceUpdateSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceUpdateSessionsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceUpdateSessionsArgsBuilder struct {
  obj *MetaServiceUpdateSessionsArgs
}

func NewMetaServiceUpdateSessionsArgsBuilder() *MetaServiceUpdateSessionsArgsBuilder{
  return &MetaServiceUpdateSessionsArgsBuilder{
    obj: NewMetaServiceUpdateSessionsArgs(),
  }
}

func (p MetaServiceUpdateSessionsArgsBuilder) Emit() *MetaServiceUpdateSessionsArgs{
  return &MetaServiceUpdateSessionsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceUpdateSessionsArgsBuilder) Req(req *UpdateSessionsReq) *MetaServiceUpdateSessionsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceUpdateSessionsArgs) SetReq(req *UpdateSessionsReq) *MetaServiceUpdateSessionsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceUpdateSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceUpdateSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceUpdateSessionsResult struct {
  thrift.IResponse
  Success *UpdateSessionsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceUpdateSessionsResult() *MetaServiceUpdateSessionsResult {
  return &MetaServiceUpdateSessionsResult{}
}

var MetaServiceUpdateSessionsResult_Success_DEFAULT *UpdateSessionsResp
func (p *MetaServiceUpdateSessionsResult) GetSuccess() *UpdateSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceUpdateSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceUpdateSessionsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceUpdateSessionsResultBuilder struct {
  obj *MetaServiceUpdateSessionsResult
}

func NewMetaServiceUpdateSessionsResultBuilder() *MetaServiceUpdateSessionsResultBuilder{
  return &MetaServiceUpdateSessionsResultBuilder{
    obj: NewMetaServiceUpdateSessionsResult(),
  }
}

func (p MetaServiceUpdateSessionsResultBuilder) Emit() *MetaServiceUpdateSessionsResult{
  return &MetaServiceUpdateSessionsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceUpdateSessionsResultBuilder) Success(success *UpdateSessionsResp) *MetaServiceUpdateSessionsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceUpdateSessionsResult) SetSuccess(success *UpdateSessionsResp) *MetaServiceUpdateSessionsResult {
  m.Success = success
  return m
}

func (p *MetaServiceUpdateSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewUpdateSessionsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceUpdateSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSessionsArgs struct {
  thrift.IRequest
  Req *ListSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSessionsArgs() *MetaServiceListSessionsArgs {
  return &MetaServiceListSessionsArgs{
    Req: NewListSessionsReq(),
  }
}

var MetaServiceListSessionsArgs_Req_DEFAULT *ListSessionsReq
func (p *MetaServiceListSessionsArgs) GetReq() *ListSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceListSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSessionsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListSessionsArgsBuilder struct {
  obj *MetaServiceListSessionsArgs
}

func NewMetaServiceListSessionsArgsBuilder() *MetaServiceListSessionsArgsBuilder{
  return &MetaServiceListSessionsArgsBuilder{
    obj: NewMetaServiceListSessionsArgs(),
  }
}

func (p MetaServiceListSessionsArgsBuilder) Emit() *MetaServiceListSessionsArgs{
  return &MetaServiceListSessionsArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListSessionsArgsBuilder) Req(req *ListSessionsReq) *MetaServiceListSessionsArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListSessionsArgs) SetReq(req *ListSessionsReq) *MetaServiceListSessionsArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSessionsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSessionsResult struct {
  thrift.IResponse
  Success *ListSessionsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSessionsResult() *MetaServiceListSessionsResult {
  return &MetaServiceListSessionsResult{}
}

var MetaServiceListSessionsResult_Success_DEFAULT *ListSessionsResp
func (p *MetaServiceListSessionsResult) GetSuccess() *ListSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSessionsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListSessionsResultBuilder struct {
  obj *MetaServiceListSessionsResult
}

func NewMetaServiceListSessionsResultBuilder() *MetaServiceListSessionsResultBuilder{
  return &MetaServiceListSessionsResultBuilder{
    obj: NewMetaServiceListSessionsResult(),
  }
}

func (p MetaServiceListSessionsResultBuilder) Emit() *MetaServiceListSessionsResult{
  return &MetaServiceListSessionsResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListSessionsResultBuilder) Success(success *ListSessionsResp) *MetaServiceListSessionsResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListSessionsResult) SetSuccess(success *ListSessionsResp) *MetaServiceListSessionsResult {
  m.Success = success
  return m
}

func (p *MetaServiceListSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSessionsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSessionsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetSessionArgs struct {
  thrift.IRequest
  Req *GetSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSessionArgs() *MetaServiceGetSessionArgs {
  return &MetaServiceGetSessionArgs{
    Req: NewGetSessionReq(),
  }
}

var MetaServiceGetSessionArgs_Req_DEFAULT *GetSessionReq
func (p *MetaServiceGetSessionArgs) GetReq() *GetSessionReq {
  if !p.IsSetReq() {
    return MetaServiceGetSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetSessionArgsBuilder struct {
  obj *MetaServiceGetSessionArgs
}

func NewMetaServiceGetSessionArgsBuilder() *MetaServiceGetSessionArgsBuilder{
  return &MetaServiceGetSessionArgsBuilder{
    obj: NewMetaServiceGetSessionArgs(),
  }
}

func (p MetaServiceGetSessionArgsBuilder) Emit() *MetaServiceGetSessionArgs{
  return &MetaServiceGetSessionArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetSessionArgsBuilder) Req(req *GetSessionReq) *MetaServiceGetSessionArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetSessionArgs) SetReq(req *GetSessionReq) *MetaServiceGetSessionArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetSessionResult struct {
  thrift.IResponse
  Success *GetSessionResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSessionResult() *MetaServiceGetSessionResult {
  return &MetaServiceGetSessionResult{}
}

var MetaServiceGetSessionResult_Success_DEFAULT *GetSessionResp
func (p *MetaServiceGetSessionResult) GetSuccess() *GetSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetSessionResultBuilder struct {
  obj *MetaServiceGetSessionResult
}

func NewMetaServiceGetSessionResultBuilder() *MetaServiceGetSessionResultBuilder{
  return &MetaServiceGetSessionResultBuilder{
    obj: NewMetaServiceGetSessionResult(),
  }
}

func (p MetaServiceGetSessionResultBuilder) Emit() *MetaServiceGetSessionResult{
  return &MetaServiceGetSessionResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetSessionResultBuilder) Success(success *GetSessionResp) *MetaServiceGetSessionResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetSessionResult) SetSuccess(success *GetSessionResp) *MetaServiceGetSessionResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveSessionArgs struct {
  thrift.IRequest
  Req *RemoveSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveSessionArgs() *MetaServiceRemoveSessionArgs {
  return &MetaServiceRemoveSessionArgs{
    Req: NewRemoveSessionReq(),
  }
}

var MetaServiceRemoveSessionArgs_Req_DEFAULT *RemoveSessionReq
func (p *MetaServiceRemoveSessionArgs) GetReq() *RemoveSessionReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRemoveSessionArgsBuilder struct {
  obj *MetaServiceRemoveSessionArgs
}

func NewMetaServiceRemoveSessionArgsBuilder() *MetaServiceRemoveSessionArgsBuilder{
  return &MetaServiceRemoveSessionArgsBuilder{
    obj: NewMetaServiceRemoveSessionArgs(),
  }
}

func (p MetaServiceRemoveSessionArgsBuilder) Emit() *MetaServiceRemoveSessionArgs{
  return &MetaServiceRemoveSessionArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRemoveSessionArgsBuilder) Req(req *RemoveSessionReq) *MetaServiceRemoveSessionArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRemoveSessionArgs) SetReq(req *RemoveSessionReq) *MetaServiceRemoveSessionArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRemoveSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveSessionResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveSessionResult() *MetaServiceRemoveSessionResult {
  return &MetaServiceRemoveSessionResult{}
}

var MetaServiceRemoveSessionResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveSessionResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRemoveSessionResultBuilder struct {
  obj *MetaServiceRemoveSessionResult
}

func NewMetaServiceRemoveSessionResultBuilder() *MetaServiceRemoveSessionResultBuilder{
  return &MetaServiceRemoveSessionResultBuilder{
    obj: NewMetaServiceRemoveSessionResult(),
  }
}

func (p MetaServiceRemoveSessionResultBuilder) Emit() *MetaServiceRemoveSessionResult{
  return &MetaServiceRemoveSessionResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRemoveSessionResultBuilder) Success(success *ExecResp) *MetaServiceRemoveSessionResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRemoveSessionResult) SetSuccess(success *ExecResp) *MetaServiceRemoveSessionResult {
  m.Success = success
  return m
}

func (p *MetaServiceRemoveSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceKillQueryArgs struct {
  thrift.IRequest
  Req *KillQueryReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceKillQueryArgs() *MetaServiceKillQueryArgs {
  return &MetaServiceKillQueryArgs{
    Req: NewKillQueryReq(),
  }
}

var MetaServiceKillQueryArgs_Req_DEFAULT *KillQueryReq
func (p *MetaServiceKillQueryArgs) GetReq() *KillQueryReq {
  if !p.IsSetReq() {
    return MetaServiceKillQueryArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceKillQueryArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceKillQueryArgsBuilder struct {
  obj *MetaServiceKillQueryArgs
}

func NewMetaServiceKillQueryArgsBuilder() *MetaServiceKillQueryArgsBuilder{
  return &MetaServiceKillQueryArgsBuilder{
    obj: NewMetaServiceKillQueryArgs(),
  }
}

func (p MetaServiceKillQueryArgsBuilder) Emit() *MetaServiceKillQueryArgs{
  return &MetaServiceKillQueryArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceKillQueryArgsBuilder) Req(req *KillQueryReq) *MetaServiceKillQueryArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceKillQueryArgs) SetReq(req *KillQueryReq) *MetaServiceKillQueryArgs {
  m.Req = req
  return m
}

func (p *MetaServiceKillQueryArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceKillQueryArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewKillQueryReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceKillQueryArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("killQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceKillQueryArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceKillQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceKillQueryArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceKillQueryResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceKillQueryResult() *MetaServiceKillQueryResult {
  return &MetaServiceKillQueryResult{}
}

var MetaServiceKillQueryResult_Success_DEFAULT *ExecResp
func (p *MetaServiceKillQueryResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceKillQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceKillQueryResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceKillQueryResultBuilder struct {
  obj *MetaServiceKillQueryResult
}

func NewMetaServiceKillQueryResultBuilder() *MetaServiceKillQueryResultBuilder{
  return &MetaServiceKillQueryResultBuilder{
    obj: NewMetaServiceKillQueryResult(),
  }
}

func (p MetaServiceKillQueryResultBuilder) Emit() *MetaServiceKillQueryResult{
  return &MetaServiceKillQueryResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceKillQueryResultBuilder) Success(success *ExecResp) *MetaServiceKillQueryResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceKillQueryResult) SetSuccess(success *ExecResp) *MetaServiceKillQueryResult {
  m.Success = success
  return m
}

func (p *MetaServiceKillQueryResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceKillQueryResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceKillQueryResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("killQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceKillQueryResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceKillQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceKillQueryResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceReportTaskFinishArgs struct {
  thrift.IRequest
  Req *ReportTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceReportTaskFinishArgs() *MetaServiceReportTaskFinishArgs {
  return &MetaServiceReportTaskFinishArgs{
    Req: NewReportTaskReq(),
  }
}

var MetaServiceReportTaskFinishArgs_Req_DEFAULT *ReportTaskReq
func (p *MetaServiceReportTaskFinishArgs) GetReq() *ReportTaskReq {
  if !p.IsSetReq() {
    return MetaServiceReportTaskFinishArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceReportTaskFinishArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceReportTaskFinishArgsBuilder struct {
  obj *MetaServiceReportTaskFinishArgs
}

func NewMetaServiceReportTaskFinishArgsBuilder() *MetaServiceReportTaskFinishArgsBuilder{
  return &MetaServiceReportTaskFinishArgsBuilder{
    obj: NewMetaServiceReportTaskFinishArgs(),
  }
}

func (p MetaServiceReportTaskFinishArgsBuilder) Emit() *MetaServiceReportTaskFinishArgs{
  return &MetaServiceReportTaskFinishArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceReportTaskFinishArgsBuilder) Req(req *ReportTaskReq) *MetaServiceReportTaskFinishArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceReportTaskFinishArgs) SetReq(req *ReportTaskReq) *MetaServiceReportTaskFinishArgs {
  m.Req = req
  return m
}

func (p *MetaServiceReportTaskFinishArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewReportTaskReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceReportTaskFinishArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceReportTaskFinishResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceReportTaskFinishResult() *MetaServiceReportTaskFinishResult {
  return &MetaServiceReportTaskFinishResult{}
}

var MetaServiceReportTaskFinishResult_Success_DEFAULT *ExecResp
func (p *MetaServiceReportTaskFinishResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceReportTaskFinishResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceReportTaskFinishResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceReportTaskFinishResultBuilder struct {
  obj *MetaServiceReportTaskFinishResult
}

func NewMetaServiceReportTaskFinishResultBuilder() *MetaServiceReportTaskFinishResultBuilder{
  return &MetaServiceReportTaskFinishResultBuilder{
    obj: NewMetaServiceReportTaskFinishResult(),
  }
}

func (p MetaServiceReportTaskFinishResultBuilder) Emit() *MetaServiceReportTaskFinishResult{
  return &MetaServiceReportTaskFinishResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceReportTaskFinishResultBuilder) Success(success *ExecResp) *MetaServiceReportTaskFinishResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceReportTaskFinishResult) SetSuccess(success *ExecResp) *MetaServiceReportTaskFinishResult {
  m.Success = success
  return m
}

func (p *MetaServiceReportTaskFinishResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceReportTaskFinishResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateBackupArgs struct {
  thrift.IRequest
  Req *CreateBackupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateBackupArgs() *MetaServiceCreateBackupArgs {
  return &MetaServiceCreateBackupArgs{
    Req: NewCreateBackupReq(),
  }
}

var MetaServiceCreateBackupArgs_Req_DEFAULT *CreateBackupReq
func (p *MetaServiceCreateBackupArgs) GetReq() *CreateBackupReq {
  if !p.IsSetReq() {
    return MetaServiceCreateBackupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateBackupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceCreateBackupArgsBuilder struct {
  obj *MetaServiceCreateBackupArgs
}

func NewMetaServiceCreateBackupArgsBuilder() *MetaServiceCreateBackupArgsBuilder{
  return &MetaServiceCreateBackupArgsBuilder{
    obj: NewMetaServiceCreateBackupArgs(),
  }
}

func (p MetaServiceCreateBackupArgsBuilder) Emit() *MetaServiceCreateBackupArgs{
  return &MetaServiceCreateBackupArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceCreateBackupArgsBuilder) Req(req *CreateBackupReq) *MetaServiceCreateBackupArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceCreateBackupArgs) SetReq(req *CreateBackupReq) *MetaServiceCreateBackupArgs {
  m.Req = req
  return m
}

func (p *MetaServiceCreateBackupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateBackupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateBackupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateBackupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateBackupResult struct {
  thrift.IResponse
  Success *CreateBackupResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateBackupResult() *MetaServiceCreateBackupResult {
  return &MetaServiceCreateBackupResult{}
}

var MetaServiceCreateBackupResult_Success_DEFAULT *CreateBackupResp
func (p *MetaServiceCreateBackupResult) GetSuccess() *CreateBackupResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateBackupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateBackupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceCreateBackupResultBuilder struct {
  obj *MetaServiceCreateBackupResult
}

func NewMetaServiceCreateBackupResultBuilder() *MetaServiceCreateBackupResultBuilder{
  return &MetaServiceCreateBackupResultBuilder{
    obj: NewMetaServiceCreateBackupResult(),
  }
}

func (p MetaServiceCreateBackupResultBuilder) Emit() *MetaServiceCreateBackupResult{
  return &MetaServiceCreateBackupResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceCreateBackupResultBuilder) Success(success *CreateBackupResp) *MetaServiceCreateBackupResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceCreateBackupResult) SetSuccess(success *CreateBackupResp) *MetaServiceCreateBackupResult {
  m.Success = success
  return m
}

func (p *MetaServiceCreateBackupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateBackupResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateBackupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateBackupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRestoreMetaArgs struct {
  thrift.IRequest
  Req *RestoreMetaReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRestoreMetaArgs() *MetaServiceRestoreMetaArgs {
  return &MetaServiceRestoreMetaArgs{
    Req: NewRestoreMetaReq(),
  }
}

var MetaServiceRestoreMetaArgs_Req_DEFAULT *RestoreMetaReq
func (p *MetaServiceRestoreMetaArgs) GetReq() *RestoreMetaReq {
  if !p.IsSetReq() {
    return MetaServiceRestoreMetaArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRestoreMetaArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceRestoreMetaArgsBuilder struct {
  obj *MetaServiceRestoreMetaArgs
}

func NewMetaServiceRestoreMetaArgsBuilder() *MetaServiceRestoreMetaArgsBuilder{
  return &MetaServiceRestoreMetaArgsBuilder{
    obj: NewMetaServiceRestoreMetaArgs(),
  }
}

func (p MetaServiceRestoreMetaArgsBuilder) Emit() *MetaServiceRestoreMetaArgs{
  return &MetaServiceRestoreMetaArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceRestoreMetaArgsBuilder) Req(req *RestoreMetaReq) *MetaServiceRestoreMetaArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceRestoreMetaArgs) SetReq(req *RestoreMetaReq) *MetaServiceRestoreMetaArgs {
  m.Req = req
  return m
}

func (p *MetaServiceRestoreMetaArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRestoreMetaReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRestoreMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRestoreMetaArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRestoreMetaResult struct {
  thrift.IResponse
  Success *RestoreMetaResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRestoreMetaResult() *MetaServiceRestoreMetaResult {
  return &MetaServiceRestoreMetaResult{}
}

var MetaServiceRestoreMetaResult_Success_DEFAULT *RestoreMetaResp
func (p *MetaServiceRestoreMetaResult) GetSuccess() *RestoreMetaResp {
  if !p.IsSetSuccess() {
    return MetaServiceRestoreMetaResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRestoreMetaResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceRestoreMetaResultBuilder struct {
  obj *MetaServiceRestoreMetaResult
}

func NewMetaServiceRestoreMetaResultBuilder() *MetaServiceRestoreMetaResultBuilder{
  return &MetaServiceRestoreMetaResultBuilder{
    obj: NewMetaServiceRestoreMetaResult(),
  }
}

func (p MetaServiceRestoreMetaResultBuilder) Emit() *MetaServiceRestoreMetaResult{
  return &MetaServiceRestoreMetaResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceRestoreMetaResultBuilder) Success(success *RestoreMetaResp) *MetaServiceRestoreMetaResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceRestoreMetaResult) SetSuccess(success *RestoreMetaResp) *MetaServiceRestoreMetaResult {
  m.Success = success
  return m
}

func (p *MetaServiceRestoreMetaResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewRestoreMetaResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRestoreMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRestoreMetaResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListClusterArgs struct {
  thrift.IRequest
  Req *ListClusterInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListClusterArgs() *MetaServiceListClusterArgs {
  return &MetaServiceListClusterArgs{
    Req: NewListClusterInfoReq(),
  }
}

var MetaServiceListClusterArgs_Req_DEFAULT *ListClusterInfoReq
func (p *MetaServiceListClusterArgs) GetReq() *ListClusterInfoReq {
  if !p.IsSetReq() {
    return MetaServiceListClusterArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListClusterArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceListClusterArgsBuilder struct {
  obj *MetaServiceListClusterArgs
}

func NewMetaServiceListClusterArgsBuilder() *MetaServiceListClusterArgsBuilder{
  return &MetaServiceListClusterArgsBuilder{
    obj: NewMetaServiceListClusterArgs(),
  }
}

func (p MetaServiceListClusterArgsBuilder) Emit() *MetaServiceListClusterArgs{
  return &MetaServiceListClusterArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceListClusterArgsBuilder) Req(req *ListClusterInfoReq) *MetaServiceListClusterArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceListClusterArgs) SetReq(req *ListClusterInfoReq) *MetaServiceListClusterArgs {
  m.Req = req
  return m
}

func (p *MetaServiceListClusterArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListClusterArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListClusterInfoReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListClusterArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listCluster_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListClusterArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListClusterArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListClusterArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListClusterResult struct {
  thrift.IResponse
  Success *ListClusterInfoResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListClusterResult() *MetaServiceListClusterResult {
  return &MetaServiceListClusterResult{}
}

var MetaServiceListClusterResult_Success_DEFAULT *ListClusterInfoResp
func (p *MetaServiceListClusterResult) GetSuccess() *ListClusterInfoResp {
  if !p.IsSetSuccess() {
    return MetaServiceListClusterResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListClusterResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceListClusterResultBuilder struct {
  obj *MetaServiceListClusterResult
}

func NewMetaServiceListClusterResultBuilder() *MetaServiceListClusterResultBuilder{
  return &MetaServiceListClusterResultBuilder{
    obj: NewMetaServiceListClusterResult(),
  }
}

func (p MetaServiceListClusterResultBuilder) Emit() *MetaServiceListClusterResult{
  return &MetaServiceListClusterResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceListClusterResultBuilder) Success(success *ListClusterInfoResp) *MetaServiceListClusterResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceListClusterResult) SetSuccess(success *ListClusterInfoResp) *MetaServiceListClusterResult {
  m.Success = success
  return m
}

func (p *MetaServiceListClusterResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListClusterResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListClusterInfoResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListClusterResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listCluster_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListClusterResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListClusterResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListClusterResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetMetaDirInfoArgs struct {
  thrift.IRequest
  Req *GetMetaDirInfoReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetMetaDirInfoArgs() *MetaServiceGetMetaDirInfoArgs {
  return &MetaServiceGetMetaDirInfoArgs{
    Req: NewGetMetaDirInfoReq(),
  }
}

var MetaServiceGetMetaDirInfoArgs_Req_DEFAULT *GetMetaDirInfoReq
func (p *MetaServiceGetMetaDirInfoArgs) GetReq() *GetMetaDirInfoReq {
  if !p.IsSetReq() {
    return MetaServiceGetMetaDirInfoArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetMetaDirInfoArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetMetaDirInfoArgsBuilder struct {
  obj *MetaServiceGetMetaDirInfoArgs
}

func NewMetaServiceGetMetaDirInfoArgsBuilder() *MetaServiceGetMetaDirInfoArgsBuilder{
  return &MetaServiceGetMetaDirInfoArgsBuilder{
    obj: NewMetaServiceGetMetaDirInfoArgs(),
  }
}

func (p MetaServiceGetMetaDirInfoArgsBuilder) Emit() *MetaServiceGetMetaDirInfoArgs{
  return &MetaServiceGetMetaDirInfoArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetMetaDirInfoArgsBuilder) Req(req *GetMetaDirInfoReq) *MetaServiceGetMetaDirInfoArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetMetaDirInfoArgs) SetReq(req *GetMetaDirInfoReq) *MetaServiceGetMetaDirInfoArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetMetaDirInfoArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetMetaDirInfoReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getMetaDirInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetMetaDirInfoArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetMetaDirInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetMetaDirInfoArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetMetaDirInfoResult struct {
  thrift.IResponse
  Success *GetMetaDirInfoResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetMetaDirInfoResult() *MetaServiceGetMetaDirInfoResult {
  return &MetaServiceGetMetaDirInfoResult{}
}

var MetaServiceGetMetaDirInfoResult_Success_DEFAULT *GetMetaDirInfoResp
func (p *MetaServiceGetMetaDirInfoResult) GetSuccess() *GetMetaDirInfoResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetMetaDirInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetMetaDirInfoResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetMetaDirInfoResultBuilder struct {
  obj *MetaServiceGetMetaDirInfoResult
}

func NewMetaServiceGetMetaDirInfoResultBuilder() *MetaServiceGetMetaDirInfoResultBuilder{
  return &MetaServiceGetMetaDirInfoResultBuilder{
    obj: NewMetaServiceGetMetaDirInfoResult(),
  }
}

func (p MetaServiceGetMetaDirInfoResultBuilder) Emit() *MetaServiceGetMetaDirInfoResult{
  return &MetaServiceGetMetaDirInfoResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetMetaDirInfoResultBuilder) Success(success *GetMetaDirInfoResp) *MetaServiceGetMetaDirInfoResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetMetaDirInfoResult) SetSuccess(success *GetMetaDirInfoResp) *MetaServiceGetMetaDirInfoResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetMetaDirInfoResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetMetaDirInfoResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getMetaDirInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetMetaDirInfoResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetMetaDirInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetMetaDirInfoResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceVerifyClientVersionArgs struct {
  thrift.IRequest
  Req *VerifyClientVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceVerifyClientVersionArgs() *MetaServiceVerifyClientVersionArgs {
  return &MetaServiceVerifyClientVersionArgs{
    Req: NewVerifyClientVersionReq(),
  }
}

var MetaServiceVerifyClientVersionArgs_Req_DEFAULT *VerifyClientVersionReq
func (p *MetaServiceVerifyClientVersionArgs) GetReq() *VerifyClientVersionReq {
  if !p.IsSetReq() {
    return MetaServiceVerifyClientVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceVerifyClientVersionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceVerifyClientVersionArgsBuilder struct {
  obj *MetaServiceVerifyClientVersionArgs
}

func NewMetaServiceVerifyClientVersionArgsBuilder() *MetaServiceVerifyClientVersionArgsBuilder{
  return &MetaServiceVerifyClientVersionArgsBuilder{
    obj: NewMetaServiceVerifyClientVersionArgs(),
  }
}

func (p MetaServiceVerifyClientVersionArgsBuilder) Emit() *MetaServiceVerifyClientVersionArgs{
  return &MetaServiceVerifyClientVersionArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceVerifyClientVersionArgsBuilder) Req(req *VerifyClientVersionReq) *MetaServiceVerifyClientVersionArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceVerifyClientVersionArgs) SetReq(req *VerifyClientVersionReq) *MetaServiceVerifyClientVersionArgs {
  m.Req = req
  return m
}

func (p *MetaServiceVerifyClientVersionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewVerifyClientVersionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("verifyClientVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceVerifyClientVersionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceVerifyClientVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceVerifyClientVersionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceVerifyClientVersionResult struct {
  thrift.IResponse
  Success *VerifyClientVersionResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceVerifyClientVersionResult() *MetaServiceVerifyClientVersionResult {
  return &MetaServiceVerifyClientVersionResult{}
}

var MetaServiceVerifyClientVersionResult_Success_DEFAULT *VerifyClientVersionResp
func (p *MetaServiceVerifyClientVersionResult) GetSuccess() *VerifyClientVersionResp {
  if !p.IsSetSuccess() {
    return MetaServiceVerifyClientVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceVerifyClientVersionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceVerifyClientVersionResultBuilder struct {
  obj *MetaServiceVerifyClientVersionResult
}

func NewMetaServiceVerifyClientVersionResultBuilder() *MetaServiceVerifyClientVersionResultBuilder{
  return &MetaServiceVerifyClientVersionResultBuilder{
    obj: NewMetaServiceVerifyClientVersionResult(),
  }
}

func (p MetaServiceVerifyClientVersionResultBuilder) Emit() *MetaServiceVerifyClientVersionResult{
  return &MetaServiceVerifyClientVersionResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceVerifyClientVersionResultBuilder) Success(success *VerifyClientVersionResp) *MetaServiceVerifyClientVersionResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceVerifyClientVersionResult) SetSuccess(success *VerifyClientVersionResp) *MetaServiceVerifyClientVersionResult {
  m.Success = success
  return m
}

func (p *MetaServiceVerifyClientVersionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewVerifyClientVersionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("verifyClientVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceVerifyClientVersionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceVerifyClientVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceVerifyClientVersionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSaveGraphVersionArgs struct {
  thrift.IRequest
  Req *SaveGraphVersionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSaveGraphVersionArgs() *MetaServiceSaveGraphVersionArgs {
  return &MetaServiceSaveGraphVersionArgs{
    Req: NewSaveGraphVersionReq(),
  }
}

var MetaServiceSaveGraphVersionArgs_Req_DEFAULT *SaveGraphVersionReq
func (p *MetaServiceSaveGraphVersionArgs) GetReq() *SaveGraphVersionReq {
  if !p.IsSetReq() {
    return MetaServiceSaveGraphVersionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSaveGraphVersionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceSaveGraphVersionArgsBuilder struct {
  obj *MetaServiceSaveGraphVersionArgs
}

func NewMetaServiceSaveGraphVersionArgsBuilder() *MetaServiceSaveGraphVersionArgsBuilder{
  return &MetaServiceSaveGraphVersionArgsBuilder{
    obj: NewMetaServiceSaveGraphVersionArgs(),
  }
}

func (p MetaServiceSaveGraphVersionArgsBuilder) Emit() *MetaServiceSaveGraphVersionArgs{
  return &MetaServiceSaveGraphVersionArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceSaveGraphVersionArgsBuilder) Req(req *SaveGraphVersionReq) *MetaServiceSaveGraphVersionArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceSaveGraphVersionArgs) SetReq(req *SaveGraphVersionReq) *MetaServiceSaveGraphVersionArgs {
  m.Req = req
  return m
}

func (p *MetaServiceSaveGraphVersionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSaveGraphVersionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("saveGraphVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSaveGraphVersionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSaveGraphVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSaveGraphVersionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSaveGraphVersionResult struct {
  thrift.IResponse
  Success *SaveGraphVersionResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSaveGraphVersionResult() *MetaServiceSaveGraphVersionResult {
  return &MetaServiceSaveGraphVersionResult{}
}

var MetaServiceSaveGraphVersionResult_Success_DEFAULT *SaveGraphVersionResp
func (p *MetaServiceSaveGraphVersionResult) GetSuccess() *SaveGraphVersionResp {
  if !p.IsSetSuccess() {
    return MetaServiceSaveGraphVersionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSaveGraphVersionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceSaveGraphVersionResultBuilder struct {
  obj *MetaServiceSaveGraphVersionResult
}

func NewMetaServiceSaveGraphVersionResultBuilder() *MetaServiceSaveGraphVersionResultBuilder{
  return &MetaServiceSaveGraphVersionResultBuilder{
    obj: NewMetaServiceSaveGraphVersionResult(),
  }
}

func (p MetaServiceSaveGraphVersionResultBuilder) Emit() *MetaServiceSaveGraphVersionResult{
  return &MetaServiceSaveGraphVersionResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceSaveGraphVersionResultBuilder) Success(success *SaveGraphVersionResp) *MetaServiceSaveGraphVersionResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceSaveGraphVersionResult) SetSuccess(success *SaveGraphVersionResp) *MetaServiceSaveGraphVersionResult {
  m.Success = success
  return m
}

func (p *MetaServiceSaveGraphVersionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewSaveGraphVersionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("saveGraphVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSaveGraphVersionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSaveGraphVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSaveGraphVersionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetSegmentIdArgs struct {
  thrift.IRequest
  Req *GetSegmentIdReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSegmentIdArgs() *MetaServiceGetSegmentIdArgs {
  return &MetaServiceGetSegmentIdArgs{
    Req: NewGetSegmentIdReq(),
  }
}

var MetaServiceGetSegmentIdArgs_Req_DEFAULT *GetSegmentIdReq
func (p *MetaServiceGetSegmentIdArgs) GetReq() *GetSegmentIdReq {
  if !p.IsSetReq() {
    return MetaServiceGetSegmentIdArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSegmentIdArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type MetaServiceGetSegmentIdArgsBuilder struct {
  obj *MetaServiceGetSegmentIdArgs
}

func NewMetaServiceGetSegmentIdArgsBuilder() *MetaServiceGetSegmentIdArgsBuilder{
  return &MetaServiceGetSegmentIdArgsBuilder{
    obj: NewMetaServiceGetSegmentIdArgs(),
  }
}

func (p MetaServiceGetSegmentIdArgsBuilder) Emit() *MetaServiceGetSegmentIdArgs{
  return &MetaServiceGetSegmentIdArgs{
    Req: p.obj.Req,
  }
}

func (m *MetaServiceGetSegmentIdArgsBuilder) Req(req *GetSegmentIdReq) *MetaServiceGetSegmentIdArgsBuilder {
  m.obj.Req = req
  return m
}

func (m *MetaServiceGetSegmentIdArgs) SetReq(req *GetSegmentIdReq) *MetaServiceGetSegmentIdArgs {
  m.Req = req
  return m
}

func (p *MetaServiceGetSegmentIdArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSegmentIdReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSegmentId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSegmentIdArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSegmentIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetSegmentIdArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetSegmentIdResult struct {
  thrift.IResponse
  Success *GetSegmentIdResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSegmentIdResult() *MetaServiceGetSegmentIdResult {
  return &MetaServiceGetSegmentIdResult{}
}

var MetaServiceGetSegmentIdResult_Success_DEFAULT *GetSegmentIdResp
func (p *MetaServiceGetSegmentIdResult) GetSuccess() *GetSegmentIdResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSegmentIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSegmentIdResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type MetaServiceGetSegmentIdResultBuilder struct {
  obj *MetaServiceGetSegmentIdResult
}

func NewMetaServiceGetSegmentIdResultBuilder() *MetaServiceGetSegmentIdResultBuilder{
  return &MetaServiceGetSegmentIdResultBuilder{
    obj: NewMetaServiceGetSegmentIdResult(),
  }
}

func (p MetaServiceGetSegmentIdResultBuilder) Emit() *MetaServiceGetSegmentIdResult{
  return &MetaServiceGetSegmentIdResult{
    Success: p.obj.Success,
  }
}

func (m *MetaServiceGetSegmentIdResultBuilder) Success(success *GetSegmentIdResp) *MetaServiceGetSegmentIdResultBuilder {
  m.obj.Success = success
  return m
}

func (m *MetaServiceGetSegmentIdResult) SetSuccess(success *GetSegmentIdResp) *MetaServiceGetSegmentIdResult {
  m.Success = success
  return m
}

func (p *MetaServiceGetSegmentIdResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSegmentIdResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSegmentIdResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSegmentId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSegmentIdResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSegmentIdResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetSegmentIdResult({Success:%s})", successVal)
}


