// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/vesoft-inc/nebula-go/v3/nebula"
	"github.com/vesoft-inc/nebula-go/v3/nebula/meta"
)

var _ = nebula.GoUnusedProtection__
var _ = meta.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp clearSpace(ClearSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterSpace(AlterSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpaceAs(CreateSpaceAsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHosts(AddHostsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHostsIntoZone(AddHostsIntoZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropHosts(DropHostsReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ListPartsResp listParts(ListPartsReq req)")
  fmt.Fprintln(os.Stderr, "  GetWorkerIdResp getWorkerId(GetWorkerIdReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTagIndex(CreateTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTagIndex(DropTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagIndexResp getTagIndex(GetTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildTagIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdgeIndex(CreateEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdgeIndex(DropEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildEdgeIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp getUserRoles(GetUserRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  AgentHBResp agentHeartbeat(AgentHBReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSnapshot(CreateSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSnapshot(DropSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ListSnapshotsResp listSnapshots(ListSnapshotsReq req)")
  fmt.Fprintln(os.Stderr, "  AdminJobResp runAdminJob(AdminJobReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp mergeZone(MergeZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZone(DropZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp divideZone(DivideZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp renameZone(RenameZoneReq req)")
  fmt.Fprintln(os.Stderr, "  GetZoneResp getZone(GetZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ListZonesResp listZones(ListZonesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addListener(AddListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeListener(RemoveListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ListListenerResp listListener(ListListenerReq req)")
  fmt.Fprintln(os.Stderr, "  GetStatsResp getStats(GetStatsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signInService(SignInServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signOutService(SignOutServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ListServiceClientsResp listServiceClients(ListServiceClientsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createFTIndex(CreateFTIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropFTIndex(DropFTIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListFTIndexesResp listFTIndexes(ListFTIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  CreateSessionResp createSession(CreateSessionReq req)")
  fmt.Fprintln(os.Stderr, "  UpdateSessionsResp updateSessions(UpdateSessionsReq req)")
  fmt.Fprintln(os.Stderr, "  ListSessionsResp listSessions(ListSessionsReq req)")
  fmt.Fprintln(os.Stderr, "  GetSessionResp getSession(GetSessionReq req)")
  fmt.Fprintln(os.Stderr, "  RemoveSessionResp removeSession(RemoveSessionReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp killQuery(KillQueryReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp reportTaskFinish(ReportTaskReq req)")
  fmt.Fprintln(os.Stderr, "  CreateBackupResp createBackup(CreateBackupReq req)")
  fmt.Fprintln(os.Stderr, "  RestoreMetaResp restoreMeta(RestoreMetaReq req)")
  fmt.Fprintln(os.Stderr, "  ListClusterInfoResp listCluster(ListClusterInfoReq req)")
  fmt.Fprintln(os.Stderr, "  GetMetaDirInfoResp getMetaDirInfo(GetMetaDirInfoReq req)")
  fmt.Fprintln(os.Stderr, "  VerifyClientVersionResp verifyClientVersion(VerifyClientVersionReq req)")
  fmt.Fprintln(os.Stderr, "  SaveGraphVersionResp saveGraphVersion(SaveGraphVersionReq req)")
  fmt.Fprintln(os.Stderr, "  GetSegmentIdResp getSegmentId(GetSegmentIdReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := meta.NewMetaServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg713 := flag.Arg(1)
    mbTrans714 := thrift.NewTMemoryBufferLen(len(arg713))
    defer mbTrans714.Close()
    _, err715 := mbTrans714.WriteString(arg713)
    if err715 != nil {
      Usage()
      return
    }
    factory716 := thrift.NewTJSONProtocolFactory()
    jsProt717 := factory716.GetProtocol(mbTrans714)
    argvalue0 := meta.NewCreateSpaceReq()
    err718 := argvalue0.Read(context.Background(), jsProt717)
    if err718 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg719 := flag.Arg(1)
    mbTrans720 := thrift.NewTMemoryBufferLen(len(arg719))
    defer mbTrans720.Close()
    _, err721 := mbTrans720.WriteString(arg719)
    if err721 != nil {
      Usage()
      return
    }
    factory722 := thrift.NewTJSONProtocolFactory()
    jsProt723 := factory722.GetProtocol(mbTrans720)
    argvalue0 := meta.NewDropSpaceReq()
    err724 := argvalue0.Read(context.Background(), jsProt723)
    if err724 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clearSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearSpace requires 1 args")
      flag.Usage()
    }
    arg725 := flag.Arg(1)
    mbTrans726 := thrift.NewTMemoryBufferLen(len(arg725))
    defer mbTrans726.Close()
    _, err727 := mbTrans726.WriteString(arg725)
    if err727 != nil {
      Usage()
      return
    }
    factory728 := thrift.NewTJSONProtocolFactory()
    jsProt729 := factory728.GetProtocol(mbTrans726)
    argvalue0 := meta.NewClearSpaceReq()
    err730 := argvalue0.Read(context.Background(), jsProt729)
    if err730 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearSpace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg731 := flag.Arg(1)
    mbTrans732 := thrift.NewTMemoryBufferLen(len(arg731))
    defer mbTrans732.Close()
    _, err733 := mbTrans732.WriteString(arg731)
    if err733 != nil {
      Usage()
      return
    }
    factory734 := thrift.NewTJSONProtocolFactory()
    jsProt735 := factory734.GetProtocol(mbTrans732)
    argvalue0 := meta.NewGetSpaceReq()
    err736 := argvalue0.Read(context.Background(), jsProt735)
    if err736 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg737 := flag.Arg(1)
    mbTrans738 := thrift.NewTMemoryBufferLen(len(arg737))
    defer mbTrans738.Close()
    _, err739 := mbTrans738.WriteString(arg737)
    if err739 != nil {
      Usage()
      return
    }
    factory740 := thrift.NewTJSONProtocolFactory()
    jsProt741 := factory740.GetProtocol(mbTrans738)
    argvalue0 := meta.NewListSpacesReq()
    err742 := argvalue0.Read(context.Background(), jsProt741)
    if err742 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alterSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterSpace requires 1 args")
      flag.Usage()
    }
    arg743 := flag.Arg(1)
    mbTrans744 := thrift.NewTMemoryBufferLen(len(arg743))
    defer mbTrans744.Close()
    _, err745 := mbTrans744.WriteString(arg743)
    if err745 != nil {
      Usage()
      return
    }
    factory746 := thrift.NewTJSONProtocolFactory()
    jsProt747 := factory746.GetProtocol(mbTrans744)
    argvalue0 := meta.NewAlterSpaceReq()
    err748 := argvalue0.Read(context.Background(), jsProt747)
    if err748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterSpace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createSpaceAs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpaceAs requires 1 args")
      flag.Usage()
    }
    arg749 := flag.Arg(1)
    mbTrans750 := thrift.NewTMemoryBufferLen(len(arg749))
    defer mbTrans750.Close()
    _, err751 := mbTrans750.WriteString(arg749)
    if err751 != nil {
      Usage()
      return
    }
    factory752 := thrift.NewTJSONProtocolFactory()
    jsProt753 := factory752.GetProtocol(mbTrans750)
    argvalue0 := meta.NewCreateSpaceAsReq()
    err754 := argvalue0.Read(context.Background(), jsProt753)
    if err754 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpaceAs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg755 := flag.Arg(1)
    mbTrans756 := thrift.NewTMemoryBufferLen(len(arg755))
    defer mbTrans756.Close()
    _, err757 := mbTrans756.WriteString(arg755)
    if err757 != nil {
      Usage()
      return
    }
    factory758 := thrift.NewTJSONProtocolFactory()
    jsProt759 := factory758.GetProtocol(mbTrans756)
    argvalue0 := meta.NewCreateTagReq()
    err760 := argvalue0.Read(context.Background(), jsProt759)
    if err760 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg761 := flag.Arg(1)
    mbTrans762 := thrift.NewTMemoryBufferLen(len(arg761))
    defer mbTrans762.Close()
    _, err763 := mbTrans762.WriteString(arg761)
    if err763 != nil {
      Usage()
      return
    }
    factory764 := thrift.NewTJSONProtocolFactory()
    jsProt765 := factory764.GetProtocol(mbTrans762)
    argvalue0 := meta.NewAlterTagReq()
    err766 := argvalue0.Read(context.Background(), jsProt765)
    if err766 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg767 := flag.Arg(1)
    mbTrans768 := thrift.NewTMemoryBufferLen(len(arg767))
    defer mbTrans768.Close()
    _, err769 := mbTrans768.WriteString(arg767)
    if err769 != nil {
      Usage()
      return
    }
    factory770 := thrift.NewTJSONProtocolFactory()
    jsProt771 := factory770.GetProtocol(mbTrans768)
    argvalue0 := meta.NewDropTagReq()
    err772 := argvalue0.Read(context.Background(), jsProt771)
    if err772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg773 := flag.Arg(1)
    mbTrans774 := thrift.NewTMemoryBufferLen(len(arg773))
    defer mbTrans774.Close()
    _, err775 := mbTrans774.WriteString(arg773)
    if err775 != nil {
      Usage()
      return
    }
    factory776 := thrift.NewTJSONProtocolFactory()
    jsProt777 := factory776.GetProtocol(mbTrans774)
    argvalue0 := meta.NewGetTagReq()
    err778 := argvalue0.Read(context.Background(), jsProt777)
    if err778 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg779 := flag.Arg(1)
    mbTrans780 := thrift.NewTMemoryBufferLen(len(arg779))
    defer mbTrans780.Close()
    _, err781 := mbTrans780.WriteString(arg779)
    if err781 != nil {
      Usage()
      return
    }
    factory782 := thrift.NewTJSONProtocolFactory()
    jsProt783 := factory782.GetProtocol(mbTrans780)
    argvalue0 := meta.NewListTagsReq()
    err784 := argvalue0.Read(context.Background(), jsProt783)
    if err784 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg785 := flag.Arg(1)
    mbTrans786 := thrift.NewTMemoryBufferLen(len(arg785))
    defer mbTrans786.Close()
    _, err787 := mbTrans786.WriteString(arg785)
    if err787 != nil {
      Usage()
      return
    }
    factory788 := thrift.NewTJSONProtocolFactory()
    jsProt789 := factory788.GetProtocol(mbTrans786)
    argvalue0 := meta.NewCreateEdgeReq()
    err790 := argvalue0.Read(context.Background(), jsProt789)
    if err790 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg791 := flag.Arg(1)
    mbTrans792 := thrift.NewTMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewTJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue0 := meta.NewAlterEdgeReq()
    err796 := argvalue0.Read(context.Background(), jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg797 := flag.Arg(1)
    mbTrans798 := thrift.NewTMemoryBufferLen(len(arg797))
    defer mbTrans798.Close()
    _, err799 := mbTrans798.WriteString(arg797)
    if err799 != nil {
      Usage()
      return
    }
    factory800 := thrift.NewTJSONProtocolFactory()
    jsProt801 := factory800.GetProtocol(mbTrans798)
    argvalue0 := meta.NewDropEdgeReq()
    err802 := argvalue0.Read(context.Background(), jsProt801)
    if err802 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg803 := flag.Arg(1)
    mbTrans804 := thrift.NewTMemoryBufferLen(len(arg803))
    defer mbTrans804.Close()
    _, err805 := mbTrans804.WriteString(arg803)
    if err805 != nil {
      Usage()
      return
    }
    factory806 := thrift.NewTJSONProtocolFactory()
    jsProt807 := factory806.GetProtocol(mbTrans804)
    argvalue0 := meta.NewGetEdgeReq()
    err808 := argvalue0.Read(context.Background(), jsProt807)
    if err808 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg809 := flag.Arg(1)
    mbTrans810 := thrift.NewTMemoryBufferLen(len(arg809))
    defer mbTrans810.Close()
    _, err811 := mbTrans810.WriteString(arg809)
    if err811 != nil {
      Usage()
      return
    }
    factory812 := thrift.NewTJSONProtocolFactory()
    jsProt813 := factory812.GetProtocol(mbTrans810)
    argvalue0 := meta.NewListEdgesReq()
    err814 := argvalue0.Read(context.Background(), jsProt813)
    if err814 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHosts requires 1 args")
      flag.Usage()
    }
    arg815 := flag.Arg(1)
    mbTrans816 := thrift.NewTMemoryBufferLen(len(arg815))
    defer mbTrans816.Close()
    _, err817 := mbTrans816.WriteString(arg815)
    if err817 != nil {
      Usage()
      return
    }
    factory818 := thrift.NewTJSONProtocolFactory()
    jsProt819 := factory818.GetProtocol(mbTrans816)
    argvalue0 := meta.NewAddHostsReq()
    err820 := argvalue0.Read(context.Background(), jsProt819)
    if err820 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHosts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addHostsIntoZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHostsIntoZone requires 1 args")
      flag.Usage()
    }
    arg821 := flag.Arg(1)
    mbTrans822 := thrift.NewTMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewTJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue0 := meta.NewAddHostsIntoZoneReq()
    err826 := argvalue0.Read(context.Background(), jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHostsIntoZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropHosts requires 1 args")
      flag.Usage()
    }
    arg827 := flag.Arg(1)
    mbTrans828 := thrift.NewTMemoryBufferLen(len(arg827))
    defer mbTrans828.Close()
    _, err829 := mbTrans828.WriteString(arg827)
    if err829 != nil {
      Usage()
      return
    }
    factory830 := thrift.NewTJSONProtocolFactory()
    jsProt831 := factory830.GetProtocol(mbTrans828)
    argvalue0 := meta.NewDropHostsReq()
    err832 := argvalue0.Read(context.Background(), jsProt831)
    if err832 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropHosts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg833 := flag.Arg(1)
    mbTrans834 := thrift.NewTMemoryBufferLen(len(arg833))
    defer mbTrans834.Close()
    _, err835 := mbTrans834.WriteString(arg833)
    if err835 != nil {
      Usage()
      return
    }
    factory836 := thrift.NewTJSONProtocolFactory()
    jsProt837 := factory836.GetProtocol(mbTrans834)
    argvalue0 := meta.NewListHostsReq()
    err838 := argvalue0.Read(context.Background(), jsProt837)
    if err838 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg839 := flag.Arg(1)
    mbTrans840 := thrift.NewTMemoryBufferLen(len(arg839))
    defer mbTrans840.Close()
    _, err841 := mbTrans840.WriteString(arg839)
    if err841 != nil {
      Usage()
      return
    }
    factory842 := thrift.NewTJSONProtocolFactory()
    jsProt843 := factory842.GetProtocol(mbTrans840)
    argvalue0 := meta.NewGetPartsAllocReq()
    err844 := argvalue0.Read(context.Background(), jsProt843)
    if err844 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListParts requires 1 args")
      flag.Usage()
    }
    arg845 := flag.Arg(1)
    mbTrans846 := thrift.NewTMemoryBufferLen(len(arg845))
    defer mbTrans846.Close()
    _, err847 := mbTrans846.WriteString(arg845)
    if err847 != nil {
      Usage()
      return
    }
    factory848 := thrift.NewTJSONProtocolFactory()
    jsProt849 := factory848.GetProtocol(mbTrans846)
    argvalue0 := meta.NewListPartsReq()
    err850 := argvalue0.Read(context.Background(), jsProt849)
    if err850 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListParts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getWorkerId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetWorkerId requires 1 args")
      flag.Usage()
    }
    arg851 := flag.Arg(1)
    mbTrans852 := thrift.NewTMemoryBufferLen(len(arg851))
    defer mbTrans852.Close()
    _, err853 := mbTrans852.WriteString(arg851)
    if err853 != nil {
      Usage()
      return
    }
    factory854 := thrift.NewTJSONProtocolFactory()
    jsProt855 := factory854.GetProtocol(mbTrans852)
    argvalue0 := meta.NewGetWorkerIdReq()
    err856 := argvalue0.Read(context.Background(), jsProt855)
    if err856 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetWorkerId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTagIndex requires 1 args")
      flag.Usage()
    }
    arg857 := flag.Arg(1)
    mbTrans858 := thrift.NewTMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil {
      Usage()
      return
    }
    factory860 := thrift.NewTJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    argvalue0 := meta.NewCreateTagIndexReq()
    err862 := argvalue0.Read(context.Background(), jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTagIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTagIndex requires 1 args")
      flag.Usage()
    }
    arg863 := flag.Arg(1)
    mbTrans864 := thrift.NewTMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewTJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue0 := meta.NewDropTagIndexReq()
    err868 := argvalue0.Read(context.Background(), jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTagIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTagIndex requires 1 args")
      flag.Usage()
    }
    arg869 := flag.Arg(1)
    mbTrans870 := thrift.NewTMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewTJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue0 := meta.NewGetTagIndexReq()
    err874 := argvalue0.Read(context.Background(), jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTagIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listTagIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexes requires 1 args")
      flag.Usage()
    }
    arg875 := flag.Arg(1)
    mbTrans876 := thrift.NewTMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewTJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue0 := meta.NewListTagIndexesReq()
    err880 := argvalue0.Read(context.Background(), jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg881 := flag.Arg(1)
    mbTrans882 := thrift.NewTMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewTJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue0 := meta.NewRebuildIndexReq()
    err886 := argvalue0.Read(context.Background(), jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listTagIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexStatus requires 1 args")
      flag.Usage()
    }
    arg887 := flag.Arg(1)
    mbTrans888 := thrift.NewTMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewTJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue0 := meta.NewListIndexStatusReq()
    err892 := argvalue0.Read(context.Background(), jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg893 := flag.Arg(1)
    mbTrans894 := thrift.NewTMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewTJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue0 := meta.NewCreateEdgeIndexReq()
    err898 := argvalue0.Read(context.Background(), jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdgeIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg899 := flag.Arg(1)
    mbTrans900 := thrift.NewTMemoryBufferLen(len(arg899))
    defer mbTrans900.Close()
    _, err901 := mbTrans900.WriteString(arg899)
    if err901 != nil {
      Usage()
      return
    }
    factory902 := thrift.NewTJSONProtocolFactory()
    jsProt903 := factory902.GetProtocol(mbTrans900)
    argvalue0 := meta.NewDropEdgeIndexReq()
    err904 := argvalue0.Read(context.Background(), jsProt903)
    if err904 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdgeIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg905 := flag.Arg(1)
    mbTrans906 := thrift.NewTMemoryBufferLen(len(arg905))
    defer mbTrans906.Close()
    _, err907 := mbTrans906.WriteString(arg905)
    if err907 != nil {
      Usage()
      return
    }
    factory908 := thrift.NewTJSONProtocolFactory()
    jsProt909 := factory908.GetProtocol(mbTrans906)
    argvalue0 := meta.NewGetEdgeIndexReq()
    err910 := argvalue0.Read(context.Background(), jsProt909)
    if err910 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexes requires 1 args")
      flag.Usage()
    }
    arg911 := flag.Arg(1)
    mbTrans912 := thrift.NewTMemoryBufferLen(len(arg911))
    defer mbTrans912.Close()
    _, err913 := mbTrans912.WriteString(arg911)
    if err913 != nil {
      Usage()
      return
    }
    factory914 := thrift.NewTJSONProtocolFactory()
    jsProt915 := factory914.GetProtocol(mbTrans912)
    argvalue0 := meta.NewListEdgeIndexesReq()
    err916 := argvalue0.Read(context.Background(), jsProt915)
    if err916 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg917 := flag.Arg(1)
    mbTrans918 := thrift.NewTMemoryBufferLen(len(arg917))
    defer mbTrans918.Close()
    _, err919 := mbTrans918.WriteString(arg917)
    if err919 != nil {
      Usage()
      return
    }
    factory920 := thrift.NewTJSONProtocolFactory()
    jsProt921 := factory920.GetProtocol(mbTrans918)
    argvalue0 := meta.NewRebuildIndexReq()
    err922 := argvalue0.Read(context.Background(), jsProt921)
    if err922 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexStatus requires 1 args")
      flag.Usage()
    }
    arg923 := flag.Arg(1)
    mbTrans924 := thrift.NewTMemoryBufferLen(len(arg923))
    defer mbTrans924.Close()
    _, err925 := mbTrans924.WriteString(arg923)
    if err925 != nil {
      Usage()
      return
    }
    factory926 := thrift.NewTJSONProtocolFactory()
    jsProt927 := factory926.GetProtocol(mbTrans924)
    argvalue0 := meta.NewListIndexStatusReq()
    err928 := argvalue0.Read(context.Background(), jsProt927)
    if err928 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg929 := flag.Arg(1)
    mbTrans930 := thrift.NewTMemoryBufferLen(len(arg929))
    defer mbTrans930.Close()
    _, err931 := mbTrans930.WriteString(arg929)
    if err931 != nil {
      Usage()
      return
    }
    factory932 := thrift.NewTJSONProtocolFactory()
    jsProt933 := factory932.GetProtocol(mbTrans930)
    argvalue0 := meta.NewCreateUserReq()
    err934 := argvalue0.Read(context.Background(), jsProt933)
    if err934 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg935 := flag.Arg(1)
    mbTrans936 := thrift.NewTMemoryBufferLen(len(arg935))
    defer mbTrans936.Close()
    _, err937 := mbTrans936.WriteString(arg935)
    if err937 != nil {
      Usage()
      return
    }
    factory938 := thrift.NewTJSONProtocolFactory()
    jsProt939 := factory938.GetProtocol(mbTrans936)
    argvalue0 := meta.NewDropUserReq()
    err940 := argvalue0.Read(context.Background(), jsProt939)
    if err940 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg941 := flag.Arg(1)
    mbTrans942 := thrift.NewTMemoryBufferLen(len(arg941))
    defer mbTrans942.Close()
    _, err943 := mbTrans942.WriteString(arg941)
    if err943 != nil {
      Usage()
      return
    }
    factory944 := thrift.NewTJSONProtocolFactory()
    jsProt945 := factory944.GetProtocol(mbTrans942)
    argvalue0 := meta.NewAlterUserReq()
    err946 := argvalue0.Read(context.Background(), jsProt945)
    if err946 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(context.Background(), value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg947 := flag.Arg(1)
    mbTrans948 := thrift.NewTMemoryBufferLen(len(arg947))
    defer mbTrans948.Close()
    _, err949 := mbTrans948.WriteString(arg947)
    if err949 != nil {
      Usage()
      return
    }
    factory950 := thrift.NewTJSONProtocolFactory()
    jsProt951 := factory950.GetProtocol(mbTrans948)
    argvalue0 := meta.NewGrantRoleReq()
    err952 := argvalue0.Read(context.Background(), jsProt951)
    if err952 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg953 := flag.Arg(1)
    mbTrans954 := thrift.NewTMemoryBufferLen(len(arg953))
    defer mbTrans954.Close()
    _, err955 := mbTrans954.WriteString(arg953)
    if err955 != nil {
      Usage()
      return
    }
    factory956 := thrift.NewTJSONProtocolFactory()
    jsProt957 := factory956.GetProtocol(mbTrans954)
    argvalue0 := meta.NewRevokeRoleReq()
    err958 := argvalue0.Read(context.Background(), jsProt957)
    if err958 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg959 := flag.Arg(1)
    mbTrans960 := thrift.NewTMemoryBufferLen(len(arg959))
    defer mbTrans960.Close()
    _, err961 := mbTrans960.WriteString(arg959)
    if err961 != nil {
      Usage()
      return
    }
    factory962 := thrift.NewTJSONProtocolFactory()
    jsProt963 := factory962.GetProtocol(mbTrans960)
    argvalue0 := meta.NewListUsersReq()
    err964 := argvalue0.Read(context.Background(), jsProt963)
    if err964 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg965 := flag.Arg(1)
    mbTrans966 := thrift.NewTMemoryBufferLen(len(arg965))
    defer mbTrans966.Close()
    _, err967 := mbTrans966.WriteString(arg965)
    if err967 != nil {
      Usage()
      return
    }
    factory968 := thrift.NewTJSONProtocolFactory()
    jsProt969 := factory968.GetProtocol(mbTrans966)
    argvalue0 := meta.NewListRolesReq()
    err970 := argvalue0.Read(context.Background(), jsProt969)
    if err970 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserRoles requires 1 args")
      flag.Usage()
    }
    arg971 := flag.Arg(1)
    mbTrans972 := thrift.NewTMemoryBufferLen(len(arg971))
    defer mbTrans972.Close()
    _, err973 := mbTrans972.WriteString(arg971)
    if err973 != nil {
      Usage()
      return
    }
    factory974 := thrift.NewTJSONProtocolFactory()
    jsProt975 := factory974.GetProtocol(mbTrans972)
    argvalue0 := meta.NewGetUserRolesReq()
    err976 := argvalue0.Read(context.Background(), jsProt975)
    if err976 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserRoles(context.Background(), value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg977 := flag.Arg(1)
    mbTrans978 := thrift.NewTMemoryBufferLen(len(arg977))
    defer mbTrans978.Close()
    _, err979 := mbTrans978.WriteString(arg977)
    if err979 != nil {
      Usage()
      return
    }
    factory980 := thrift.NewTJSONProtocolFactory()
    jsProt981 := factory980.GetProtocol(mbTrans978)
    argvalue0 := meta.NewChangePasswordReq()
    err982 := argvalue0.Read(context.Background(), jsProt981)
    if err982 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg983 := flag.Arg(1)
    mbTrans984 := thrift.NewTMemoryBufferLen(len(arg983))
    defer mbTrans984.Close()
    _, err985 := mbTrans984.WriteString(arg983)
    if err985 != nil {
      Usage()
      return
    }
    factory986 := thrift.NewTJSONProtocolFactory()
    jsProt987 := factory986.GetProtocol(mbTrans984)
    argvalue0 := meta.NewHBReq()
    err988 := argvalue0.Read(context.Background(), jsProt987)
    if err988 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "agentHeartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AgentHeartbeat requires 1 args")
      flag.Usage()
    }
    arg989 := flag.Arg(1)
    mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
    defer mbTrans990.Close()
    _, err991 := mbTrans990.WriteString(arg989)
    if err991 != nil {
      Usage()
      return
    }
    factory992 := thrift.NewTJSONProtocolFactory()
    jsProt993 := factory992.GetProtocol(mbTrans990)
    argvalue0 := meta.NewAgentHBReq()
    err994 := argvalue0.Read(context.Background(), jsProt993)
    if err994 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AgentHeartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg995 := flag.Arg(1)
    mbTrans996 := thrift.NewTMemoryBufferLen(len(arg995))
    defer mbTrans996.Close()
    _, err997 := mbTrans996.WriteString(arg995)
    if err997 != nil {
      Usage()
      return
    }
    factory998 := thrift.NewTJSONProtocolFactory()
    jsProt999 := factory998.GetProtocol(mbTrans996)
    argvalue0 := meta.NewRegConfigReq()
    err1000 := argvalue0.Read(context.Background(), jsProt999)
    if err1000 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg1001 := flag.Arg(1)
    mbTrans1002 := thrift.NewTMemoryBufferLen(len(arg1001))
    defer mbTrans1002.Close()
    _, err1003 := mbTrans1002.WriteString(arg1001)
    if err1003 != nil {
      Usage()
      return
    }
    factory1004 := thrift.NewTJSONProtocolFactory()
    jsProt1005 := factory1004.GetProtocol(mbTrans1002)
    argvalue0 := meta.NewGetConfigReq()
    err1006 := argvalue0.Read(context.Background(), jsProt1005)
    if err1006 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg1007 := flag.Arg(1)
    mbTrans1008 := thrift.NewTMemoryBufferLen(len(arg1007))
    defer mbTrans1008.Close()
    _, err1009 := mbTrans1008.WriteString(arg1007)
    if err1009 != nil {
      Usage()
      return
    }
    factory1010 := thrift.NewTJSONProtocolFactory()
    jsProt1011 := factory1010.GetProtocol(mbTrans1008)
    argvalue0 := meta.NewSetConfigReq()
    err1012 := argvalue0.Read(context.Background(), jsProt1011)
    if err1012 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg1013 := flag.Arg(1)
    mbTrans1014 := thrift.NewTMemoryBufferLen(len(arg1013))
    defer mbTrans1014.Close()
    _, err1015 := mbTrans1014.WriteString(arg1013)
    if err1015 != nil {
      Usage()
      return
    }
    factory1016 := thrift.NewTJSONProtocolFactory()
    jsProt1017 := factory1016.GetProtocol(mbTrans1014)
    argvalue0 := meta.NewListConfigsReq()
    err1018 := argvalue0.Read(context.Background(), jsProt1017)
    if err1018 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSnapshot requires 1 args")
      flag.Usage()
    }
    arg1019 := flag.Arg(1)
    mbTrans1020 := thrift.NewTMemoryBufferLen(len(arg1019))
    defer mbTrans1020.Close()
    _, err1021 := mbTrans1020.WriteString(arg1019)
    if err1021 != nil {
      Usage()
      return
    }
    factory1022 := thrift.NewTJSONProtocolFactory()
    jsProt1023 := factory1022.GetProtocol(mbTrans1020)
    argvalue0 := meta.NewCreateSnapshotReq()
    err1024 := argvalue0.Read(context.Background(), jsProt1023)
    if err1024 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSnapshot requires 1 args")
      flag.Usage()
    }
    arg1025 := flag.Arg(1)
    mbTrans1026 := thrift.NewTMemoryBufferLen(len(arg1025))
    defer mbTrans1026.Close()
    _, err1027 := mbTrans1026.WriteString(arg1025)
    if err1027 != nil {
      Usage()
      return
    }
    factory1028 := thrift.NewTJSONProtocolFactory()
    jsProt1029 := factory1028.GetProtocol(mbTrans1026)
    argvalue0 := meta.NewDropSnapshotReq()
    err1030 := argvalue0.Read(context.Background(), jsProt1029)
    if err1030 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listSnapshots":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
      flag.Usage()
    }
    arg1031 := flag.Arg(1)
    mbTrans1032 := thrift.NewTMemoryBufferLen(len(arg1031))
    defer mbTrans1032.Close()
    _, err1033 := mbTrans1032.WriteString(arg1031)
    if err1033 != nil {
      Usage()
      return
    }
    factory1034 := thrift.NewTJSONProtocolFactory()
    jsProt1035 := factory1034.GetProtocol(mbTrans1032)
    argvalue0 := meta.NewListSnapshotsReq()
    err1036 := argvalue0.Read(context.Background(), jsProt1035)
    if err1036 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSnapshots(context.Background(), value0))
    fmt.Print("\n")
    break
  case "runAdminJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RunAdminJob requires 1 args")
      flag.Usage()
    }
    arg1037 := flag.Arg(1)
    mbTrans1038 := thrift.NewTMemoryBufferLen(len(arg1037))
    defer mbTrans1038.Close()
    _, err1039 := mbTrans1038.WriteString(arg1037)
    if err1039 != nil {
      Usage()
      return
    }
    factory1040 := thrift.NewTJSONProtocolFactory()
    jsProt1041 := factory1040.GetProtocol(mbTrans1038)
    argvalue0 := meta.NewAdminJobReq()
    err1042 := argvalue0.Read(context.Background(), jsProt1041)
    if err1042 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RunAdminJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mergeZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MergeZone requires 1 args")
      flag.Usage()
    }
    arg1043 := flag.Arg(1)
    mbTrans1044 := thrift.NewTMemoryBufferLen(len(arg1043))
    defer mbTrans1044.Close()
    _, err1045 := mbTrans1044.WriteString(arg1043)
    if err1045 != nil {
      Usage()
      return
    }
    factory1046 := thrift.NewTJSONProtocolFactory()
    jsProt1047 := factory1046.GetProtocol(mbTrans1044)
    argvalue0 := meta.NewMergeZoneReq()
    err1048 := argvalue0.Read(context.Background(), jsProt1047)
    if err1048 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MergeZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZone requires 1 args")
      flag.Usage()
    }
    arg1049 := flag.Arg(1)
    mbTrans1050 := thrift.NewTMemoryBufferLen(len(arg1049))
    defer mbTrans1050.Close()
    _, err1051 := mbTrans1050.WriteString(arg1049)
    if err1051 != nil {
      Usage()
      return
    }
    factory1052 := thrift.NewTJSONProtocolFactory()
    jsProt1053 := factory1052.GetProtocol(mbTrans1050)
    argvalue0 := meta.NewDropZoneReq()
    err1054 := argvalue0.Read(context.Background(), jsProt1053)
    if err1054 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "divideZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DivideZone requires 1 args")
      flag.Usage()
    }
    arg1055 := flag.Arg(1)
    mbTrans1056 := thrift.NewTMemoryBufferLen(len(arg1055))
    defer mbTrans1056.Close()
    _, err1057 := mbTrans1056.WriteString(arg1055)
    if err1057 != nil {
      Usage()
      return
    }
    factory1058 := thrift.NewTJSONProtocolFactory()
    jsProt1059 := factory1058.GetProtocol(mbTrans1056)
    argvalue0 := meta.NewDivideZoneReq()
    err1060 := argvalue0.Read(context.Background(), jsProt1059)
    if err1060 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DivideZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "renameZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenameZone requires 1 args")
      flag.Usage()
    }
    arg1061 := flag.Arg(1)
    mbTrans1062 := thrift.NewTMemoryBufferLen(len(arg1061))
    defer mbTrans1062.Close()
    _, err1063 := mbTrans1062.WriteString(arg1061)
    if err1063 != nil {
      Usage()
      return
    }
    factory1064 := thrift.NewTJSONProtocolFactory()
    jsProt1065 := factory1064.GetProtocol(mbTrans1062)
    argvalue0 := meta.NewRenameZoneReq()
    err1066 := argvalue0.Read(context.Background(), jsProt1065)
    if err1066 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RenameZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetZone requires 1 args")
      flag.Usage()
    }
    arg1067 := flag.Arg(1)
    mbTrans1068 := thrift.NewTMemoryBufferLen(len(arg1067))
    defer mbTrans1068.Close()
    _, err1069 := mbTrans1068.WriteString(arg1067)
    if err1069 != nil {
      Usage()
      return
    }
    factory1070 := thrift.NewTJSONProtocolFactory()
    jsProt1071 := factory1070.GetProtocol(mbTrans1068)
    argvalue0 := meta.NewGetZoneReq()
    err1072 := argvalue0.Read(context.Background(), jsProt1071)
    if err1072 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetZone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listZones":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListZones requires 1 args")
      flag.Usage()
    }
    arg1073 := flag.Arg(1)
    mbTrans1074 := thrift.NewTMemoryBufferLen(len(arg1073))
    defer mbTrans1074.Close()
    _, err1075 := mbTrans1074.WriteString(arg1073)
    if err1075 != nil {
      Usage()
      return
    }
    factory1076 := thrift.NewTJSONProtocolFactory()
    jsProt1077 := factory1076.GetProtocol(mbTrans1074)
    argvalue0 := meta.NewListZonesReq()
    err1078 := argvalue0.Read(context.Background(), jsProt1077)
    if err1078 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListZones(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddListener requires 1 args")
      flag.Usage()
    }
    arg1079 := flag.Arg(1)
    mbTrans1080 := thrift.NewTMemoryBufferLen(len(arg1079))
    defer mbTrans1080.Close()
    _, err1081 := mbTrans1080.WriteString(arg1079)
    if err1081 != nil {
      Usage()
      return
    }
    factory1082 := thrift.NewTJSONProtocolFactory()
    jsProt1083 := factory1082.GetProtocol(mbTrans1080)
    argvalue0 := meta.NewAddListenerReq()
    err1084 := argvalue0.Read(context.Background(), jsProt1083)
    if err1084 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddListener(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveListener requires 1 args")
      flag.Usage()
    }
    arg1085 := flag.Arg(1)
    mbTrans1086 := thrift.NewTMemoryBufferLen(len(arg1085))
    defer mbTrans1086.Close()
    _, err1087 := mbTrans1086.WriteString(arg1085)
    if err1087 != nil {
      Usage()
      return
    }
    factory1088 := thrift.NewTJSONProtocolFactory()
    jsProt1089 := factory1088.GetProtocol(mbTrans1086)
    argvalue0 := meta.NewRemoveListenerReq()
    err1090 := argvalue0.Read(context.Background(), jsProt1089)
    if err1090 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveListener(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListListener requires 1 args")
      flag.Usage()
    }
    arg1091 := flag.Arg(1)
    mbTrans1092 := thrift.NewTMemoryBufferLen(len(arg1091))
    defer mbTrans1092.Close()
    _, err1093 := mbTrans1092.WriteString(arg1091)
    if err1093 != nil {
      Usage()
      return
    }
    factory1094 := thrift.NewTJSONProtocolFactory()
    jsProt1095 := factory1094.GetProtocol(mbTrans1092)
    argvalue0 := meta.NewListListenerReq()
    err1096 := argvalue0.Read(context.Background(), jsProt1095)
    if err1096 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListListener(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getStats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStats requires 1 args")
      flag.Usage()
    }
    arg1097 := flag.Arg(1)
    mbTrans1098 := thrift.NewTMemoryBufferLen(len(arg1097))
    defer mbTrans1098.Close()
    _, err1099 := mbTrans1098.WriteString(arg1097)
    if err1099 != nil {
      Usage()
      return
    }
    factory1100 := thrift.NewTJSONProtocolFactory()
    jsProt1101 := factory1100.GetProtocol(mbTrans1098)
    argvalue0 := meta.NewGetStatsReq()
    err1102 := argvalue0.Read(context.Background(), jsProt1101)
    if err1102 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetStats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "signInService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignInService requires 1 args")
      flag.Usage()
    }
    arg1103 := flag.Arg(1)
    mbTrans1104 := thrift.NewTMemoryBufferLen(len(arg1103))
    defer mbTrans1104.Close()
    _, err1105 := mbTrans1104.WriteString(arg1103)
    if err1105 != nil {
      Usage()
      return
    }
    factory1106 := thrift.NewTJSONProtocolFactory()
    jsProt1107 := factory1106.GetProtocol(mbTrans1104)
    argvalue0 := meta.NewSignInServiceReq()
    err1108 := argvalue0.Read(context.Background(), jsProt1107)
    if err1108 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignInService(context.Background(), value0))
    fmt.Print("\n")
    break
  case "signOutService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignOutService requires 1 args")
      flag.Usage()
    }
    arg1109 := flag.Arg(1)
    mbTrans1110 := thrift.NewTMemoryBufferLen(len(arg1109))
    defer mbTrans1110.Close()
    _, err1111 := mbTrans1110.WriteString(arg1109)
    if err1111 != nil {
      Usage()
      return
    }
    factory1112 := thrift.NewTJSONProtocolFactory()
    jsProt1113 := factory1112.GetProtocol(mbTrans1110)
    argvalue0 := meta.NewSignOutServiceReq()
    err1114 := argvalue0.Read(context.Background(), jsProt1113)
    if err1114 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignOutService(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listServiceClients":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListServiceClients requires 1 args")
      flag.Usage()
    }
    arg1115 := flag.Arg(1)
    mbTrans1116 := thrift.NewTMemoryBufferLen(len(arg1115))
    defer mbTrans1116.Close()
    _, err1117 := mbTrans1116.WriteString(arg1115)
    if err1117 != nil {
      Usage()
      return
    }
    factory1118 := thrift.NewTJSONProtocolFactory()
    jsProt1119 := factory1118.GetProtocol(mbTrans1116)
    argvalue0 := meta.NewListServiceClientsReq()
    err1120 := argvalue0.Read(context.Background(), jsProt1119)
    if err1120 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListServiceClients(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createFTIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateFTIndex requires 1 args")
      flag.Usage()
    }
    arg1121 := flag.Arg(1)
    mbTrans1122 := thrift.NewTMemoryBufferLen(len(arg1121))
    defer mbTrans1122.Close()
    _, err1123 := mbTrans1122.WriteString(arg1121)
    if err1123 != nil {
      Usage()
      return
    }
    factory1124 := thrift.NewTJSONProtocolFactory()
    jsProt1125 := factory1124.GetProtocol(mbTrans1122)
    argvalue0 := meta.NewCreateFTIndexReq()
    err1126 := argvalue0.Read(context.Background(), jsProt1125)
    if err1126 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateFTIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "dropFTIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropFTIndex requires 1 args")
      flag.Usage()
    }
    arg1127 := flag.Arg(1)
    mbTrans1128 := thrift.NewTMemoryBufferLen(len(arg1127))
    defer mbTrans1128.Close()
    _, err1129 := mbTrans1128.WriteString(arg1127)
    if err1129 != nil {
      Usage()
      return
    }
    factory1130 := thrift.NewTJSONProtocolFactory()
    jsProt1131 := factory1130.GetProtocol(mbTrans1128)
    argvalue0 := meta.NewDropFTIndexReq()
    err1132 := argvalue0.Read(context.Background(), jsProt1131)
    if err1132 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropFTIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listFTIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListFTIndexes requires 1 args")
      flag.Usage()
    }
    arg1133 := flag.Arg(1)
    mbTrans1134 := thrift.NewTMemoryBufferLen(len(arg1133))
    defer mbTrans1134.Close()
    _, err1135 := mbTrans1134.WriteString(arg1133)
    if err1135 != nil {
      Usage()
      return
    }
    factory1136 := thrift.NewTJSONProtocolFactory()
    jsProt1137 := factory1136.GetProtocol(mbTrans1134)
    argvalue0 := meta.NewListFTIndexesReq()
    err1138 := argvalue0.Read(context.Background(), jsProt1137)
    if err1138 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListFTIndexes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSession requires 1 args")
      flag.Usage()
    }
    arg1139 := flag.Arg(1)
    mbTrans1140 := thrift.NewTMemoryBufferLen(len(arg1139))
    defer mbTrans1140.Close()
    _, err1141 := mbTrans1140.WriteString(arg1139)
    if err1141 != nil {
      Usage()
      return
    }
    factory1142 := thrift.NewTJSONProtocolFactory()
    jsProt1143 := factory1142.GetProtocol(mbTrans1140)
    argvalue0 := meta.NewCreateSessionReq()
    err1144 := argvalue0.Read(context.Background(), jsProt1143)
    if err1144 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSessions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateSessions requires 1 args")
      flag.Usage()
    }
    arg1145 := flag.Arg(1)
    mbTrans1146 := thrift.NewTMemoryBufferLen(len(arg1145))
    defer mbTrans1146.Close()
    _, err1147 := mbTrans1146.WriteString(arg1145)
    if err1147 != nil {
      Usage()
      return
    }
    factory1148 := thrift.NewTJSONProtocolFactory()
    jsProt1149 := factory1148.GetProtocol(mbTrans1146)
    argvalue0 := meta.NewUpdateSessionsReq()
    err1150 := argvalue0.Read(context.Background(), jsProt1149)
    if err1150 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateSessions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listSessions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSessions requires 1 args")
      flag.Usage()
    }
    arg1151 := flag.Arg(1)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil {
      Usage()
      return
    }
    factory1154 := thrift.NewTJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    argvalue0 := meta.NewListSessionsReq()
    err1156 := argvalue0.Read(context.Background(), jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSessions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSession requires 1 args")
      flag.Usage()
    }
    arg1157 := flag.Arg(1)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil {
      Usage()
      return
    }
    factory1160 := thrift.NewTJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    argvalue0 := meta.NewGetSessionReq()
    err1162 := argvalue0.Read(context.Background(), jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveSession requires 1 args")
      flag.Usage()
    }
    arg1163 := flag.Arg(1)
    mbTrans1164 := thrift.NewTMemoryBufferLen(len(arg1163))
    defer mbTrans1164.Close()
    _, err1165 := mbTrans1164.WriteString(arg1163)
    if err1165 != nil {
      Usage()
      return
    }
    factory1166 := thrift.NewTJSONProtocolFactory()
    jsProt1167 := factory1166.GetProtocol(mbTrans1164)
    argvalue0 := meta.NewRemoveSessionReq()
    err1168 := argvalue0.Read(context.Background(), jsProt1167)
    if err1168 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "killQuery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "KillQuery requires 1 args")
      flag.Usage()
    }
    arg1169 := flag.Arg(1)
    mbTrans1170 := thrift.NewTMemoryBufferLen(len(arg1169))
    defer mbTrans1170.Close()
    _, err1171 := mbTrans1170.WriteString(arg1169)
    if err1171 != nil {
      Usage()
      return
    }
    factory1172 := thrift.NewTJSONProtocolFactory()
    jsProt1173 := factory1172.GetProtocol(mbTrans1170)
    argvalue0 := meta.NewKillQueryReq()
    err1174 := argvalue0.Read(context.Background(), jsProt1173)
    if err1174 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.KillQuery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reportTaskFinish":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReportTaskFinish requires 1 args")
      flag.Usage()
    }
    arg1175 := flag.Arg(1)
    mbTrans1176 := thrift.NewTMemoryBufferLen(len(arg1175))
    defer mbTrans1176.Close()
    _, err1177 := mbTrans1176.WriteString(arg1175)
    if err1177 != nil {
      Usage()
      return
    }
    factory1178 := thrift.NewTJSONProtocolFactory()
    jsProt1179 := factory1178.GetProtocol(mbTrans1176)
    argvalue0 := meta.NewReportTaskReq()
    err1180 := argvalue0.Read(context.Background(), jsProt1179)
    if err1180 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReportTaskFinish(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createBackup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateBackup requires 1 args")
      flag.Usage()
    }
    arg1181 := flag.Arg(1)
    mbTrans1182 := thrift.NewTMemoryBufferLen(len(arg1181))
    defer mbTrans1182.Close()
    _, err1183 := mbTrans1182.WriteString(arg1181)
    if err1183 != nil {
      Usage()
      return
    }
    factory1184 := thrift.NewTJSONProtocolFactory()
    jsProt1185 := factory1184.GetProtocol(mbTrans1182)
    argvalue0 := meta.NewCreateBackupReq()
    err1186 := argvalue0.Read(context.Background(), jsProt1185)
    if err1186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateBackup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "restoreMeta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RestoreMeta requires 1 args")
      flag.Usage()
    }
    arg1187 := flag.Arg(1)
    mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
    defer mbTrans1188.Close()
    _, err1189 := mbTrans1188.WriteString(arg1187)
    if err1189 != nil {
      Usage()
      return
    }
    factory1190 := thrift.NewTJSONProtocolFactory()
    jsProt1191 := factory1190.GetProtocol(mbTrans1188)
    argvalue0 := meta.NewRestoreMetaReq()
    err1192 := argvalue0.Read(context.Background(), jsProt1191)
    if err1192 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RestoreMeta(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listCluster":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListCluster requires 1 args")
      flag.Usage()
    }
    arg1193 := flag.Arg(1)
    mbTrans1194 := thrift.NewTMemoryBufferLen(len(arg1193))
    defer mbTrans1194.Close()
    _, err1195 := mbTrans1194.WriteString(arg1193)
    if err1195 != nil {
      Usage()
      return
    }
    factory1196 := thrift.NewTJSONProtocolFactory()
    jsProt1197 := factory1196.GetProtocol(mbTrans1194)
    argvalue0 := meta.NewListClusterInfoReq()
    err1198 := argvalue0.Read(context.Background(), jsProt1197)
    if err1198 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListCluster(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMetaDirInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMetaDirInfo requires 1 args")
      flag.Usage()
    }
    arg1199 := flag.Arg(1)
    mbTrans1200 := thrift.NewTMemoryBufferLen(len(arg1199))
    defer mbTrans1200.Close()
    _, err1201 := mbTrans1200.WriteString(arg1199)
    if err1201 != nil {
      Usage()
      return
    }
    factory1202 := thrift.NewTJSONProtocolFactory()
    jsProt1203 := factory1202.GetProtocol(mbTrans1200)
    argvalue0 := meta.NewGetMetaDirInfoReq()
    err1204 := argvalue0.Read(context.Background(), jsProt1203)
    if err1204 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetMetaDirInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyClientVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyClientVersion requires 1 args")
      flag.Usage()
    }
    arg1205 := flag.Arg(1)
    mbTrans1206 := thrift.NewTMemoryBufferLen(len(arg1205))
    defer mbTrans1206.Close()
    _, err1207 := mbTrans1206.WriteString(arg1205)
    if err1207 != nil {
      Usage()
      return
    }
    factory1208 := thrift.NewTJSONProtocolFactory()
    jsProt1209 := factory1208.GetProtocol(mbTrans1206)
    argvalue0 := meta.NewVerifyClientVersionReq()
    err1210 := argvalue0.Read(context.Background(), jsProt1209)
    if err1210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.VerifyClientVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "saveGraphVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SaveGraphVersion requires 1 args")
      flag.Usage()
    }
    arg1211 := flag.Arg(1)
    mbTrans1212 := thrift.NewTMemoryBufferLen(len(arg1211))
    defer mbTrans1212.Close()
    _, err1213 := mbTrans1212.WriteString(arg1211)
    if err1213 != nil {
      Usage()
      return
    }
    factory1214 := thrift.NewTJSONProtocolFactory()
    jsProt1215 := factory1214.GetProtocol(mbTrans1212)
    argvalue0 := meta.NewSaveGraphVersionReq()
    err1216 := argvalue0.Read(context.Background(), jsProt1215)
    if err1216 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SaveGraphVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSegmentId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSegmentId requires 1 args")
      flag.Usage()
    }
    arg1217 := flag.Arg(1)
    mbTrans1218 := thrift.NewTMemoryBufferLen(len(arg1217))
    defer mbTrans1218.Close()
    _, err1219 := mbTrans1218.WriteString(arg1217)
    if err1219 != nil {
      Usage()
      return
    }
    factory1220 := thrift.NewTJSONProtocolFactory()
    jsProt1221 := factory1220.GetProtocol(mbTrans1218)
    argvalue0 := meta.NewGetSegmentIdReq()
    err1222 := argvalue0.Read(context.Background(), jsProt1221)
    if err1222 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSegmentId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
