// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"
	meta1 "github.com/vesoft-inc/nebula-go/v3/nebula/meta"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var _ = meta1.GoUnusedProtection__
type StorageAdminService interface {
  // Parameters:
  //  - Req
  TransLeader(ctx context.Context, req *TransLeaderReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddPart(ctx context.Context, req *AddPartReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddLearner(ctx context.Context, req *AddLearnerReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  RemovePart(ctx context.Context, req *RemovePartReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  MemberChange(ctx context.Context, req *MemberChangeReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  WaitingForCatchUpData(ctx context.Context, req *CatchUpDataReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  CreateCheckpoint(ctx context.Context, req *CreateCPRequest) (_r *CreateCPResp, err error)
  // Parameters:
  //  - Req
  DropCheckpoint(ctx context.Context, req *DropCPRequest) (_r *DropCPResp, err error)
  // Parameters:
  //  - Req
  BlockingWrites(ctx context.Context, req *BlockingSignRequest) (_r *BlockingSignResp, err error)
  // Parameters:
  //  - Req
  GetLeaderParts(ctx context.Context, req *GetLeaderReq) (_r *GetLeaderPartsResp, err error)
  // Parameters:
  //  - Req
  CheckPeers(ctx context.Context, req *CheckPeersReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddAdminTask(ctx context.Context, req *AddTaskRequest) (_r *AddTaskResp, err error)
  // Parameters:
  //  - Req
  StopAdminTask(ctx context.Context, req *StopTaskRequest) (_r *StopTaskResp, err error)
  // Parameters:
  //  - Req
  ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ClearSpaceResp, err error)
}

type StorageAdminServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Req
  TransLeader(req *TransLeaderReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddPart(req *AddPartReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddLearner(req *AddLearnerReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  RemovePart(req *RemovePartReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  MemberChange(req *MemberChangeReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  WaitingForCatchUpData(req *CatchUpDataReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  CreateCheckpoint(req *CreateCPRequest) (_r *CreateCPResp, err error)
  // Parameters:
  //  - Req
  DropCheckpoint(req *DropCPRequest) (_r *DropCPResp, err error)
  // Parameters:
  //  - Req
  BlockingWrites(req *BlockingSignRequest) (_r *BlockingSignResp, err error)
  // Parameters:
  //  - Req
  GetLeaderParts(req *GetLeaderReq) (_r *GetLeaderPartsResp, err error)
  // Parameters:
  //  - Req
  CheckPeers(req *CheckPeersReq) (_r *AdminExecResp, err error)
  // Parameters:
  //  - Req
  AddAdminTask(req *AddTaskRequest) (_r *AddTaskResp, err error)
  // Parameters:
  //  - Req
  StopAdminTask(req *StopTaskRequest) (_r *StopTaskResp, err error)
  // Parameters:
  //  - Req
  ClearSpace(req *ClearSpaceReq) (_r *ClearSpaceResp, err error)
}

type StorageAdminServiceClient struct {
  StorageAdminServiceClientInterface
  CC thrift.ClientConn
}

func(client *StorageAdminServiceClient) Open() error {
  return client.CC.Open()
}

func(client *StorageAdminServiceClient) Close() error {
  return client.CC.Close()
}

func(client *StorageAdminServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewStorageAdminServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *StorageAdminServiceClient {
  return &StorageAdminServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewStorageAdminServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *StorageAdminServiceClient {
  return &StorageAdminServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewStorageAdminServiceClientProtocol(prot thrift.Protocol) *StorageAdminServiceClient {
  return NewStorageAdminServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) TransLeader(req *TransLeaderReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceTransLeaderArgs{
    Req : req,
  }
  err = p.CC.SendMsg("transLeader", &args, thrift.CALL)
  if err != nil { return }
  return p.recvTransLeader()
}


func (p *StorageAdminServiceClient) recvTransLeader() (value *AdminExecResp, err error) {
  var result StorageAdminServiceTransLeaderResult
  err = p.CC.RecvMsg("transLeader", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddPart(req *AddPartReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceAddPartArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addPart", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddPart()
}


func (p *StorageAdminServiceClient) recvAddPart() (value *AdminExecResp, err error) {
  var result StorageAdminServiceAddPartResult
  err = p.CC.RecvMsg("addPart", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddLearner(req *AddLearnerReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceAddLearnerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addLearner", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddLearner()
}


func (p *StorageAdminServiceClient) recvAddLearner() (value *AdminExecResp, err error) {
  var result StorageAdminServiceAddLearnerResult
  err = p.CC.RecvMsg("addLearner", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) RemovePart(req *RemovePartReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceRemovePartArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removePart", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemovePart()
}


func (p *StorageAdminServiceClient) recvRemovePart() (value *AdminExecResp, err error) {
  var result StorageAdminServiceRemovePartResult
  err = p.CC.RecvMsg("removePart", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) MemberChange(req *MemberChangeReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceMemberChangeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("memberChange", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMemberChange()
}


func (p *StorageAdminServiceClient) recvMemberChange() (value *AdminExecResp, err error) {
  var result StorageAdminServiceMemberChangeResult
  err = p.CC.RecvMsg("memberChange", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) WaitingForCatchUpData(req *CatchUpDataReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceWaitingForCatchUpDataArgs{
    Req : req,
  }
  err = p.CC.SendMsg("waitingForCatchUpData", &args, thrift.CALL)
  if err != nil { return }
  return p.recvWaitingForCatchUpData()
}


func (p *StorageAdminServiceClient) recvWaitingForCatchUpData() (value *AdminExecResp, err error) {
  var result StorageAdminServiceWaitingForCatchUpDataResult
  err = p.CC.RecvMsg("waitingForCatchUpData", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) CreateCheckpoint(req *CreateCPRequest) (_r *CreateCPResp, err error) {
  args := StorageAdminServiceCreateCheckpointArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createCheckpoint", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateCheckpoint()
}


func (p *StorageAdminServiceClient) recvCreateCheckpoint() (value *CreateCPResp, err error) {
  var result StorageAdminServiceCreateCheckpointResult
  err = p.CC.RecvMsg("createCheckpoint", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) DropCheckpoint(req *DropCPRequest) (_r *DropCPResp, err error) {
  args := StorageAdminServiceDropCheckpointArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropCheckpoint", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropCheckpoint()
}


func (p *StorageAdminServiceClient) recvDropCheckpoint() (value *DropCPResp, err error) {
  var result StorageAdminServiceDropCheckpointResult
  err = p.CC.RecvMsg("dropCheckpoint", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) BlockingWrites(req *BlockingSignRequest) (_r *BlockingSignResp, err error) {
  args := StorageAdminServiceBlockingWritesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("blockingWrites", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBlockingWrites()
}


func (p *StorageAdminServiceClient) recvBlockingWrites() (value *BlockingSignResp, err error) {
  var result StorageAdminServiceBlockingWritesResult
  err = p.CC.RecvMsg("blockingWrites", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) GetLeaderParts(req *GetLeaderReq) (_r *GetLeaderPartsResp, err error) {
  args := StorageAdminServiceGetLeaderPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getLeaderParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetLeaderParts()
}


func (p *StorageAdminServiceClient) recvGetLeaderParts() (value *GetLeaderPartsResp, err error) {
  var result StorageAdminServiceGetLeaderPartsResult
  err = p.CC.RecvMsg("getLeaderParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) CheckPeers(req *CheckPeersReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceCheckPeersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("checkPeers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCheckPeers()
}


func (p *StorageAdminServiceClient) recvCheckPeers() (value *AdminExecResp, err error) {
  var result StorageAdminServiceCheckPeersResult
  err = p.CC.RecvMsg("checkPeers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) AddAdminTask(req *AddTaskRequest) (_r *AddTaskResp, err error) {
  args := StorageAdminServiceAddAdminTaskArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addAdminTask", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddAdminTask()
}


func (p *StorageAdminServiceClient) recvAddAdminTask() (value *AddTaskResp, err error) {
  var result StorageAdminServiceAddAdminTaskResult
  err = p.CC.RecvMsg("addAdminTask", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) StopAdminTask(req *StopTaskRequest) (_r *StopTaskResp, err error) {
  args := StorageAdminServiceStopAdminTaskArgs{
    Req : req,
  }
  err = p.CC.SendMsg("stopAdminTask", &args, thrift.CALL)
  if err != nil { return }
  return p.recvStopAdminTask()
}


func (p *StorageAdminServiceClient) recvStopAdminTask() (value *StopTaskResp, err error) {
  var result StorageAdminServiceStopAdminTaskResult
  err = p.CC.RecvMsg("stopAdminTask", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceClient) ClearSpace(req *ClearSpaceReq) (_r *ClearSpaceResp, err error) {
  args := StorageAdminServiceClearSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("clearSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvClearSpace()
}


func (p *StorageAdminServiceClient) recvClearSpace() (value *ClearSpaceResp, err error) {
  var result StorageAdminServiceClearSpaceResult
  err = p.CC.RecvMsg("clearSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type StorageAdminServiceThreadsafeClient struct {
  StorageAdminServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *StorageAdminServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *StorageAdminServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *StorageAdminServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewStorageAdminServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *StorageAdminServiceThreadsafeClient {
  return &StorageAdminServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewStorageAdminServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *StorageAdminServiceThreadsafeClient {
  return &StorageAdminServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewStorageAdminServiceThreadsafeClientProtocol(prot thrift.Protocol) *StorageAdminServiceThreadsafeClient {
  return NewStorageAdminServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) TransLeader(req *TransLeaderReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceTransLeaderArgs{
    Req : req,
  }
  err = p.CC.SendMsg("transLeader", &args, thrift.CALL)
  if err != nil { return }
  return p.recvTransLeader()
}


func (p *StorageAdminServiceThreadsafeClient) recvTransLeader() (value *AdminExecResp, err error) {
  var result StorageAdminServiceTransLeaderResult
  err = p.CC.RecvMsg("transLeader", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) AddPart(req *AddPartReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceAddPartArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addPart", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddPart()
}


func (p *StorageAdminServiceThreadsafeClient) recvAddPart() (value *AdminExecResp, err error) {
  var result StorageAdminServiceAddPartResult
  err = p.CC.RecvMsg("addPart", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) AddLearner(req *AddLearnerReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceAddLearnerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addLearner", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddLearner()
}


func (p *StorageAdminServiceThreadsafeClient) recvAddLearner() (value *AdminExecResp, err error) {
  var result StorageAdminServiceAddLearnerResult
  err = p.CC.RecvMsg("addLearner", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) RemovePart(req *RemovePartReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceRemovePartArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removePart", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemovePart()
}


func (p *StorageAdminServiceThreadsafeClient) recvRemovePart() (value *AdminExecResp, err error) {
  var result StorageAdminServiceRemovePartResult
  err = p.CC.RecvMsg("removePart", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) MemberChange(req *MemberChangeReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceMemberChangeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("memberChange", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMemberChange()
}


func (p *StorageAdminServiceThreadsafeClient) recvMemberChange() (value *AdminExecResp, err error) {
  var result StorageAdminServiceMemberChangeResult
  err = p.CC.RecvMsg("memberChange", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) WaitingForCatchUpData(req *CatchUpDataReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceWaitingForCatchUpDataArgs{
    Req : req,
  }
  err = p.CC.SendMsg("waitingForCatchUpData", &args, thrift.CALL)
  if err != nil { return }
  return p.recvWaitingForCatchUpData()
}


func (p *StorageAdminServiceThreadsafeClient) recvWaitingForCatchUpData() (value *AdminExecResp, err error) {
  var result StorageAdminServiceWaitingForCatchUpDataResult
  err = p.CC.RecvMsg("waitingForCatchUpData", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) CreateCheckpoint(req *CreateCPRequest) (_r *CreateCPResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceCreateCheckpointArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createCheckpoint", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateCheckpoint()
}


func (p *StorageAdminServiceThreadsafeClient) recvCreateCheckpoint() (value *CreateCPResp, err error) {
  var result StorageAdminServiceCreateCheckpointResult
  err = p.CC.RecvMsg("createCheckpoint", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) DropCheckpoint(req *DropCPRequest) (_r *DropCPResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceDropCheckpointArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropCheckpoint", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropCheckpoint()
}


func (p *StorageAdminServiceThreadsafeClient) recvDropCheckpoint() (value *DropCPResp, err error) {
  var result StorageAdminServiceDropCheckpointResult
  err = p.CC.RecvMsg("dropCheckpoint", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) BlockingWrites(req *BlockingSignRequest) (_r *BlockingSignResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceBlockingWritesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("blockingWrites", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBlockingWrites()
}


func (p *StorageAdminServiceThreadsafeClient) recvBlockingWrites() (value *BlockingSignResp, err error) {
  var result StorageAdminServiceBlockingWritesResult
  err = p.CC.RecvMsg("blockingWrites", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) GetLeaderParts(req *GetLeaderReq) (_r *GetLeaderPartsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceGetLeaderPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getLeaderParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetLeaderParts()
}


func (p *StorageAdminServiceThreadsafeClient) recvGetLeaderParts() (value *GetLeaderPartsResp, err error) {
  var result StorageAdminServiceGetLeaderPartsResult
  err = p.CC.RecvMsg("getLeaderParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) CheckPeers(req *CheckPeersReq) (_r *AdminExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceCheckPeersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("checkPeers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCheckPeers()
}


func (p *StorageAdminServiceThreadsafeClient) recvCheckPeers() (value *AdminExecResp, err error) {
  var result StorageAdminServiceCheckPeersResult
  err = p.CC.RecvMsg("checkPeers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) AddAdminTask(req *AddTaskRequest) (_r *AddTaskResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceAddAdminTaskArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addAdminTask", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddAdminTask()
}


func (p *StorageAdminServiceThreadsafeClient) recvAddAdminTask() (value *AddTaskResp, err error) {
  var result StorageAdminServiceAddAdminTaskResult
  err = p.CC.RecvMsg("addAdminTask", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) StopAdminTask(req *StopTaskRequest) (_r *StopTaskResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceStopAdminTaskArgs{
    Req : req,
  }
  err = p.CC.SendMsg("stopAdminTask", &args, thrift.CALL)
  if err != nil { return }
  return p.recvStopAdminTask()
}


func (p *StorageAdminServiceThreadsafeClient) recvStopAdminTask() (value *StopTaskResp, err error) {
  var result StorageAdminServiceStopAdminTaskResult
  err = p.CC.RecvMsg("stopAdminTask", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceThreadsafeClient) ClearSpace(req *ClearSpaceReq) (_r *ClearSpaceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := StorageAdminServiceClearSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("clearSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvClearSpace()
}


func (p *StorageAdminServiceThreadsafeClient) recvClearSpace() (value *ClearSpaceResp, err error) {
  var result StorageAdminServiceClearSpaceResult
  err = p.CC.RecvMsg("clearSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type StorageAdminServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *StorageAdminServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *StorageAdminServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *StorageAdminServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewStorageAdminServiceChannelClient(channel thrift.RequestChannel) *StorageAdminServiceChannelClient {
  return &StorageAdminServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) TransLeader(ctx context.Context, req *TransLeaderReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceTransLeaderArgs{
    Req : req,
  }
  var result StorageAdminServiceTransLeaderResult
  err = p.RequestChannel.Call(ctx, "transLeader", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) AddPart(ctx context.Context, req *AddPartReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceAddPartArgs{
    Req : req,
  }
  var result StorageAdminServiceAddPartResult
  err = p.RequestChannel.Call(ctx, "addPart", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) AddLearner(ctx context.Context, req *AddLearnerReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceAddLearnerArgs{
    Req : req,
  }
  var result StorageAdminServiceAddLearnerResult
  err = p.RequestChannel.Call(ctx, "addLearner", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) RemovePart(ctx context.Context, req *RemovePartReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceRemovePartArgs{
    Req : req,
  }
  var result StorageAdminServiceRemovePartResult
  err = p.RequestChannel.Call(ctx, "removePart", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) MemberChange(ctx context.Context, req *MemberChangeReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceMemberChangeArgs{
    Req : req,
  }
  var result StorageAdminServiceMemberChangeResult
  err = p.RequestChannel.Call(ctx, "memberChange", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) WaitingForCatchUpData(ctx context.Context, req *CatchUpDataReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceWaitingForCatchUpDataArgs{
    Req : req,
  }
  var result StorageAdminServiceWaitingForCatchUpDataResult
  err = p.RequestChannel.Call(ctx, "waitingForCatchUpData", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) CreateCheckpoint(ctx context.Context, req *CreateCPRequest) (_r *CreateCPResp, err error) {
  args := StorageAdminServiceCreateCheckpointArgs{
    Req : req,
  }
  var result StorageAdminServiceCreateCheckpointResult
  err = p.RequestChannel.Call(ctx, "createCheckpoint", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) DropCheckpoint(ctx context.Context, req *DropCPRequest) (_r *DropCPResp, err error) {
  args := StorageAdminServiceDropCheckpointArgs{
    Req : req,
  }
  var result StorageAdminServiceDropCheckpointResult
  err = p.RequestChannel.Call(ctx, "dropCheckpoint", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) BlockingWrites(ctx context.Context, req *BlockingSignRequest) (_r *BlockingSignResp, err error) {
  args := StorageAdminServiceBlockingWritesArgs{
    Req : req,
  }
  var result StorageAdminServiceBlockingWritesResult
  err = p.RequestChannel.Call(ctx, "blockingWrites", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) GetLeaderParts(ctx context.Context, req *GetLeaderReq) (_r *GetLeaderPartsResp, err error) {
  args := StorageAdminServiceGetLeaderPartsArgs{
    Req : req,
  }
  var result StorageAdminServiceGetLeaderPartsResult
  err = p.RequestChannel.Call(ctx, "getLeaderParts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) CheckPeers(ctx context.Context, req *CheckPeersReq) (_r *AdminExecResp, err error) {
  args := StorageAdminServiceCheckPeersArgs{
    Req : req,
  }
  var result StorageAdminServiceCheckPeersResult
  err = p.RequestChannel.Call(ctx, "checkPeers", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) AddAdminTask(ctx context.Context, req *AddTaskRequest) (_r *AddTaskResp, err error) {
  args := StorageAdminServiceAddAdminTaskArgs{
    Req : req,
  }
  var result StorageAdminServiceAddAdminTaskResult
  err = p.RequestChannel.Call(ctx, "addAdminTask", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) StopAdminTask(ctx context.Context, req *StopTaskRequest) (_r *StopTaskResp, err error) {
  args := StorageAdminServiceStopAdminTaskArgs{
    Req : req,
  }
  var result StorageAdminServiceStopAdminTaskResult
  err = p.RequestChannel.Call(ctx, "stopAdminTask", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *StorageAdminServiceChannelClient) ClearSpace(ctx context.Context, req *ClearSpaceReq) (_r *ClearSpaceResp, err error) {
  args := StorageAdminServiceClearSpaceArgs{
    Req : req,
  }
  var result StorageAdminServiceClearSpaceResult
  err = p.RequestChannel.Call(ctx, "clearSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type StorageAdminServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  functionServiceMap map[string]string
  handler StorageAdminService
}

func (p *StorageAdminServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *StorageAdminServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *StorageAdminServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *StorageAdminServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func (p *StorageAdminServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewStorageAdminServiceProcessor(handler StorageAdminService) *StorageAdminServiceProcessor {
  self229 := &StorageAdminServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext), functionServiceMap:make(map[string]string)}
  self229.processorMap["transLeader"] = &storageAdminServiceProcessorTransLeader{handler:handler}
  self229.processorMap["addPart"] = &storageAdminServiceProcessorAddPart{handler:handler}
  self229.processorMap["addLearner"] = &storageAdminServiceProcessorAddLearner{handler:handler}
  self229.processorMap["removePart"] = &storageAdminServiceProcessorRemovePart{handler:handler}
  self229.processorMap["memberChange"] = &storageAdminServiceProcessorMemberChange{handler:handler}
  self229.processorMap["waitingForCatchUpData"] = &storageAdminServiceProcessorWaitingForCatchUpData{handler:handler}
  self229.processorMap["createCheckpoint"] = &storageAdminServiceProcessorCreateCheckpoint{handler:handler}
  self229.processorMap["dropCheckpoint"] = &storageAdminServiceProcessorDropCheckpoint{handler:handler}
  self229.processorMap["blockingWrites"] = &storageAdminServiceProcessorBlockingWrites{handler:handler}
  self229.processorMap["getLeaderParts"] = &storageAdminServiceProcessorGetLeaderParts{handler:handler}
  self229.processorMap["checkPeers"] = &storageAdminServiceProcessorCheckPeers{handler:handler}
  self229.processorMap["addAdminTask"] = &storageAdminServiceProcessorAddAdminTask{handler:handler}
  self229.processorMap["stopAdminTask"] = &storageAdminServiceProcessorStopAdminTask{handler:handler}
  self229.processorMap["clearSpace"] = &storageAdminServiceProcessorClearSpace{handler:handler}
  self229.functionServiceMap["transLeader"] = "StorageAdminService"
  self229.functionServiceMap["addPart"] = "StorageAdminService"
  self229.functionServiceMap["addLearner"] = "StorageAdminService"
  self229.functionServiceMap["removePart"] = "StorageAdminService"
  self229.functionServiceMap["memberChange"] = "StorageAdminService"
  self229.functionServiceMap["waitingForCatchUpData"] = "StorageAdminService"
  self229.functionServiceMap["createCheckpoint"] = "StorageAdminService"
  self229.functionServiceMap["dropCheckpoint"] = "StorageAdminService"
  self229.functionServiceMap["blockingWrites"] = "StorageAdminService"
  self229.functionServiceMap["getLeaderParts"] = "StorageAdminService"
  self229.functionServiceMap["checkPeers"] = "StorageAdminService"
  self229.functionServiceMap["addAdminTask"] = "StorageAdminService"
  self229.functionServiceMap["stopAdminTask"] = "StorageAdminService"
  self229.functionServiceMap["clearSpace"] = "StorageAdminService"
  return self229
}

type storageAdminServiceProcessorTransLeader struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceTransLeaderResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorTransLeader) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceTransLeaderArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorTransLeader) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("transLeader", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorTransLeader) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceTransLeaderArgs)
  var result StorageAdminServiceTransLeaderResult
  if retval, err := p.handler.TransLeader(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing transLeader: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorAddPart struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceAddPartResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorAddPart) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceAddPartArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorAddPart) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addPart", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorAddPart) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceAddPartArgs)
  var result StorageAdminServiceAddPartResult
  if retval, err := p.handler.AddPart(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addPart: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorAddLearner struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceAddLearnerResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorAddLearner) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceAddLearnerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorAddLearner) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addLearner", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorAddLearner) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceAddLearnerArgs)
  var result StorageAdminServiceAddLearnerResult
  if retval, err := p.handler.AddLearner(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addLearner: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorRemovePart struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceRemovePartResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorRemovePart) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceRemovePartArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorRemovePart) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removePart", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorRemovePart) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceRemovePartArgs)
  var result StorageAdminServiceRemovePartResult
  if retval, err := p.handler.RemovePart(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removePart: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorMemberChange struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceMemberChangeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorMemberChange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceMemberChangeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorMemberChange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("memberChange", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorMemberChange) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceMemberChangeArgs)
  var result StorageAdminServiceMemberChangeResult
  if retval, err := p.handler.MemberChange(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing memberChange: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorWaitingForCatchUpData struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorWaitingForCatchUpData) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceWaitingForCatchUpDataArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorWaitingForCatchUpData) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("waitingForCatchUpData", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorWaitingForCatchUpData) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceWaitingForCatchUpDataArgs)
  var result StorageAdminServiceWaitingForCatchUpDataResult
  if retval, err := p.handler.WaitingForCatchUpData(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing waitingForCatchUpData: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorCreateCheckpoint struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceCreateCheckpointResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorCreateCheckpoint) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceCreateCheckpointArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorCreateCheckpoint) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createCheckpoint", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorCreateCheckpoint) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceCreateCheckpointArgs)
  var result StorageAdminServiceCreateCheckpointResult
  if retval, err := p.handler.CreateCheckpoint(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createCheckpoint: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorDropCheckpoint struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceDropCheckpointResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorDropCheckpoint) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceDropCheckpointArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorDropCheckpoint) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropCheckpoint", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorDropCheckpoint) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceDropCheckpointArgs)
  var result StorageAdminServiceDropCheckpointResult
  if retval, err := p.handler.DropCheckpoint(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropCheckpoint: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorBlockingWrites struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceBlockingWritesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorBlockingWrites) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceBlockingWritesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorBlockingWrites) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("blockingWrites", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorBlockingWrites) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceBlockingWritesArgs)
  var result StorageAdminServiceBlockingWritesResult
  if retval, err := p.handler.BlockingWrites(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockingWrites: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorGetLeaderParts struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceGetLeaderPartsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorGetLeaderParts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceGetLeaderPartsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorGetLeaderParts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getLeaderParts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorGetLeaderParts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceGetLeaderPartsArgs)
  var result StorageAdminServiceGetLeaderPartsResult
  if retval, err := p.handler.GetLeaderParts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLeaderParts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorCheckPeers struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceCheckPeersResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorCheckPeers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceCheckPeersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorCheckPeers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("checkPeers", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorCheckPeers) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceCheckPeersArgs)
  var result StorageAdminServiceCheckPeersResult
  if retval, err := p.handler.CheckPeers(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPeers: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorAddAdminTask struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceAddAdminTaskResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorAddAdminTask) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceAddAdminTaskArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorAddAdminTask) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addAdminTask", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorAddAdminTask) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceAddAdminTaskArgs)
  var result StorageAdminServiceAddAdminTaskResult
  if retval, err := p.handler.AddAdminTask(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addAdminTask: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorStopAdminTask struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceStopAdminTaskResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorStopAdminTask) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceStopAdminTaskArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorStopAdminTask) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("stopAdminTask", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorStopAdminTask) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceStopAdminTaskArgs)
  var result StorageAdminServiceStopAdminTaskResult
  if retval, err := p.handler.StopAdminTask(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stopAdminTask: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type storageAdminServiceProcessorClearSpace struct {
  handler StorageAdminService
}

func (p *StorageAdminServiceClearSpaceResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *storageAdminServiceProcessorClearSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := StorageAdminServiceClearSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *storageAdminServiceProcessorClearSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("clearSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *storageAdminServiceProcessorClearSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*StorageAdminServiceClearSpaceArgs)
  var result StorageAdminServiceClearSpaceResult
  if retval, err := p.handler.ClearSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type StorageAdminServiceTransLeaderArgs struct {
  thrift.IRequest
  Req *TransLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceTransLeaderArgs() *StorageAdminServiceTransLeaderArgs {
  return &StorageAdminServiceTransLeaderArgs{
    Req: NewTransLeaderReq(),
  }
}

var StorageAdminServiceTransLeaderArgs_Req_DEFAULT *TransLeaderReq
func (p *StorageAdminServiceTransLeaderArgs) GetReq() *TransLeaderReq {
  if !p.IsSetReq() {
    return StorageAdminServiceTransLeaderArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceTransLeaderArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceTransLeaderArgsBuilder struct {
  obj *StorageAdminServiceTransLeaderArgs
}

func NewStorageAdminServiceTransLeaderArgsBuilder() *StorageAdminServiceTransLeaderArgsBuilder{
  return &StorageAdminServiceTransLeaderArgsBuilder{
    obj: NewStorageAdminServiceTransLeaderArgs(),
  }
}

func (p StorageAdminServiceTransLeaderArgsBuilder) Emit() *StorageAdminServiceTransLeaderArgs{
  return &StorageAdminServiceTransLeaderArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceTransLeaderArgsBuilder) Req(req *TransLeaderReq) *StorageAdminServiceTransLeaderArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceTransLeaderArgs) SetReq(req *TransLeaderReq) *StorageAdminServiceTransLeaderArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceTransLeaderArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewTransLeaderReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("transLeader_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceTransLeaderArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceTransLeaderArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceTransLeaderArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceTransLeaderResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceTransLeaderResult() *StorageAdminServiceTransLeaderResult {
  return &StorageAdminServiceTransLeaderResult{}
}

var StorageAdminServiceTransLeaderResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceTransLeaderResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceTransLeaderResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceTransLeaderResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceTransLeaderResultBuilder struct {
  obj *StorageAdminServiceTransLeaderResult
}

func NewStorageAdminServiceTransLeaderResultBuilder() *StorageAdminServiceTransLeaderResultBuilder{
  return &StorageAdminServiceTransLeaderResultBuilder{
    obj: NewStorageAdminServiceTransLeaderResult(),
  }
}

func (p StorageAdminServiceTransLeaderResultBuilder) Emit() *StorageAdminServiceTransLeaderResult{
  return &StorageAdminServiceTransLeaderResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceTransLeaderResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceTransLeaderResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceTransLeaderResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceTransLeaderResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceTransLeaderResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("transLeader_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceTransLeaderResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceTransLeaderResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceTransLeaderResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceAddPartArgs struct {
  thrift.IRequest
  Req *AddPartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddPartArgs() *StorageAdminServiceAddPartArgs {
  return &StorageAdminServiceAddPartArgs{
    Req: NewAddPartReq(),
  }
}

var StorageAdminServiceAddPartArgs_Req_DEFAULT *AddPartReq
func (p *StorageAdminServiceAddPartArgs) GetReq() *AddPartReq {
  if !p.IsSetReq() {
    return StorageAdminServiceAddPartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddPartArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceAddPartArgsBuilder struct {
  obj *StorageAdminServiceAddPartArgs
}

func NewStorageAdminServiceAddPartArgsBuilder() *StorageAdminServiceAddPartArgsBuilder{
  return &StorageAdminServiceAddPartArgsBuilder{
    obj: NewStorageAdminServiceAddPartArgs(),
  }
}

func (p StorageAdminServiceAddPartArgsBuilder) Emit() *StorageAdminServiceAddPartArgs{
  return &StorageAdminServiceAddPartArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceAddPartArgsBuilder) Req(req *AddPartReq) *StorageAdminServiceAddPartArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceAddPartArgs) SetReq(req *AddPartReq) *StorageAdminServiceAddPartArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceAddPartArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddPartReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addPart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddPartArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddPartArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceAddPartArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceAddPartResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddPartResult() *StorageAdminServiceAddPartResult {
  return &StorageAdminServiceAddPartResult{}
}

var StorageAdminServiceAddPartResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceAddPartResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddPartResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddPartResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceAddPartResultBuilder struct {
  obj *StorageAdminServiceAddPartResult
}

func NewStorageAdminServiceAddPartResultBuilder() *StorageAdminServiceAddPartResultBuilder{
  return &StorageAdminServiceAddPartResultBuilder{
    obj: NewStorageAdminServiceAddPartResult(),
  }
}

func (p StorageAdminServiceAddPartResultBuilder) Emit() *StorageAdminServiceAddPartResult{
  return &StorageAdminServiceAddPartResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceAddPartResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceAddPartResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceAddPartResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceAddPartResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceAddPartResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddPartResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addPart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddPartResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddPartResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceAddPartResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceAddLearnerArgs struct {
  thrift.IRequest
  Req *AddLearnerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddLearnerArgs() *StorageAdminServiceAddLearnerArgs {
  return &StorageAdminServiceAddLearnerArgs{
    Req: NewAddLearnerReq(),
  }
}

var StorageAdminServiceAddLearnerArgs_Req_DEFAULT *AddLearnerReq
func (p *StorageAdminServiceAddLearnerArgs) GetReq() *AddLearnerReq {
  if !p.IsSetReq() {
    return StorageAdminServiceAddLearnerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddLearnerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceAddLearnerArgsBuilder struct {
  obj *StorageAdminServiceAddLearnerArgs
}

func NewStorageAdminServiceAddLearnerArgsBuilder() *StorageAdminServiceAddLearnerArgsBuilder{
  return &StorageAdminServiceAddLearnerArgsBuilder{
    obj: NewStorageAdminServiceAddLearnerArgs(),
  }
}

func (p StorageAdminServiceAddLearnerArgsBuilder) Emit() *StorageAdminServiceAddLearnerArgs{
  return &StorageAdminServiceAddLearnerArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceAddLearnerArgsBuilder) Req(req *AddLearnerReq) *StorageAdminServiceAddLearnerArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceAddLearnerArgs) SetReq(req *AddLearnerReq) *StorageAdminServiceAddLearnerArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceAddLearnerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddLearnerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addLearner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddLearnerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddLearnerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceAddLearnerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceAddLearnerResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddLearnerResult() *StorageAdminServiceAddLearnerResult {
  return &StorageAdminServiceAddLearnerResult{}
}

var StorageAdminServiceAddLearnerResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceAddLearnerResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddLearnerResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddLearnerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceAddLearnerResultBuilder struct {
  obj *StorageAdminServiceAddLearnerResult
}

func NewStorageAdminServiceAddLearnerResultBuilder() *StorageAdminServiceAddLearnerResultBuilder{
  return &StorageAdminServiceAddLearnerResultBuilder{
    obj: NewStorageAdminServiceAddLearnerResult(),
  }
}

func (p StorageAdminServiceAddLearnerResultBuilder) Emit() *StorageAdminServiceAddLearnerResult{
  return &StorageAdminServiceAddLearnerResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceAddLearnerResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceAddLearnerResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceAddLearnerResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceAddLearnerResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceAddLearnerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addLearner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddLearnerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddLearnerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceAddLearnerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceRemovePartArgs struct {
  thrift.IRequest
  Req *RemovePartReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceRemovePartArgs() *StorageAdminServiceRemovePartArgs {
  return &StorageAdminServiceRemovePartArgs{
    Req: NewRemovePartReq(),
  }
}

var StorageAdminServiceRemovePartArgs_Req_DEFAULT *RemovePartReq
func (p *StorageAdminServiceRemovePartArgs) GetReq() *RemovePartReq {
  if !p.IsSetReq() {
    return StorageAdminServiceRemovePartArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceRemovePartArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceRemovePartArgsBuilder struct {
  obj *StorageAdminServiceRemovePartArgs
}

func NewStorageAdminServiceRemovePartArgsBuilder() *StorageAdminServiceRemovePartArgsBuilder{
  return &StorageAdminServiceRemovePartArgsBuilder{
    obj: NewStorageAdminServiceRemovePartArgs(),
  }
}

func (p StorageAdminServiceRemovePartArgsBuilder) Emit() *StorageAdminServiceRemovePartArgs{
  return &StorageAdminServiceRemovePartArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceRemovePartArgsBuilder) Req(req *RemovePartReq) *StorageAdminServiceRemovePartArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceRemovePartArgs) SetReq(req *RemovePartReq) *StorageAdminServiceRemovePartArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceRemovePartArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemovePartReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removePart_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceRemovePartArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceRemovePartArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceRemovePartArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceRemovePartResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceRemovePartResult() *StorageAdminServiceRemovePartResult {
  return &StorageAdminServiceRemovePartResult{}
}

var StorageAdminServiceRemovePartResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceRemovePartResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceRemovePartResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceRemovePartResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceRemovePartResultBuilder struct {
  obj *StorageAdminServiceRemovePartResult
}

func NewStorageAdminServiceRemovePartResultBuilder() *StorageAdminServiceRemovePartResultBuilder{
  return &StorageAdminServiceRemovePartResultBuilder{
    obj: NewStorageAdminServiceRemovePartResult(),
  }
}

func (p StorageAdminServiceRemovePartResultBuilder) Emit() *StorageAdminServiceRemovePartResult{
  return &StorageAdminServiceRemovePartResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceRemovePartResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceRemovePartResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceRemovePartResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceRemovePartResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceRemovePartResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceRemovePartResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removePart_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceRemovePartResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceRemovePartResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceRemovePartResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceMemberChangeArgs struct {
  thrift.IRequest
  Req *MemberChangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceMemberChangeArgs() *StorageAdminServiceMemberChangeArgs {
  return &StorageAdminServiceMemberChangeArgs{
    Req: NewMemberChangeReq(),
  }
}

var StorageAdminServiceMemberChangeArgs_Req_DEFAULT *MemberChangeReq
func (p *StorageAdminServiceMemberChangeArgs) GetReq() *MemberChangeReq {
  if !p.IsSetReq() {
    return StorageAdminServiceMemberChangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceMemberChangeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceMemberChangeArgsBuilder struct {
  obj *StorageAdminServiceMemberChangeArgs
}

func NewStorageAdminServiceMemberChangeArgsBuilder() *StorageAdminServiceMemberChangeArgsBuilder{
  return &StorageAdminServiceMemberChangeArgsBuilder{
    obj: NewStorageAdminServiceMemberChangeArgs(),
  }
}

func (p StorageAdminServiceMemberChangeArgsBuilder) Emit() *StorageAdminServiceMemberChangeArgs{
  return &StorageAdminServiceMemberChangeArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceMemberChangeArgsBuilder) Req(req *MemberChangeReq) *StorageAdminServiceMemberChangeArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceMemberChangeArgs) SetReq(req *MemberChangeReq) *StorageAdminServiceMemberChangeArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceMemberChangeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMemberChangeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("memberChange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceMemberChangeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceMemberChangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceMemberChangeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceMemberChangeResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceMemberChangeResult() *StorageAdminServiceMemberChangeResult {
  return &StorageAdminServiceMemberChangeResult{}
}

var StorageAdminServiceMemberChangeResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceMemberChangeResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceMemberChangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceMemberChangeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceMemberChangeResultBuilder struct {
  obj *StorageAdminServiceMemberChangeResult
}

func NewStorageAdminServiceMemberChangeResultBuilder() *StorageAdminServiceMemberChangeResultBuilder{
  return &StorageAdminServiceMemberChangeResultBuilder{
    obj: NewStorageAdminServiceMemberChangeResult(),
  }
}

func (p StorageAdminServiceMemberChangeResultBuilder) Emit() *StorageAdminServiceMemberChangeResult{
  return &StorageAdminServiceMemberChangeResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceMemberChangeResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceMemberChangeResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceMemberChangeResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceMemberChangeResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceMemberChangeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("memberChange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceMemberChangeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceMemberChangeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceMemberChangeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceWaitingForCatchUpDataArgs struct {
  thrift.IRequest
  Req *CatchUpDataReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceWaitingForCatchUpDataArgs() *StorageAdminServiceWaitingForCatchUpDataArgs {
  return &StorageAdminServiceWaitingForCatchUpDataArgs{
    Req: NewCatchUpDataReq(),
  }
}

var StorageAdminServiceWaitingForCatchUpDataArgs_Req_DEFAULT *CatchUpDataReq
func (p *StorageAdminServiceWaitingForCatchUpDataArgs) GetReq() *CatchUpDataReq {
  if !p.IsSetReq() {
    return StorageAdminServiceWaitingForCatchUpDataArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceWaitingForCatchUpDataArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceWaitingForCatchUpDataArgsBuilder struct {
  obj *StorageAdminServiceWaitingForCatchUpDataArgs
}

func NewStorageAdminServiceWaitingForCatchUpDataArgsBuilder() *StorageAdminServiceWaitingForCatchUpDataArgsBuilder{
  return &StorageAdminServiceWaitingForCatchUpDataArgsBuilder{
    obj: NewStorageAdminServiceWaitingForCatchUpDataArgs(),
  }
}

func (p StorageAdminServiceWaitingForCatchUpDataArgsBuilder) Emit() *StorageAdminServiceWaitingForCatchUpDataArgs{
  return &StorageAdminServiceWaitingForCatchUpDataArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceWaitingForCatchUpDataArgsBuilder) Req(req *CatchUpDataReq) *StorageAdminServiceWaitingForCatchUpDataArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceWaitingForCatchUpDataArgs) SetReq(req *CatchUpDataReq) *StorageAdminServiceWaitingForCatchUpDataArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCatchUpDataReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("waitingForCatchUpData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceWaitingForCatchUpDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceWaitingForCatchUpDataArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceWaitingForCatchUpDataResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceWaitingForCatchUpDataResult() *StorageAdminServiceWaitingForCatchUpDataResult {
  return &StorageAdminServiceWaitingForCatchUpDataResult{}
}

var StorageAdminServiceWaitingForCatchUpDataResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceWaitingForCatchUpDataResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceWaitingForCatchUpDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceWaitingForCatchUpDataResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceWaitingForCatchUpDataResultBuilder struct {
  obj *StorageAdminServiceWaitingForCatchUpDataResult
}

func NewStorageAdminServiceWaitingForCatchUpDataResultBuilder() *StorageAdminServiceWaitingForCatchUpDataResultBuilder{
  return &StorageAdminServiceWaitingForCatchUpDataResultBuilder{
    obj: NewStorageAdminServiceWaitingForCatchUpDataResult(),
  }
}

func (p StorageAdminServiceWaitingForCatchUpDataResultBuilder) Emit() *StorageAdminServiceWaitingForCatchUpDataResult{
  return &StorageAdminServiceWaitingForCatchUpDataResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceWaitingForCatchUpDataResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceWaitingForCatchUpDataResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceWaitingForCatchUpDataResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceWaitingForCatchUpDataResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("waitingForCatchUpData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceWaitingForCatchUpDataResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceWaitingForCatchUpDataResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceCreateCheckpointArgs struct {
  thrift.IRequest
  Req *CreateCPRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceCreateCheckpointArgs() *StorageAdminServiceCreateCheckpointArgs {
  return &StorageAdminServiceCreateCheckpointArgs{
    Req: NewCreateCPRequest(),
  }
}

var StorageAdminServiceCreateCheckpointArgs_Req_DEFAULT *CreateCPRequest
func (p *StorageAdminServiceCreateCheckpointArgs) GetReq() *CreateCPRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceCreateCheckpointArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceCreateCheckpointArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceCreateCheckpointArgsBuilder struct {
  obj *StorageAdminServiceCreateCheckpointArgs
}

func NewStorageAdminServiceCreateCheckpointArgsBuilder() *StorageAdminServiceCreateCheckpointArgsBuilder{
  return &StorageAdminServiceCreateCheckpointArgsBuilder{
    obj: NewStorageAdminServiceCreateCheckpointArgs(),
  }
}

func (p StorageAdminServiceCreateCheckpointArgsBuilder) Emit() *StorageAdminServiceCreateCheckpointArgs{
  return &StorageAdminServiceCreateCheckpointArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceCreateCheckpointArgsBuilder) Req(req *CreateCPRequest) *StorageAdminServiceCreateCheckpointArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceCreateCheckpointArgs) SetReq(req *CreateCPRequest) *StorageAdminServiceCreateCheckpointArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceCreateCheckpointArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateCPRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createCheckpoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceCreateCheckpointArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceCreateCheckpointArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceCreateCheckpointResult struct {
  thrift.IResponse
  Success *CreateCPResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceCreateCheckpointResult() *StorageAdminServiceCreateCheckpointResult {
  return &StorageAdminServiceCreateCheckpointResult{}
}

var StorageAdminServiceCreateCheckpointResult_Success_DEFAULT *CreateCPResp
func (p *StorageAdminServiceCreateCheckpointResult) GetSuccess() *CreateCPResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceCreateCheckpointResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceCreateCheckpointResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceCreateCheckpointResultBuilder struct {
  obj *StorageAdminServiceCreateCheckpointResult
}

func NewStorageAdminServiceCreateCheckpointResultBuilder() *StorageAdminServiceCreateCheckpointResultBuilder{
  return &StorageAdminServiceCreateCheckpointResultBuilder{
    obj: NewStorageAdminServiceCreateCheckpointResult(),
  }
}

func (p StorageAdminServiceCreateCheckpointResultBuilder) Emit() *StorageAdminServiceCreateCheckpointResult{
  return &StorageAdminServiceCreateCheckpointResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceCreateCheckpointResultBuilder) Success(success *CreateCPResp) *StorageAdminServiceCreateCheckpointResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceCreateCheckpointResult) SetSuccess(success *CreateCPResp) *StorageAdminServiceCreateCheckpointResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceCreateCheckpointResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateCPResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createCheckpoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCreateCheckpointResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceCreateCheckpointResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceCreateCheckpointResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceDropCheckpointArgs struct {
  thrift.IRequest
  Req *DropCPRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceDropCheckpointArgs() *StorageAdminServiceDropCheckpointArgs {
  return &StorageAdminServiceDropCheckpointArgs{
    Req: NewDropCPRequest(),
  }
}

var StorageAdminServiceDropCheckpointArgs_Req_DEFAULT *DropCPRequest
func (p *StorageAdminServiceDropCheckpointArgs) GetReq() *DropCPRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceDropCheckpointArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceDropCheckpointArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceDropCheckpointArgsBuilder struct {
  obj *StorageAdminServiceDropCheckpointArgs
}

func NewStorageAdminServiceDropCheckpointArgsBuilder() *StorageAdminServiceDropCheckpointArgsBuilder{
  return &StorageAdminServiceDropCheckpointArgsBuilder{
    obj: NewStorageAdminServiceDropCheckpointArgs(),
  }
}

func (p StorageAdminServiceDropCheckpointArgsBuilder) Emit() *StorageAdminServiceDropCheckpointArgs{
  return &StorageAdminServiceDropCheckpointArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceDropCheckpointArgsBuilder) Req(req *DropCPRequest) *StorageAdminServiceDropCheckpointArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceDropCheckpointArgs) SetReq(req *DropCPRequest) *StorageAdminServiceDropCheckpointArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceDropCheckpointArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropCPRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropCheckpoint_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceDropCheckpointArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceDropCheckpointArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceDropCheckpointArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceDropCheckpointResult struct {
  thrift.IResponse
  Success *DropCPResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceDropCheckpointResult() *StorageAdminServiceDropCheckpointResult {
  return &StorageAdminServiceDropCheckpointResult{}
}

var StorageAdminServiceDropCheckpointResult_Success_DEFAULT *DropCPResp
func (p *StorageAdminServiceDropCheckpointResult) GetSuccess() *DropCPResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceDropCheckpointResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceDropCheckpointResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceDropCheckpointResultBuilder struct {
  obj *StorageAdminServiceDropCheckpointResult
}

func NewStorageAdminServiceDropCheckpointResultBuilder() *StorageAdminServiceDropCheckpointResultBuilder{
  return &StorageAdminServiceDropCheckpointResultBuilder{
    obj: NewStorageAdminServiceDropCheckpointResult(),
  }
}

func (p StorageAdminServiceDropCheckpointResultBuilder) Emit() *StorageAdminServiceDropCheckpointResult{
  return &StorageAdminServiceDropCheckpointResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceDropCheckpointResultBuilder) Success(success *DropCPResp) *StorageAdminServiceDropCheckpointResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceDropCheckpointResult) SetSuccess(success *DropCPResp) *StorageAdminServiceDropCheckpointResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceDropCheckpointResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewDropCPResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropCheckpoint_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceDropCheckpointResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceDropCheckpointResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceDropCheckpointResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceBlockingWritesArgs struct {
  thrift.IRequest
  Req *BlockingSignRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceBlockingWritesArgs() *StorageAdminServiceBlockingWritesArgs {
  return &StorageAdminServiceBlockingWritesArgs{
    Req: NewBlockingSignRequest(),
  }
}

var StorageAdminServiceBlockingWritesArgs_Req_DEFAULT *BlockingSignRequest
func (p *StorageAdminServiceBlockingWritesArgs) GetReq() *BlockingSignRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceBlockingWritesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceBlockingWritesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceBlockingWritesArgsBuilder struct {
  obj *StorageAdminServiceBlockingWritesArgs
}

func NewStorageAdminServiceBlockingWritesArgsBuilder() *StorageAdminServiceBlockingWritesArgsBuilder{
  return &StorageAdminServiceBlockingWritesArgsBuilder{
    obj: NewStorageAdminServiceBlockingWritesArgs(),
  }
}

func (p StorageAdminServiceBlockingWritesArgsBuilder) Emit() *StorageAdminServiceBlockingWritesArgs{
  return &StorageAdminServiceBlockingWritesArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceBlockingWritesArgsBuilder) Req(req *BlockingSignRequest) *StorageAdminServiceBlockingWritesArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceBlockingWritesArgs) SetReq(req *BlockingSignRequest) *StorageAdminServiceBlockingWritesArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceBlockingWritesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewBlockingSignRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("blockingWrites_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceBlockingWritesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceBlockingWritesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceBlockingWritesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceBlockingWritesResult struct {
  thrift.IResponse
  Success *BlockingSignResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceBlockingWritesResult() *StorageAdminServiceBlockingWritesResult {
  return &StorageAdminServiceBlockingWritesResult{}
}

var StorageAdminServiceBlockingWritesResult_Success_DEFAULT *BlockingSignResp
func (p *StorageAdminServiceBlockingWritesResult) GetSuccess() *BlockingSignResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceBlockingWritesResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceBlockingWritesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceBlockingWritesResultBuilder struct {
  obj *StorageAdminServiceBlockingWritesResult
}

func NewStorageAdminServiceBlockingWritesResultBuilder() *StorageAdminServiceBlockingWritesResultBuilder{
  return &StorageAdminServiceBlockingWritesResultBuilder{
    obj: NewStorageAdminServiceBlockingWritesResult(),
  }
}

func (p StorageAdminServiceBlockingWritesResultBuilder) Emit() *StorageAdminServiceBlockingWritesResult{
  return &StorageAdminServiceBlockingWritesResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceBlockingWritesResultBuilder) Success(success *BlockingSignResp) *StorageAdminServiceBlockingWritesResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceBlockingWritesResult) SetSuccess(success *BlockingSignResp) *StorageAdminServiceBlockingWritesResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceBlockingWritesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewBlockingSignResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("blockingWrites_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceBlockingWritesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceBlockingWritesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceBlockingWritesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceGetLeaderPartsArgs struct {
  thrift.IRequest
  Req *GetLeaderReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceGetLeaderPartsArgs() *StorageAdminServiceGetLeaderPartsArgs {
  return &StorageAdminServiceGetLeaderPartsArgs{
    Req: NewGetLeaderReq(),
  }
}

var StorageAdminServiceGetLeaderPartsArgs_Req_DEFAULT *GetLeaderReq
func (p *StorageAdminServiceGetLeaderPartsArgs) GetReq() *GetLeaderReq {
  if !p.IsSetReq() {
    return StorageAdminServiceGetLeaderPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceGetLeaderPartsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceGetLeaderPartsArgsBuilder struct {
  obj *StorageAdminServiceGetLeaderPartsArgs
}

func NewStorageAdminServiceGetLeaderPartsArgsBuilder() *StorageAdminServiceGetLeaderPartsArgsBuilder{
  return &StorageAdminServiceGetLeaderPartsArgsBuilder{
    obj: NewStorageAdminServiceGetLeaderPartsArgs(),
  }
}

func (p StorageAdminServiceGetLeaderPartsArgsBuilder) Emit() *StorageAdminServiceGetLeaderPartsArgs{
  return &StorageAdminServiceGetLeaderPartsArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceGetLeaderPartsArgsBuilder) Req(req *GetLeaderReq) *StorageAdminServiceGetLeaderPartsArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceGetLeaderPartsArgs) SetReq(req *GetLeaderReq) *StorageAdminServiceGetLeaderPartsArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceGetLeaderPartsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetLeaderReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getLeaderParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceGetLeaderPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceGetLeaderPartsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceGetLeaderPartsResult struct {
  thrift.IResponse
  Success *GetLeaderPartsResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceGetLeaderPartsResult() *StorageAdminServiceGetLeaderPartsResult {
  return &StorageAdminServiceGetLeaderPartsResult{}
}

var StorageAdminServiceGetLeaderPartsResult_Success_DEFAULT *GetLeaderPartsResp
func (p *StorageAdminServiceGetLeaderPartsResult) GetSuccess() *GetLeaderPartsResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceGetLeaderPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceGetLeaderPartsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceGetLeaderPartsResultBuilder struct {
  obj *StorageAdminServiceGetLeaderPartsResult
}

func NewStorageAdminServiceGetLeaderPartsResultBuilder() *StorageAdminServiceGetLeaderPartsResultBuilder{
  return &StorageAdminServiceGetLeaderPartsResultBuilder{
    obj: NewStorageAdminServiceGetLeaderPartsResult(),
  }
}

func (p StorageAdminServiceGetLeaderPartsResultBuilder) Emit() *StorageAdminServiceGetLeaderPartsResult{
  return &StorageAdminServiceGetLeaderPartsResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceGetLeaderPartsResultBuilder) Success(success *GetLeaderPartsResp) *StorageAdminServiceGetLeaderPartsResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceGetLeaderPartsResult) SetSuccess(success *GetLeaderPartsResp) *StorageAdminServiceGetLeaderPartsResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceGetLeaderPartsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetLeaderPartsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getLeaderParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceGetLeaderPartsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceGetLeaderPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceGetLeaderPartsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceCheckPeersArgs struct {
  thrift.IRequest
  Req *CheckPeersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceCheckPeersArgs() *StorageAdminServiceCheckPeersArgs {
  return &StorageAdminServiceCheckPeersArgs{
    Req: NewCheckPeersReq(),
  }
}

var StorageAdminServiceCheckPeersArgs_Req_DEFAULT *CheckPeersReq
func (p *StorageAdminServiceCheckPeersArgs) GetReq() *CheckPeersReq {
  if !p.IsSetReq() {
    return StorageAdminServiceCheckPeersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceCheckPeersArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceCheckPeersArgsBuilder struct {
  obj *StorageAdminServiceCheckPeersArgs
}

func NewStorageAdminServiceCheckPeersArgsBuilder() *StorageAdminServiceCheckPeersArgsBuilder{
  return &StorageAdminServiceCheckPeersArgsBuilder{
    obj: NewStorageAdminServiceCheckPeersArgs(),
  }
}

func (p StorageAdminServiceCheckPeersArgsBuilder) Emit() *StorageAdminServiceCheckPeersArgs{
  return &StorageAdminServiceCheckPeersArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceCheckPeersArgsBuilder) Req(req *CheckPeersReq) *StorageAdminServiceCheckPeersArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceCheckPeersArgs) SetReq(req *CheckPeersReq) *StorageAdminServiceCheckPeersArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceCheckPeersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCheckPeersReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("checkPeers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCheckPeersArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceCheckPeersArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceCheckPeersArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceCheckPeersResult struct {
  thrift.IResponse
  Success *AdminExecResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceCheckPeersResult() *StorageAdminServiceCheckPeersResult {
  return &StorageAdminServiceCheckPeersResult{}
}

var StorageAdminServiceCheckPeersResult_Success_DEFAULT *AdminExecResp
func (p *StorageAdminServiceCheckPeersResult) GetSuccess() *AdminExecResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceCheckPeersResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceCheckPeersResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceCheckPeersResultBuilder struct {
  obj *StorageAdminServiceCheckPeersResult
}

func NewStorageAdminServiceCheckPeersResultBuilder() *StorageAdminServiceCheckPeersResultBuilder{
  return &StorageAdminServiceCheckPeersResultBuilder{
    obj: NewStorageAdminServiceCheckPeersResult(),
  }
}

func (p StorageAdminServiceCheckPeersResultBuilder) Emit() *StorageAdminServiceCheckPeersResult{
  return &StorageAdminServiceCheckPeersResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceCheckPeersResultBuilder) Success(success *AdminExecResp) *StorageAdminServiceCheckPeersResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceCheckPeersResult) SetSuccess(success *AdminExecResp) *StorageAdminServiceCheckPeersResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceCheckPeersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("checkPeers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceCheckPeersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceCheckPeersResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceCheckPeersResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceAddAdminTaskArgs struct {
  thrift.IRequest
  Req *AddTaskRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceAddAdminTaskArgs() *StorageAdminServiceAddAdminTaskArgs {
  return &StorageAdminServiceAddAdminTaskArgs{
    Req: NewAddTaskRequest(),
  }
}

var StorageAdminServiceAddAdminTaskArgs_Req_DEFAULT *AddTaskRequest
func (p *StorageAdminServiceAddAdminTaskArgs) GetReq() *AddTaskRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceAddAdminTaskArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceAddAdminTaskArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceAddAdminTaskArgsBuilder struct {
  obj *StorageAdminServiceAddAdminTaskArgs
}

func NewStorageAdminServiceAddAdminTaskArgsBuilder() *StorageAdminServiceAddAdminTaskArgsBuilder{
  return &StorageAdminServiceAddAdminTaskArgsBuilder{
    obj: NewStorageAdminServiceAddAdminTaskArgs(),
  }
}

func (p StorageAdminServiceAddAdminTaskArgsBuilder) Emit() *StorageAdminServiceAddAdminTaskArgs{
  return &StorageAdminServiceAddAdminTaskArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceAddAdminTaskArgsBuilder) Req(req *AddTaskRequest) *StorageAdminServiceAddAdminTaskArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceAddAdminTaskArgs) SetReq(req *AddTaskRequest) *StorageAdminServiceAddAdminTaskArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceAddAdminTaskArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddTaskRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addAdminTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceAddAdminTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceAddAdminTaskArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceAddAdminTaskResult struct {
  thrift.IResponse
  Success *AddTaskResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceAddAdminTaskResult() *StorageAdminServiceAddAdminTaskResult {
  return &StorageAdminServiceAddAdminTaskResult{}
}

var StorageAdminServiceAddAdminTaskResult_Success_DEFAULT *AddTaskResp
func (p *StorageAdminServiceAddAdminTaskResult) GetSuccess() *AddTaskResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceAddAdminTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceAddAdminTaskResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceAddAdminTaskResultBuilder struct {
  obj *StorageAdminServiceAddAdminTaskResult
}

func NewStorageAdminServiceAddAdminTaskResultBuilder() *StorageAdminServiceAddAdminTaskResultBuilder{
  return &StorageAdminServiceAddAdminTaskResultBuilder{
    obj: NewStorageAdminServiceAddAdminTaskResult(),
  }
}

func (p StorageAdminServiceAddAdminTaskResultBuilder) Emit() *StorageAdminServiceAddAdminTaskResult{
  return &StorageAdminServiceAddAdminTaskResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceAddAdminTaskResultBuilder) Success(success *AddTaskResp) *StorageAdminServiceAddAdminTaskResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceAddAdminTaskResult) SetSuccess(success *AddTaskResp) *StorageAdminServiceAddAdminTaskResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceAddAdminTaskResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAddTaskResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addAdminTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceAddAdminTaskResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceAddAdminTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceAddAdminTaskResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceStopAdminTaskArgs struct {
  thrift.IRequest
  Req *StopTaskRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceStopAdminTaskArgs() *StorageAdminServiceStopAdminTaskArgs {
  return &StorageAdminServiceStopAdminTaskArgs{
    Req: NewStopTaskRequest(),
  }
}

var StorageAdminServiceStopAdminTaskArgs_Req_DEFAULT *StopTaskRequest
func (p *StorageAdminServiceStopAdminTaskArgs) GetReq() *StopTaskRequest {
  if !p.IsSetReq() {
    return StorageAdminServiceStopAdminTaskArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceStopAdminTaskArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceStopAdminTaskArgsBuilder struct {
  obj *StorageAdminServiceStopAdminTaskArgs
}

func NewStorageAdminServiceStopAdminTaskArgsBuilder() *StorageAdminServiceStopAdminTaskArgsBuilder{
  return &StorageAdminServiceStopAdminTaskArgsBuilder{
    obj: NewStorageAdminServiceStopAdminTaskArgs(),
  }
}

func (p StorageAdminServiceStopAdminTaskArgsBuilder) Emit() *StorageAdminServiceStopAdminTaskArgs{
  return &StorageAdminServiceStopAdminTaskArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceStopAdminTaskArgsBuilder) Req(req *StopTaskRequest) *StorageAdminServiceStopAdminTaskArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceStopAdminTaskArgs) SetReq(req *StopTaskRequest) *StorageAdminServiceStopAdminTaskArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceStopAdminTaskArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewStopTaskRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("stopAdminTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceStopAdminTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceStopAdminTaskArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceStopAdminTaskResult struct {
  thrift.IResponse
  Success *StopTaskResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceStopAdminTaskResult() *StorageAdminServiceStopAdminTaskResult {
  return &StorageAdminServiceStopAdminTaskResult{}
}

var StorageAdminServiceStopAdminTaskResult_Success_DEFAULT *StopTaskResp
func (p *StorageAdminServiceStopAdminTaskResult) GetSuccess() *StopTaskResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceStopAdminTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceStopAdminTaskResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceStopAdminTaskResultBuilder struct {
  obj *StorageAdminServiceStopAdminTaskResult
}

func NewStorageAdminServiceStopAdminTaskResultBuilder() *StorageAdminServiceStopAdminTaskResultBuilder{
  return &StorageAdminServiceStopAdminTaskResultBuilder{
    obj: NewStorageAdminServiceStopAdminTaskResult(),
  }
}

func (p StorageAdminServiceStopAdminTaskResultBuilder) Emit() *StorageAdminServiceStopAdminTaskResult{
  return &StorageAdminServiceStopAdminTaskResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceStopAdminTaskResultBuilder) Success(success *StopTaskResp) *StorageAdminServiceStopAdminTaskResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceStopAdminTaskResult) SetSuccess(success *StopTaskResp) *StorageAdminServiceStopAdminTaskResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceStopAdminTaskResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewStopTaskResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("stopAdminTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceStopAdminTaskResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceStopAdminTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceStopAdminTaskResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type StorageAdminServiceClearSpaceArgs struct {
  thrift.IRequest
  Req *ClearSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewStorageAdminServiceClearSpaceArgs() *StorageAdminServiceClearSpaceArgs {
  return &StorageAdminServiceClearSpaceArgs{
    Req: NewClearSpaceReq(),
  }
}

var StorageAdminServiceClearSpaceArgs_Req_DEFAULT *ClearSpaceReq
func (p *StorageAdminServiceClearSpaceArgs) GetReq() *ClearSpaceReq {
  if !p.IsSetReq() {
    return StorageAdminServiceClearSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *StorageAdminServiceClearSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type StorageAdminServiceClearSpaceArgsBuilder struct {
  obj *StorageAdminServiceClearSpaceArgs
}

func NewStorageAdminServiceClearSpaceArgsBuilder() *StorageAdminServiceClearSpaceArgsBuilder{
  return &StorageAdminServiceClearSpaceArgsBuilder{
    obj: NewStorageAdminServiceClearSpaceArgs(),
  }
}

func (p StorageAdminServiceClearSpaceArgsBuilder) Emit() *StorageAdminServiceClearSpaceArgs{
  return &StorageAdminServiceClearSpaceArgs{
    Req: p.obj.Req,
  }
}

func (s *StorageAdminServiceClearSpaceArgsBuilder) Req(req *ClearSpaceReq) *StorageAdminServiceClearSpaceArgsBuilder {
  s.obj.Req = req
  return s
}

func (s *StorageAdminServiceClearSpaceArgs) SetReq(req *ClearSpaceReq) *StorageAdminServiceClearSpaceArgs {
  s.Req = req
  return s
}

func (p *StorageAdminServiceClearSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewClearSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("clearSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceClearSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *StorageAdminServiceClearSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("StorageAdminServiceClearSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type StorageAdminServiceClearSpaceResult struct {
  thrift.IResponse
  Success *ClearSpaceResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewStorageAdminServiceClearSpaceResult() *StorageAdminServiceClearSpaceResult {
  return &StorageAdminServiceClearSpaceResult{}
}

var StorageAdminServiceClearSpaceResult_Success_DEFAULT *ClearSpaceResp
func (p *StorageAdminServiceClearSpaceResult) GetSuccess() *ClearSpaceResp {
  if !p.IsSetSuccess() {
    return StorageAdminServiceClearSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *StorageAdminServiceClearSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type StorageAdminServiceClearSpaceResultBuilder struct {
  obj *StorageAdminServiceClearSpaceResult
}

func NewStorageAdminServiceClearSpaceResultBuilder() *StorageAdminServiceClearSpaceResultBuilder{
  return &StorageAdminServiceClearSpaceResultBuilder{
    obj: NewStorageAdminServiceClearSpaceResult(),
  }
}

func (p StorageAdminServiceClearSpaceResultBuilder) Emit() *StorageAdminServiceClearSpaceResult{
  return &StorageAdminServiceClearSpaceResult{
    Success: p.obj.Success,
  }
}

func (s *StorageAdminServiceClearSpaceResultBuilder) Success(success *ClearSpaceResp) *StorageAdminServiceClearSpaceResultBuilder {
  s.obj.Success = success
  return s
}

func (s *StorageAdminServiceClearSpaceResult) SetSuccess(success *ClearSpaceResp) *StorageAdminServiceClearSpaceResult {
  s.Success = success
  return s
}

func (p *StorageAdminServiceClearSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewClearSpaceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("clearSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageAdminServiceClearSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageAdminServiceClearSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("StorageAdminServiceClearSpaceResult({Success:%s})", successVal)
}


