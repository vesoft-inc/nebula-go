// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package raftex

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
type RaftexService interface {
  // Parameters:
  //  - Req
  AskForVote(ctx context.Context, req *AskForVoteRequest) (_r *AskForVoteResponse, err error)
  // Parameters:
  //  - Req
  AppendLog(ctx context.Context, req *AppendLogRequest) (_r *AppendLogResponse, err error)
  // Parameters:
  //  - Req
  SendSnapshot(ctx context.Context, req *SendSnapshotRequest) (_r *SendSnapshotResponse, err error)
  // Parameters:
  //  - Req
  Heartbeat(ctx context.Context, req *HeartbeatRequest) (_r *HeartbeatResponse, err error)
  // Parameters:
  //  - Req
  GetState(ctx context.Context, req *GetStateRequest) (_r *GetStateResponse, err error)
}

type RaftexServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Req
  AskForVote(req *AskForVoteRequest) (_r *AskForVoteResponse, err error)
  // Parameters:
  //  - Req
  AppendLog(req *AppendLogRequest) (_r *AppendLogResponse, err error)
  // Parameters:
  //  - Req
  SendSnapshot(req *SendSnapshotRequest) (_r *SendSnapshotResponse, err error)
  // Parameters:
  //  - Req
  Heartbeat(req *HeartbeatRequest) (_r *HeartbeatResponse, err error)
  // Parameters:
  //  - Req
  GetState(req *GetStateRequest) (_r *GetStateResponse, err error)
}

type RaftexServiceClient struct {
  RaftexServiceClientInterface
  CC thrift.ClientConn
}

func(client *RaftexServiceClient) Open() error {
  return client.CC.Open()
}

func(client *RaftexServiceClient) Close() error {
  return client.CC.Close()
}

func(client *RaftexServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewRaftexServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *RaftexServiceClient {
  return &RaftexServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewRaftexServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaftexServiceClient {
  return &RaftexServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewRaftexServiceClientProtocol(prot thrift.Protocol) *RaftexServiceClient {
  return NewRaftexServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) AskForVote(req *AskForVoteRequest) (_r *AskForVoteResponse, err error) {
  args := RaftexServiceAskForVoteArgs{
    Req : req,
  }
  err = p.CC.SendMsg("askForVote", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAskForVote()
}


func (p *RaftexServiceClient) recvAskForVote() (value *AskForVoteResponse, err error) {
  var result RaftexServiceAskForVoteResult
  err = p.CC.RecvMsg("askForVote", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) AppendLog(req *AppendLogRequest) (_r *AppendLogResponse, err error) {
  args := RaftexServiceAppendLogArgs{
    Req : req,
  }
  err = p.CC.SendMsg("appendLog", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAppendLog()
}


func (p *RaftexServiceClient) recvAppendLog() (value *AppendLogResponse, err error) {
  var result RaftexServiceAppendLogResult
  err = p.CC.RecvMsg("appendLog", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) SendSnapshot(req *SendSnapshotRequest) (_r *SendSnapshotResponse, err error) {
  args := RaftexServiceSendSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("sendSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSendSnapshot()
}


func (p *RaftexServiceClient) recvSendSnapshot() (value *SendSnapshotResponse, err error) {
  var result RaftexServiceSendSnapshotResult
  err = p.CC.RecvMsg("sendSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) Heartbeat(req *HeartbeatRequest) (_r *HeartbeatResponse, err error) {
  args := RaftexServiceHeartbeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartbeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartbeat()
}


func (p *RaftexServiceClient) recvHeartbeat() (value *HeartbeatResponse, err error) {
  var result RaftexServiceHeartbeatResult
  err = p.CC.RecvMsg("heartbeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) GetState(req *GetStateRequest) (_r *GetStateResponse, err error) {
  args := RaftexServiceGetStateArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getState", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetState()
}


func (p *RaftexServiceClient) recvGetState() (value *GetStateResponse, err error) {
  var result RaftexServiceGetStateResult
  err = p.CC.RecvMsg("getState", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type RaftexServiceThreadsafeClient struct {
  RaftexServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *RaftexServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *RaftexServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *RaftexServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewRaftexServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *RaftexServiceThreadsafeClient {
  return &RaftexServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewRaftexServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaftexServiceThreadsafeClient {
  return &RaftexServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewRaftexServiceThreadsafeClientProtocol(prot thrift.Protocol) *RaftexServiceThreadsafeClient {
  return NewRaftexServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) AskForVote(req *AskForVoteRequest) (_r *AskForVoteResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := RaftexServiceAskForVoteArgs{
    Req : req,
  }
  err = p.CC.SendMsg("askForVote", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAskForVote()
}


func (p *RaftexServiceThreadsafeClient) recvAskForVote() (value *AskForVoteResponse, err error) {
  var result RaftexServiceAskForVoteResult
  err = p.CC.RecvMsg("askForVote", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) AppendLog(req *AppendLogRequest) (_r *AppendLogResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := RaftexServiceAppendLogArgs{
    Req : req,
  }
  err = p.CC.SendMsg("appendLog", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAppendLog()
}


func (p *RaftexServiceThreadsafeClient) recvAppendLog() (value *AppendLogResponse, err error) {
  var result RaftexServiceAppendLogResult
  err = p.CC.RecvMsg("appendLog", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) SendSnapshot(req *SendSnapshotRequest) (_r *SendSnapshotResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := RaftexServiceSendSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("sendSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSendSnapshot()
}


func (p *RaftexServiceThreadsafeClient) recvSendSnapshot() (value *SendSnapshotResponse, err error) {
  var result RaftexServiceSendSnapshotResult
  err = p.CC.RecvMsg("sendSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) Heartbeat(req *HeartbeatRequest) (_r *HeartbeatResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := RaftexServiceHeartbeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartbeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartbeat()
}


func (p *RaftexServiceThreadsafeClient) recvHeartbeat() (value *HeartbeatResponse, err error) {
  var result RaftexServiceHeartbeatResult
  err = p.CC.RecvMsg("heartbeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) GetState(req *GetStateRequest) (_r *GetStateResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := RaftexServiceGetStateArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getState", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetState()
}


func (p *RaftexServiceThreadsafeClient) recvGetState() (value *GetStateResponse, err error) {
  var result RaftexServiceGetStateResult
  err = p.CC.RecvMsg("getState", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type RaftexServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *RaftexServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *RaftexServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *RaftexServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewRaftexServiceChannelClient(channel thrift.RequestChannel) *RaftexServiceChannelClient {
  return &RaftexServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Req
func (p *RaftexServiceChannelClient) AskForVote(ctx context.Context, req *AskForVoteRequest) (_r *AskForVoteResponse, err error) {
  args := RaftexServiceAskForVoteArgs{
    Req : req,
  }
  var result RaftexServiceAskForVoteResult
  err = p.RequestChannel.Call(ctx, "askForVote", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceChannelClient) AppendLog(ctx context.Context, req *AppendLogRequest) (_r *AppendLogResponse, err error) {
  args := RaftexServiceAppendLogArgs{
    Req : req,
  }
  var result RaftexServiceAppendLogResult
  err = p.RequestChannel.Call(ctx, "appendLog", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceChannelClient) SendSnapshot(ctx context.Context, req *SendSnapshotRequest) (_r *SendSnapshotResponse, err error) {
  args := RaftexServiceSendSnapshotArgs{
    Req : req,
  }
  var result RaftexServiceSendSnapshotResult
  err = p.RequestChannel.Call(ctx, "sendSnapshot", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceChannelClient) Heartbeat(ctx context.Context, req *HeartbeatRequest) (_r *HeartbeatResponse, err error) {
  args := RaftexServiceHeartbeatArgs{
    Req : req,
  }
  var result RaftexServiceHeartbeatResult
  err = p.RequestChannel.Call(ctx, "heartbeat", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *RaftexServiceChannelClient) GetState(ctx context.Context, req *GetStateRequest) (_r *GetStateResponse, err error) {
  args := RaftexServiceGetStateArgs{
    Req : req,
  }
  var result RaftexServiceGetStateResult
  err = p.RequestChannel.Call(ctx, "getState", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type RaftexServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  handler RaftexService
}

func (p *RaftexServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *RaftexServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *RaftexServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func NewRaftexServiceProcessor(handler RaftexService) *RaftexServiceProcessor {
  self3 := &RaftexServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext)}
  self3.processorMap["askForVote"] = &raftexServiceProcessorAskForVote{handler:handler}
  self3.processorMap["appendLog"] = &raftexServiceProcessorAppendLog{handler:handler}
  self3.processorMap["sendSnapshot"] = &raftexServiceProcessorSendSnapshot{handler:handler}
  self3.processorMap["heartbeat"] = &raftexServiceProcessorHeartbeat{handler:handler}
  self3.processorMap["getState"] = &raftexServiceProcessorGetState{handler:handler}
  return self3
}

type raftexServiceProcessorAskForVote struct {
  handler RaftexService
}

func (p *raftexServiceProcessorAskForVote) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceAskForVoteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorAskForVote) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("askForVote", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorAskForVote) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceAskForVoteArgs)
  var result RaftexServiceAskForVoteResult
  if retval, err := p.handler.AskForVote(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing askForVote: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorAppendLog struct {
  handler RaftexService
}

func (p *raftexServiceProcessorAppendLog) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceAppendLogArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorAppendLog) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("appendLog", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorAppendLog) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceAppendLogArgs)
  var result RaftexServiceAppendLogResult
  if retval, err := p.handler.AppendLog(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendLog: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorSendSnapshot struct {
  handler RaftexService
}

func (p *raftexServiceProcessorSendSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceSendSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorSendSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("sendSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorSendSnapshot) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceSendSnapshotArgs)
  var result RaftexServiceSendSnapshotResult
  if retval, err := p.handler.SendSnapshot(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorHeartbeat struct {
  handler RaftexService
}

func (p *raftexServiceProcessorHeartbeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceHeartbeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorHeartbeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("heartbeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorHeartbeat) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceHeartbeatArgs)
  var result RaftexServiceHeartbeatResult
  if retval, err := p.handler.Heartbeat(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorGetState struct {
  handler RaftexService
}

func (p *raftexServiceProcessorGetState) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceGetStateArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorGetState) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getState", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorGetState) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceGetStateArgs)
  var result RaftexServiceGetStateResult
  if retval, err := p.handler.GetState(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getState: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type RaftexServiceAskForVoteArgs struct {
  thrift.IRequest
  Req *AskForVoteRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceAskForVoteArgs() *RaftexServiceAskForVoteArgs {
  return &RaftexServiceAskForVoteArgs{
    Req: NewAskForVoteRequest(),
  }
}

var RaftexServiceAskForVoteArgs_Req_DEFAULT *AskForVoteRequest
func (p *RaftexServiceAskForVoteArgs) GetReq() *AskForVoteRequest {
  if !p.IsSetReq() {
    return RaftexServiceAskForVoteArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceAskForVoteArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *RaftexServiceAskForVoteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAskForVoteRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("askForVote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAskForVoteArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceAskForVoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("RaftexServiceAskForVoteArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type RaftexServiceAskForVoteResult struct {
  thrift.IResponse
  Success *AskForVoteResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceAskForVoteResult() *RaftexServiceAskForVoteResult {
  return &RaftexServiceAskForVoteResult{}
}

var RaftexServiceAskForVoteResult_Success_DEFAULT *AskForVoteResponse
func (p *RaftexServiceAskForVoteResult) GetSuccess() *AskForVoteResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceAskForVoteResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceAskForVoteResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *RaftexServiceAskForVoteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAskForVoteResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("askForVote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAskForVoteResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceAskForVoteResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("RaftexServiceAskForVoteResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type RaftexServiceAppendLogArgs struct {
  thrift.IRequest
  Req *AppendLogRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceAppendLogArgs() *RaftexServiceAppendLogArgs {
  return &RaftexServiceAppendLogArgs{
    Req: NewAppendLogRequest(),
  }
}

var RaftexServiceAppendLogArgs_Req_DEFAULT *AppendLogRequest
func (p *RaftexServiceAppendLogArgs) GetReq() *AppendLogRequest {
  if !p.IsSetReq() {
    return RaftexServiceAppendLogArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceAppendLogArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *RaftexServiceAppendLogArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAppendLogRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("appendLog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAppendLogArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceAppendLogArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("RaftexServiceAppendLogArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type RaftexServiceAppendLogResult struct {
  thrift.IResponse
  Success *AppendLogResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceAppendLogResult() *RaftexServiceAppendLogResult {
  return &RaftexServiceAppendLogResult{}
}

var RaftexServiceAppendLogResult_Success_DEFAULT *AppendLogResponse
func (p *RaftexServiceAppendLogResult) GetSuccess() *AppendLogResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceAppendLogResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceAppendLogResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *RaftexServiceAppendLogResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAppendLogResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("appendLog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAppendLogResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceAppendLogResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("RaftexServiceAppendLogResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type RaftexServiceSendSnapshotArgs struct {
  thrift.IRequest
  Req *SendSnapshotRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceSendSnapshotArgs() *RaftexServiceSendSnapshotArgs {
  return &RaftexServiceSendSnapshotArgs{
    Req: NewSendSnapshotRequest(),
  }
}

var RaftexServiceSendSnapshotArgs_Req_DEFAULT *SendSnapshotRequest
func (p *RaftexServiceSendSnapshotArgs) GetReq() *SendSnapshotRequest {
  if !p.IsSetReq() {
    return RaftexServiceSendSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceSendSnapshotArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *RaftexServiceSendSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSendSnapshotRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceSendSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("RaftexServiceSendSnapshotArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type RaftexServiceSendSnapshotResult struct {
  thrift.IResponse
  Success *SendSnapshotResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceSendSnapshotResult() *RaftexServiceSendSnapshotResult {
  return &RaftexServiceSendSnapshotResult{}
}

var RaftexServiceSendSnapshotResult_Success_DEFAULT *SendSnapshotResponse
func (p *RaftexServiceSendSnapshotResult) GetSuccess() *SendSnapshotResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceSendSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceSendSnapshotResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *RaftexServiceSendSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewSendSnapshotResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceSendSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceSendSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("RaftexServiceSendSnapshotResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type RaftexServiceHeartbeatArgs struct {
  thrift.IRequest
  Req *HeartbeatRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceHeartbeatArgs() *RaftexServiceHeartbeatArgs {
  return &RaftexServiceHeartbeatArgs{
    Req: NewHeartbeatRequest(),
  }
}

var RaftexServiceHeartbeatArgs_Req_DEFAULT *HeartbeatRequest
func (p *RaftexServiceHeartbeatArgs) GetReq() *HeartbeatRequest {
  if !p.IsSetReq() {
    return RaftexServiceHeartbeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceHeartbeatArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *RaftexServiceHeartbeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceHeartbeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewHeartbeatRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceHeartbeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceHeartbeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("RaftexServiceHeartbeatArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type RaftexServiceHeartbeatResult struct {
  thrift.IResponse
  Success *HeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceHeartbeatResult() *RaftexServiceHeartbeatResult {
  return &RaftexServiceHeartbeatResult{}
}

var RaftexServiceHeartbeatResult_Success_DEFAULT *HeartbeatResponse
func (p *RaftexServiceHeartbeatResult) GetSuccess() *HeartbeatResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceHeartbeatResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *RaftexServiceHeartbeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceHeartbeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHeartbeatResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceHeartbeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceHeartbeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("RaftexServiceHeartbeatResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type RaftexServiceGetStateArgs struct {
  thrift.IRequest
  Req *GetStateRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceGetStateArgs() *RaftexServiceGetStateArgs {
  return &RaftexServiceGetStateArgs{
    Req: NewGetStateRequest(),
  }
}

var RaftexServiceGetStateArgs_Req_DEFAULT *GetStateRequest
func (p *RaftexServiceGetStateArgs) GetReq() *GetStateRequest {
  if !p.IsSetReq() {
    return RaftexServiceGetStateArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceGetStateArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *RaftexServiceGetStateArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceGetStateArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetStateRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceGetStateArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceGetStateArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceGetStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("RaftexServiceGetStateArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type RaftexServiceGetStateResult struct {
  thrift.IResponse
  Success *GetStateResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceGetStateResult() *RaftexServiceGetStateResult {
  return &RaftexServiceGetStateResult{}
}

var RaftexServiceGetStateResult_Success_DEFAULT *GetStateResponse
func (p *RaftexServiceGetStateResult) GetSuccess() *GetStateResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceGetStateResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceGetStateResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *RaftexServiceGetStateResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceGetStateResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetStateResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceGetStateResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceGetStateResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceGetStateResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("RaftexServiceGetStateResult({Success:%s})", successVal)
}


