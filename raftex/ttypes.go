// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package raftex

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type Role int64
const (
  Role_LEADER Role = 1
  Role_FOLLOWER Role = 2
  Role_CANDIDATE Role = 3
  Role_LEARNER Role = 4
)

var RoleToName = map[Role]string {
  Role_LEADER: "LEADER",
  Role_FOLLOWER: "FOLLOWER",
  Role_CANDIDATE: "CANDIDATE",
  Role_LEARNER: "LEARNER",
}

var RoleToValue = map[string]Role {
  "LEADER": Role_LEADER,
  "FOLLOWER": Role_FOLLOWER,
  "CANDIDATE": Role_CANDIDATE,
  "LEARNER": Role_LEARNER,
}

var RoleNames = []string {
  "LEADER",
  "FOLLOWER",
  "CANDIDATE",
  "LEARNER",
}

var RoleValues = []Role {
  Role_LEADER,
  Role_FOLLOWER,
  Role_CANDIDATE,
  Role_LEARNER,
}

func (p Role) String() string {
  if v, ok := RoleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
  if v, ok := RoleToValue[s]; ok {
    return v, nil
  }
  return Role(0), fmt.Errorf("not a valid Role string")
}

func RolePtr(v Role) *Role { return &v }

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_UNKNOWN_PART ErrorCode = -1
  ErrorCode_E_LOG_GAP ErrorCode = -2
  ErrorCode_E_LOG_STALE ErrorCode = -3
  ErrorCode_E_TERM_OUT_OF_DATE ErrorCode = -4
  ErrorCode_E_WAITING_SNAPSHOT ErrorCode = -5
  ErrorCode_E_BAD_STATE ErrorCode = -6
  ErrorCode_E_WRONG_LEADER ErrorCode = -7
  ErrorCode_E_NOT_READY ErrorCode = -8
  ErrorCode_E_BAD_ROLE ErrorCode = -9
  ErrorCode_E_WAL_FAIL ErrorCode = -10
  ErrorCode_E_HOST_STOPPED ErrorCode = -11
  ErrorCode_E_TOO_MANY_REQUESTS ErrorCode = -12
  ErrorCode_E_PERSIST_SNAPSHOT_FAILED ErrorCode = -13
  ErrorCode_E_RPC_EXCEPTION ErrorCode = -14
  ErrorCode_E_NO_WAL_FOUND ErrorCode = -15
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_UNKNOWN_PART: "E_UNKNOWN_PART",
  ErrorCode_E_LOG_GAP: "E_LOG_GAP",
  ErrorCode_E_LOG_STALE: "E_LOG_STALE",
  ErrorCode_E_TERM_OUT_OF_DATE: "E_TERM_OUT_OF_DATE",
  ErrorCode_E_WAITING_SNAPSHOT: "E_WAITING_SNAPSHOT",
  ErrorCode_E_BAD_STATE: "E_BAD_STATE",
  ErrorCode_E_WRONG_LEADER: "E_WRONG_LEADER",
  ErrorCode_E_NOT_READY: "E_NOT_READY",
  ErrorCode_E_BAD_ROLE: "E_BAD_ROLE",
  ErrorCode_E_WAL_FAIL: "E_WAL_FAIL",
  ErrorCode_E_HOST_STOPPED: "E_HOST_STOPPED",
  ErrorCode_E_TOO_MANY_REQUESTS: "E_TOO_MANY_REQUESTS",
  ErrorCode_E_PERSIST_SNAPSHOT_FAILED: "E_PERSIST_SNAPSHOT_FAILED",
  ErrorCode_E_RPC_EXCEPTION: "E_RPC_EXCEPTION",
  ErrorCode_E_NO_WAL_FOUND: "E_NO_WAL_FOUND",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_UNKNOWN_PART": ErrorCode_E_UNKNOWN_PART,
  "E_LOG_GAP": ErrorCode_E_LOG_GAP,
  "E_LOG_STALE": ErrorCode_E_LOG_STALE,
  "E_TERM_OUT_OF_DATE": ErrorCode_E_TERM_OUT_OF_DATE,
  "E_WAITING_SNAPSHOT": ErrorCode_E_WAITING_SNAPSHOT,
  "E_BAD_STATE": ErrorCode_E_BAD_STATE,
  "E_WRONG_LEADER": ErrorCode_E_WRONG_LEADER,
  "E_NOT_READY": ErrorCode_E_NOT_READY,
  "E_BAD_ROLE": ErrorCode_E_BAD_ROLE,
  "E_WAL_FAIL": ErrorCode_E_WAL_FAIL,
  "E_HOST_STOPPED": ErrorCode_E_HOST_STOPPED,
  "E_TOO_MANY_REQUESTS": ErrorCode_E_TOO_MANY_REQUESTS,
  "E_PERSIST_SNAPSHOT_FAILED": ErrorCode_E_PERSIST_SNAPSHOT_FAILED,
  "E_RPC_EXCEPTION": ErrorCode_E_RPC_EXCEPTION,
  "E_NO_WAL_FOUND": ErrorCode_E_NO_WAL_FOUND,
}

var ErrorCodeNames = []string {
  "SUCCEEDED",
  "E_UNKNOWN_PART",
  "E_LOG_GAP",
  "E_LOG_STALE",
  "E_TERM_OUT_OF_DATE",
  "E_WAITING_SNAPSHOT",
  "E_BAD_STATE",
  "E_WRONG_LEADER",
  "E_NOT_READY",
  "E_BAD_ROLE",
  "E_WAL_FAIL",
  "E_HOST_STOPPED",
  "E_TOO_MANY_REQUESTS",
  "E_PERSIST_SNAPSHOT_FAILED",
  "E_RPC_EXCEPTION",
  "E_NO_WAL_FOUND",
}

var ErrorCodeValues = []ErrorCode {
  ErrorCode_SUCCEEDED,
  ErrorCode_E_UNKNOWN_PART,
  ErrorCode_E_LOG_GAP,
  ErrorCode_E_LOG_STALE,
  ErrorCode_E_TERM_OUT_OF_DATE,
  ErrorCode_E_WAITING_SNAPSHOT,
  ErrorCode_E_BAD_STATE,
  ErrorCode_E_WRONG_LEADER,
  ErrorCode_E_NOT_READY,
  ErrorCode_E_BAD_ROLE,
  ErrorCode_E_WAL_FAIL,
  ErrorCode_E_HOST_STOPPED,
  ErrorCode_E_TOO_MANY_REQUESTS,
  ErrorCode_E_PERSIST_SNAPSHOT_FAILED,
  ErrorCode_E_RPC_EXCEPTION,
  ErrorCode_E_NO_WAL_FOUND,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type ClusterID = int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

type GraphSpaceID = int32

func GraphSpaceIDPtr(v GraphSpaceID) *GraphSpaceID { return &v }

type PartitionID = int32

func PartitionIDPtr(v PartitionID) *PartitionID { return &v }

type TermID = int64

func TermIDPtr(v TermID) *TermID { return &v }

type LogID = int64

func LogIDPtr(v LogID) *LogID { return &v }

type Port = int32

func PortPtr(v Port) *Port { return &v }

// Attributes:
//  - Space
//  - Part
//  - CandidateAddr
//  - CandidatePort
//  - Term
//  - LastLogID
//  - LastLogTerm
//  - IsPreVote
type AskForVoteRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  CandidateAddr string `thrift:"candidate_addr,3" db:"candidate_addr" json:"candidate_addr"`
  CandidatePort Port `thrift:"candidate_port,4" db:"candidate_port" json:"candidate_port"`
  Term TermID `thrift:"term,5" db:"term" json:"term"`
  LastLogID LogID `thrift:"last_log_id,6" db:"last_log_id" json:"last_log_id"`
  LastLogTerm TermID `thrift:"last_log_term,7" db:"last_log_term" json:"last_log_term"`
  IsPreVote bool `thrift:"is_pre_vote,8" db:"is_pre_vote" json:"is_pre_vote"`
}

func NewAskForVoteRequest() *AskForVoteRequest {
  return &AskForVoteRequest{}
}


func (p *AskForVoteRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *AskForVoteRequest) GetPart() PartitionID {
  return p.Part
}

func (p *AskForVoteRequest) GetCandidateAddr() string {
  return p.CandidateAddr
}

func (p *AskForVoteRequest) GetCandidatePort() Port {
  return p.CandidatePort
}

func (p *AskForVoteRequest) GetTerm() TermID {
  return p.Term
}

func (p *AskForVoteRequest) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AskForVoteRequest) GetLastLogTerm() TermID {
  return p.LastLogTerm
}

func (p *AskForVoteRequest) GetIsPreVote() bool {
  return p.IsPreVote
}
func (p *AskForVoteRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AskForVoteRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CandidateAddr = v
}
  return nil
}

func (p *AskForVoteRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Port(v)
  p.CandidatePort = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TermID(v)
  p.Term = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TermID(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *AskForVoteRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsPreVote = v
}
  return nil
}

func (p *AskForVoteRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AskForVoteRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AskForVoteRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("candidate_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:candidate_addr: ", p), err) }
  if err := oprot.WriteString(string(p.CandidateAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.candidate_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:candidate_addr: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("candidate_port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:candidate_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.CandidatePort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.candidate_port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:candidate_port: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:term: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_log_id: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_log_term: ", p), err) }
  return err
}

func (p *AskForVoteRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_pre_vote", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_pre_vote: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsPreVote)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_pre_vote (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_pre_vote: ", p), err) }
  return err
}

func (p *AskForVoteRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  partVal := fmt.Sprintf("%v", p.Part)
  candidateAddrVal := fmt.Sprintf("%v", p.CandidateAddr)
  candidatePortVal := fmt.Sprintf("%v", p.CandidatePort)
  termVal := fmt.Sprintf("%v", p.Term)
  lastLogIDVal := fmt.Sprintf("%v", p.LastLogID)
  lastLogTermVal := fmt.Sprintf("%v", p.LastLogTerm)
  isPreVoteVal := fmt.Sprintf("%v", p.IsPreVote)
  return fmt.Sprintf("AskForVoteRequest({Space:%s Part:%s CandidateAddr:%s CandidatePort:%s Term:%s LastLogID:%s LastLogTerm:%s IsPreVote:%s})", spaceVal, partVal, candidateAddrVal, candidatePortVal, termVal, lastLogIDVal, lastLogTermVal, isPreVoteVal)
}

// Attributes:
//  - ErrorCode
type AskForVoteResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
}

func NewAskForVoteResponse() *AskForVoteResponse {
  return &AskForVoteResponse{}
}


func (p *AskForVoteResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
func (p *AskForVoteResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AskForVoteResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AskForVoteResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AskForVoteResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AskForVoteResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AskForVoteResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  return fmt.Sprintf("AskForVoteResponse({ErrorCode:%s})", errorCodeVal)
}

// Attributes:
//  - Space
//  - Part
//  - CurrentTerm
//  - LastLogID
//  - CommittedLogID
//  - LeaderAddr
//  - LeaderPort
//  - LastLogTermSent
//  - LastLogIdSent
//  - LogTerm
//  - LogStrList
type AppendLogRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  CurrentTerm TermID `thrift:"current_term,3" db:"current_term" json:"current_term"`
  LastLogID LogID `thrift:"last_log_id,4" db:"last_log_id" json:"last_log_id"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LeaderAddr string `thrift:"leader_addr,6" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,7" db:"leader_port" json:"leader_port"`
  LastLogTermSent TermID `thrift:"last_log_term_sent,8" db:"last_log_term_sent" json:"last_log_term_sent"`
  LastLogIdSent LogID `thrift:"last_log_id_sent,9" db:"last_log_id_sent" json:"last_log_id_sent"`
  LogTerm TermID `thrift:"log_term,10" db:"log_term" json:"log_term"`
  LogStrList []*nebula0.LogEntry `thrift:"log_str_list,11" db:"log_str_list" json:"log_str_list"`
}

func NewAppendLogRequest() *AppendLogRequest {
  return &AppendLogRequest{}
}


func (p *AppendLogRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *AppendLogRequest) GetPart() PartitionID {
  return p.Part
}

func (p *AppendLogRequest) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *AppendLogRequest) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AppendLogRequest) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *AppendLogRequest) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *AppendLogRequest) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *AppendLogRequest) GetLastLogTermSent() TermID {
  return p.LastLogTermSent
}

func (p *AppendLogRequest) GetLastLogIdSent() LogID {
  return p.LastLogIdSent
}

func (p *AppendLogRequest) GetLogTerm() TermID {
  return p.LogTerm
}

func (p *AppendLogRequest) GetLogStrList() []*nebula0.LogEntry {
  return p.LogStrList
}
func (p *AppendLogRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendLogRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *AppendLogRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := TermID(v)
  p.LastLogTermSent = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := LogID(v)
  p.LastLogIdSent = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := TermID(v)
  p.LogTerm = temp
}
  return nil
}

func (p *AppendLogRequest)  ReadField11(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.LogEntry, 0, size)
  p.LogStrList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := nebula0.NewLogEntry()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.LogStrList = append(p.LogStrList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppendLogRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AppendLogRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendLogRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:current_term: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_log_id: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leader_addr: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:leader_port: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term_sent", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:last_log_term_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTermSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term_sent (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:last_log_term_sent: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id_sent", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:last_log_id_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogIdSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id_sent (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:last_log_id_sent: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_term", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_term (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:log_term: ", p), err) }
  return err
}

func (p *AppendLogRequest) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("log_str_list", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:log_str_list: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LogStrList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LogStrList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:log_str_list: ", p), err) }
  return err
}

func (p *AppendLogRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  partVal := fmt.Sprintf("%v", p.Part)
  currentTermVal := fmt.Sprintf("%v", p.CurrentTerm)
  lastLogIDVal := fmt.Sprintf("%v", p.LastLogID)
  committedLogIDVal := fmt.Sprintf("%v", p.CommittedLogID)
  leaderAddrVal := fmt.Sprintf("%v", p.LeaderAddr)
  leaderPortVal := fmt.Sprintf("%v", p.LeaderPort)
  lastLogTermSentVal := fmt.Sprintf("%v", p.LastLogTermSent)
  lastLogIdSentVal := fmt.Sprintf("%v", p.LastLogIdSent)
  logTermVal := fmt.Sprintf("%v", p.LogTerm)
  logStrListVal := fmt.Sprintf("%v", p.LogStrList)
  return fmt.Sprintf("AppendLogRequest({Space:%s Part:%s CurrentTerm:%s LastLogID:%s CommittedLogID:%s LeaderAddr:%s LeaderPort:%s LastLogTermSent:%s LastLogIdSent:%s LogTerm:%s LogStrList:%s})", spaceVal, partVal, currentTermVal, lastLogIDVal, committedLogIDVal, leaderAddrVal, leaderPortVal, lastLogTermSentVal, lastLogIdSentVal, logTermVal, logStrListVal)
}

// Attributes:
//  - ErrorCode
//  - CurrentTerm
//  - LeaderAddr
//  - LeaderPort
//  - CommittedLogID
//  - LastLogID
//  - LastLogTerm
type AppendLogResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
  CurrentTerm TermID `thrift:"current_term,2" db:"current_term" json:"current_term"`
  LeaderAddr string `thrift:"leader_addr,3" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,4" db:"leader_port" json:"leader_port"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LastLogID LogID `thrift:"last_log_id,6" db:"last_log_id" json:"last_log_id"`
  LastLogTerm TermID `thrift:"last_log_term,7" db:"last_log_term" json:"last_log_term"`
}

func NewAppendLogResponse() *AppendLogResponse {
  return &AppendLogResponse{}
}


func (p *AppendLogResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *AppendLogResponse) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *AppendLogResponse) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *AppendLogResponse) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *AppendLogResponse) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *AppendLogResponse) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *AppendLogResponse) GetLastLogTerm() TermID {
  return p.LastLogTerm
}
func (p *AppendLogResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendLogResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *AppendLogResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *AppendLogResponse)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TermID(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *AppendLogResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AppendLogResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendLogResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:current_term: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_addr: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_port: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_log_id: ", p), err) }
  return err
}

func (p *AppendLogResponse) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_log_term: ", p), err) }
  return err
}

func (p *AppendLogResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  currentTermVal := fmt.Sprintf("%v", p.CurrentTerm)
  leaderAddrVal := fmt.Sprintf("%v", p.LeaderAddr)
  leaderPortVal := fmt.Sprintf("%v", p.LeaderPort)
  committedLogIDVal := fmt.Sprintf("%v", p.CommittedLogID)
  lastLogIDVal := fmt.Sprintf("%v", p.LastLogID)
  lastLogTermVal := fmt.Sprintf("%v", p.LastLogTerm)
  return fmt.Sprintf("AppendLogResponse({ErrorCode:%s CurrentTerm:%s LeaderAddr:%s LeaderPort:%s CommittedLogID:%s LastLogID:%s LastLogTerm:%s})", errorCodeVal, currentTermVal, leaderAddrVal, leaderPortVal, committedLogIDVal, lastLogIDVal, lastLogTermVal)
}

// Attributes:
//  - Space
//  - Part
//  - Term
//  - CommittedLogID
//  - CommittedLogTerm
//  - LeaderAddr
//  - LeaderPort
//  - Rows
//  - TotalSize
//  - TotalCount
//  - Done
type SendSnapshotRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  Term TermID `thrift:"term,3" db:"term" json:"term"`
  CommittedLogID LogID `thrift:"committed_log_id,4" db:"committed_log_id" json:"committed_log_id"`
  CommittedLogTerm TermID `thrift:"committed_log_term,5" db:"committed_log_term" json:"committed_log_term"`
  LeaderAddr string `thrift:"leader_addr,6" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,7" db:"leader_port" json:"leader_port"`
  Rows [][]byte `thrift:"rows,8" db:"rows" json:"rows"`
  TotalSize int64 `thrift:"total_size,9" db:"total_size" json:"total_size"`
  TotalCount int64 `thrift:"total_count,10" db:"total_count" json:"total_count"`
  Done bool `thrift:"done,11" db:"done" json:"done"`
}

func NewSendSnapshotRequest() *SendSnapshotRequest {
  return &SendSnapshotRequest{}
}


func (p *SendSnapshotRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *SendSnapshotRequest) GetPart() PartitionID {
  return p.Part
}

func (p *SendSnapshotRequest) GetTerm() TermID {
  return p.Term
}

func (p *SendSnapshotRequest) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *SendSnapshotRequest) GetCommittedLogTerm() TermID {
  return p.CommittedLogTerm
}

func (p *SendSnapshotRequest) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *SendSnapshotRequest) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *SendSnapshotRequest) GetRows() [][]byte {
  return p.Rows
}

func (p *SendSnapshotRequest) GetTotalSize() int64 {
  return p.TotalSize
}

func (p *SendSnapshotRequest) GetTotalCount() int64 {
  return p.TotalCount
}

func (p *SendSnapshotRequest) GetDone() bool {
  return p.Done
}
func (p *SendSnapshotRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendSnapshotRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.Term = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TermID(v)
  p.CommittedLogTerm = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField8(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Rows =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Rows = append(p.Rows, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SendSnapshotRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TotalSize = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField10(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalCount = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *SendSnapshotRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SendSnapshotRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendSnapshotRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:term: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:committed_log_id: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_term", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_term (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_term: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leader_addr: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:leader_port: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("rows", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:rows: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Rows {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:rows: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_size", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:total_size: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_size (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:total_size: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("total_count", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:total_count: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_count (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:total_count: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:done: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  partVal := fmt.Sprintf("%v", p.Part)
  termVal := fmt.Sprintf("%v", p.Term)
  committedLogIDVal := fmt.Sprintf("%v", p.CommittedLogID)
  committedLogTermVal := fmt.Sprintf("%v", p.CommittedLogTerm)
  leaderAddrVal := fmt.Sprintf("%v", p.LeaderAddr)
  leaderPortVal := fmt.Sprintf("%v", p.LeaderPort)
  rowsVal := fmt.Sprintf("%v", p.Rows)
  totalSizeVal := fmt.Sprintf("%v", p.TotalSize)
  totalCountVal := fmt.Sprintf("%v", p.TotalCount)
  doneVal := fmt.Sprintf("%v", p.Done)
  return fmt.Sprintf("SendSnapshotRequest({Space:%s Part:%s Term:%s CommittedLogID:%s CommittedLogTerm:%s LeaderAddr:%s LeaderPort:%s Rows:%s TotalSize:%s TotalCount:%s Done:%s})", spaceVal, partVal, termVal, committedLogIDVal, committedLogTermVal, leaderAddrVal, leaderPortVal, rowsVal, totalSizeVal, totalCountVal, doneVal)
}

// Attributes:
//  - Space
//  - Part
//  - CurrentTerm
//  - LastLogID
//  - CommittedLogID
//  - LeaderAddr
//  - LeaderPort
//  - LastLogTermSent
//  - LastLogIdSent
type HeartbeatRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
  CurrentTerm TermID `thrift:"current_term,3" db:"current_term" json:"current_term"`
  LastLogID LogID `thrift:"last_log_id,4" db:"last_log_id" json:"last_log_id"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LeaderAddr string `thrift:"leader_addr,6" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,7" db:"leader_port" json:"leader_port"`
  LastLogTermSent TermID `thrift:"last_log_term_sent,8" db:"last_log_term_sent" json:"last_log_term_sent"`
  LastLogIdSent LogID `thrift:"last_log_id_sent,9" db:"last_log_id_sent" json:"last_log_id_sent"`
}

func NewHeartbeatRequest() *HeartbeatRequest {
  return &HeartbeatRequest{}
}


func (p *HeartbeatRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *HeartbeatRequest) GetPart() PartitionID {
  return p.Part
}

func (p *HeartbeatRequest) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *HeartbeatRequest) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *HeartbeatRequest) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *HeartbeatRequest) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *HeartbeatRequest) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *HeartbeatRequest) GetLastLogTermSent() TermID {
  return p.LastLogTermSent
}

func (p *HeartbeatRequest) GetLastLogIdSent() LogID {
  return p.LastLogIdSent
}
func (p *HeartbeatRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartbeatRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *HeartbeatRequest)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := TermID(v)
  p.LastLogTermSent = temp
}
  return nil
}

func (p *HeartbeatRequest)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := LogID(v)
  p.LastLogIdSent = temp
}
  return nil
}

func (p *HeartbeatRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HeartbeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:current_term: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_log_id: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leader_addr: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:leader_port: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term_sent", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:last_log_term_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTermSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term_sent (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:last_log_term_sent: ", p), err) }
  return err
}

func (p *HeartbeatRequest) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id_sent", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:last_log_id_sent: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogIdSent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id_sent (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:last_log_id_sent: ", p), err) }
  return err
}

func (p *HeartbeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  partVal := fmt.Sprintf("%v", p.Part)
  currentTermVal := fmt.Sprintf("%v", p.CurrentTerm)
  lastLogIDVal := fmt.Sprintf("%v", p.LastLogID)
  committedLogIDVal := fmt.Sprintf("%v", p.CommittedLogID)
  leaderAddrVal := fmt.Sprintf("%v", p.LeaderAddr)
  leaderPortVal := fmt.Sprintf("%v", p.LeaderPort)
  lastLogTermSentVal := fmt.Sprintf("%v", p.LastLogTermSent)
  lastLogIdSentVal := fmt.Sprintf("%v", p.LastLogIdSent)
  return fmt.Sprintf("HeartbeatRequest({Space:%s Part:%s CurrentTerm:%s LastLogID:%s CommittedLogID:%s LeaderAddr:%s LeaderPort:%s LastLogTermSent:%s LastLogIdSent:%s})", spaceVal, partVal, currentTermVal, lastLogIDVal, committedLogIDVal, leaderAddrVal, leaderPortVal, lastLogTermSentVal, lastLogIdSentVal)
}

// Attributes:
//  - ErrorCode
//  - CurrentTerm
//  - LeaderAddr
//  - LeaderPort
//  - CommittedLogID
//  - LastLogID
//  - LastLogTerm
type HeartbeatResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
  CurrentTerm TermID `thrift:"current_term,2" db:"current_term" json:"current_term"`
  LeaderAddr string `thrift:"leader_addr,3" db:"leader_addr" json:"leader_addr"`
  LeaderPort Port `thrift:"leader_port,4" db:"leader_port" json:"leader_port"`
  CommittedLogID LogID `thrift:"committed_log_id,5" db:"committed_log_id" json:"committed_log_id"`
  LastLogID LogID `thrift:"last_log_id,6" db:"last_log_id" json:"last_log_id"`
  LastLogTerm TermID `thrift:"last_log_term,7" db:"last_log_term" json:"last_log_term"`
}

func NewHeartbeatResponse() *HeartbeatResponse {
  return &HeartbeatResponse{}
}


func (p *HeartbeatResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *HeartbeatResponse) GetCurrentTerm() TermID {
  return p.CurrentTerm
}

func (p *HeartbeatResponse) GetLeaderAddr() string {
  return p.LeaderAddr
}

func (p *HeartbeatResponse) GetLeaderPort() Port {
  return p.LeaderPort
}

func (p *HeartbeatResponse) GetCommittedLogID() LogID {
  return p.CommittedLogID
}

func (p *HeartbeatResponse) GetLastLogID() LogID {
  return p.LastLogID
}

func (p *HeartbeatResponse) GetLastLogTerm() TermID {
  return p.LastLogTerm
}
func (p *HeartbeatResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartbeatResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *HeartbeatResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TermID(v)
  p.CurrentTerm = temp
}
  return nil
}

func (p *HeartbeatResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LeaderAddr = v
}
  return nil
}

func (p *HeartbeatResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Port(v)
  p.LeaderPort = temp
}
  return nil
}

func (p *HeartbeatResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LogID(v)
  p.CommittedLogID = temp
}
  return nil
}

func (p *HeartbeatResponse)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := LogID(v)
  p.LastLogID = temp
}
  return nil
}

func (p *HeartbeatResponse)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TermID(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *HeartbeatResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HeartbeatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartbeatResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("current_term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:current_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.CurrentTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.current_term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:current_term: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_addr: ", p), err) }
  if err := oprot.WriteString(string(p.LeaderAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_addr: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.LeaderPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leader_port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_port: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("committed_log_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:committed_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommittedLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.committed_log_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:committed_log_id: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_log_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_log_id: ", p), err) }
  return err
}

func (p *HeartbeatResponse) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_log_term", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_log_term: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_log_term (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_log_term: ", p), err) }
  return err
}

func (p *HeartbeatResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  currentTermVal := fmt.Sprintf("%v", p.CurrentTerm)
  leaderAddrVal := fmt.Sprintf("%v", p.LeaderAddr)
  leaderPortVal := fmt.Sprintf("%v", p.LeaderPort)
  committedLogIDVal := fmt.Sprintf("%v", p.CommittedLogID)
  lastLogIDVal := fmt.Sprintf("%v", p.LastLogID)
  lastLogTermVal := fmt.Sprintf("%v", p.LastLogTerm)
  return fmt.Sprintf("HeartbeatResponse({ErrorCode:%s CurrentTerm:%s LeaderAddr:%s LeaderPort:%s CommittedLogID:%s LastLogID:%s LastLogTerm:%s})", errorCodeVal, currentTermVal, leaderAddrVal, leaderPortVal, committedLogIDVal, lastLogIDVal, lastLogTermVal)
}

// Attributes:
//  - ErrorCode
type SendSnapshotResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
}

func NewSendSnapshotResponse() *SendSnapshotResponse {
  return &SendSnapshotResponse{}
}


func (p *SendSnapshotResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
func (p *SendSnapshotResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendSnapshotResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *SendSnapshotResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SendSnapshotResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendSnapshotResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *SendSnapshotResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  return fmt.Sprintf("SendSnapshotResponse({ErrorCode:%s})", errorCodeVal)
}

// Attributes:
//  - Space
//  - Part
type GetStateRequest struct {
  Space GraphSpaceID `thrift:"space,1" db:"space" json:"space"`
  Part PartitionID `thrift:"part,2" db:"part" json:"part"`
}

func NewGetStateRequest() *GetStateRequest {
  return &GetStateRequest{}
}


func (p *GetStateRequest) GetSpace() GraphSpaceID {
  return p.Space
}

func (p *GetStateRequest) GetPart() PartitionID {
  return p.Part
}
func (p *GetStateRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStateRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := GraphSpaceID(v)
  p.Space = temp
}
  return nil
}

func (p *GetStateRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PartitionID(v)
  p.Part = temp
}
  return nil
}

func (p *GetStateRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStateRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStateRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteI32(int32(p.Space)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *GetStateRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err) }
  if err := oprot.WriteI32(int32(p.Part)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err) }
  return err
}

func (p *GetStateRequest) String() string {
  if p == nil {
    return "<nil>"
  }

  spaceVal := fmt.Sprintf("%v", p.Space)
  partVal := fmt.Sprintf("%v", p.Part)
  return fmt.Sprintf("GetStateRequest({Space:%s Part:%s})", spaceVal, partVal)
}

// Attributes:
//  - ErrorCode
//  - Role
//  - Term
//  - IsLeader
type GetStateResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
  Role Role `thrift:"role,2" db:"role" json:"role"`
  Term TermID `thrift:"term,3" db:"term" json:"term"`
  IsLeader bool `thrift:"is_leader,4" db:"is_leader" json:"is_leader"`
}

func NewGetStateResponse() *GetStateResponse {
  return &GetStateResponse{}
}


func (p *GetStateResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *GetStateResponse) GetRole() Role {
  return p.Role
}

func (p *GetStateResponse) GetTerm() TermID {
  return p.Term
}

func (p *GetStateResponse) GetIsLeader() bool {
  return p.IsLeader
}
func (p *GetStateResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStateResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *GetStateResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Role(v)
  p.Role = temp
}
  return nil
}

func (p *GetStateResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TermID(v)
  p.Term = temp
}
  return nil
}

func (p *GetStateResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsLeader = v
}
  return nil
}

func (p *GetStateResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStateResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStateResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *GetStateResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err) }
  return err
}

func (p *GetStateResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:term: ", p), err) }
  return err
}

func (p *GetStateResponse) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_leader", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_leader: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsLeader)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_leader (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_leader: ", p), err) }
  return err
}

func (p *GetStateResponse) String() string {
  if p == nil {
    return "<nil>"
  }

  errorCodeVal := fmt.Sprintf("%v", p.ErrorCode)
  roleVal := fmt.Sprintf("%v", p.Role)
  termVal := fmt.Sprintf("%v", p.Term)
  isLeaderVal := fmt.Sprintf("%v", p.IsLeader)
  return fmt.Sprintf("GetStateResponse({ErrorCode:%s Role:%s Term:%s IsLeader:%s})", errorCodeVal, roleVal, termVal, isLeaderVal)
}

