// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_DISCONNECTED ErrorCode = -1
  ErrorCode_E_FAIL_TO_CONNECT ErrorCode = -2
  ErrorCode_E_RPC_FAILURE ErrorCode = -3
  ErrorCode_E_LEADER_CHANGED ErrorCode = -11
  ErrorCode_E_NO_HOSTS ErrorCode = -21
  ErrorCode_E_EXISTED ErrorCode = -22
  ErrorCode_E_NOT_FOUND ErrorCode = -23
  ErrorCode_E_INVALID_HOST ErrorCode = -24
  ErrorCode_E_UNSUPPORTED ErrorCode = -25
  ErrorCode_E_NOT_DROP ErrorCode = -26
  ErrorCode_E_BALANCER_RUNNING ErrorCode = -27
  ErrorCode_E_CONFIG_IMMUTABLE ErrorCode = -28
  ErrorCode_E_CONFLICT ErrorCode = -29
  ErrorCode_E_INVALID_PARM ErrorCode = -30
  ErrorCode_E_WRONGCLUSTER ErrorCode = -31
  ErrorCode_E_STORE_FAILURE ErrorCode = -32
  ErrorCode_E_STORE_SEGMENT_ILLEGAL ErrorCode = -33
  ErrorCode_E_BAD_BALANCE_PLAN ErrorCode = -34
  ErrorCode_E_BALANCED ErrorCode = -35
  ErrorCode_E_NO_RUNNING_BALANCE_PLAN ErrorCode = -36
  ErrorCode_E_NO_VALID_HOST ErrorCode = -37
  ErrorCode_E_CORRUPTTED_BALANCE_PLAN ErrorCode = -38
  ErrorCode_E_INVALID_PASSWORD ErrorCode = -41
  ErrorCode_E_IMPROPER_ROLE ErrorCode = -42
  ErrorCode_E_INVALID_PARTITION_NUM ErrorCode = -43
  ErrorCode_E_INVALID_REPLICA_FACTOR ErrorCode = -44
  ErrorCode_E_INVALID_CHARSET ErrorCode = -45
  ErrorCode_E_INVALID_COLLATE ErrorCode = -46
  ErrorCode_E_CHARSET_COLLATE_NOT_MATCH ErrorCode = -47
  ErrorCode_E_SNAPSHOT_FAILURE ErrorCode = -51
  ErrorCode_E_BLOCK_WRITE_FAILURE ErrorCode = -52
  ErrorCode_E_REBUILD_INDEX_FAILURE ErrorCode = -53
  ErrorCode_E_INDEX_WITH_TTL ErrorCode = -54
  ErrorCode_E_ADD_JOB_FAILURE ErrorCode = -55
  ErrorCode_E_STOP_JOB_FAILURE ErrorCode = -56
  ErrorCode_E_SAVE_JOB_FAILURE ErrorCode = -57
  ErrorCode_E_BALANCER_FAILURE ErrorCode = -58
  ErrorCode_E_JOB_NOT_FINISHED ErrorCode = -59
  ErrorCode_E_UNKNOWN ErrorCode = -99
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_DISCONNECTED: "E_DISCONNECTED",
  ErrorCode_E_FAIL_TO_CONNECT: "E_FAIL_TO_CONNECT",
  ErrorCode_E_RPC_FAILURE: "E_RPC_FAILURE",
  ErrorCode_E_LEADER_CHANGED: "E_LEADER_CHANGED",
  ErrorCode_E_NO_HOSTS: "E_NO_HOSTS",
  ErrorCode_E_EXISTED: "E_EXISTED",
  ErrorCode_E_NOT_FOUND: "E_NOT_FOUND",
  ErrorCode_E_INVALID_HOST: "E_INVALID_HOST",
  ErrorCode_E_UNSUPPORTED: "E_UNSUPPORTED",
  ErrorCode_E_NOT_DROP: "E_NOT_DROP",
  ErrorCode_E_BALANCER_RUNNING: "E_BALANCER_RUNNING",
  ErrorCode_E_CONFIG_IMMUTABLE: "E_CONFIG_IMMUTABLE",
  ErrorCode_E_CONFLICT: "E_CONFLICT",
  ErrorCode_E_INVALID_PARM: "E_INVALID_PARM",
  ErrorCode_E_WRONGCLUSTER: "E_WRONGCLUSTER",
  ErrorCode_E_STORE_FAILURE: "E_STORE_FAILURE",
  ErrorCode_E_STORE_SEGMENT_ILLEGAL: "E_STORE_SEGMENT_ILLEGAL",
  ErrorCode_E_BAD_BALANCE_PLAN: "E_BAD_BALANCE_PLAN",
  ErrorCode_E_BALANCED: "E_BALANCED",
  ErrorCode_E_NO_RUNNING_BALANCE_PLAN: "E_NO_RUNNING_BALANCE_PLAN",
  ErrorCode_E_NO_VALID_HOST: "E_NO_VALID_HOST",
  ErrorCode_E_CORRUPTTED_BALANCE_PLAN: "E_CORRUPTTED_BALANCE_PLAN",
  ErrorCode_E_INVALID_PASSWORD: "E_INVALID_PASSWORD",
  ErrorCode_E_IMPROPER_ROLE: "E_IMPROPER_ROLE",
  ErrorCode_E_INVALID_PARTITION_NUM: "E_INVALID_PARTITION_NUM",
  ErrorCode_E_INVALID_REPLICA_FACTOR: "E_INVALID_REPLICA_FACTOR",
  ErrorCode_E_INVALID_CHARSET: "E_INVALID_CHARSET",
  ErrorCode_E_INVALID_COLLATE: "E_INVALID_COLLATE",
  ErrorCode_E_CHARSET_COLLATE_NOT_MATCH: "E_CHARSET_COLLATE_NOT_MATCH",
  ErrorCode_E_SNAPSHOT_FAILURE: "E_SNAPSHOT_FAILURE",
  ErrorCode_E_BLOCK_WRITE_FAILURE: "E_BLOCK_WRITE_FAILURE",
  ErrorCode_E_REBUILD_INDEX_FAILURE: "E_REBUILD_INDEX_FAILURE",
  ErrorCode_E_INDEX_WITH_TTL: "E_INDEX_WITH_TTL",
  ErrorCode_E_ADD_JOB_FAILURE: "E_ADD_JOB_FAILURE",
  ErrorCode_E_STOP_JOB_FAILURE: "E_STOP_JOB_FAILURE",
  ErrorCode_E_SAVE_JOB_FAILURE: "E_SAVE_JOB_FAILURE",
  ErrorCode_E_BALANCER_FAILURE: "E_BALANCER_FAILURE",
  ErrorCode_E_JOB_NOT_FINISHED: "E_JOB_NOT_FINISHED",
  ErrorCode_E_UNKNOWN: "E_UNKNOWN",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_DISCONNECTED": ErrorCode_E_DISCONNECTED,
  "E_FAIL_TO_CONNECT": ErrorCode_E_FAIL_TO_CONNECT,
  "E_RPC_FAILURE": ErrorCode_E_RPC_FAILURE,
  "E_LEADER_CHANGED": ErrorCode_E_LEADER_CHANGED,
  "E_NO_HOSTS": ErrorCode_E_NO_HOSTS,
  "E_EXISTED": ErrorCode_E_EXISTED,
  "E_NOT_FOUND": ErrorCode_E_NOT_FOUND,
  "E_INVALID_HOST": ErrorCode_E_INVALID_HOST,
  "E_UNSUPPORTED": ErrorCode_E_UNSUPPORTED,
  "E_NOT_DROP": ErrorCode_E_NOT_DROP,
  "E_BALANCER_RUNNING": ErrorCode_E_BALANCER_RUNNING,
  "E_CONFIG_IMMUTABLE": ErrorCode_E_CONFIG_IMMUTABLE,
  "E_CONFLICT": ErrorCode_E_CONFLICT,
  "E_INVALID_PARM": ErrorCode_E_INVALID_PARM,
  "E_WRONGCLUSTER": ErrorCode_E_WRONGCLUSTER,
  "E_STORE_FAILURE": ErrorCode_E_STORE_FAILURE,
  "E_STORE_SEGMENT_ILLEGAL": ErrorCode_E_STORE_SEGMENT_ILLEGAL,
  "E_BAD_BALANCE_PLAN": ErrorCode_E_BAD_BALANCE_PLAN,
  "E_BALANCED": ErrorCode_E_BALANCED,
  "E_NO_RUNNING_BALANCE_PLAN": ErrorCode_E_NO_RUNNING_BALANCE_PLAN,
  "E_NO_VALID_HOST": ErrorCode_E_NO_VALID_HOST,
  "E_CORRUPTTED_BALANCE_PLAN": ErrorCode_E_CORRUPTTED_BALANCE_PLAN,
  "E_INVALID_PASSWORD": ErrorCode_E_INVALID_PASSWORD,
  "E_IMPROPER_ROLE": ErrorCode_E_IMPROPER_ROLE,
  "E_INVALID_PARTITION_NUM": ErrorCode_E_INVALID_PARTITION_NUM,
  "E_INVALID_REPLICA_FACTOR": ErrorCode_E_INVALID_REPLICA_FACTOR,
  "E_INVALID_CHARSET": ErrorCode_E_INVALID_CHARSET,
  "E_INVALID_COLLATE": ErrorCode_E_INVALID_COLLATE,
  "E_CHARSET_COLLATE_NOT_MATCH": ErrorCode_E_CHARSET_COLLATE_NOT_MATCH,
  "E_SNAPSHOT_FAILURE": ErrorCode_E_SNAPSHOT_FAILURE,
  "E_BLOCK_WRITE_FAILURE": ErrorCode_E_BLOCK_WRITE_FAILURE,
  "E_REBUILD_INDEX_FAILURE": ErrorCode_E_REBUILD_INDEX_FAILURE,
  "E_INDEX_WITH_TTL": ErrorCode_E_INDEX_WITH_TTL,
  "E_ADD_JOB_FAILURE": ErrorCode_E_ADD_JOB_FAILURE,
  "E_STOP_JOB_FAILURE": ErrorCode_E_STOP_JOB_FAILURE,
  "E_SAVE_JOB_FAILURE": ErrorCode_E_SAVE_JOB_FAILURE,
  "E_BALANCER_FAILURE": ErrorCode_E_BALANCER_FAILURE,
  "E_JOB_NOT_FINISHED": ErrorCode_E_JOB_NOT_FINISHED,
  "E_UNKNOWN": ErrorCode_E_UNKNOWN,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

type AlterSchemaOp int64
const (
  AlterSchemaOp_ADD AlterSchemaOp = 1
  AlterSchemaOp_CHANGE AlterSchemaOp = 2
  AlterSchemaOp_DROP AlterSchemaOp = 3
  AlterSchemaOp_UNKNOWN AlterSchemaOp = 4
)

var AlterSchemaOpToName = map[AlterSchemaOp]string {
  AlterSchemaOp_ADD: "ADD",
  AlterSchemaOp_CHANGE: "CHANGE",
  AlterSchemaOp_DROP: "DROP",
  AlterSchemaOp_UNKNOWN: "UNKNOWN",
}

var AlterSchemaOpToValue = map[string]AlterSchemaOp {
  "ADD": AlterSchemaOp_ADD,
  "CHANGE": AlterSchemaOp_CHANGE,
  "DROP": AlterSchemaOp_DROP,
  "UNKNOWN": AlterSchemaOp_UNKNOWN,
}

func (p AlterSchemaOp) String() string {
  if v, ok := AlterSchemaOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AlterSchemaOpFromString(s string) (AlterSchemaOp, error) {
  if v, ok := AlterSchemaOpToValue[s]; ok {
    return v, nil
  }
  return AlterSchemaOp(0), fmt.Errorf("not a valid AlterSchemaOp string")
}

func AlterSchemaOpPtr(v AlterSchemaOp) *AlterSchemaOp { return &v }

type RoleType int64
const (
  RoleType_GOD RoleType = 1
  RoleType_ADMIN RoleType = 2
  RoleType_DBA RoleType = 3
  RoleType_USER RoleType = 4
  RoleType_GUEST RoleType = 5
)

var RoleTypeToName = map[RoleType]string {
  RoleType_GOD: "GOD",
  RoleType_ADMIN: "ADMIN",
  RoleType_DBA: "DBA",
  RoleType_USER: "USER",
  RoleType_GUEST: "GUEST",
}

var RoleTypeToValue = map[string]RoleType {
  "GOD": RoleType_GOD,
  "ADMIN": RoleType_ADMIN,
  "DBA": RoleType_DBA,
  "USER": RoleType_USER,
  "GUEST": RoleType_GUEST,
}

func (p RoleType) String() string {
  if v, ok := RoleTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
  if v, ok := RoleTypeToValue[s]; ok {
    return v, nil
  }
  return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }

type PropertyType int64
const (
  PropertyType_UNKNOWN PropertyType = 0
  PropertyType_BOOL PropertyType = 1
  PropertyType_INT64 PropertyType = 2
  PropertyType_VID PropertyType = 3
  PropertyType_FLOAT PropertyType = 4
  PropertyType_DOUBLE PropertyType = 5
  PropertyType_STRING PropertyType = 6
  PropertyType_FIXED_STRING PropertyType = 7
  PropertyType_INT8 PropertyType = 8
  PropertyType_INT16 PropertyType = 9
  PropertyType_INT32 PropertyType = 10
  PropertyType_TIMESTAMP PropertyType = 21
  PropertyType_DATE PropertyType = 24
  PropertyType_DATETIME PropertyType = 25
  PropertyType_TIME PropertyType = 26
)

var PropertyTypeToName = map[PropertyType]string {
  PropertyType_UNKNOWN: "UNKNOWN",
  PropertyType_BOOL: "BOOL",
  PropertyType_INT64: "INT64",
  PropertyType_VID: "VID",
  PropertyType_FLOAT: "FLOAT",
  PropertyType_DOUBLE: "DOUBLE",
  PropertyType_STRING: "STRING",
  PropertyType_FIXED_STRING: "FIXED_STRING",
  PropertyType_INT8: "INT8",
  PropertyType_INT16: "INT16",
  PropertyType_INT32: "INT32",
  PropertyType_TIMESTAMP: "TIMESTAMP",
  PropertyType_DATE: "DATE",
  PropertyType_DATETIME: "DATETIME",
  PropertyType_TIME: "TIME",
}

var PropertyTypeToValue = map[string]PropertyType {
  "UNKNOWN": PropertyType_UNKNOWN,
  "BOOL": PropertyType_BOOL,
  "INT64": PropertyType_INT64,
  "VID": PropertyType_VID,
  "FLOAT": PropertyType_FLOAT,
  "DOUBLE": PropertyType_DOUBLE,
  "STRING": PropertyType_STRING,
  "FIXED_STRING": PropertyType_FIXED_STRING,
  "INT8": PropertyType_INT8,
  "INT16": PropertyType_INT16,
  "INT32": PropertyType_INT32,
  "TIMESTAMP": PropertyType_TIMESTAMP,
  "DATE": PropertyType_DATE,
  "DATETIME": PropertyType_DATETIME,
  "TIME": PropertyType_TIME,
}

func (p PropertyType) String() string {
  if v, ok := PropertyTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func PropertyTypeFromString(s string) (PropertyType, error) {
  if v, ok := PropertyTypeToValue[s]; ok {
    return v, nil
  }
  return PropertyType(0), fmt.Errorf("not a valid PropertyType string")
}

func PropertyTypePtr(v PropertyType) *PropertyType { return &v }

type HostStatus int64
const (
  HostStatus_ONLINE HostStatus = 0
  HostStatus_OFFLINE HostStatus = 1
  HostStatus_UNKNOWN HostStatus = 2
)

var HostStatusToName = map[HostStatus]string {
  HostStatus_ONLINE: "ONLINE",
  HostStatus_OFFLINE: "OFFLINE",
  HostStatus_UNKNOWN: "UNKNOWN",
}

var HostStatusToValue = map[string]HostStatus {
  "ONLINE": HostStatus_ONLINE,
  "OFFLINE": HostStatus_OFFLINE,
  "UNKNOWN": HostStatus_UNKNOWN,
}

func (p HostStatus) String() string {
  if v, ok := HostStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HostStatusFromString(s string) (HostStatus, error) {
  if v, ok := HostStatusToValue[s]; ok {
    return v, nil
  }
  return HostStatus(0), fmt.Errorf("not a valid HostStatus string")
}

func HostStatusPtr(v HostStatus) *HostStatus { return &v }

type SnapshotStatus int64
const (
  SnapshotStatus_VALID SnapshotStatus = 0
  SnapshotStatus_INVALID SnapshotStatus = 1
)

var SnapshotStatusToName = map[SnapshotStatus]string {
  SnapshotStatus_VALID: "VALID",
  SnapshotStatus_INVALID: "INVALID",
}

var SnapshotStatusToValue = map[string]SnapshotStatus {
  "VALID": SnapshotStatus_VALID,
  "INVALID": SnapshotStatus_INVALID,
}

func (p SnapshotStatus) String() string {
  if v, ok := SnapshotStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func SnapshotStatusFromString(s string) (SnapshotStatus, error) {
  if v, ok := SnapshotStatusToValue[s]; ok {
    return v, nil
  }
  return SnapshotStatus(0), fmt.Errorf("not a valid SnapshotStatus string")
}

func SnapshotStatusPtr(v SnapshotStatus) *SnapshotStatus { return &v }

type AdminJobOp int64
const (
  AdminJobOp_ADD AdminJobOp = 1
  AdminJobOp_SHOW_All AdminJobOp = 2
  AdminJobOp_SHOW AdminJobOp = 3
  AdminJobOp_STOP AdminJobOp = 4
  AdminJobOp_RECOVER AdminJobOp = 5
)

var AdminJobOpToName = map[AdminJobOp]string {
  AdminJobOp_ADD: "ADD",
  AdminJobOp_SHOW_All: "SHOW_All",
  AdminJobOp_SHOW: "SHOW",
  AdminJobOp_STOP: "STOP",
  AdminJobOp_RECOVER: "RECOVER",
}

var AdminJobOpToValue = map[string]AdminJobOp {
  "ADD": AdminJobOp_ADD,
  "SHOW_All": AdminJobOp_SHOW_All,
  "SHOW": AdminJobOp_SHOW,
  "STOP": AdminJobOp_STOP,
  "RECOVER": AdminJobOp_RECOVER,
}

func (p AdminJobOp) String() string {
  if v, ok := AdminJobOpToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AdminJobOpFromString(s string) (AdminJobOp, error) {
  if v, ok := AdminJobOpToValue[s]; ok {
    return v, nil
  }
  return AdminJobOp(0), fmt.Errorf("not a valid AdminJobOp string")
}

func AdminJobOpPtr(v AdminJobOp) *AdminJobOp { return &v }

type AdminCmd int64
const (
  AdminCmd_COMPACT AdminCmd = 0
  AdminCmd_FLUSH AdminCmd = 1
  AdminCmd_REBUILD_TAG_INDEX AdminCmd = 2
  AdminCmd_REBUILD_EDGE_INDEX AdminCmd = 3
  AdminCmd_STATS AdminCmd = 4
  AdminCmd_UNKNOWN AdminCmd = 5
)

var AdminCmdToName = map[AdminCmd]string {
  AdminCmd_COMPACT: "COMPACT",
  AdminCmd_FLUSH: "FLUSH",
  AdminCmd_REBUILD_TAG_INDEX: "REBUILD_TAG_INDEX",
  AdminCmd_REBUILD_EDGE_INDEX: "REBUILD_EDGE_INDEX",
  AdminCmd_STATS: "STATS",
  AdminCmd_UNKNOWN: "UNKNOWN",
}

var AdminCmdToValue = map[string]AdminCmd {
  "COMPACT": AdminCmd_COMPACT,
  "FLUSH": AdminCmd_FLUSH,
  "REBUILD_TAG_INDEX": AdminCmd_REBUILD_TAG_INDEX,
  "REBUILD_EDGE_INDEX": AdminCmd_REBUILD_EDGE_INDEX,
  "STATS": AdminCmd_STATS,
  "UNKNOWN": AdminCmd_UNKNOWN,
}

func (p AdminCmd) String() string {
  if v, ok := AdminCmdToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func AdminCmdFromString(s string) (AdminCmd, error) {
  if v, ok := AdminCmdToValue[s]; ok {
    return v, nil
  }
  return AdminCmd(0), fmt.Errorf("not a valid AdminCmd string")
}

func AdminCmdPtr(v AdminCmd) *AdminCmd { return &v }

type JobStatus int64
const (
  JobStatus_QUEUE JobStatus = 1
  JobStatus_RUNNING JobStatus = 2
  JobStatus_FINISHED JobStatus = 3
  JobStatus_FAILED JobStatus = 4
  JobStatus_STOPPED JobStatus = 5
  JobStatus_INVALID JobStatus = 255
)

var JobStatusToName = map[JobStatus]string {
  JobStatus_QUEUE: "QUEUE",
  JobStatus_RUNNING: "RUNNING",
  JobStatus_FINISHED: "FINISHED",
  JobStatus_FAILED: "FAILED",
  JobStatus_STOPPED: "STOPPED",
  JobStatus_INVALID: "INVALID",
}

var JobStatusToValue = map[string]JobStatus {
  "QUEUE": JobStatus_QUEUE,
  "RUNNING": JobStatus_RUNNING,
  "FINISHED": JobStatus_FINISHED,
  "FAILED": JobStatus_FAILED,
  "STOPPED": JobStatus_STOPPED,
  "INVALID": JobStatus_INVALID,
}

func (p JobStatus) String() string {
  if v, ok := JobStatusToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func JobStatusFromString(s string) (JobStatus, error) {
  if v, ok := JobStatusToValue[s]; ok {
    return v, nil
  }
  return JobStatus(0), fmt.Errorf("not a valid JobStatus string")
}

func JobStatusPtr(v JobStatus) *JobStatus { return &v }

type ListHostType int64
const (
  ListHostType_ALLOC ListHostType = 0
  ListHostType_GRAPH ListHostType = 1
  ListHostType_META ListHostType = 2
  ListHostType_STORAGE ListHostType = 3
)

var ListHostTypeToName = map[ListHostType]string {
  ListHostType_ALLOC: "ALLOC",
  ListHostType_GRAPH: "GRAPH",
  ListHostType_META: "META",
  ListHostType_STORAGE: "STORAGE",
}

var ListHostTypeToValue = map[string]ListHostType {
  "ALLOC": ListHostType_ALLOC,
  "GRAPH": ListHostType_GRAPH,
  "META": ListHostType_META,
  "STORAGE": ListHostType_STORAGE,
}

func (p ListHostType) String() string {
  if v, ok := ListHostTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ListHostTypeFromString(s string) (ListHostType, error) {
  if v, ok := ListHostTypeToValue[s]; ok {
    return v, nil
  }
  return ListHostType(0), fmt.Errorf("not a valid ListHostType string")
}

func ListHostTypePtr(v ListHostType) *ListHostType { return &v }

type HostRole int64
const (
  HostRole_GRAPH HostRole = 0
  HostRole_META HostRole = 1
  HostRole_STORAGE HostRole = 2
  HostRole_LISTENER HostRole = 3
  HostRole_UNKNOWN HostRole = 4
)

var HostRoleToName = map[HostRole]string {
  HostRole_GRAPH: "GRAPH",
  HostRole_META: "META",
  HostRole_STORAGE: "STORAGE",
  HostRole_LISTENER: "LISTENER",
  HostRole_UNKNOWN: "UNKNOWN",
}

var HostRoleToValue = map[string]HostRole {
  "GRAPH": HostRole_GRAPH,
  "META": HostRole_META,
  "STORAGE": HostRole_STORAGE,
  "LISTENER": HostRole_LISTENER,
  "UNKNOWN": HostRole_UNKNOWN,
}

func (p HostRole) String() string {
  if v, ok := HostRoleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func HostRoleFromString(s string) (HostRole, error) {
  if v, ok := HostRoleToValue[s]; ok {
    return v, nil
  }
  return HostRole(0), fmt.Errorf("not a valid HostRole string")
}

func HostRolePtr(v HostRole) *HostRole { return &v }

type TaskResult_ int64
const (
  TaskResult__SUCCEEDED TaskResult_ = 0
  TaskResult__FAILED TaskResult_ = 1
  TaskResult__IN_PROGRESS TaskResult_ = 2
  TaskResult__INVALID TaskResult_ = 3
)

var TaskResult_ToName = map[TaskResult_]string {
  TaskResult__SUCCEEDED: "SUCCEEDED",
  TaskResult__FAILED: "FAILED",
  TaskResult__IN_PROGRESS: "IN_PROGRESS",
  TaskResult__INVALID: "INVALID",
}

var TaskResult_ToValue = map[string]TaskResult_ {
  "SUCCEEDED": TaskResult__SUCCEEDED,
  "FAILED": TaskResult__FAILED,
  "IN_PROGRESS": TaskResult__IN_PROGRESS,
  "INVALID": TaskResult__INVALID,
}

func (p TaskResult_) String() string {
  if v, ok := TaskResult_ToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func TaskResult_FromString(s string) (TaskResult_, error) {
  if v, ok := TaskResult_ToValue[s]; ok {
    return v, nil
  }
  return TaskResult_(0), fmt.Errorf("not a valid TaskResult_ string")
}

func TaskResult_Ptr(v TaskResult_) *TaskResult_ { return &v }

type ConfigModule int64
const (
  ConfigModule_UNKNOWN ConfigModule = 0
  ConfigModule_ALL ConfigModule = 1
  ConfigModule_GRAPH ConfigModule = 2
  ConfigModule_META ConfigModule = 3
  ConfigModule_STORAGE ConfigModule = 4
)

var ConfigModuleToName = map[ConfigModule]string {
  ConfigModule_UNKNOWN: "UNKNOWN",
  ConfigModule_ALL: "ALL",
  ConfigModule_GRAPH: "GRAPH",
  ConfigModule_META: "META",
  ConfigModule_STORAGE: "STORAGE",
}

var ConfigModuleToValue = map[string]ConfigModule {
  "UNKNOWN": ConfigModule_UNKNOWN,
  "ALL": ConfigModule_ALL,
  "GRAPH": ConfigModule_GRAPH,
  "META": ConfigModule_META,
  "STORAGE": ConfigModule_STORAGE,
}

func (p ConfigModule) String() string {
  if v, ok := ConfigModuleToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModuleFromString(s string) (ConfigModule, error) {
  if v, ok := ConfigModuleToValue[s]; ok {
    return v, nil
  }
  return ConfigModule(0), fmt.Errorf("not a valid ConfigModule string")
}

func ConfigModulePtr(v ConfigModule) *ConfigModule { return &v }

type ConfigMode int64
const (
  ConfigMode_IMMUTABLE ConfigMode = 0
  ConfigMode_REBOOT ConfigMode = 1
  ConfigMode_MUTABLE ConfigMode = 2
  ConfigMode_IGNORED ConfigMode = 3
)

var ConfigModeToName = map[ConfigMode]string {
  ConfigMode_IMMUTABLE: "IMMUTABLE",
  ConfigMode_REBOOT: "REBOOT",
  ConfigMode_MUTABLE: "MUTABLE",
  ConfigMode_IGNORED: "IGNORED",
}

var ConfigModeToValue = map[string]ConfigMode {
  "IMMUTABLE": ConfigMode_IMMUTABLE,
  "REBOOT": ConfigMode_REBOOT,
  "MUTABLE": ConfigMode_MUTABLE,
  "IGNORED": ConfigMode_IGNORED,
}

func (p ConfigMode) String() string {
  if v, ok := ConfigModeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ConfigModeFromString(s string) (ConfigMode, error) {
  if v, ok := ConfigModeToValue[s]; ok {
    return v, nil
  }
  return ConfigMode(0), fmt.Errorf("not a valid ConfigMode string")
}

func ConfigModePtr(v ConfigMode) *ConfigMode { return &v }

type ListenerType int64
const (
  ListenerType_UNKNOWN ListenerType = 0
  ListenerType_ELASTICSEARCH ListenerType = 1
)

var ListenerTypeToName = map[ListenerType]string {
  ListenerType_UNKNOWN: "UNKNOWN",
  ListenerType_ELASTICSEARCH: "ELASTICSEARCH",
}

var ListenerTypeToValue = map[string]ListenerType {
  "UNKNOWN": ListenerType_UNKNOWN,
  "ELASTICSEARCH": ListenerType_ELASTICSEARCH,
}

func (p ListenerType) String() string {
  if v, ok := ListenerTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ListenerTypeFromString(s string) (ListenerType, error) {
  if v, ok := ListenerTypeToValue[s]; ok {
    return v, nil
  }
  return ListenerType(0), fmt.Errorf("not a valid ListenerType string")
}

func ListenerTypePtr(v ListenerType) *ListenerType { return &v }

type FTServiceType int64
const (
  FTServiceType_ELASTICSEARCH FTServiceType = 1
)

var FTServiceTypeToName = map[FTServiceType]string {
  FTServiceType_ELASTICSEARCH: "ELASTICSEARCH",
}

var FTServiceTypeToValue = map[string]FTServiceType {
  "ELASTICSEARCH": FTServiceType_ELASTICSEARCH,
}

func (p FTServiceType) String() string {
  if v, ok := FTServiceTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func FTServiceTypeFromString(s string) (FTServiceType, error) {
  if v, ok := FTServiceTypeToValue[s]; ok {
    return v, nil
  }
  return FTServiceType(0), fmt.Errorf("not a valid FTServiceType string")
}

func FTServiceTypePtr(v FTServiceType) *FTServiceType { return &v }

type SchemaVer int64

func SchemaVerPtr(v SchemaVer) *SchemaVer { return &v }

type ClusterID int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

// Attributes:
//  - SpaceID
//  - TagID
//  - EdgeType
//  - IndexID
//  - ClusterID
type ID struct {
  SpaceID *nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id,omitempty"`
  TagID *nebula0.TagID `thrift:"tag_id,2" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula0.EdgeType `thrift:"edge_type,3" db:"edge_type" json:"edge_type,omitempty"`
  IndexID *nebula0.IndexID `thrift:"index_id,4" db:"index_id" json:"index_id,omitempty"`
  ClusterID *ClusterID `thrift:"cluster_id,5" db:"cluster_id" json:"cluster_id,omitempty"`
}

func NewID() *ID {
  return &ID{}
}

var ID_SpaceID_DEFAULT nebula0.GraphSpaceID
func (p *ID) GetSpaceID() nebula0.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return ID_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var ID_TagID_DEFAULT nebula0.TagID
func (p *ID) GetTagID() nebula0.TagID {
  if !p.IsSetTagID() {
    return ID_TagID_DEFAULT
  }
return *p.TagID
}
var ID_EdgeType_DEFAULT nebula0.EdgeType
func (p *ID) GetEdgeType() nebula0.EdgeType {
  if !p.IsSetEdgeType() {
    return ID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
var ID_IndexID_DEFAULT nebula0.IndexID
func (p *ID) GetIndexID() nebula0.IndexID {
  if !p.IsSetIndexID() {
    return ID_IndexID_DEFAULT
  }
return *p.IndexID
}
var ID_ClusterID_DEFAULT ClusterID
func (p *ID) GetClusterID() ClusterID {
  if !p.IsSetClusterID() {
    return ID_ClusterID_DEFAULT
  }
return *p.ClusterID
}
func (p *ID) CountSetFieldsID() int {
  count := 0
  if (p.IsSetSpaceID()) {
    count++
  }
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  if (p.IsSetIndexID()) {
    count++
  }
  if (p.IsSetClusterID()) {
    count++
  }
  return count

}

func (p *ID) IsSetSpaceID() bool {
  return p.SpaceID != nil
}

func (p *ID) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *ID) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *ID) IsSetIndexID() bool {
  return p.IndexID != nil
}

func (p *ID) IsSetClusterID() bool {
  return p.ClusterID != nil
}

func (p *ID) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ID)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = &temp
}
  return nil
}

func (p *ID)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *ID)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *ID)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := nebula0.IndexID(v)
  p.IndexID = &temp
}
  return nil
}

func (p *ID)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = &temp
}
  return nil
}

func (p *ID) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsID(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("ID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ID) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_type: ", p), err) }
  }
  return err
}

func (p *ID) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetIndexID() {
    if err := oprot.WriteFieldBegin("index_id", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.IndexID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index_id (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index_id: ", p), err) }
  }
  return err
}

func (p *ID) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetClusterID() {
    if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cluster_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ClusterID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cluster_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cluster_id: ", p), err) }
  }
  return err
}

func (p *ID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ID(%+v)", *p)
}

// Attributes:
//  - Type
//  - TypeLength
type ColumnTypeDef struct {
  Type PropertyType `thrift:"type,1,required" db:"type" json:"type"`
  TypeLength int16 `thrift:"type_length,2" db:"type_length" json:"type_length,omitempty"`
}

func NewColumnTypeDef() *ColumnTypeDef {
  return &ColumnTypeDef{}
}


func (p *ColumnTypeDef) GetType() PropertyType {
  return p.Type
}
var ColumnTypeDef_TypeLength_DEFAULT int16 = 0

func (p *ColumnTypeDef) GetTypeLength() int16 {
  return p.TypeLength
}
func (p *ColumnTypeDef) IsSetTypeLength() bool {
  return p.TypeLength != ColumnTypeDef_TypeLength_DEFAULT
}

func (p *ColumnTypeDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetType = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnTypeDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PropertyType(v)
  p.Type = temp
}
  return nil
}

func (p *ColumnTypeDef)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TypeLength = v
}
  return nil
}

func (p *ColumnTypeDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ColumnTypeDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnTypeDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ColumnTypeDef) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin("type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(int16(p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *ColumnTypeDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnTypeDef(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - DefaultValue
//  - Nullable
type ColumnDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  Type *ColumnTypeDef `thrift:"type,2,required" db:"type" json:"type"`
  DefaultValue []byte `thrift:"default_value,3" db:"default_value" json:"default_value,omitempty"`
  Nullable bool `thrift:"nullable,4" db:"nullable" json:"nullable,omitempty"`
}

func NewColumnDef() *ColumnDef {
  return &ColumnDef{}
}


func (p *ColumnDef) GetName() []byte {
  return p.Name
}
var ColumnDef_Type_DEFAULT *ColumnTypeDef
func (p *ColumnDef) GetType() *ColumnTypeDef {
  if !p.IsSetType() {
    return ColumnDef_Type_DEFAULT
  }
return p.Type
}
var ColumnDef_DefaultValue_DEFAULT []byte

func (p *ColumnDef) GetDefaultValue() []byte {
  return p.DefaultValue
}
var ColumnDef_Nullable_DEFAULT bool = false

func (p *ColumnDef) GetNullable() bool {
  return p.Nullable
}
func (p *ColumnDef) IsSetType() bool {
  return p.Type != nil
}

func (p *ColumnDef) IsSetDefaultValue() bool {
  return p.DefaultValue != nil
}

func (p *ColumnDef) IsSetNullable() bool {
  return p.Nullable != ColumnDef_Nullable_DEFAULT
}

func (p *ColumnDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetType = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ColumnDef)  ReadField2(iprot thrift.Protocol) error {
  p.Type = NewColumnTypeDef()
  if err := p.Type.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ColumnDef)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DefaultValue = v
}
  return nil
}

func (p *ColumnDef)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Nullable = v
}
  return nil
}

func (p *ColumnDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ColumnDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ColumnDef) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := p.Type.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ColumnDef) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetDefaultValue() {
    if err := oprot.WriteFieldBegin("default_value", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:default_value: ", p), err) }
    if err := oprot.WriteBinary(p.DefaultValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.default_value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:default_value: ", p), err) }
  }
  return err
}

func (p *ColumnDef) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetNullable() {
    if err := oprot.WriteFieldBegin("nullable", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nullable: ", p), err) }
    if err := oprot.WriteBool(bool(p.Nullable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nullable (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nullable: ", p), err) }
  }
  return err
}

func (p *ColumnDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnDef(%+v)", *p)
}

// Attributes:
//  - TtlDuration
//  - TtlCol
type SchemaProp struct {
  TtlDuration *int64 `thrift:"ttl_duration,1" db:"ttl_duration" json:"ttl_duration,omitempty"`
  TtlCol []byte `thrift:"ttl_col,2" db:"ttl_col" json:"ttl_col,omitempty"`
}

func NewSchemaProp() *SchemaProp {
  return &SchemaProp{}
}

var SchemaProp_TtlDuration_DEFAULT int64
func (p *SchemaProp) GetTtlDuration() int64 {
  if !p.IsSetTtlDuration() {
    return SchemaProp_TtlDuration_DEFAULT
  }
return *p.TtlDuration
}
var SchemaProp_TtlCol_DEFAULT []byte

func (p *SchemaProp) GetTtlCol() []byte {
  return p.TtlCol
}
func (p *SchemaProp) IsSetTtlDuration() bool {
  return p.TtlDuration != nil
}

func (p *SchemaProp) IsSetTtlCol() bool {
  return p.TtlCol != nil
}

func (p *SchemaProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TtlDuration = &v
}
  return nil
}

func (p *SchemaProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TtlCol = v
}
  return nil
}

func (p *SchemaProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SchemaProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaProp) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlDuration() {
    if err := oprot.WriteFieldBegin("ttl_duration", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ttl_duration: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TtlDuration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_duration (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ttl_duration: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlCol() {
    if err := oprot.WriteFieldBegin("ttl_col", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_col: ", p), err) }
    if err := oprot.WriteBinary(p.TtlCol); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_col (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_col: ", p), err) }
  }
  return err
}

func (p *SchemaProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaProp(%+v)", *p)
}

// Attributes:
//  - Columns
//  - SchemaProp
type Schema struct {
  Columns []*ColumnDef `thrift:"columns,1" db:"columns" json:"columns"`
  SchemaProp *SchemaProp `thrift:"schema_prop,2" db:"schema_prop" json:"schema_prop"`
}

func NewSchema() *Schema {
  return &Schema{}
}


func (p *Schema) GetColumns() []*ColumnDef {
  return p.Columns
}
var Schema_SchemaProp_DEFAULT *SchemaProp
func (p *Schema) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return Schema_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *Schema) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *Schema) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := NewColumnDef()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Columns = append(p.Columns, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *Schema) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  return err
}

func (p *Schema) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_prop: ", p), err) }
  return err
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

// Attributes:
//  - Id
//  - Name
type IdName struct {
  Id *ID `thrift:"id,1" db:"id" json:"id"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
}

func NewIdName() *IdName {
  return &IdName{}
}

var IdName_Id_DEFAULT *ID
func (p *IdName) GetId() *ID {
  if !p.IsSetId() {
    return IdName_Id_DEFAULT
  }
return p.Id
}

func (p *IdName) GetName() []byte {
  return p.Name
}
func (p *IdName) IsSetId() bool {
  return p.Id != nil
}

func (p *IdName) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdName)  ReadField1(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *IdName)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IdName) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IdName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdName) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *IdName) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *IdName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdName(%+v)", *p)
}

// Attributes:
//  - SpaceName
//  - PartitionNum
//  - ReplicaFactor
//  - CharsetName
//  - CollateName
//  - VidType
//  - GroupName
type SpaceDesc struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  PartitionNum int32 `thrift:"partition_num,2" db:"partition_num" json:"partition_num"`
  ReplicaFactor int32 `thrift:"replica_factor,3" db:"replica_factor" json:"replica_factor"`
  CharsetName []byte `thrift:"charset_name,4" db:"charset_name" json:"charset_name"`
  CollateName []byte `thrift:"collate_name,5" db:"collate_name" json:"collate_name"`
  VidType *ColumnTypeDef `thrift:"vid_type,6" db:"vid_type" json:"vid_type"`
  GroupName []byte `thrift:"group_name,7" db:"group_name" json:"group_name,omitempty"`
}

func NewSpaceDesc() *SpaceDesc {
  return &SpaceDesc{}
}


func (p *SpaceDesc) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *SpaceDesc) GetPartitionNum() int32 {
  return p.PartitionNum
}

func (p *SpaceDesc) GetReplicaFactor() int32 {
  return p.ReplicaFactor
}

func (p *SpaceDesc) GetCharsetName() []byte {
  return p.CharsetName
}

func (p *SpaceDesc) GetCollateName() []byte {
  return p.CollateName
}
var SpaceDesc_VidType_DEFAULT *ColumnTypeDef = &ColumnTypeDef{
  Type:   7,
  TypeLength: 8,
}
func (p *SpaceDesc) GetVidType() *ColumnTypeDef {
  if !p.IsSetVidType() {
    return SpaceDesc_VidType_DEFAULT
  }
return p.VidType
}
var SpaceDesc_GroupName_DEFAULT []byte

func (p *SpaceDesc) GetGroupName() []byte {
  return p.GroupName
}
func (p *SpaceDesc) IsSetVidType() bool {
  return p.VidType != nil
}

func (p *SpaceDesc) IsSetGroupName() bool {
  return p.GroupName != nil
}

func (p *SpaceDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartitionNum = v
}
  return nil
}

func (p *SpaceDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReplicaFactor = v
}
  return nil
}

func (p *SpaceDesc)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CharsetName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CollateName = v
}
  return nil
}

func (p *SpaceDesc)  ReadField6(iprot thrift.Protocol) error {
  p.VidType = NewColumnTypeDef()
  if err := p.VidType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VidType), err)
  }
  return nil
}

func (p *SpaceDesc)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *SpaceDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("partition_num", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partition_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartitionNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_num (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partition_num: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("replica_factor", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replica_factor: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReplicaFactor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_factor (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replica_factor: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("charset_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:charset_name: ", p), err) }
  if err := oprot.WriteBinary(p.CharsetName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.charset_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:charset_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("collate_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:collate_name: ", p), err) }
  if err := oprot.WriteBinary(p.CollateName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.collate_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:collate_name: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vid_type", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vid_type: ", p), err) }
  if err := p.VidType.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VidType), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vid_type: ", p), err) }
  return err
}

func (p *SpaceDesc) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetGroupName() {
    if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:group_name: ", p), err) }
    if err := oprot.WriteBinary(p.GroupName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.group_name (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:group_name: ", p), err) }
  }
  return err
}

func (p *SpaceDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceDesc(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Properties
type SpaceItem struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Properties *SpaceDesc `thrift:"properties,2" db:"properties" json:"properties"`
}

func NewSpaceItem() *SpaceItem {
  return &SpaceItem{}
}


func (p *SpaceItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
var SpaceItem_Properties_DEFAULT *SpaceDesc
func (p *SpaceItem) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return SpaceItem_Properties_DEFAULT
  }
return p.Properties
}
func (p *SpaceItem) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *SpaceItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SpaceItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *SpaceItem)  ReadField2(iprot thrift.Protocol) error {
  p.Properties = NewSpaceDesc()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *SpaceItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SpaceItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SpaceItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *SpaceItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  return err
}

func (p *SpaceItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SpaceItem(%+v)", *p)
}

// Attributes:
//  - TagID
//  - TagName
//  - Version
//  - Schema
type TagItem struct {
  TagID nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewTagItem() *TagItem {
  return &TagItem{}
}


func (p *TagItem) GetTagID() nebula0.TagID {
  return p.TagID
}

func (p *TagItem) GetTagName() []byte {
  return p.TagName
}

func (p *TagItem) GetVersion() SchemaVer {
  return p.Version
}
var TagItem_Schema_DEFAULT *Schema
func (p *TagItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return TagItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *TagItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *TagItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TagItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = temp
}
  return nil
}

func (p *TagItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *TagItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *TagItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *TagItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TagItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TagItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TagID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  return err
}

func (p *TagItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *TagItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *TagItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *TagItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagItem(%+v)", *p)
}

// Attributes:
//  - Op
//  - Schema
type AlterSchemaItem struct {
  Op AlterSchemaOp `thrift:"op,1" db:"op" json:"op"`
  Schema *Schema `thrift:"schema,2" db:"schema" json:"schema"`
}

func NewAlterSchemaItem() *AlterSchemaItem {
  return &AlterSchemaItem{}
}


func (p *AlterSchemaItem) GetOp() AlterSchemaOp {
  return p.Op
}
var AlterSchemaItem_Schema_DEFAULT *Schema
func (p *AlterSchemaItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return AlterSchemaItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *AlterSchemaItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *AlterSchemaItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterSchemaItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AlterSchemaOp(v)
  p.Op = temp
}
  return nil
}

func (p *AlterSchemaItem)  ReadField2(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *AlterSchemaItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterSchemaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterSchemaItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err) }
  return err
}

func (p *AlterSchemaItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  return err
}

func (p *AlterSchemaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterSchemaItem(%+v)", *p)
}

// Attributes:
//  - EdgeType
//  - EdgeName
//  - Version
//  - Schema
type EdgeItem struct {
  EdgeType nebula0.EdgeType `thrift:"edge_type,1" db:"edge_type" json:"edge_type"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
  Schema *Schema `thrift:"schema,4" db:"schema" json:"schema"`
}

func NewEdgeItem() *EdgeItem {
  return &EdgeItem{}
}


func (p *EdgeItem) GetEdgeType() nebula0.EdgeType {
  return p.EdgeType
}

func (p *EdgeItem) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *EdgeItem) GetVersion() SchemaVer {
  return p.Version
}
var EdgeItem_Schema_DEFAULT *Schema
func (p *EdgeItem) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return EdgeItem_Schema_DEFAULT
  }
return p.Schema
}
func (p *EdgeItem) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *EdgeItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EdgeItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = temp
}
  return nil
}

func (p *EdgeItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *EdgeItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *EdgeItem)  ReadField4(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *EdgeItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("EdgeItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EdgeItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:edge_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.EdgeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:edge_type: ", p), err) }
  return err
}

func (p *EdgeItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *EdgeItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *EdgeItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema: ", p), err) }
  return err
}

func (p *EdgeItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EdgeItem(%+v)", *p)
}

// Attributes:
//  - TagID
//  - EdgeType
type SchemaID struct {
  TagID *nebula0.TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *nebula0.EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type,omitempty"`
}

func NewSchemaID() *SchemaID {
  return &SchemaID{}
}

var SchemaID_TagID_DEFAULT nebula0.TagID
func (p *SchemaID) GetTagID() nebula0.TagID {
  if !p.IsSetTagID() {
    return SchemaID_TagID_DEFAULT
  }
return *p.TagID
}
var SchemaID_EdgeType_DEFAULT nebula0.EdgeType
func (p *SchemaID) GetEdgeType() nebula0.EdgeType {
  if !p.IsSetEdgeType() {
    return SchemaID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
func (p *SchemaID) CountSetFieldsSchemaID() int {
  count := 0
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  return count

}

func (p *SchemaID) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *SchemaID) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *SchemaID) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaID)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *SchemaID)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *SchemaID) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsSchemaID(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("SchemaID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaID) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  }
  return err
}

func (p *SchemaID) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  }
  return err
}

func (p *SchemaID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaID(%+v)", *p)
}

// Attributes:
//  - IndexID
//  - IndexName
//  - SchemaID
//  - SchemaName
//  - Fields
type IndexItem struct {
  IndexID nebula0.IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  SchemaID *SchemaID `thrift:"schema_id,3" db:"schema_id" json:"schema_id"`
  SchemaName []byte `thrift:"schema_name,4" db:"schema_name" json:"schema_name"`
  Fields []*ColumnDef `thrift:"fields,5" db:"fields" json:"fields"`
}

func NewIndexItem() *IndexItem {
  return &IndexItem{}
}


func (p *IndexItem) GetIndexID() nebula0.IndexID {
  return p.IndexID
}

func (p *IndexItem) GetIndexName() []byte {
  return p.IndexName
}
var IndexItem_SchemaID_DEFAULT *SchemaID
func (p *IndexItem) GetSchemaID() *SchemaID {
  if !p.IsSetSchemaID() {
    return IndexItem_SchemaID_DEFAULT
  }
return p.SchemaID
}

func (p *IndexItem) GetSchemaName() []byte {
  return p.SchemaName
}

func (p *IndexItem) GetFields() []*ColumnDef {
  return p.Fields
}
func (p *IndexItem) IsSetSchemaID() bool {
  return p.SchemaID != nil
}

func (p *IndexItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *IndexItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *IndexItem)  ReadField3(iprot thrift.Protocol) error {
  p.SchemaID = NewSchemaID()
  if err := p.SchemaID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SchemaName = v
}
  return nil
}

func (p *IndexItem)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := NewColumnDef()
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Fields = append(p.Fields, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema_id: ", p), err) }
  if err := p.SchemaID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_name: ", p), err) }
  if err := oprot.WriteBinary(p.SchemaName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schema_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fields: ", p), err) }
  return err
}

func (p *IndexItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexItem(%+v)", *p)
}

// Attributes:
//  - HostAddr
//  - Status
//  - LeaderParts
//  - AllParts
//  - Role
//  - GitInfoSha
//  - ZoneName
type HostItem struct {
  HostAddr *nebula0.HostAddr `thrift:"hostAddr,1" db:"hostAddr" json:"hostAddr"`
  Status HostStatus `thrift:"status,2" db:"status" json:"status"`
  LeaderParts map[string][]nebula0.PartitionID `thrift:"leader_parts,3" db:"leader_parts" json:"leader_parts"`
  AllParts map[string][]nebula0.PartitionID `thrift:"all_parts,4" db:"all_parts" json:"all_parts"`
  Role HostRole `thrift:"role,5" db:"role" json:"role"`
  GitInfoSha []byte `thrift:"git_info_sha,6" db:"git_info_sha" json:"git_info_sha"`
  ZoneName []byte `thrift:"zone_name,7" db:"zone_name" json:"zone_name,omitempty"`
}

func NewHostItem() *HostItem {
  return &HostItem{}
}

var HostItem_HostAddr_DEFAULT *nebula0.HostAddr
func (p *HostItem) GetHostAddr() *nebula0.HostAddr {
  if !p.IsSetHostAddr() {
    return HostItem_HostAddr_DEFAULT
  }
return p.HostAddr
}

func (p *HostItem) GetStatus() HostStatus {
  return p.Status
}

func (p *HostItem) GetLeaderParts() map[string][]nebula0.PartitionID {
  return p.LeaderParts
}

func (p *HostItem) GetAllParts() map[string][]nebula0.PartitionID {
  return p.AllParts
}

func (p *HostItem) GetRole() HostRole {
  return p.Role
}

func (p *HostItem) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
var HostItem_ZoneName_DEFAULT []byte

func (p *HostItem) GetZoneName() []byte {
  return p.ZoneName
}
func (p *HostItem) IsSetHostAddr() bool {
  return p.HostAddr != nil
}

func (p *HostItem) IsSetZoneName() bool {
  return p.ZoneName != nil
}

func (p *HostItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostItem)  ReadField1(iprot thrift.Protocol) error {
  p.HostAddr = nebula0.NewHostAddr()
  if err := p.HostAddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostAddr), err)
  }
  return nil
}

func (p *HostItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := HostStatus(v)
  p.Status = temp
}
  return nil
}

func (p *HostItem)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.LeaderParts =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val4 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem5 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem5 = temp
}
      _val4 = append(_val4, _elem5)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderParts[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]nebula0.PartitionID, size)
  p.AllParts =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val7 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem8 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem8 = temp
}
      _val7 = append(_val7, _elem8)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.AllParts[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := HostRole(v)
  p.Role = temp
}
  return nil
}

func (p *HostItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.GitInfoSha = v
}
  return nil
}

func (p *HostItem)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *HostItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hostAddr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err) }
  if err := p.HostAddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostAddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err) }
  return err
}

func (p *HostItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *HostItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader_parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.LeaderParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.LeaderParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("all_parts", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:all_parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.AllParts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.AllParts {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:all_parts: ", p), err) }
  return err
}

func (p *HostItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:role: ", p), err) }
  return err
}

func (p *HostItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("git_info_sha", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:git_info_sha: ", p), err) }
  return err
}

func (p *HostItem) writeField7(oprot thrift.Protocol) (err error) {
  if p.IsSetZoneName() {
    if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:zone_name: ", p), err) }
    if err := oprot.WriteBinary(p.ZoneName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.zone_name (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:zone_name: ", p), err) }
  }
  return err
}

func (p *HostItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostItem(%+v)", *p)
}

// Attributes:
//  - Account
//  - IsLock
//  - MaxQueriesPerHour
//  - MaxUpdatesPerHour
//  - MaxConnectionsPerHour
//  - MaxUserConnections
type UserItem struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IsLock bool `thrift:"is_lock,2" db:"is_lock" json:"is_lock"`
  MaxQueriesPerHour int32 `thrift:"max_queries_per_hour,3" db:"max_queries_per_hour" json:"max_queries_per_hour"`
  MaxUpdatesPerHour int32 `thrift:"max_updates_per_hour,4" db:"max_updates_per_hour" json:"max_updates_per_hour"`
  MaxConnectionsPerHour int32 `thrift:"max_connections_per_hour,5" db:"max_connections_per_hour" json:"max_connections_per_hour"`
  MaxUserConnections int32 `thrift:"max_user_connections,6" db:"max_user_connections" json:"max_user_connections"`
}

func NewUserItem() *UserItem {
  return &UserItem{}
}


func (p *UserItem) GetAccount() []byte {
  return p.Account
}

func (p *UserItem) GetIsLock() bool {
  return p.IsLock
}

func (p *UserItem) GetMaxQueriesPerHour() int32 {
  return p.MaxQueriesPerHour
}

func (p *UserItem) GetMaxUpdatesPerHour() int32 {
  return p.MaxUpdatesPerHour
}

func (p *UserItem) GetMaxConnectionsPerHour() int32 {
  return p.MaxConnectionsPerHour
}

func (p *UserItem) GetMaxUserConnections() int32 {
  return p.MaxUserConnections
}
func (p *UserItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *UserItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IsLock = v
}
  return nil
}

func (p *UserItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxQueriesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUpdatesPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxConnectionsPerHour = v
}
  return nil
}

func (p *UserItem)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxUserConnections = v
}
  return nil
}

func (p *UserItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("UserItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *UserItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("is_lock", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:is_lock: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsLock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_lock (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:is_lock: ", p), err) }
  return err
}

func (p *UserItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_queries_per_hour", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_queries_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxQueriesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_queries_per_hour (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_queries_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_updates_per_hour", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_updates_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUpdatesPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_updates_per_hour (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_updates_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_connections_per_hour", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_connections_per_hour: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxConnectionsPerHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_connections_per_hour (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_connections_per_hour: ", p), err) }
  return err
}

func (p *UserItem) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_user_connections", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:max_user_connections: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUserConnections)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_user_connections (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:max_user_connections: ", p), err) }
  return err
}

func (p *UserItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserItem(%+v)", *p)
}

// Attributes:
//  - UserID
//  - SpaceID
//  - RoleType
type RoleItem struct {
  UserID []byte `thrift:"user_id,1" db:"user_id" json:"user_id"`
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  RoleType RoleType `thrift:"role_type,3" db:"role_type" json:"role_type"`
}

func NewRoleItem() *RoleItem {
  return &RoleItem{}
}


func (p *RoleItem) GetUserID() []byte {
  return p.UserID
}

func (p *RoleItem) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RoleItem) GetRoleType() RoleType {
  return p.RoleType
}
func (p *RoleItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *RoleItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RoleItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := RoleType(v)
  p.RoleType = temp
}
  return nil
}

func (p *RoleItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RoleItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteBinary(p.UserID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role_type: ", p), err) }
  return err
}

func (p *RoleItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleItem(%+v)", *p)
}

// Attributes:
//  - Code
//  - Id
//  - Leader
type ExecResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Id *ID `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
}

func NewExecResp() *ExecResp {
  return &ExecResp{}
}


func (p *ExecResp) GetCode() ErrorCode {
  return p.Code
}
var ExecResp_Id_DEFAULT *ID
func (p *ExecResp) GetId() *ID {
  if !p.IsSetId() {
    return ExecResp_Id_DEFAULT
  }
return p.Id
}
var ExecResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ExecResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ExecResp_Leader_DEFAULT
  }
return p.Leader
}
func (p *ExecResp) IsSetId() bool {
  return p.Id != nil
}

func (p *ExecResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ExecResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExecResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ExecResp)  ReadField2(iprot thrift.Protocol) error {
  p.Id = NewID()
  if err := p.Id.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Id), err)
  }
  return nil
}

func (p *ExecResp)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ExecResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ExecResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := p.Id.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Id), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *ExecResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *ExecResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecResp(%+v)", *p)
}

// Attributes:
//  - Op
//  - Cmd
//  - Paras
type AdminJobReq struct {
  Op AdminJobOp `thrift:"op,1" db:"op" json:"op"`
  Cmd AdminCmd `thrift:"cmd,2" db:"cmd" json:"cmd"`
  Paras [][]byte `thrift:"paras,3" db:"paras" json:"paras"`
}

func NewAdminJobReq() *AdminJobReq {
  return &AdminJobReq{}
}


func (p *AdminJobReq) GetOp() AdminJobOp {
  return p.Op
}

func (p *AdminJobReq) GetCmd() AdminCmd {
  return p.Cmd
}

func (p *AdminJobReq) GetParas() [][]byte {
  return p.Paras
}
func (p *AdminJobReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AdminJobOp(v)
  p.Op = temp
}
  return nil
}

func (p *AdminJobReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AdminCmd(v)
  p.Cmd = temp
}
  return nil
}

func (p *AdminJobReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Paras = append(p.Paras, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("op", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:op: ", p), err) }
  if err := oprot.WriteI32(int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:op: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cmd", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmd: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cmd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmd: ", p), err) }
  return err
}

func (p *AdminJobReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("paras", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paras: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paras: ", p), err) }
  return err
}

func (p *AdminJobReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobReq(%+v)", *p)
}

// Attributes:
//  - Id
//  - Cmd
//  - Paras
//  - Status
//  - StartTime
//  - StopTime
type JobDesc struct {
  Id int32 `thrift:"id,1" db:"id" json:"id"`
  Cmd AdminCmd `thrift:"cmd,2" db:"cmd" json:"cmd"`
  Paras []string `thrift:"paras,3" db:"paras" json:"paras"`
  Status JobStatus `thrift:"status,4" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,5" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,6" db:"stop_time" json:"stop_time"`
}

func NewJobDesc() *JobDesc {
  return &JobDesc{}
}


func (p *JobDesc) GetId() int32 {
  return p.Id
}

func (p *JobDesc) GetCmd() AdminCmd {
  return p.Cmd
}

func (p *JobDesc) GetParas() []string {
  return p.Paras
}

func (p *JobDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *JobDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *JobDesc) GetStopTime() int64 {
  return p.StopTime
}
func (p *JobDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JobDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *JobDesc)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AdminCmd(v)
  p.Cmd = temp
}
  return nil
}

func (p *JobDesc)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Paras =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Paras = append(p.Paras, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *JobDesc)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *JobDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *JobDesc)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StopTime = v
}
  return nil
}

func (p *JobDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("JobDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JobDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *JobDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cmd", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmd: ", p), err) }
  if err := oprot.WriteI32(int32(p.Cmd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cmd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmd: ", p), err) }
  return err
}

func (p *JobDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("paras", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paras: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Paras)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Paras {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paras: ", p), err) }
  return err
}

func (p *JobDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *JobDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  return err
}

func (p *JobDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stop_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stop_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stop_time: ", p), err) }
  return err
}

func (p *JobDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JobDesc(%+v)", *p)
}

// Attributes:
//  - TaskID
//  - Host
//  - Status
//  - StartTime
//  - StopTime
//  - JobID
type TaskDesc struct {
  TaskID int32 `thrift:"task_id,1" db:"task_id" json:"task_id"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  Status JobStatus `thrift:"status,3" db:"status" json:"status"`
  StartTime int64 `thrift:"start_time,4" db:"start_time" json:"start_time"`
  StopTime int64 `thrift:"stop_time,5" db:"stop_time" json:"stop_time"`
  JobID int32 `thrift:"job_id,6" db:"job_id" json:"job_id"`
}

func NewTaskDesc() *TaskDesc {
  return &TaskDesc{}
}


func (p *TaskDesc) GetTaskID() int32 {
  return p.TaskID
}
var TaskDesc_Host_DEFAULT *nebula0.HostAddr
func (p *TaskDesc) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return TaskDesc_Host_DEFAULT
  }
return p.Host
}

func (p *TaskDesc) GetStatus() JobStatus {
  return p.Status
}

func (p *TaskDesc) GetStartTime() int64 {
  return p.StartTime
}

func (p *TaskDesc) GetStopTime() int64 {
  return p.StopTime
}

func (p *TaskDesc) GetJobID() int32 {
  return p.JobID
}
func (p *TaskDesc) IsSetHost() bool {
  return p.Host != nil
}

func (p *TaskDesc) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TaskID = v
}
  return nil
}

func (p *TaskDesc)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *TaskDesc)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *TaskDesc)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TaskDesc)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StopTime = v
}
  return nil
}

func (p *TaskDesc)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.JobID = v
}
  return nil
}

func (p *TaskDesc) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("TaskDesc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskDesc) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("task_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:task_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.task_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:task_id: ", p), err) }
  return err
}

func (p *TaskDesc) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *TaskDesc) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TaskDesc) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stop_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stop_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StopTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stop_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stop_time: ", p), err) }
  return err
}

func (p *TaskDesc) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("job_id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:job_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.JobID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.job_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:job_id: ", p), err) }
  return err
}

func (p *TaskDesc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskDesc(%+v)", *p)
}

// Attributes:
//  - JobID
//  - JobDesc
//  - TaskDesc
//  - RecoveredJobNum
type AdminJobResult_ struct {
  JobID *int32 `thrift:"job_id,1" db:"job_id" json:"job_id,omitempty"`
  JobDesc []*JobDesc `thrift:"job_desc,2" db:"job_desc" json:"job_desc,omitempty"`
  TaskDesc []*TaskDesc `thrift:"task_desc,3" db:"task_desc" json:"task_desc,omitempty"`
  RecoveredJobNum *int32 `thrift:"recovered_job_num,4" db:"recovered_job_num" json:"recovered_job_num,omitempty"`
}

func NewAdminJobResult_() *AdminJobResult_ {
  return &AdminJobResult_{}
}

var AdminJobResult__JobID_DEFAULT int32
func (p *AdminJobResult_) GetJobID() int32 {
  if !p.IsSetJobID() {
    return AdminJobResult__JobID_DEFAULT
  }
return *p.JobID
}
var AdminJobResult__JobDesc_DEFAULT []*JobDesc

func (p *AdminJobResult_) GetJobDesc() []*JobDesc {
  return p.JobDesc
}
var AdminJobResult__TaskDesc_DEFAULT []*TaskDesc

func (p *AdminJobResult_) GetTaskDesc() []*TaskDesc {
  return p.TaskDesc
}
var AdminJobResult__RecoveredJobNum_DEFAULT int32
func (p *AdminJobResult_) GetRecoveredJobNum() int32 {
  if !p.IsSetRecoveredJobNum() {
    return AdminJobResult__RecoveredJobNum_DEFAULT
  }
return *p.RecoveredJobNum
}
func (p *AdminJobResult_) IsSetJobID() bool {
  return p.JobID != nil
}

func (p *AdminJobResult_) IsSetJobDesc() bool {
  return p.JobDesc != nil
}

func (p *AdminJobResult_) IsSetTaskDesc() bool {
  return p.TaskDesc != nil
}

func (p *AdminJobResult_) IsSetRecoveredJobNum() bool {
  return p.RecoveredJobNum != nil
}

func (p *AdminJobResult_) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JobID = &v
}
  return nil
}

func (p *AdminJobResult_)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*JobDesc, 0, size)
  p.JobDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := NewJobDesc()
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.JobDesc = append(p.JobDesc, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TaskDesc, 0, size)
  p.TaskDesc =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := NewTaskDesc()
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.TaskDesc = append(p.TaskDesc, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdminJobResult_)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RecoveredJobNum = &v
}
  return nil
}

func (p *AdminJobResult_) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResult_) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetJobID() {
    if err := oprot.WriteFieldBegin("job_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.JobID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.job_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job_id: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetJobDesc() {
    if err := oprot.WriteFieldBegin("job_desc", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:job_desc: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.JobDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JobDesc {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:job_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetTaskDesc() {
    if err := oprot.WriteFieldBegin("task_desc", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:task_desc: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskDesc)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskDesc {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:task_desc: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetRecoveredJobNum() {
    if err := oprot.WriteFieldBegin("recovered_job_num", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recovered_job_num: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RecoveredJobNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recovered_job_num (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recovered_job_num: ", p), err) }
  }
  return err
}

func (p *AdminJobResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Result_
type AdminJobResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Result_ *AdminJobResult_ `thrift:"result,3" db:"result" json:"result"`
}

func NewAdminJobResp() *AdminJobResp {
  return &AdminJobResp{}
}


func (p *AdminJobResp) GetCode() ErrorCode {
  return p.Code
}
var AdminJobResp_Leader_DEFAULT *nebula0.HostAddr
func (p *AdminJobResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return AdminJobResp_Leader_DEFAULT
  }
return p.Leader
}
var AdminJobResp_Result__DEFAULT *AdminJobResult_
func (p *AdminJobResp) GetResult_() *AdminJobResult_ {
  if !p.IsSetResult_() {
    return AdminJobResp_Result__DEFAULT
  }
return p.Result_
}
func (p *AdminJobResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *AdminJobResp) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AdminJobResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *AdminJobResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AdminJobResp)  ReadField3(iprot thrift.Protocol) error {
  p.Result_ = NewAdminJobResult_()
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AdminJobResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AdminJobResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdminJobResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AdminJobResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *AdminJobResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdminJobResp(%+v)", *p)
}

// Attributes:
//  - TagVertices
//  - Edges
//  - SpaceVertices
//  - SpaceEdges
//  - Status
type StatisItem struct {
  TagVertices map[string]int64 `thrift:"tag_vertices,1" db:"tag_vertices" json:"tag_vertices"`
  Edges map[string]int64 `thrift:"edges,2" db:"edges" json:"edges"`
  SpaceVertices int64 `thrift:"space_vertices,3" db:"space_vertices" json:"space_vertices"`
  SpaceEdges int64 `thrift:"space_edges,4" db:"space_edges" json:"space_edges"`
  Status JobStatus `thrift:"status,5" db:"status" json:"status"`
}

func NewStatisItem() *StatisItem {
  return &StatisItem{}
}


func (p *StatisItem) GetTagVertices() map[string]int64 {
  return p.TagVertices
}

func (p *StatisItem) GetEdges() map[string]int64 {
  return p.Edges
}

func (p *StatisItem) GetSpaceVertices() int64 {
  return p.SpaceVertices
}

func (p *StatisItem) GetSpaceEdges() int64 {
  return p.SpaceEdges
}

func (p *StatisItem) GetStatus() JobStatus {
  return p.Status
}
func (p *StatisItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatisItem)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.TagVertices =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.TagVertices[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatisItem)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Edges =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Edges[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatisItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpaceVertices = v
}
  return nil
}

func (p *StatisItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SpaceEdges = v
}
  return nil
}

func (p *StatisItem)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := JobStatus(v)
  p.Status = temp
}
  return nil
}

func (p *StatisItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("StatisItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatisItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_vertices", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_vertices: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TagVertices)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TagVertices {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_vertices: ", p), err) }
  return err
}

func (p *StatisItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Edges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edges: ", p), err) }
  return err
}

func (p *StatisItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_vertices", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:space_vertices: ", p), err) }
  if err := oprot.WriteI64(int64(p.SpaceVertices)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_vertices (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:space_vertices: ", p), err) }
  return err
}

func (p *StatisItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_edges", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_edges: ", p), err) }
  if err := oprot.WriteI64(int64(p.SpaceEdges)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_edges (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_edges: ", p), err) }
  return err
}

func (p *StatisItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *StatisItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatisItem(%+v)", *p)
}

// Attributes:
//  - Properties
//  - IfNotExists
type CreateSpaceReq struct {
  Properties *SpaceDesc `thrift:"properties,1" db:"properties" json:"properties"`
  IfNotExists bool `thrift:"if_not_exists,2" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateSpaceReq() *CreateSpaceReq {
  return &CreateSpaceReq{}
}

var CreateSpaceReq_Properties_DEFAULT *SpaceDesc
func (p *CreateSpaceReq) GetProperties() *SpaceDesc {
  if !p.IsSetProperties() {
    return CreateSpaceReq_Properties_DEFAULT
  }
return p.Properties
}

func (p *CreateSpaceReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateSpaceReq) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *CreateSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  p.Properties = NewSpaceDesc()
  if err := p.Properties.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
  }
  return nil
}

func (p *CreateSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := p.Properties.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *CreateSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_not_exists: ", p), err) }
  return err
}

func (p *CreateSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSpaceReq(%+v)", *p)
}

// Attributes:
//  - SpaceName
//  - IfExists
type DropSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropSpaceReq() *DropSpaceReq {
  return &DropSpaceReq{}
}


func (p *DropSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}

func (p *DropSpaceReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *DropSpaceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *DropSpaceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropSpaceReq(%+v)", *p)
}

type ListSpacesReq struct {
}

func NewListSpacesReq() *ListSpacesReq {
  return &ListSpacesReq{}
}

func (p *ListSpacesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Spaces
type ListSpacesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Spaces []*IdName `thrift:"spaces,3" db:"spaces" json:"spaces"`
}

func NewListSpacesResp() *ListSpacesResp {
  return &ListSpacesResp{}
}


func (p *ListSpacesResp) GetCode() ErrorCode {
  return p.Code
}
var ListSpacesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSpacesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSpacesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSpacesResp) GetSpaces() []*IdName {
  return p.Spaces
}
func (p *ListSpacesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSpacesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSpacesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSpacesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IdName, 0, size)
  p.Spaces =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := NewIdName()
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Spaces = append(p.Spaces, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSpacesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSpacesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSpacesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSpacesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("spaces", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaces: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spaces)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Spaces {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaces: ", p), err) }
  return err
}

func (p *ListSpacesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSpacesResp(%+v)", *p)
}

// Attributes:
//  - SpaceName
type GetSpaceReq struct {
  SpaceName []byte `thrift:"space_name,1" db:"space_name" json:"space_name"`
}

func NewGetSpaceReq() *GetSpaceReq {
  return &GetSpaceReq{}
}


func (p *GetSpaceReq) GetSpaceName() []byte {
  return p.SpaceName
}
func (p *GetSpaceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *GetSpaceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_name: ", p), err) }
  if err := oprot.WriteBinary(p.SpaceName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_name: ", p), err) }
  return err
}

func (p *GetSpaceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetSpaceResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *SpaceItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetSpaceResp() *GetSpaceResp {
  return &GetSpaceResp{}
}


func (p *GetSpaceResp) GetCode() ErrorCode {
  return p.Code
}
var GetSpaceResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetSpaceResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetSpaceResp_Leader_DEFAULT
  }
return p.Leader
}
var GetSpaceResp_Item_DEFAULT *SpaceItem
func (p *GetSpaceResp) GetItem() *SpaceItem {
  if !p.IsSetItem() {
    return GetSpaceResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetSpaceResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetSpaceResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetSpaceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetSpaceResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetSpaceResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewSpaceItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetSpaceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetSpaceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetSpaceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetSpaceResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetSpaceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSpaceResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Schema
//  - IfNotExists
type CreateTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateTagReq() *CreateTagReq {
  return &CreateTagReq{}
}


func (p *CreateTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagReq) GetTagName() []byte {
  return p.TagName
}
var CreateTagReq_Schema_DEFAULT *Schema
func (p *CreateTagReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateTagReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateTagReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateTagReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *CreateTagReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateTagReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateTagReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - TagItems
//  - SchemaProp
type AlterTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  TagItems []*AlterSchemaItem `thrift:"tag_items,3" db:"tag_items" json:"tag_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterTagReq() *AlterTagReq {
  return &AlterTagReq{}
}


func (p *AlterTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *AlterTagReq) GetTagItems() []*AlterSchemaItem {
  return p.TagItems
}
var AlterTagReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterTagReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterTagReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterTagReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *AlterTagReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.TagItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := NewAlterSchemaItem()
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.TagItems = append(p.TagItems, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterTagReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TagItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_items: ", p), err) }
  return err
}

func (p *AlterTagReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - IfExists
type DropTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagReq() *DropTagReq {
  return &DropTagReq{}
}


func (p *DropTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *DropTagReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *DropTagReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *DropTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTagReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListTagsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagsReq() *ListTagsReq {
  return &ListTagsReq{}
}


func (p *ListTagsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListTagsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListTagsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Tags
type ListTagsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Tags []*TagItem `thrift:"tags,3" db:"tags" json:"tags"`
}

func NewListTagsResp() *ListTagsResp {
  return &ListTagsResp{}
}


func (p *ListTagsResp) GetCode() ErrorCode {
  return p.Code
}
var ListTagsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListTagsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListTagsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagsResp) GetTags() []*TagItem {
  return p.Tags
}
func (p *ListTagsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListTagsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListTagsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TagItem, 0, size)
  p.Tags =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := NewTagItem()
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Tags = append(p.Tags, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tags", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tags: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tags {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tags: ", p), err) }
  return err
}

func (p *ListTagsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagsResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - TagName
//  - Version
type GetTagReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  TagName []byte `thrift:"tag_name,2" db:"tag_name" json:"tag_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetTagReq() *GetTagReq {
  return &GetTagReq{}
}


func (p *GetTagReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagReq) GetTagName() []byte {
  return p.TagName
}

func (p *GetTagReq) GetVersion() SchemaVer {
  return p.Version
}
func (p *GetTagReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetTagReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *GetTagReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetTagReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag_name: ", p), err) }
  return err
}

func (p *GetTagReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetTagReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetTagResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetTagResp() *GetTagResp {
  return &GetTagResp{}
}


func (p *GetTagResp) GetCode() ErrorCode {
  return p.Code
}
var GetTagResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetTagResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetTagResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagResp_Schema_DEFAULT *Schema
func (p *GetTagResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetTagResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetTagResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetTagResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetTagResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetTagResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetTagResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetTagResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Schema
//  - IfNotExists
type CreateEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
  IfNotExists bool `thrift:"if_not_exists,4" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateEdgeReq() *CreateEdgeReq {
  return &CreateEdgeReq{}
}


func (p *CreateEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}
var CreateEdgeReq_Schema_DEFAULT *Schema
func (p *CreateEdgeReq) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return CreateEdgeReq_Schema_DEFAULT
  }
return p.Schema
}

func (p *CreateEdgeReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateEdgeReq) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *CreateEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *CreateEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *CreateEdgeReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *CreateEdgeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - EdgeItems
//  - SchemaProp
type AlterEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  EdgeItems []*AlterSchemaItem `thrift:"edge_items,3" db:"edge_items" json:"edge_items"`
  SchemaProp *SchemaProp `thrift:"schema_prop,4" db:"schema_prop" json:"schema_prop"`
}

func NewAlterEdgeReq() *AlterEdgeReq {
  return &AlterEdgeReq{}
}


func (p *AlterEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AlterEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *AlterEdgeReq) GetEdgeItems() []*AlterSchemaItem {
  return p.EdgeItems
}
var AlterEdgeReq_SchemaProp_DEFAULT *SchemaProp
func (p *AlterEdgeReq) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return AlterEdgeReq_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *AlterEdgeReq) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *AlterEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AlterEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *AlterEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AlterSchemaItem, 0, size)
  p.EdgeItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := NewAlterSchemaItem()
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.EdgeItems = append(p.EdgeItems, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AlterEdgeReq)  ReadField4(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *AlterEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EdgeItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EdgeItems {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_items: ", p), err) }
  return err
}

func (p *AlterEdgeReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_prop: ", p), err) }
  return err
}

func (p *AlterEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - Version
type GetEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  Version SchemaVer `thrift:"version,3" db:"version" json:"version"`
}

func NewGetEdgeReq() *GetEdgeReq {
  return &GetEdgeReq{}
}


func (p *GetEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *GetEdgeReq) GetVersion() SchemaVer {
  return p.Version
}
func (p *GetEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *GetEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SchemaVer(v)
  p.Version = temp
}
  return nil
}

func (p *GetEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *GetEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *GetEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Schema
type GetEdgeResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema"`
}

func NewGetEdgeResp() *GetEdgeResp {
  return &GetEdgeResp{}
}


func (p *GetEdgeResp) GetCode() ErrorCode {
  return p.Code
}
var GetEdgeResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetEdgeResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeResp_Schema_DEFAULT *Schema
func (p *GetEdgeResp) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return GetEdgeResp_Schema_DEFAULT
  }
return p.Schema
}
func (p *GetEdgeResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetEdgeResp) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *GetEdgeResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetEdgeResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeResp)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *GetEdgeResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
  if err := p.Schema.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  return err
}

func (p *GetEdgeResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - EdgeName
//  - IfExists
type DropEdgeReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  EdgeName []byte `thrift:"edge_name,2" db:"edge_name" json:"edge_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeReq() *DropEdgeReq {
  return &DropEdgeReq{}
}


func (p *DropEdgeReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *DropEdgeReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropEdgeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropEdgeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *DropEdgeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropEdgeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropEdgeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_name: ", p), err) }
  return err
}

func (p *DropEdgeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropEdgeReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListEdgesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgesReq() *ListEdgesReq {
  return &ListEdgesReq{}
}


func (p *ListEdgesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListEdgesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListEdgesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Edges
type ListEdgesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Edges []*EdgeItem `thrift:"edges,3" db:"edges" json:"edges"`
}

func NewListEdgesResp() *ListEdgesResp {
  return &ListEdgesResp{}
}


func (p *ListEdgesResp) GetCode() ErrorCode {
  return p.Code
}
var ListEdgesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListEdgesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgesResp) GetEdges() []*EdgeItem {
  return p.Edges
}
func (p *ListEdgesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListEdgesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListEdgesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EdgeItem, 0, size)
  p.Edges =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := NewEdgeItem()
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Edges = append(p.Edges, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edges", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Edges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Edges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edges: ", p), err) }
  return err
}

func (p *ListEdgesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgesResp(%+v)", *p)
}

// Attributes:
//  - Type
type ListHostsReq struct {
  Type ListHostType `thrift:"type,1" db:"type" json:"type"`
}

func NewListHostsReq() *ListHostsReq {
  return &ListHostsReq{}
}


func (p *ListHostsReq) GetType() ListHostType {
  return p.Type
}
func (p *ListHostsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ListHostType(v)
  p.Type = temp
}
  return nil
}

func (p *ListHostsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListHostsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Hosts
type ListHostsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*HostItem `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewListHostsResp() *ListHostsResp {
  return &ListHostsResp{}
}


func (p *ListHostsResp) GetCode() ErrorCode {
  return p.Code
}
var ListHostsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListHostsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListHostsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListHostsResp) GetHosts() []*HostItem {
  return p.Hosts
}
func (p *ListHostsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListHostsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListHostsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListHostsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostItem, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := NewHostItem()
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Hosts = append(p.Hosts, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListHostsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListHostsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListHostsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *ListHostsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsResp(%+v)", *p)
}

// Attributes:
//  - PartID
//  - Leader
//  - Peers
//  - Losts
type PartItem struct {
  PartID nebula0.PartitionID `thrift:"part_id,1,required" db:"part_id" json:"part_id"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader,omitempty"`
  Peers []*nebula0.HostAddr `thrift:"peers,3,required" db:"peers" json:"peers"`
  Losts []*nebula0.HostAddr `thrift:"losts,4,required" db:"losts" json:"losts"`
}

func NewPartItem() *PartItem {
  return &PartItem{}
}


func (p *PartItem) GetPartID() nebula0.PartitionID {
  return p.PartID
}
var PartItem_Leader_DEFAULT *nebula0.HostAddr
func (p *PartItem) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return PartItem_Leader_DEFAULT
  }
return p.Leader
}

func (p *PartItem) GetPeers() []*nebula0.HostAddr {
  return p.Peers
}

func (p *PartItem) GetLosts() []*nebula0.HostAddr {
  return p.Losts
}
func (p *PartItem) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *PartItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartID bool = false;
  var issetPeers bool = false;
  var issetLosts bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPartID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetPeers = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetLosts = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartID is not set"));
  }
  if !issetPeers{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Peers is not set"));
  }
  if !issetLosts{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Losts is not set"));
  }
  return nil
}

func (p *PartItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *PartItem)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *PartItem)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Peers =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := nebula0.NewHostAddr()
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Peers = append(p.Peers, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Losts =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := nebula0.NewHostAddr()
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Losts = append(p.Losts, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PartItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:part_id: ", p), err) }
  return err
}

func (p *PartItem) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetLeader() {
    if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
    if err := p.Leader.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  }
  return err
}

func (p *PartItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("peers", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:peers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Peers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Peers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:peers: ", p), err) }
  return err
}

func (p *PartItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("losts", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:losts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Losts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Losts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:losts: ", p), err) }
  return err
}

func (p *PartItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartItem(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - PartIds
type ListPartsReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  PartIds []nebula0.PartitionID `thrift:"part_ids,2" db:"part_ids" json:"part_ids"`
}

func NewListPartsReq() *ListPartsReq {
  return &ListPartsReq{}
}


func (p *ListPartsReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *ListPartsReq) GetPartIds() []nebula0.PartitionID {
  return p.PartIds
}
func (p *ListPartsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListPartsReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]nebula0.PartitionID, 0, size)
  p.PartIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _elem25 = temp
}
    p.PartIds = append(p.PartIds, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListPartsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListPartsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part_ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PartIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part_ids: ", p), err) }
  return err
}

func (p *ListPartsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPartsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Parts
type ListPartsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts []*PartItem `thrift:"parts,3" db:"parts" json:"parts"`
}

func NewListPartsResp() *ListPartsResp {
  return &ListPartsResp{}
}


func (p *ListPartsResp) GetCode() ErrorCode {
  return p.Code
}
var ListPartsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListPartsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListPartsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListPartsResp) GetParts() []*PartItem {
  return p.Parts
}
func (p *ListPartsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListPartsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListPartsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListPartsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PartItem, 0, size)
  p.Parts =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := NewPartItem()
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Parts = append(p.Parts, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListPartsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListPartsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListPartsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListPartsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Parts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *ListPartsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListPartsResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type GetPartsAllocReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetPartsAllocReq() *GetPartsAllocReq {
  return &GetPartsAllocReq{}
}


func (p *GetPartsAllocReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *GetPartsAllocReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetPartsAllocReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetPartsAllocReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Parts
type GetPartsAllocResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Parts map[nebula0.PartitionID][]*nebula0.HostAddr `thrift:"parts,3" db:"parts" json:"parts"`
}

func NewGetPartsAllocResp() *GetPartsAllocResp {
  return &GetPartsAllocResp{}
}


func (p *GetPartsAllocResp) GetCode() ErrorCode {
  return p.Code
}
var GetPartsAllocResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetPartsAllocResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetPartsAllocResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetPartsAllocResp) GetParts() map[nebula0.PartitionID][]*nebula0.HostAddr {
  return p.Parts
}
func (p *GetPartsAllocResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetPartsAllocResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetPartsAllocResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetPartsAllocResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.PartitionID][]*nebula0.HostAddr, size)
  p.Parts =  tMap
  for i := 0; i < size; i ++ {
var _key27 nebula0.PartitionID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.PartitionID(v)
    _key27 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*nebula0.HostAddr, 0, size)
    _val28 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem29 := nebula0.NewHostAddr()
      if err := _elem29.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
      }
      _val28 = append(_val28, _elem29)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Parts[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetPartsAllocResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetPartsAllocResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetPartsAllocResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("parts", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Parts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Parts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parts: ", p), err) }
  return err
}

func (p *GetPartsAllocResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetPartsAllocResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Pairs
type MultiPutReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Pairs []*nebula0.KeyValue `thrift:"pairs,2" db:"pairs" json:"pairs"`
}

func NewMultiPutReq() *MultiPutReq {
  return &MultiPutReq{}
}


func (p *MultiPutReq) GetSegment() []byte {
  return p.Segment
}

func (p *MultiPutReq) GetPairs() []*nebula0.KeyValue {
  return p.Pairs
}
func (p *MultiPutReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiPutReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiPutReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.KeyValue, 0, size)
  p.Pairs =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := nebula0.NewKeyValue()
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Pairs = append(p.Pairs, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiPutReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiPutReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiPutReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *MultiPutReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("pairs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pairs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Pairs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Pairs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pairs: ", p), err) }
  return err
}

func (p *MultiPutReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiPutReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
type GetReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
}

func NewGetReq() *GetReq {
  return &GetReq{}
}


func (p *GetReq) GetSegment() []byte {
  return p.Segment
}

func (p *GetReq) GetKey() []byte {
  return p.Key
}
func (p *GetReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *GetReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *GetReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *GetReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *GetReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Value
type GetResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Value []byte `thrift:"value,3" db:"value" json:"value"`
}

func NewGetResp() *GetResp {
  return &GetResp{}
}


func (p *GetResp) GetCode() ErrorCode {
  return p.Code
}
var GetResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetResp) GetValue() []byte {
  return p.Value
}
func (p *GetResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *GetResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *GetResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Keys
type MultiGetReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Keys [][]byte `thrift:"keys,2" db:"keys" json:"keys"`
}

func NewMultiGetReq() *MultiGetReq {
  return &MultiGetReq{}
}


func (p *MultiGetReq) GetSegment() []byte {
  return p.Segment
}

func (p *MultiGetReq) GetKeys() [][]byte {
  return p.Keys
}
func (p *MultiGetReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *MultiGetReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.Keys = append(p.Keys, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiGetReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *MultiGetReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *MultiGetReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Values
type MultiGetResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Values [][]byte `thrift:"values,3" db:"values" json:"values"`
}

func NewMultiGetResp() *MultiGetResp {
  return &MultiGetResp{}
}


func (p *MultiGetResp) GetCode() ErrorCode {
  return p.Code
}
var MultiGetResp_Leader_DEFAULT *nebula0.HostAddr
func (p *MultiGetResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return MultiGetResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *MultiGetResp) GetValues() [][]byte {
  return p.Values
}
func (p *MultiGetResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *MultiGetResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MultiGetResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *MultiGetResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *MultiGetResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.Values = append(p.Values, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiGetResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiGetResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiGetResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *MultiGetResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *MultiGetResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *MultiGetResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiGetResp(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Key
type RemoveReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
}

func NewRemoveReq() *RemoveReq {
  return &RemoveReq{}
}


func (p *RemoveReq) GetSegment() []byte {
  return p.Segment
}

func (p *RemoveReq) GetKey() []byte {
  return p.Key
}
func (p *RemoveReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *RemoveReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *RemoveReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *RemoveReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *RemoveReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Start
//  - End
type RemoveRangeReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Start []byte `thrift:"start,2" db:"start" json:"start"`
  End []byte `thrift:"end,3" db:"end" json:"end"`
}

func NewRemoveRangeReq() *RemoveRangeReq {
  return &RemoveRangeReq{}
}


func (p *RemoveRangeReq) GetSegment() []byte {
  return p.Segment
}

func (p *RemoveRangeReq) GetStart() []byte {
  return p.Start
}

func (p *RemoveRangeReq) GetEnd() []byte {
  return p.End
}
func (p *RemoveRangeReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveRangeReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *RemoveRangeReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *RemoveRangeReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.End = v
}
  return nil
}

func (p *RemoveRangeReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveRangeReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveRangeReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *RemoveRangeReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteBinary(p.Start); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *RemoveRangeReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end: ", p), err) }
  if err := oprot.WriteBinary(p.End); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end: ", p), err) }
  return err
}

func (p *RemoveRangeReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveRangeReq(%+v)", *p)
}

// Attributes:
//  - Segment
//  - Start
//  - End
type ScanReq struct {
  Segment []byte `thrift:"segment,1" db:"segment" json:"segment"`
  Start []byte `thrift:"start,2" db:"start" json:"start"`
  End []byte `thrift:"end,3" db:"end" json:"end"`
}

func NewScanReq() *ScanReq {
  return &ScanReq{}
}


func (p *ScanReq) GetSegment() []byte {
  return p.Segment
}

func (p *ScanReq) GetStart() []byte {
  return p.Start
}

func (p *ScanReq) GetEnd() []byte {
  return p.End
}
func (p *ScanReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Segment = v
}
  return nil
}

func (p *ScanReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *ScanReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.End = v
}
  return nil
}

func (p *ScanReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("segment", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:segment: ", p), err) }
  if err := oprot.WriteBinary(p.Segment); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segment (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:segment: ", p), err) }
  return err
}

func (p *ScanReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteBinary(p.Start); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *ScanReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("end", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end: ", p), err) }
  if err := oprot.WriteBinary(p.End); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end: ", p), err) }
  return err
}

func (p *ScanReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Values
type ScanResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Values [][]byte `thrift:"values,3" db:"values" json:"values"`
}

func NewScanResp() *ScanResp {
  return &ScanResp{}
}


func (p *ScanResp) GetCode() ErrorCode {
  return p.Code
}
var ScanResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ScanResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ScanResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ScanResp) GetValues() [][]byte {
  return p.Values
}
func (p *ScanResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ScanResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ScanResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ScanResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ScanResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem33 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem33 = v
}
    p.Values = append(p.Values, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ScanResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ScanResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ScanResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ScanResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ScanResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *ScanResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScanResp(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - ClusterID
//  - LastUpdateTimeInMs
type HBResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LastUpdateTimeInMs int64 `thrift:"last_update_time_in_ms,4" db:"last_update_time_in_ms" json:"last_update_time_in_ms"`
}

func NewHBResp() *HBResp {
  return &HBResp{}
}


func (p *HBResp) GetCode() ErrorCode {
  return p.Code
}
var HBResp_Leader_DEFAULT *nebula0.HostAddr
func (p *HBResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return HBResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *HBResp) GetClusterID() ClusterID {
  return p.ClusterID
}

func (p *HBResp) GetLastUpdateTimeInMs() int64 {
  return p.LastUpdateTimeInMs
}
func (p *HBResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *HBResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *HBResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *HBResp)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBResp)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastUpdateTimeInMs = v
}
  return nil
}

func (p *HBResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *HBResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *HBResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBResp) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("last_update_time_in_ms", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_update_time_in_ms: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastUpdateTimeInMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_update_time_in_ms (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_update_time_in_ms: ", p), err) }
  return err
}

func (p *HBResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBResp(%+v)", *p)
}

// Attributes:
//  - Role
//  - Host
//  - ClusterID
//  - LeaderPartIds
//  - GitInfoSha
type HBReq struct {
  Role HostRole `thrift:"role,1" db:"role" json:"role"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  ClusterID ClusterID `thrift:"cluster_id,3" db:"cluster_id" json:"cluster_id"`
  LeaderPartIds map[nebula0.GraphSpaceID][]nebula0.PartitionID `thrift:"leader_partIds,4" db:"leader_partIds" json:"leader_partIds,omitempty"`
  GitInfoSha []byte `thrift:"git_info_sha,5" db:"git_info_sha" json:"git_info_sha"`
}

func NewHBReq() *HBReq {
  return &HBReq{}
}


func (p *HBReq) GetRole() HostRole {
  return p.Role
}
var HBReq_Host_DEFAULT *nebula0.HostAddr
func (p *HBReq) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return HBReq_Host_DEFAULT
  }
return p.Host
}

func (p *HBReq) GetClusterID() ClusterID {
  return p.ClusterID
}
var HBReq_LeaderPartIds_DEFAULT map[nebula0.GraphSpaceID][]nebula0.PartitionID

func (p *HBReq) GetLeaderPartIds() map[nebula0.GraphSpaceID][]nebula0.PartitionID {
  return p.LeaderPartIds
}

func (p *HBReq) GetGitInfoSha() []byte {
  return p.GitInfoSha
}
func (p *HBReq) IsSetHost() bool {
  return p.Host != nil
}

func (p *HBReq) IsSetLeaderPartIds() bool {
  return p.LeaderPartIds != nil
}

func (p *HBReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HBReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := HostRole(v)
  p.Role = temp
}
  return nil
}

func (p *HBReq)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *HBReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ClusterID(v)
  p.ClusterID = temp
}
  return nil
}

func (p *HBReq)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[nebula0.GraphSpaceID][]nebula0.PartitionID, size)
  p.LeaderPartIds =  tMap
  for i := 0; i < size; i ++ {
var _key34 nebula0.GraphSpaceID
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := nebula0.GraphSpaceID(v)
    _key34 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]nebula0.PartitionID, 0, size)
    _val35 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem36 nebula0.PartitionID
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := nebula0.PartitionID(v)
      _elem36 = temp
}
      _val35 = append(_val35, _elem36)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.LeaderPartIds[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HBReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.GitInfoSha = v
}
  return nil
}

func (p *HBReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HBReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HBReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role: ", p), err) }
  if err := oprot.WriteI32(int32(p.Role)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role: ", p), err) }
  return err
}

func (p *HBReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *HBReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("cluster_id", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cluster_id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClusterID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cluster_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cluster_id: ", p), err) }
  return err
}

func (p *HBReq) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetLeaderPartIds() {
    if err := oprot.WriteFieldBegin("leader_partIds", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader_partIds: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.LeaderPartIds)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.LeaderPartIds {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader_partIds: ", p), err) }
  }
  return err
}

func (p *HBReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("git_info_sha", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:git_info_sha: ", p), err) }
  if err := oprot.WriteBinary(p.GitInfoSha); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_info_sha (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:git_info_sha: ", p), err) }
  return err
}

func (p *HBReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HBReq(%+v)", *p)
}

// Attributes:
//  - Name
//  - TypeLength
type IndexFieldDef struct {
  Name []byte `thrift:"name,1,required" db:"name" json:"name"`
  TypeLength *int16 `thrift:"type_length,2" db:"type_length" json:"type_length,omitempty"`
}

func NewIndexFieldDef() *IndexFieldDef {
  return &IndexFieldDef{}
}


func (p *IndexFieldDef) GetName() []byte {
  return p.Name
}
var IndexFieldDef_TypeLength_DEFAULT int16
func (p *IndexFieldDef) GetTypeLength() int16 {
  if !p.IsSetTypeLength() {
    return IndexFieldDef_TypeLength_DEFAULT
  }
return *p.TypeLength
}
func (p *IndexFieldDef) IsSetTypeLength() bool {
  return p.TypeLength != nil
}

func (p *IndexFieldDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *IndexFieldDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IndexFieldDef)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TypeLength = &v
}
  return nil
}

func (p *IndexFieldDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexFieldDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexFieldDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexFieldDef) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTypeLength() {
    if err := oprot.WriteFieldBegin("type_length", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err) }
    if err := oprot.WriteI16(int16(*p.TypeLength)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err) }
  }
  return err
}

func (p *IndexFieldDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexFieldDef(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - TagName
//  - Fields
//  - IfNotExists
type CreateTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  TagName []byte `thrift:"tag_name,3" db:"tag_name" json:"tag_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateTagIndexReq() *CreateTagIndexReq {
  return &CreateTagIndexReq{}
}


func (p *CreateTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateTagIndexReq) GetTagName() []byte {
  return p.TagName
}

func (p *CreateTagIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateTagIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TagName = v
}
  return nil
}

func (p *CreateTagIndexReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := NewIndexFieldDef()
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Fields = append(p.Fields, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateTagIndexReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tag_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag_name: ", p), err) }
  if err := oprot.WriteBinary(p.TagName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag_name: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTagIndexReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropTagIndexReq() *DropTagIndexReq {
  return &DropTagIndexReq{}
}


func (p *DropTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropTagIndexReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *DropTagIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropTagIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropTagIndexReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
type GetTagIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetTagIndexReq() *GetTagIndexReq {
  return &GetTagIndexReq{}
}


func (p *GetTagIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetTagIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *GetTagIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetTagIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *GetTagIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetTagIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetTagIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagIndexReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetTagIndexResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetTagIndexResp() *GetTagIndexResp {
  return &GetTagIndexResp{}
}


func (p *GetTagIndexResp) GetCode() ErrorCode {
  return p.Code
}
var GetTagIndexResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetTagIndexResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetTagIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetTagIndexResp_Item_DEFAULT *IndexItem
func (p *GetTagIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetTagIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetTagIndexResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetTagIndexResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetTagIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetTagIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetTagIndexResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewIndexItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetTagIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetTagIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTagIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetTagIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetTagIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTagIndexResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListTagIndexesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListTagIndexesReq() *ListTagIndexesReq {
  return &ListTagIndexesReq{}
}


func (p *ListTagIndexesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListTagIndexesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListTagIndexesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListTagIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagIndexesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListTagIndexesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListTagIndexesResp() *ListTagIndexesResp {
  return &ListTagIndexesResp{}
}


func (p *ListTagIndexesResp) GetCode() ErrorCode {
  return p.Code
}
var ListTagIndexesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListTagIndexesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListTagIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListTagIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListTagIndexesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListTagIndexesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListTagIndexesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListTagIndexesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := NewIndexItem()
    if err := _elem38.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Items = append(p.Items, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListTagIndexesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListTagIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListTagIndexesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListTagIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListTagIndexesResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - EdgeName
//  - Fields
//  - IfNotExists
type CreateEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  EdgeName []byte `thrift:"edge_name,3" db:"edge_name" json:"edge_name"`
  Fields []*IndexFieldDef `thrift:"fields,4" db:"fields" json:"fields"`
  IfNotExists bool `thrift:"if_not_exists,5" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateEdgeIndexReq() *CreateEdgeIndexReq {
  return &CreateEdgeIndexReq{}
}


func (p *CreateEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *CreateEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *CreateEdgeIndexReq) GetEdgeName() []byte {
  return p.EdgeName
}

func (p *CreateEdgeIndexReq) GetFields() []*IndexFieldDef {
  return p.Fields
}

func (p *CreateEdgeIndexReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EdgeName = v
}
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexFieldDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := NewIndexFieldDef()
    if err := _elem39.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.Fields = append(p.Fields, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateEdgeIndexReq)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("edge_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:edge_name: ", p), err) }
  if err := oprot.WriteBinary(p.EdgeName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.edge_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:edge_name: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fields: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:if_not_exists: ", p), err) }
  return err
}

func (p *CreateEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateEdgeIndexReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
//  - IfExists
type DropEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
  IfExists bool `thrift:"if_exists,3" db:"if_exists" json:"if_exists"`
}

func NewDropEdgeIndexReq() *DropEdgeIndexReq {
  return &DropEdgeIndexReq{}
}


func (p *DropEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *DropEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}

func (p *DropEdgeIndexReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *DropEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *DropEdgeIndexReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_exists: ", p), err) }
  return err
}

func (p *DropEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropEdgeIndexReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
type GetEdgeIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewGetEdgeIndexReq() *GetEdgeIndexReq {
  return &GetEdgeIndexReq{}
}


func (p *GetEdgeIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *GetEdgeIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *GetEdgeIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetEdgeIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *GetEdgeIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *GetEdgeIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeIndexReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Item
type GetEdgeIndexResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Item *IndexItem `thrift:"item,3" db:"item" json:"item"`
}

func NewGetEdgeIndexResp() *GetEdgeIndexResp {
  return &GetEdgeIndexResp{}
}


func (p *GetEdgeIndexResp) GetCode() ErrorCode {
  return p.Code
}
var GetEdgeIndexResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetEdgeIndexResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetEdgeIndexResp_Leader_DEFAULT
  }
return p.Leader
}
var GetEdgeIndexResp_Item_DEFAULT *IndexItem
func (p *GetEdgeIndexResp) GetItem() *IndexItem {
  if !p.IsSetItem() {
    return GetEdgeIndexResp_Item_DEFAULT
  }
return p.Item
}
func (p *GetEdgeIndexResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetEdgeIndexResp) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetEdgeIndexResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetEdgeIndexResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetEdgeIndexResp)  ReadField3(iprot thrift.Protocol) error {
  p.Item = NewIndexItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetEdgeIndexResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetEdgeIndexResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEdgeIndexResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err) }
  return err
}

func (p *GetEdgeIndexResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEdgeIndexResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListEdgeIndexesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListEdgeIndexesReq() *ListEdgeIndexesReq {
  return &ListEdgeIndexesReq{}
}


func (p *ListEdgeIndexesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListEdgeIndexesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListEdgeIndexesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgeIndexesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListEdgeIndexesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgeIndexesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListEdgeIndexesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*IndexItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListEdgeIndexesResp() *ListEdgeIndexesResp {
  return &ListEdgeIndexesResp{}
}


func (p *ListEdgeIndexesResp) GetCode() ErrorCode {
  return p.Code
}
var ListEdgeIndexesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListEdgeIndexesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListEdgeIndexesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListEdgeIndexesResp) GetItems() []*IndexItem {
  return p.Items
}
func (p *ListEdgeIndexesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListEdgeIndexesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListEdgeIndexesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := NewIndexItem()
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Items = append(p.Items, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEdgeIndexesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListEdgeIndexesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEdgeIndexesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListEdgeIndexesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEdgeIndexesResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - IndexName
type RebuildIndexReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  IndexName []byte `thrift:"index_name,2" db:"index_name" json:"index_name"`
}

func NewRebuildIndexReq() *RebuildIndexReq {
  return &RebuildIndexReq{}
}


func (p *RebuildIndexReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RebuildIndexReq) GetIndexName() []byte {
  return p.IndexName
}
func (p *RebuildIndexReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RebuildIndexReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RebuildIndexReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *RebuildIndexReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RebuildIndexReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RebuildIndexReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RebuildIndexReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteBinary(p.IndexName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *RebuildIndexReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RebuildIndexReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - EncodedPwd
//  - IfNotExists
type CreateUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
  IfNotExists bool `thrift:"if_not_exists,3" db:"if_not_exists" json:"if_not_exists"`
}

func NewCreateUserReq() *CreateUserReq {
  return &CreateUserReq{}
}


func (p *CreateUserReq) GetAccount() []byte {
  return p.Account
}

func (p *CreateUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}

func (p *CreateUserReq) GetIfNotExists() bool {
  return p.IfNotExists
}
func (p *CreateUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *CreateUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *CreateUserReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IfNotExists = v
}
  return nil
}

func (p *CreateUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *CreateUserReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_not_exists", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:if_not_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfNotExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_not_exists (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:if_not_exists: ", p), err) }
  return err
}

func (p *CreateUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateUserReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - IfExists
type DropUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  IfExists bool `thrift:"if_exists,2" db:"if_exists" json:"if_exists"`
}

func NewDropUserReq() *DropUserReq {
  return &DropUserReq{}
}


func (p *DropUserReq) GetAccount() []byte {
  return p.Account
}

func (p *DropUserReq) GetIfExists() bool {
  return p.IfExists
}
func (p *DropUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *DropUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IfExists = v
}
  return nil
}

func (p *DropUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *DropUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("if_exists", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:if_exists: ", p), err) }
  if err := oprot.WriteBool(bool(p.IfExists)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.if_exists (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:if_exists: ", p), err) }
  return err
}

func (p *DropUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropUserReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - EncodedPwd
type AlterUserReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  EncodedPwd []byte `thrift:"encoded_pwd,2" db:"encoded_pwd" json:"encoded_pwd"`
}

func NewAlterUserReq() *AlterUserReq {
  return &AlterUserReq{}
}


func (p *AlterUserReq) GetAccount() []byte {
  return p.Account
}

func (p *AlterUserReq) GetEncodedPwd() []byte {
  return p.EncodedPwd
}
func (p *AlterUserReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AlterUserReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *AlterUserReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncodedPwd = v
}
  return nil
}

func (p *AlterUserReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AlterUserReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AlterUserReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *AlterUserReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.EncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoded_pwd: ", p), err) }
  return err
}

func (p *AlterUserReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlterUserReq(%+v)", *p)
}

// Attributes:
//  - RoleItem
type GrantRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewGrantRoleReq() *GrantRoleReq {
  return &GrantRoleReq{}
}

var GrantRoleReq_RoleItem_DEFAULT *RoleItem
func (p *GrantRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return GrantRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *GrantRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *GrantRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GrantRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *GrantRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GrantRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GrantRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *GrantRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GrantRoleReq(%+v)", *p)
}

// Attributes:
//  - RoleItem
type RevokeRoleReq struct {
  RoleItem *RoleItem `thrift:"role_item,1" db:"role_item" json:"role_item"`
}

func NewRevokeRoleReq() *RevokeRoleReq {
  return &RevokeRoleReq{}
}

var RevokeRoleReq_RoleItem_DEFAULT *RoleItem
func (p *RevokeRoleReq) GetRoleItem() *RoleItem {
  if !p.IsSetRoleItem() {
    return RevokeRoleReq_RoleItem_DEFAULT
  }
return p.RoleItem
}
func (p *RevokeRoleReq) IsSetRoleItem() bool {
  return p.RoleItem != nil
}

func (p *RevokeRoleReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RevokeRoleReq)  ReadField1(iprot thrift.Protocol) error {
  p.RoleItem = NewRoleItem()
  if err := p.RoleItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoleItem), err)
  }
  return nil
}

func (p *RevokeRoleReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RevokeRoleReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RevokeRoleReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_item: ", p), err) }
  if err := p.RoleItem.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoleItem), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_item: ", p), err) }
  return err
}

func (p *RevokeRoleReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RevokeRoleReq(%+v)", *p)
}

type ListUsersReq struct {
}

func NewListUsersReq() *ListUsersReq {
  return &ListUsersReq{}
}

func (p *ListUsersReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Users
type ListUsersResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Users map[string][]byte `thrift:"users,3" db:"users" json:"users"`
}

func NewListUsersResp() *ListUsersResp {
  return &ListUsersResp{}
}


func (p *ListUsersResp) GetCode() ErrorCode {
  return p.Code
}
var ListUsersResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListUsersResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListUsersResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListUsersResp) GetUsers() map[string][]byte {
  return p.Users
}
func (p *ListUsersResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListUsersResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListUsersResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListUsersResp)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Users =  tMap
  for i := 0; i < size; i ++ {
var _key41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key41 = v
}
var _val42 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val42 = v
}
    p.Users[_key41] = _val42
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ListUsersResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListUsersResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListUsersResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListUsersResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:users: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Users)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Users {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:users: ", p), err) }
  return err
}

func (p *ListUsersResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListUsersResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListRolesReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListRolesReq() *ListRolesReq {
  return &ListRolesReq{}
}


func (p *ListRolesReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListRolesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListRolesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Roles
type ListRolesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Roles []*RoleItem `thrift:"roles,3" db:"roles" json:"roles"`
}

func NewListRolesResp() *ListRolesResp {
  return &ListRolesResp{}
}


func (p *ListRolesResp) GetCode() ErrorCode {
  return p.Code
}
var ListRolesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListRolesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListRolesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListRolesResp) GetRoles() []*RoleItem {
  return p.Roles
}
func (p *ListRolesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListRolesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListRolesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListRolesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoleItem, 0, size)
  p.Roles =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := NewRoleItem()
    if err := _elem43.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Roles = append(p.Roles, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListRolesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListRolesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListRolesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListRolesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("roles", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Roles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Roles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roles: ", p), err) }
  return err
}

func (p *ListRolesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListRolesResp(%+v)", *p)
}

// Attributes:
//  - Account
type GetUserRolesReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
}

func NewGetUserRolesReq() *GetUserRolesReq {
  return &GetUserRolesReq{}
}


func (p *GetUserRolesReq) GetAccount() []byte {
  return p.Account
}
func (p *GetUserRolesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserRolesReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *GetUserRolesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetUserRolesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserRolesReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *GetUserRolesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserRolesReq(%+v)", *p)
}

// Attributes:
//  - Account
//  - NewEncodedPwd_
//  - OldEncodedPwd
type ChangePasswordReq struct {
  Account []byte `thrift:"account,1" db:"account" json:"account"`
  NewEncodedPwd_ []byte `thrift:"new_encoded_pwd,2" db:"new_encoded_pwd" json:"new_encoded_pwd"`
  OldEncodedPwd []byte `thrift:"old_encoded_pwd,3" db:"old_encoded_pwd" json:"old_encoded_pwd"`
}

func NewChangePasswordReq() *ChangePasswordReq {
  return &ChangePasswordReq{}
}


func (p *ChangePasswordReq) GetAccount() []byte {
  return p.Account
}

func (p *ChangePasswordReq) GetNewEncodedPwd_() []byte {
  return p.NewEncodedPwd_
}

func (p *ChangePasswordReq) GetOldEncodedPwd() []byte {
  return p.OldEncodedPwd
}
func (p *ChangePasswordReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChangePasswordReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewEncodedPwd_ = v
}
  return nil
}

func (p *ChangePasswordReq)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OldEncodedPwd = v
}
  return nil
}

func (p *ChangePasswordReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ChangePasswordReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChangePasswordReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteBinary(p.Account); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("new_encoded_pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.NewEncodedPwd_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_encoded_pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("old_encoded_pwd", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:old_encoded_pwd: ", p), err) }
  if err := oprot.WriteBinary(p.OldEncodedPwd); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_encoded_pwd (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:old_encoded_pwd: ", p), err) }
  return err
}

func (p *ChangePasswordReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChangePasswordReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Id
//  - HostDel
//  - Stop
type BalanceReq struct {
  SpaceID *nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id,omitempty"`
  Id *int64 `thrift:"id,2" db:"id" json:"id,omitempty"`
  HostDel []*nebula0.HostAddr `thrift:"host_del,3" db:"host_del" json:"host_del,omitempty"`
  Stop *bool `thrift:"stop,4" db:"stop" json:"stop,omitempty"`
}

func NewBalanceReq() *BalanceReq {
  return &BalanceReq{}
}

var BalanceReq_SpaceID_DEFAULT nebula0.GraphSpaceID
func (p *BalanceReq) GetSpaceID() nebula0.GraphSpaceID {
  if !p.IsSetSpaceID() {
    return BalanceReq_SpaceID_DEFAULT
  }
return *p.SpaceID
}
var BalanceReq_Id_DEFAULT int64
func (p *BalanceReq) GetId() int64 {
  if !p.IsSetId() {
    return BalanceReq_Id_DEFAULT
  }
return *p.Id
}
var BalanceReq_HostDel_DEFAULT []*nebula0.HostAddr

func (p *BalanceReq) GetHostDel() []*nebula0.HostAddr {
  return p.HostDel
}
var BalanceReq_Stop_DEFAULT bool
func (p *BalanceReq) GetStop() bool {
  if !p.IsSetStop() {
    return BalanceReq_Stop_DEFAULT
  }
return *p.Stop
}
func (p *BalanceReq) IsSetSpaceID() bool {
  return p.SpaceID != nil
}

func (p *BalanceReq) IsSetId() bool {
  return p.Id != nil
}

func (p *BalanceReq) IsSetHostDel() bool {
  return p.HostDel != nil
}

func (p *BalanceReq) IsSetStop() bool {
  return p.Stop != nil
}

func (p *BalanceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = &temp
}
  return nil
}

func (p *BalanceReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Id = &v
}
  return nil
}

func (p *BalanceReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.HostDel =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := nebula0.NewHostAddr()
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.HostDel = append(p.HostDel, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BalanceReq)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Stop = &v
}
  return nil
}

func (p *BalanceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceReq) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceID() {
    if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SpaceID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  }
  return err
}

func (p *BalanceReq) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetId() {
    if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Id)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  }
  return err
}

func (p *BalanceReq) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetHostDel() {
    if err := oprot.WriteFieldBegin("host_del", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host_del: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostDel)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostDel {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host_del: ", p), err) }
  }
  return err
}

func (p *BalanceReq) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetStop() {
    if err := oprot.WriteFieldBegin("stop", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Stop)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stop (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop: ", p), err) }
  }
  return err
}

func (p *BalanceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceReq(%+v)", *p)
}

// Attributes:
//  - Id
//  - Result_
type BalanceTask struct {
  Id []byte `thrift:"id,1" db:"id" json:"id"`
  Result_ TaskResult_ `thrift:"result,2" db:"result" json:"result"`
}

func NewBalanceTask() *BalanceTask {
  return &BalanceTask{}
}


func (p *BalanceTask) GetId() []byte {
  return p.Id
}

func (p *BalanceTask) GetResult_() TaskResult_ {
  return p.Result_
}
func (p *BalanceTask) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceTask)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *BalanceTask)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TaskResult_(v)
  p.Result_ = temp
}
  return nil
}

func (p *BalanceTask) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceTask) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteBinary(p.Id); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BalanceTask) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *BalanceTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceTask(%+v)", *p)
}

// Attributes:
//  - Code
//  - Id
//  - Leader
//  - Tasks
type BalanceResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Id int64 `thrift:"id,2" db:"id" json:"id"`
  Leader *nebula0.HostAddr `thrift:"leader,3" db:"leader" json:"leader"`
  Tasks []*BalanceTask `thrift:"tasks,4" db:"tasks" json:"tasks"`
}

func NewBalanceResp() *BalanceResp {
  return &BalanceResp{}
}


func (p *BalanceResp) GetCode() ErrorCode {
  return p.Code
}

func (p *BalanceResp) GetId() int64 {
  return p.Id
}
var BalanceResp_Leader_DEFAULT *nebula0.HostAddr
func (p *BalanceResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return BalanceResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *BalanceResp) GetTasks() []*BalanceTask {
  return p.Tasks
}
func (p *BalanceResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *BalanceResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BalanceResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *BalanceResp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Id = v
}
  return nil
}

func (p *BalanceResp)  ReadField3(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *BalanceResp)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BalanceTask, 0, size)
  p.Tasks =  tSlice
  for i := 0; i < size; i ++ {
    _elem45 := NewBalanceTask()
    if err := _elem45.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
    }
    p.Tasks = append(p.Tasks, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BalanceResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("BalanceResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BalanceResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *BalanceResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BalanceResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:leader: ", p), err) }
  return err
}

func (p *BalanceResp) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tasks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tasks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tasks: ", p), err) }
  return err
}

func (p *BalanceResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BalanceResp(%+v)", *p)
}

type LeaderBalanceReq struct {
}

func NewLeaderBalanceReq() *LeaderBalanceReq {
  return &LeaderBalanceReq{}
}

func (p *LeaderBalanceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LeaderBalanceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("LeaderBalanceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LeaderBalanceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LeaderBalanceReq(%+v)", *p)
}

// Attributes:
//  - Module
//  - Name
//  - Mode
//  - Value
type ConfigItem struct {
  Module ConfigModule `thrift:"module,1" db:"module" json:"module"`
  Name []byte `thrift:"name,2" db:"name" json:"name"`
  Mode ConfigMode `thrift:"mode,3" db:"mode" json:"mode"`
  Value *nebula0.Value `thrift:"value,4" db:"value" json:"value"`
}

func NewConfigItem() *ConfigItem {
  return &ConfigItem{}
}


func (p *ConfigItem) GetModule() ConfigModule {
  return p.Module
}

func (p *ConfigItem) GetName() []byte {
  return p.Name
}

func (p *ConfigItem) GetMode() ConfigMode {
  return p.Mode
}
var ConfigItem_Value_DEFAULT *nebula0.Value
func (p *ConfigItem) GetValue() *nebula0.Value {
  if !p.IsSetValue() {
    return ConfigItem_Value_DEFAULT
  }
return p.Value
}
func (p *ConfigItem) IsSetValue() bool {
  return p.Value != nil
}

func (p *ConfigItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ConfigItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ConfigItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigMode(v)
  p.Mode = temp
}
  return nil
}

func (p *ConfigItem)  ReadField4(iprot thrift.Protocol) error {
  p.Value = nebula0.NewValue()
  if err := p.Value.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *ConfigItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ConfigItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:module: ", p), err) }
  return err
}

func (p *ConfigItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *ConfigItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("mode", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mode: ", p), err) }
  if err := oprot.WriteI32(int32(p.Mode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mode: ", p), err) }
  return err
}

func (p *ConfigItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := p.Value.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *ConfigItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigItem(%+v)", *p)
}

// Attributes:
//  - Items
type RegConfigReq struct {
  Items []*ConfigItem `thrift:"items,1" db:"items" json:"items"`
}

func NewRegConfigReq() *RegConfigReq {
  return &RegConfigReq{}
}


func (p *RegConfigReq) GetItems() []*ConfigItem {
  return p.Items
}
func (p *RegConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegConfigReq)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := NewConfigItem()
    if err := _elem46.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.Items = append(p.Items, _elem46)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RegConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RegConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *RegConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegConfigReq(%+v)", *p)
}

// Attributes:
//  - Item
type GetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewGetConfigReq() *GetConfigReq {
  return &GetConfigReq{}
}

var GetConfigReq_Item_DEFAULT *ConfigItem
func (p *GetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return GetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *GetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *GetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *GetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *GetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type GetConfigResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewGetConfigResp() *GetConfigResp {
  return &GetConfigResp{}
}


func (p *GetConfigResp) GetCode() ErrorCode {
  return p.Code
}
var GetConfigResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetConfigResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetConfigResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetConfigResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *GetConfigResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetConfigResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetConfigResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetConfigResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem47 := NewConfigItem()
    if err := _elem47.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
    }
    p.Items = append(p.Items, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetConfigResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetConfigResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetConfigResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetConfigResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *GetConfigResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetConfigResp(%+v)", *p)
}

// Attributes:
//  - Item
type SetConfigReq struct {
  Item *ConfigItem `thrift:"item,1" db:"item" json:"item"`
}

func NewSetConfigReq() *SetConfigReq {
  return &SetConfigReq{}
}

var SetConfigReq_Item_DEFAULT *ConfigItem
func (p *SetConfigReq) GetItem() *ConfigItem {
  if !p.IsSetItem() {
    return SetConfigReq_Item_DEFAULT
  }
return p.Item
}
func (p *SetConfigReq) IsSetItem() bool {
  return p.Item != nil
}

func (p *SetConfigReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetConfigReq)  ReadField1(iprot thrift.Protocol) error {
  p.Item = NewConfigItem()
  if err := p.Item.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *SetConfigReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SetConfigReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetConfigReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:item: ", p), err) }
  if err := p.Item.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:item: ", p), err) }
  return err
}

func (p *SetConfigReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConfigReq(%+v)", *p)
}

// Attributes:
//  - Space
//  - Module
type ListConfigsReq struct {
  Space []byte `thrift:"space,1" db:"space" json:"space"`
  Module ConfigModule `thrift:"module,2" db:"module" json:"module"`
}

func NewListConfigsReq() *ListConfigsReq {
  return &ListConfigsReq{}
}


func (p *ListConfigsReq) GetSpace() []byte {
  return p.Space
}

func (p *ListConfigsReq) GetModule() ConfigModule {
  return p.Module
}
func (p *ListConfigsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Space = v
}
  return nil
}

func (p *ListConfigsReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ConfigModule(v)
  p.Module = temp
}
  return nil
}

func (p *ListConfigsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space: ", p), err) }
  if err := oprot.WriteBinary(p.Space); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space: ", p), err) }
  return err
}

func (p *ListConfigsReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("module", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:module: ", p), err) }
  if err := oprot.WriteI32(int32(p.Module)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.module (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:module: ", p), err) }
  return err
}

func (p *ListConfigsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Items
type ListConfigsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Items []*ConfigItem `thrift:"items,3" db:"items" json:"items"`
}

func NewListConfigsResp() *ListConfigsResp {
  return &ListConfigsResp{}
}


func (p *ListConfigsResp) GetCode() ErrorCode {
  return p.Code
}
var ListConfigsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListConfigsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListConfigsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListConfigsResp) GetItems() []*ConfigItem {
  return p.Items
}
func (p *ListConfigsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListConfigsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListConfigsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListConfigsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := NewConfigItem()
    if err := _elem48.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.Items = append(p.Items, _elem48)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConfigsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListConfigsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConfigsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListConfigsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:items: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:items: ", p), err) }
  return err
}

func (p *ListConfigsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConfigsResp(%+v)", *p)
}

type CreateSnapshotReq struct {
}

func NewCreateSnapshotReq() *CreateSnapshotReq {
  return &CreateSnapshotReq{}
}

func (p *CreateSnapshotReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateSnapshotReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CreateSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateSnapshotReq(%+v)", *p)
}

// Attributes:
//  - Name
type DropSnapshotReq struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
}

func NewDropSnapshotReq() *DropSnapshotReq {
  return &DropSnapshotReq{}
}


func (p *DropSnapshotReq) GetName() []byte {
  return p.Name
}
func (p *DropSnapshotReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropSnapshotReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *DropSnapshotReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropSnapshotReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropSnapshotReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *DropSnapshotReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropSnapshotReq(%+v)", *p)
}

type ListSnapshotsReq struct {
}

func NewListSnapshotsReq() *ListSnapshotsReq {
  return &ListSnapshotsReq{}
}

func (p *ListSnapshotsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSnapshotsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSnapshotsReq(%+v)", *p)
}

// Attributes:
//  - Name
//  - Status
//  - Hosts
type Snapshot struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status SnapshotStatus `thrift:"status,2" db:"status" json:"status"`
  Hosts []byte `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewSnapshot() *Snapshot {
  return &Snapshot{}
}


func (p *Snapshot) GetName() []byte {
  return p.Name
}

func (p *Snapshot) GetStatus() SnapshotStatus {
  return p.Status
}

func (p *Snapshot) GetHosts() []byte {
  return p.Hosts
}
func (p *Snapshot) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Snapshot)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Snapshot)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SnapshotStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Snapshot)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hosts = v
}
  return nil
}

func (p *Snapshot) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Snapshot"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Snapshot) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Snapshot) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *Snapshot) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteBinary(p.Hosts); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hosts (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *Snapshot) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Snapshot(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Snapshots
type ListSnapshotsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Snapshots []*Snapshot `thrift:"snapshots,3" db:"snapshots" json:"snapshots"`
}

func NewListSnapshotsResp() *ListSnapshotsResp {
  return &ListSnapshotsResp{}
}


func (p *ListSnapshotsResp) GetCode() ErrorCode {
  return p.Code
}
var ListSnapshotsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListSnapshotsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListSnapshotsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListSnapshotsResp) GetSnapshots() []*Snapshot {
  return p.Snapshots
}
func (p *ListSnapshotsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListSnapshotsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListSnapshotsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListSnapshotsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Snapshot, 0, size)
  p.Snapshots =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := NewSnapshot()
    if err := _elem49.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.Snapshots = append(p.Snapshots, _elem49)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListSnapshotsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListSnapshotsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListSnapshotsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("snapshots", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snapshots: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Snapshots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Snapshots {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snapshots: ", p), err) }
  return err
}

func (p *ListSnapshotsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListSnapshotsResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListIndexStatusReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListIndexStatusReq() *ListIndexStatusReq {
  return &ListIndexStatusReq{}
}


func (p *ListIndexStatusReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListIndexStatusReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListIndexStatusReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListIndexStatusReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListIndexStatusReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListIndexStatusReq(%+v)", *p)
}

// Attributes:
//  - Name
//  - Status
type IndexStatus struct {
  Name []byte `thrift:"name,1" db:"name" json:"name"`
  Status []byte `thrift:"status,2" db:"status" json:"status"`
}

func NewIndexStatus() *IndexStatus {
  return &IndexStatus{}
}


func (p *IndexStatus) GetName() []byte {
  return p.Name
}

func (p *IndexStatus) GetStatus() []byte {
  return p.Status
}
func (p *IndexStatus) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexStatus)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IndexStatus)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *IndexStatus) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexStatus) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteBinary(p.Name); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IndexStatus) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteBinary(p.Status); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *IndexStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexStatus(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Statuses
type ListIndexStatusResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Statuses []*IndexStatus `thrift:"statuses,3" db:"statuses" json:"statuses"`
}

func NewListIndexStatusResp() *ListIndexStatusResp {
  return &ListIndexStatusResp{}
}


func (p *ListIndexStatusResp) GetCode() ErrorCode {
  return p.Code
}
var ListIndexStatusResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListIndexStatusResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListIndexStatusResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListIndexStatusResp) GetStatuses() []*IndexStatus {
  return p.Statuses
}
func (p *ListIndexStatusResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListIndexStatusResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListIndexStatusResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListIndexStatusResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IndexStatus, 0, size)
  p.Statuses =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := NewIndexStatus()
    if err := _elem50.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.Statuses = append(p.Statuses, _elem50)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListIndexStatusResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListIndexStatusResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListIndexStatusResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("statuses", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statuses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Statuses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Statuses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statuses: ", p), err) }
  return err
}

func (p *ListIndexStatusResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListIndexStatusResp(%+v)", *p)
}

// Attributes:
//  - ZoneName
//  - Nodes
type AddZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  Nodes []*nebula0.HostAddr `thrift:"nodes,2" db:"nodes" json:"nodes"`
}

func NewAddZoneReq() *AddZoneReq {
  return &AddZoneReq{}
}


func (p *AddZoneReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *AddZoneReq) GetNodes() []*nebula0.HostAddr {
  return p.Nodes
}
func (p *AddZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *AddZoneReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem51 := nebula0.NewHostAddr()
    if err := _elem51.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem51), err)
    }
    p.Nodes = append(p.Nodes, _elem51)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *AddZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nodes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodes: ", p), err) }
  return err
}

func (p *AddZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddZoneReq(%+v)", *p)
}

// Attributes:
//  - ZoneName
type DropZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewDropZoneReq() *DropZoneReq {
  return &DropZoneReq{}
}


func (p *DropZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *DropZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *DropZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DropZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropZoneReq(%+v)", *p)
}

// Attributes:
//  - Node
//  - ZoneName
type AddHostIntoZoneReq struct {
  Node *nebula0.HostAddr `thrift:"node,1" db:"node" json:"node"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewAddHostIntoZoneReq() *AddHostIntoZoneReq {
  return &AddHostIntoZoneReq{}
}

var AddHostIntoZoneReq_Node_DEFAULT *nebula0.HostAddr
func (p *AddHostIntoZoneReq) GetNode() *nebula0.HostAddr {
  if !p.IsSetNode() {
    return AddHostIntoZoneReq_Node_DEFAULT
  }
return p.Node
}

func (p *AddHostIntoZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *AddHostIntoZoneReq) IsSetNode() bool {
  return p.Node != nil
}

func (p *AddHostIntoZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddHostIntoZoneReq)  ReadField1(iprot thrift.Protocol) error {
  p.Node = nebula0.NewHostAddr()
  if err := p.Node.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *AddHostIntoZoneReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *AddHostIntoZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddHostIntoZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddHostIntoZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *AddHostIntoZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *AddHostIntoZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddHostIntoZoneReq(%+v)", *p)
}

// Attributes:
//  - Node
//  - ZoneName
type DropHostFromZoneReq struct {
  Node *nebula0.HostAddr `thrift:"node,1" db:"node" json:"node"`
  ZoneName []byte `thrift:"zone_name,2" db:"zone_name" json:"zone_name"`
}

func NewDropHostFromZoneReq() *DropHostFromZoneReq {
  return &DropHostFromZoneReq{}
}

var DropHostFromZoneReq_Node_DEFAULT *nebula0.HostAddr
func (p *DropHostFromZoneReq) GetNode() *nebula0.HostAddr {
  if !p.IsSetNode() {
    return DropHostFromZoneReq_Node_DEFAULT
  }
return p.Node
}

func (p *DropHostFromZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *DropHostFromZoneReq) IsSetNode() bool {
  return p.Node != nil
}

func (p *DropHostFromZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropHostFromZoneReq)  ReadField1(iprot thrift.Protocol) error {
  p.Node = nebula0.NewHostAddr()
  if err := p.Node.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *DropHostFromZoneReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *DropHostFromZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropHostFromZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropHostFromZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *DropHostFromZoneReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_name: ", p), err) }
  return err
}

func (p *DropHostFromZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropHostFromZoneReq(%+v)", *p)
}

// Attributes:
//  - ZoneName
type GetZoneReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
}

func NewGetZoneReq() *GetZoneReq {
  return &GetZoneReq{}
}


func (p *GetZoneReq) GetZoneName() []byte {
  return p.ZoneName
}
func (p *GetZoneReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *GetZoneReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetZoneReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *GetZoneReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetZoneReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Hosts
type GetZoneResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Hosts []*nebula0.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewGetZoneResp() *GetZoneResp {
  return &GetZoneResp{}
}


func (p *GetZoneResp) GetCode() ErrorCode {
  return p.Code
}
var GetZoneResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetZoneResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetZoneResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetZoneResp) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
func (p *GetZoneResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetZoneResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetZoneResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetZoneResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem52 := nebula0.NewHostAddr()
    if err := _elem52.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
    }
    p.Hosts = append(p.Hosts, _elem52)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetZoneResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetZoneResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetZoneResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetZoneResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *GetZoneResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetZoneResp(%+v)", *p)
}

type ListZonesReq struct {
}

func NewListZonesReq() *ListZonesReq {
  return &ListZonesReq{}
}

func (p *ListZonesReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListZonesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListZonesReq(%+v)", *p)
}

// Attributes:
//  - ZoneName
//  - Nodes
type Zone struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  Nodes []*nebula0.HostAddr `thrift:"nodes,2" db:"nodes" json:"nodes"`
}

func NewZone() *Zone {
  return &Zone{}
}


func (p *Zone) GetZoneName() []byte {
  return p.ZoneName
}

func (p *Zone) GetNodes() []*nebula0.HostAddr {
  return p.Nodes
}
func (p *Zone) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Zone)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *Zone)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := nebula0.NewHostAddr()
    if err := _elem53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.Nodes = append(p.Nodes, _elem53)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Zone) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Zone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Zone) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *Zone) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nodes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodes: ", p), err) }
  return err
}

func (p *Zone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Zone(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Zones
type ListZonesResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Zones []*Zone `thrift:"zones,3" db:"zones" json:"zones"`
}

func NewListZonesResp() *ListZonesResp {
  return &ListZonesResp{}
}


func (p *ListZonesResp) GetCode() ErrorCode {
  return p.Code
}
var ListZonesResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListZonesResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListZonesResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListZonesResp) GetZones() []*Zone {
  return p.Zones
}
func (p *ListZonesResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListZonesResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListZonesResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListZonesResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Zone, 0, size)
  p.Zones =  tSlice
  for i := 0; i < size; i ++ {
    _elem54 := NewZone()
    if err := _elem54.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
    }
    p.Zones = append(p.Zones, _elem54)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListZonesResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListZonesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListZonesResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListZonesResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zones", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zones: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Zones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Zones {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zones: ", p), err) }
  return err
}

func (p *ListZonesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListZonesResp(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - ZoneNames
type AddGroupReq struct {
  GroupName []byte `thrift:"group_name,1" db:"group_name" json:"group_name"`
  ZoneNames [][]byte `thrift:"zone_names,2" db:"zone_names" json:"zone_names"`
}

func NewAddGroupReq() *AddGroupReq {
  return &AddGroupReq{}
}


func (p *AddGroupReq) GetGroupName() []byte {
  return p.GroupName
}

func (p *AddGroupReq) GetZoneNames() [][]byte {
  return p.ZoneNames
}
func (p *AddGroupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddGroupReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *AddGroupReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ZoneNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem55 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem55 = v
}
    p.ZoneNames = append(p.ZoneNames, _elem55)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddGroupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddGroupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddGroupReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group_name: ", p), err) }
  return err
}

func (p *AddGroupReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ZoneNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ZoneNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_names: ", p), err) }
  return err
}

func (p *AddGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddGroupReq(%+v)", *p)
}

// Attributes:
//  - GroupName
type DropGroupReq struct {
  GroupName []byte `thrift:"group_name,1" db:"group_name" json:"group_name"`
}

func NewDropGroupReq() *DropGroupReq {
  return &DropGroupReq{}
}


func (p *DropGroupReq) GetGroupName() []byte {
  return p.GroupName
}
func (p *DropGroupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropGroupReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *DropGroupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropGroupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropGroupReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group_name: ", p), err) }
  return err
}

func (p *DropGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropGroupReq(%+v)", *p)
}

// Attributes:
//  - ZoneName
//  - GroupName
type AddZoneIntoGroupReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  GroupName []byte `thrift:"group_name,2" db:"group_name" json:"group_name"`
}

func NewAddZoneIntoGroupReq() *AddZoneIntoGroupReq {
  return &AddZoneIntoGroupReq{}
}


func (p *AddZoneIntoGroupReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *AddZoneIntoGroupReq) GetGroupName() []byte {
  return p.GroupName
}
func (p *AddZoneIntoGroupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddZoneIntoGroupReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *AddZoneIntoGroupReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *AddZoneIntoGroupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddZoneIntoGroupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddZoneIntoGroupReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *AddZoneIntoGroupReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group_name: ", p), err) }
  return err
}

func (p *AddZoneIntoGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddZoneIntoGroupReq(%+v)", *p)
}

// Attributes:
//  - ZoneName
//  - GroupName
type DropZoneFromGroupReq struct {
  ZoneName []byte `thrift:"zone_name,1" db:"zone_name" json:"zone_name"`
  GroupName []byte `thrift:"group_name,2" db:"group_name" json:"group_name"`
}

func NewDropZoneFromGroupReq() *DropZoneFromGroupReq {
  return &DropZoneFromGroupReq{}
}


func (p *DropZoneFromGroupReq) GetZoneName() []byte {
  return p.ZoneName
}

func (p *DropZoneFromGroupReq) GetGroupName() []byte {
  return p.GroupName
}
func (p *DropZoneFromGroupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropZoneFromGroupReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ZoneName = v
}
  return nil
}

func (p *DropZoneFromGroupReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *DropZoneFromGroupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DropZoneFromGroupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropZoneFromGroupReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:zone_name: ", p), err) }
  if err := oprot.WriteBinary(p.ZoneName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:zone_name: ", p), err) }
  return err
}

func (p *DropZoneFromGroupReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group_name: ", p), err) }
  return err
}

func (p *DropZoneFromGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropZoneFromGroupReq(%+v)", *p)
}

// Attributes:
//  - GroupName
type GetGroupReq struct {
  GroupName []byte `thrift:"group_name,1" db:"group_name" json:"group_name"`
}

func NewGetGroupReq() *GetGroupReq {
  return &GetGroupReq{}
}


func (p *GetGroupReq) GetGroupName() []byte {
  return p.GroupName
}
func (p *GetGroupReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetGroupReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *GetGroupReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetGroupReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetGroupReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group_name: ", p), err) }
  return err
}

func (p *GetGroupReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - ZoneNames
type GetGroupResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  ZoneNames [][]byte `thrift:"zone_names,3" db:"zone_names" json:"zone_names"`
}

func NewGetGroupResp() *GetGroupResp {
  return &GetGroupResp{}
}


func (p *GetGroupResp) GetCode() ErrorCode {
  return p.Code
}
var GetGroupResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetGroupResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetGroupResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *GetGroupResp) GetZoneNames() [][]byte {
  return p.ZoneNames
}
func (p *GetGroupResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetGroupResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetGroupResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetGroupResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetGroupResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ZoneNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem56 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem56 = v
}
    p.ZoneNames = append(p.ZoneNames, _elem56)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetGroupResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetGroupResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetGroupResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetGroupResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetGroupResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_names", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ZoneNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ZoneNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone_names: ", p), err) }
  return err
}

func (p *GetGroupResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetGroupResp(%+v)", *p)
}

type ListGroupsReq struct {
}

func NewListGroupsReq() *ListGroupsReq {
  return &ListGroupsReq{}
}

func (p *ListGroupsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListGroupsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListGroupsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListGroupsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListGroupsReq(%+v)", *p)
}

// Attributes:
//  - GroupName
//  - ZoneNames
type Group struct {
  GroupName []byte `thrift:"group_name,1" db:"group_name" json:"group_name"`
  ZoneNames [][]byte `thrift:"zone_names,2" db:"zone_names" json:"zone_names"`
}

func NewGroup() *Group {
  return &Group{}
}


func (p *Group) GetGroupName() []byte {
  return p.GroupName
}

func (p *Group) GetZoneNames() [][]byte {
  return p.ZoneNames
}
func (p *Group) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Group)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *Group)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ZoneNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem57 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem57 = v
}
    p.ZoneNames = append(p.ZoneNames, _elem57)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Group) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Group"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Group) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group_name: ", p), err) }
  if err := oprot.WriteBinary(p.GroupName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group_name: ", p), err) }
  return err
}

func (p *Group) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("zone_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:zone_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ZoneNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ZoneNames {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:zone_names: ", p), err) }
  return err
}

func (p *Group) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Group(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Groups
type ListGroupsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Groups []*Group `thrift:"groups,3" db:"groups" json:"groups"`
}

func NewListGroupsResp() *ListGroupsResp {
  return &ListGroupsResp{}
}


func (p *ListGroupsResp) GetCode() ErrorCode {
  return p.Code
}
var ListGroupsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListGroupsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListGroupsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListGroupsResp) GetGroups() []*Group {
  return p.Groups
}
func (p *ListGroupsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListGroupsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListGroupsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListGroupsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListGroupsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Group, 0, size)
  p.Groups =  tSlice
  for i := 0; i < size; i ++ {
    _elem58 := NewGroup()
    if err := _elem58.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
    }
    p.Groups = append(p.Groups, _elem58)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListGroupsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListGroupsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListGroupsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListGroupsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListGroupsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("groups", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Groups)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Groups {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err) }
  return err
}

func (p *ListGroupsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListGroupsResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Type
//  - Hosts
type AddListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
  Hosts []*nebula0.HostAddr `thrift:"hosts,3" db:"hosts" json:"hosts"`
}

func NewAddListenerReq() *AddListenerReq {
  return &AddListenerReq{}
}


func (p *AddListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *AddListenerReq) GetType() ListenerType {
  return p.Type
}

func (p *AddListenerReq) GetHosts() []*nebula0.HostAddr {
  return p.Hosts
}
func (p *AddListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AddListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *AddListenerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *AddListenerReq)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*nebula0.HostAddr, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem59 := nebula0.NewHostAddr()
    if err := _elem59.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
    }
    p.Hosts = append(p.Hosts, _elem59)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AddListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AddListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *AddListenerReq) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hosts: ", p), err) }
  return err
}

func (p *AddListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddListenerReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
//  - Type
type RemoveListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
  Type ListenerType `thrift:"type,2" db:"type" json:"type"`
}

func NewRemoveListenerReq() *RemoveListenerReq {
  return &RemoveListenerReq{}
}


func (p *RemoveListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}

func (p *RemoveListenerReq) GetType() ListenerType {
  return p.Type
}
func (p *RemoveListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RemoveListenerReq)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *RemoveListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RemoveListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *RemoveListenerReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *RemoveListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveListenerReq(%+v)", *p)
}

// Attributes:
//  - SpaceID
type ListListenerReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewListListenerReq() *ListListenerReq {
  return &ListListenerReq{}
}


func (p *ListListenerReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *ListListenerReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *ListListenerReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListListenerReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *ListListenerReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListListenerReq(%+v)", *p)
}

// Attributes:
//  - Type
//  - Host
//  - PartID
//  - Status
type ListenerInfo struct {
  Type ListenerType `thrift:"type,1" db:"type" json:"type"`
  Host *nebula0.HostAddr `thrift:"host,2" db:"host" json:"host"`
  PartID nebula0.PartitionID `thrift:"part_id,3" db:"part_id" json:"part_id"`
  Status HostStatus `thrift:"status,4" db:"status" json:"status"`
}

func NewListenerInfo() *ListenerInfo {
  return &ListenerInfo{}
}


func (p *ListenerInfo) GetType() ListenerType {
  return p.Type
}
var ListenerInfo_Host_DEFAULT *nebula0.HostAddr
func (p *ListenerInfo) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return ListenerInfo_Host_DEFAULT
  }
return p.Host
}

func (p *ListenerInfo) GetPartID() nebula0.PartitionID {
  return p.PartID
}

func (p *ListenerInfo) GetStatus() HostStatus {
  return p.Status
}
func (p *ListenerInfo) IsSetHost() bool {
  return p.Host != nil
}

func (p *ListenerInfo) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ListenerType(v)
  p.Type = temp
}
  return nil
}

func (p *ListenerInfo)  ReadField2(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *ListenerInfo)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := nebula0.PartitionID(v)
  p.PartID = temp
}
  return nil
}

func (p *ListenerInfo)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := HostStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ListenerInfo) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListenerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListenerInfo) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("part_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:part_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.part_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:part_id: ", p), err) }
  return err
}

func (p *ListenerInfo) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *ListenerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListenerInfo(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Listeners
type ListListenerResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Listeners []*ListenerInfo `thrift:"listeners,3" db:"listeners" json:"listeners"`
}

func NewListListenerResp() *ListListenerResp {
  return &ListListenerResp{}
}


func (p *ListListenerResp) GetCode() ErrorCode {
  return p.Code
}
var ListListenerResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListListenerResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListListenerResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListListenerResp) GetListeners() []*ListenerInfo {
  return p.Listeners
}
func (p *ListListenerResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListListenerResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListListenerResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListListenerResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ListenerInfo, 0, size)
  p.Listeners =  tSlice
  for i := 0; i < size; i ++ {
    _elem60 := NewListenerInfo()
    if err := _elem60.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
    }
    p.Listeners = append(p.Listeners, _elem60)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListListenerResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListListenerResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListListenerResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListListenerResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("listeners", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:listeners: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Listeners)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Listeners {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:listeners: ", p), err) }
  return err
}

func (p *ListListenerResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListListenerResp(%+v)", *p)
}

// Attributes:
//  - SpaceID
type GetStatisReq struct {
  SpaceID nebula0.GraphSpaceID `thrift:"space_id,1" db:"space_id" json:"space_id"`
}

func NewGetStatisReq() *GetStatisReq {
  return &GetStatisReq{}
}


func (p *GetStatisReq) GetSpaceID() nebula0.GraphSpaceID {
  return p.SpaceID
}
func (p *GetStatisReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatisReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := nebula0.GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *GetStatisReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStatisReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatisReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:space_id: ", p), err) }
  return err
}

func (p *GetStatisReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatisReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Statis
type GetStatisResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Statis *StatisItem `thrift:"statis,3" db:"statis" json:"statis"`
}

func NewGetStatisResp() *GetStatisResp {
  return &GetStatisResp{}
}


func (p *GetStatisResp) GetCode() ErrorCode {
  return p.Code
}
var GetStatisResp_Leader_DEFAULT *nebula0.HostAddr
func (p *GetStatisResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return GetStatisResp_Leader_DEFAULT
  }
return p.Leader
}
var GetStatisResp_Statis_DEFAULT *StatisItem
func (p *GetStatisResp) GetStatis() *StatisItem {
  if !p.IsSetStatis() {
    return GetStatisResp_Statis_DEFAULT
  }
return p.Statis
}
func (p *GetStatisResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *GetStatisResp) IsSetStatis() bool {
  return p.Statis != nil
}

func (p *GetStatisResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetStatisResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *GetStatisResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *GetStatisResp)  ReadField3(iprot thrift.Protocol) error {
  p.Statis = NewStatisItem()
  if err := p.Statis.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Statis), err)
  }
  return nil
}

func (p *GetStatisResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("GetStatisResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetStatisResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *GetStatisResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *GetStatisResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("statis", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statis: ", p), err) }
  if err := p.Statis.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Statis), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statis: ", p), err) }
  return err
}

func (p *GetStatisResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetStatisResp(%+v)", *p)
}

// Attributes:
//  - Host
//  - User
//  - Pwd
type FTClient struct {
  Host *nebula0.HostAddr `thrift:"host,1,required" db:"host" json:"host"`
  User []byte `thrift:"user,2" db:"user" json:"user,omitempty"`
  Pwd []byte `thrift:"pwd,3" db:"pwd" json:"pwd,omitempty"`
}

func NewFTClient() *FTClient {
  return &FTClient{}
}

var FTClient_Host_DEFAULT *nebula0.HostAddr
func (p *FTClient) GetHost() *nebula0.HostAddr {
  if !p.IsSetHost() {
    return FTClient_Host_DEFAULT
  }
return p.Host
}
var FTClient_User_DEFAULT []byte

func (p *FTClient) GetUser() []byte {
  return p.User
}
var FTClient_Pwd_DEFAULT []byte

func (p *FTClient) GetPwd() []byte {
  return p.Pwd
}
func (p *FTClient) IsSetHost() bool {
  return p.Host != nil
}

func (p *FTClient) IsSetUser() bool {
  return p.User != nil
}

func (p *FTClient) IsSetPwd() bool {
  return p.Pwd != nil
}

func (p *FTClient) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHost bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHost = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHost{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  return nil
}

func (p *FTClient)  ReadField1(iprot thrift.Protocol) error {
  p.Host = nebula0.NewHostAddr()
  if err := p.Host.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Host), err)
  }
  return nil
}

func (p *FTClient)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *FTClient)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *FTClient) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("FTClient"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FTClient) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := p.Host.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Host), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *FTClient) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetUser() {
    if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
    if err := oprot.WriteBinary(p.User); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  }
  return err
}

func (p *FTClient) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetPwd() {
    if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
    if err := oprot.WriteBinary(p.Pwd); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  }
  return err
}

func (p *FTClient) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FTClient(%+v)", *p)
}

// Attributes:
//  - Type
//  - Clients
type SignInFTServiceReq struct {
  Type FTServiceType `thrift:"type,1" db:"type" json:"type"`
  Clients []*FTClient `thrift:"clients,2" db:"clients" json:"clients"`
}

func NewSignInFTServiceReq() *SignInFTServiceReq {
  return &SignInFTServiceReq{}
}


func (p *SignInFTServiceReq) GetType() FTServiceType {
  return p.Type
}

func (p *SignInFTServiceReq) GetClients() []*FTClient {
  return p.Clients
}
func (p *SignInFTServiceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignInFTServiceReq)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FTServiceType(v)
  p.Type = temp
}
  return nil
}

func (p *SignInFTServiceReq)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FTClient, 0, size)
  p.Clients =  tSlice
  for i := 0; i < size; i ++ {
    _elem61 := NewFTClient()
    if err := _elem61.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem61), err)
    }
    p.Clients = append(p.Clients, _elem61)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SignInFTServiceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SignInFTServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignInFTServiceReq) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *SignInFTServiceReq) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clients", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clients: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Clients {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clients: ", p), err) }
  return err
}

func (p *SignInFTServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignInFTServiceReq(%+v)", *p)
}

type SignOutFTServiceReq struct {
}

func NewSignOutFTServiceReq() *SignOutFTServiceReq {
  return &SignOutFTServiceReq{}
}

func (p *SignOutFTServiceReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SignOutFTServiceReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SignOutFTServiceReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SignOutFTServiceReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SignOutFTServiceReq(%+v)", *p)
}

type ListFTClientsReq struct {
}

func NewListFTClientsReq() *ListFTClientsReq {
  return &ListFTClientsReq{}
}

func (p *ListFTClientsReq) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTClientsReq) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListFTClientsReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTClientsReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListFTClientsReq(%+v)", *p)
}

// Attributes:
//  - Code
//  - Leader
//  - Clients
type ListFTClientsResp struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Leader *nebula0.HostAddr `thrift:"leader,2" db:"leader" json:"leader"`
  Clients []*FTClient `thrift:"clients,3" db:"clients" json:"clients"`
}

func NewListFTClientsResp() *ListFTClientsResp {
  return &ListFTClientsResp{}
}


func (p *ListFTClientsResp) GetCode() ErrorCode {
  return p.Code
}
var ListFTClientsResp_Leader_DEFAULT *nebula0.HostAddr
func (p *ListFTClientsResp) GetLeader() *nebula0.HostAddr {
  if !p.IsSetLeader() {
    return ListFTClientsResp_Leader_DEFAULT
  }
return p.Leader
}

func (p *ListFTClientsResp) GetClients() []*FTClient {
  return p.Clients
}
func (p *ListFTClientsResp) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *ListFTClientsResp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListFTClientsResp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ListFTClientsResp)  ReadField2(iprot thrift.Protocol) error {
  p.Leader = nebula0.NewHostAddr()
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *ListFTClientsResp)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FTClient, 0, size)
  p.Clients =  tSlice
  for i := 0; i < size; i ++ {
    _elem62 := NewFTClient()
    if err := _elem62.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem62), err)
    }
    p.Clients = append(p.Clients, _elem62)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListFTClientsResp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ListFTClientsResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListFTClientsResp) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ListFTClientsResp) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *ListFTClientsResp) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clients", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clients: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Clients)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Clients {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clients: ", p), err) }
  return err
}

func (p *ListFTClientsResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListFTClientsResp(%+v)", *p)
}

