// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/nebula/storage"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  QueryResponse getBound(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryStatsResponse boundStats(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryResponse getProps(VertexPropRequest req)")
  fmt.Fprintln(os.Stderr, "  EdgePropResponse getEdgeProps(EdgePropRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addVertices(AddVerticesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addEdges(AddEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteEdges(DeleteEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteVertices(DeleteVerticesRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateVertex(UpdateVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateEdge(UpdateEdgeRequest req)")
  fmt.Fprintln(os.Stderr, "  ScanEdgeResponse scanEdge(ScanEdgeRequest req)")
  fmt.Fprintln(os.Stderr, "  ScanVertexResponse scanVertex(ScanVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp transLeader(TransLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addPart(AddPartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addLearner(AddLearnerReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp waitingForCatchUpData(CatchUpDataReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp removePart(RemovePartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp memberChange(MemberChangeReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp checkPeers(CheckPeersReq req)")
  fmt.Fprintln(os.Stderr, "  GetLeaderResp getLeaderPart(GetLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp createCheckpoint(CreateCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp dropCheckpoint(DropCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp blockingWrites(BlockingSignRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildTagIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildEdgeIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse put(PutRequest req)")
  fmt.Fprintln(os.Stderr, "  GeneralResponse get(GetRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse remove(RemoveRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse removeRange(RemoveRangeRequest req)")
  fmt.Fprintln(os.Stderr, "  GetUUIDResp getUUID(GetUUIDReq req)")
  fmt.Fprintln(os.Stderr, "  LookUpIndexResp lookUpIndex(LookUpIndexRequest req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := storage.NewStorageServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getBound":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBound requires 1 args")
      flag.Usage()
    }
    arg205 := flag.Arg(1)
    mbTrans206 := thrift.NewMemoryBufferLen(len(arg205))
    defer mbTrans206.Close()
    _, err207 := mbTrans206.WriteString(arg205)
    if err207 != nil {
      Usage()
      return
    }
    factory208 := thrift.NewSimpleJSONProtocolFactory()
    jsProt209 := factory208.GetProtocol(mbTrans206)
    argvalue0 := storage.NewGetNeighborsRequest()
    err210 := argvalue0.Read(jsProt209)
    if err210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBound(value0))
    fmt.Print("\n")
    break
  case "boundStats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BoundStats requires 1 args")
      flag.Usage()
    }
    arg211 := flag.Arg(1)
    mbTrans212 := thrift.NewMemoryBufferLen(len(arg211))
    defer mbTrans212.Close()
    _, err213 := mbTrans212.WriteString(arg211)
    if err213 != nil {
      Usage()
      return
    }
    factory214 := thrift.NewSimpleJSONProtocolFactory()
    jsProt215 := factory214.GetProtocol(mbTrans212)
    argvalue0 := storage.NewGetNeighborsRequest()
    err216 := argvalue0.Read(jsProt215)
    if err216 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BoundStats(value0))
    fmt.Print("\n")
    break
  case "getProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProps requires 1 args")
      flag.Usage()
    }
    arg217 := flag.Arg(1)
    mbTrans218 := thrift.NewMemoryBufferLen(len(arg217))
    defer mbTrans218.Close()
    _, err219 := mbTrans218.WriteString(arg217)
    if err219 != nil {
      Usage()
      return
    }
    factory220 := thrift.NewSimpleJSONProtocolFactory()
    jsProt221 := factory220.GetProtocol(mbTrans218)
    argvalue0 := storage.NewVertexPropRequest()
    err222 := argvalue0.Read(jsProt221)
    if err222 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProps(value0))
    fmt.Print("\n")
    break
  case "getEdgeProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeProps requires 1 args")
      flag.Usage()
    }
    arg223 := flag.Arg(1)
    mbTrans224 := thrift.NewMemoryBufferLen(len(arg223))
    defer mbTrans224.Close()
    _, err225 := mbTrans224.WriteString(arg223)
    if err225 != nil {
      Usage()
      return
    }
    factory226 := thrift.NewSimpleJSONProtocolFactory()
    jsProt227 := factory226.GetProtocol(mbTrans224)
    argvalue0 := storage.NewEdgePropRequest()
    err228 := argvalue0.Read(jsProt227)
    if err228 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeProps(value0))
    fmt.Print("\n")
    break
  case "addVertices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddVertices requires 1 args")
      flag.Usage()
    }
    arg229 := flag.Arg(1)
    mbTrans230 := thrift.NewMemoryBufferLen(len(arg229))
    defer mbTrans230.Close()
    _, err231 := mbTrans230.WriteString(arg229)
    if err231 != nil {
      Usage()
      return
    }
    factory232 := thrift.NewSimpleJSONProtocolFactory()
    jsProt233 := factory232.GetProtocol(mbTrans230)
    argvalue0 := storage.NewAddVerticesRequest()
    err234 := argvalue0.Read(jsProt233)
    if err234 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddVertices(value0))
    fmt.Print("\n")
    break
  case "addEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddEdges requires 1 args")
      flag.Usage()
    }
    arg235 := flag.Arg(1)
    mbTrans236 := thrift.NewMemoryBufferLen(len(arg235))
    defer mbTrans236.Close()
    _, err237 := mbTrans236.WriteString(arg235)
    if err237 != nil {
      Usage()
      return
    }
    factory238 := thrift.NewSimpleJSONProtocolFactory()
    jsProt239 := factory238.GetProtocol(mbTrans236)
    argvalue0 := storage.NewAddEdgesRequest()
    err240 := argvalue0.Read(jsProt239)
    if err240 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddEdges(value0))
    fmt.Print("\n")
    break
  case "deleteEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteEdges requires 1 args")
      flag.Usage()
    }
    arg241 := flag.Arg(1)
    mbTrans242 := thrift.NewMemoryBufferLen(len(arg241))
    defer mbTrans242.Close()
    _, err243 := mbTrans242.WriteString(arg241)
    if err243 != nil {
      Usage()
      return
    }
    factory244 := thrift.NewSimpleJSONProtocolFactory()
    jsProt245 := factory244.GetProtocol(mbTrans242)
    argvalue0 := storage.NewDeleteEdgesRequest()
    err246 := argvalue0.Read(jsProt245)
    if err246 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteEdges(value0))
    fmt.Print("\n")
    break
  case "deleteVertices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteVertices requires 1 args")
      flag.Usage()
    }
    arg247 := flag.Arg(1)
    mbTrans248 := thrift.NewMemoryBufferLen(len(arg247))
    defer mbTrans248.Close()
    _, err249 := mbTrans248.WriteString(arg247)
    if err249 != nil {
      Usage()
      return
    }
    factory250 := thrift.NewSimpleJSONProtocolFactory()
    jsProt251 := factory250.GetProtocol(mbTrans248)
    argvalue0 := storage.NewDeleteVerticesRequest()
    err252 := argvalue0.Read(jsProt251)
    if err252 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteVertices(value0))
    fmt.Print("\n")
    break
  case "updateVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateVertex requires 1 args")
      flag.Usage()
    }
    arg253 := flag.Arg(1)
    mbTrans254 := thrift.NewMemoryBufferLen(len(arg253))
    defer mbTrans254.Close()
    _, err255 := mbTrans254.WriteString(arg253)
    if err255 != nil {
      Usage()
      return
    }
    factory256 := thrift.NewSimpleJSONProtocolFactory()
    jsProt257 := factory256.GetProtocol(mbTrans254)
    argvalue0 := storage.NewUpdateVertexRequest()
    err258 := argvalue0.Read(jsProt257)
    if err258 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateVertex(value0))
    fmt.Print("\n")
    break
  case "updateEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEdge requires 1 args")
      flag.Usage()
    }
    arg259 := flag.Arg(1)
    mbTrans260 := thrift.NewMemoryBufferLen(len(arg259))
    defer mbTrans260.Close()
    _, err261 := mbTrans260.WriteString(arg259)
    if err261 != nil {
      Usage()
      return
    }
    factory262 := thrift.NewSimpleJSONProtocolFactory()
    jsProt263 := factory262.GetProtocol(mbTrans260)
    argvalue0 := storage.NewUpdateEdgeRequest()
    err264 := argvalue0.Read(jsProt263)
    if err264 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEdge(value0))
    fmt.Print("\n")
    break
  case "scanEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanEdge requires 1 args")
      flag.Usage()
    }
    arg265 := flag.Arg(1)
    mbTrans266 := thrift.NewMemoryBufferLen(len(arg265))
    defer mbTrans266.Close()
    _, err267 := mbTrans266.WriteString(arg265)
    if err267 != nil {
      Usage()
      return
    }
    factory268 := thrift.NewSimpleJSONProtocolFactory()
    jsProt269 := factory268.GetProtocol(mbTrans266)
    argvalue0 := storage.NewScanEdgeRequest()
    err270 := argvalue0.Read(jsProt269)
    if err270 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanEdge(value0))
    fmt.Print("\n")
    break
  case "scanVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanVertex requires 1 args")
      flag.Usage()
    }
    arg271 := flag.Arg(1)
    mbTrans272 := thrift.NewMemoryBufferLen(len(arg271))
    defer mbTrans272.Close()
    _, err273 := mbTrans272.WriteString(arg271)
    if err273 != nil {
      Usage()
      return
    }
    factory274 := thrift.NewSimpleJSONProtocolFactory()
    jsProt275 := factory274.GetProtocol(mbTrans272)
    argvalue0 := storage.NewScanVertexRequest()
    err276 := argvalue0.Read(jsProt275)
    if err276 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanVertex(value0))
    fmt.Print("\n")
    break
  case "transLeader":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransLeader requires 1 args")
      flag.Usage()
    }
    arg277 := flag.Arg(1)
    mbTrans278 := thrift.NewMemoryBufferLen(len(arg277))
    defer mbTrans278.Close()
    _, err279 := mbTrans278.WriteString(arg277)
    if err279 != nil {
      Usage()
      return
    }
    factory280 := thrift.NewSimpleJSONProtocolFactory()
    jsProt281 := factory280.GetProtocol(mbTrans278)
    argvalue0 := storage.NewTransLeaderReq()
    err282 := argvalue0.Read(jsProt281)
    if err282 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransLeader(value0))
    fmt.Print("\n")
    break
  case "addPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPart requires 1 args")
      flag.Usage()
    }
    arg283 := flag.Arg(1)
    mbTrans284 := thrift.NewMemoryBufferLen(len(arg283))
    defer mbTrans284.Close()
    _, err285 := mbTrans284.WriteString(arg283)
    if err285 != nil {
      Usage()
      return
    }
    factory286 := thrift.NewSimpleJSONProtocolFactory()
    jsProt287 := factory286.GetProtocol(mbTrans284)
    argvalue0 := storage.NewAddPartReq()
    err288 := argvalue0.Read(jsProt287)
    if err288 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPart(value0))
    fmt.Print("\n")
    break
  case "addLearner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddLearner requires 1 args")
      flag.Usage()
    }
    arg289 := flag.Arg(1)
    mbTrans290 := thrift.NewMemoryBufferLen(len(arg289))
    defer mbTrans290.Close()
    _, err291 := mbTrans290.WriteString(arg289)
    if err291 != nil {
      Usage()
      return
    }
    factory292 := thrift.NewSimpleJSONProtocolFactory()
    jsProt293 := factory292.GetProtocol(mbTrans290)
    argvalue0 := storage.NewAddLearnerReq()
    err294 := argvalue0.Read(jsProt293)
    if err294 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddLearner(value0))
    fmt.Print("\n")
    break
  case "waitingForCatchUpData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitingForCatchUpData requires 1 args")
      flag.Usage()
    }
    arg295 := flag.Arg(1)
    mbTrans296 := thrift.NewMemoryBufferLen(len(arg295))
    defer mbTrans296.Close()
    _, err297 := mbTrans296.WriteString(arg295)
    if err297 != nil {
      Usage()
      return
    }
    factory298 := thrift.NewSimpleJSONProtocolFactory()
    jsProt299 := factory298.GetProtocol(mbTrans296)
    argvalue0 := storage.NewCatchUpDataReq()
    err300 := argvalue0.Read(jsProt299)
    if err300 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WaitingForCatchUpData(value0))
    fmt.Print("\n")
    break
  case "removePart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemovePart requires 1 args")
      flag.Usage()
    }
    arg301 := flag.Arg(1)
    mbTrans302 := thrift.NewMemoryBufferLen(len(arg301))
    defer mbTrans302.Close()
    _, err303 := mbTrans302.WriteString(arg301)
    if err303 != nil {
      Usage()
      return
    }
    factory304 := thrift.NewSimpleJSONProtocolFactory()
    jsProt305 := factory304.GetProtocol(mbTrans302)
    argvalue0 := storage.NewRemovePartReq()
    err306 := argvalue0.Read(jsProt305)
    if err306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemovePart(value0))
    fmt.Print("\n")
    break
  case "memberChange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MemberChange requires 1 args")
      flag.Usage()
    }
    arg307 := flag.Arg(1)
    mbTrans308 := thrift.NewMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil {
      Usage()
      return
    }
    factory310 := thrift.NewSimpleJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    argvalue0 := storage.NewMemberChangeReq()
    err312 := argvalue0.Read(jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MemberChange(value0))
    fmt.Print("\n")
    break
  case "checkPeers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckPeers requires 1 args")
      flag.Usage()
    }
    arg313 := flag.Arg(1)
    mbTrans314 := thrift.NewMemoryBufferLen(len(arg313))
    defer mbTrans314.Close()
    _, err315 := mbTrans314.WriteString(arg313)
    if err315 != nil {
      Usage()
      return
    }
    factory316 := thrift.NewSimpleJSONProtocolFactory()
    jsProt317 := factory316.GetProtocol(mbTrans314)
    argvalue0 := storage.NewCheckPeersReq()
    err318 := argvalue0.Read(jsProt317)
    if err318 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckPeers(value0))
    fmt.Print("\n")
    break
  case "getLeaderPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLeaderPart requires 1 args")
      flag.Usage()
    }
    arg319 := flag.Arg(1)
    mbTrans320 := thrift.NewMemoryBufferLen(len(arg319))
    defer mbTrans320.Close()
    _, err321 := mbTrans320.WriteString(arg319)
    if err321 != nil {
      Usage()
      return
    }
    factory322 := thrift.NewSimpleJSONProtocolFactory()
    jsProt323 := factory322.GetProtocol(mbTrans320)
    argvalue0 := storage.NewGetLeaderReq()
    err324 := argvalue0.Read(jsProt323)
    if err324 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLeaderPart(value0))
    fmt.Print("\n")
    break
  case "createCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateCheckpoint requires 1 args")
      flag.Usage()
    }
    arg325 := flag.Arg(1)
    mbTrans326 := thrift.NewMemoryBufferLen(len(arg325))
    defer mbTrans326.Close()
    _, err327 := mbTrans326.WriteString(arg325)
    if err327 != nil {
      Usage()
      return
    }
    factory328 := thrift.NewSimpleJSONProtocolFactory()
    jsProt329 := factory328.GetProtocol(mbTrans326)
    argvalue0 := storage.NewCreateCPRequest()
    err330 := argvalue0.Read(jsProt329)
    if err330 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateCheckpoint(value0))
    fmt.Print("\n")
    break
  case "dropCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropCheckpoint requires 1 args")
      flag.Usage()
    }
    arg331 := flag.Arg(1)
    mbTrans332 := thrift.NewMemoryBufferLen(len(arg331))
    defer mbTrans332.Close()
    _, err333 := mbTrans332.WriteString(arg331)
    if err333 != nil {
      Usage()
      return
    }
    factory334 := thrift.NewSimpleJSONProtocolFactory()
    jsProt335 := factory334.GetProtocol(mbTrans332)
    argvalue0 := storage.NewDropCPRequest()
    err336 := argvalue0.Read(jsProt335)
    if err336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropCheckpoint(value0))
    fmt.Print("\n")
    break
  case "blockingWrites":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BlockingWrites requires 1 args")
      flag.Usage()
    }
    arg337 := flag.Arg(1)
    mbTrans338 := thrift.NewMemoryBufferLen(len(arg337))
    defer mbTrans338.Close()
    _, err339 := mbTrans338.WriteString(arg337)
    if err339 != nil {
      Usage()
      return
    }
    factory340 := thrift.NewSimpleJSONProtocolFactory()
    jsProt341 := factory340.GetProtocol(mbTrans338)
    argvalue0 := storage.NewBlockingSignRequest()
    err342 := argvalue0.Read(jsProt341)
    if err342 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BlockingWrites(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg343 := flag.Arg(1)
    mbTrans344 := thrift.NewMemoryBufferLen(len(arg343))
    defer mbTrans344.Close()
    _, err345 := mbTrans344.WriteString(arg343)
    if err345 != nil {
      Usage()
      return
    }
    factory346 := thrift.NewSimpleJSONProtocolFactory()
    jsProt347 := factory346.GetProtocol(mbTrans344)
    argvalue0 := storage.NewRebuildIndexRequest()
    err348 := argvalue0.Read(jsProt347)
    if err348 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg349 := flag.Arg(1)
    mbTrans350 := thrift.NewMemoryBufferLen(len(arg349))
    defer mbTrans350.Close()
    _, err351 := mbTrans350.WriteString(arg349)
    if err351 != nil {
      Usage()
      return
    }
    factory352 := thrift.NewSimpleJSONProtocolFactory()
    jsProt353 := factory352.GetProtocol(mbTrans350)
    argvalue0 := storage.NewRebuildIndexRequest()
    err354 := argvalue0.Read(jsProt353)
    if err354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Put requires 1 args")
      flag.Usage()
    }
    arg355 := flag.Arg(1)
    mbTrans356 := thrift.NewMemoryBufferLen(len(arg355))
    defer mbTrans356.Close()
    _, err357 := mbTrans356.WriteString(arg355)
    if err357 != nil {
      Usage()
      return
    }
    factory358 := thrift.NewSimpleJSONProtocolFactory()
    jsProt359 := factory358.GetProtocol(mbTrans356)
    argvalue0 := storage.NewPutRequest()
    err360 := argvalue0.Read(jsProt359)
    if err360 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Put(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg361 := flag.Arg(1)
    mbTrans362 := thrift.NewMemoryBufferLen(len(arg361))
    defer mbTrans362.Close()
    _, err363 := mbTrans362.WriteString(arg361)
    if err363 != nil {
      Usage()
      return
    }
    factory364 := thrift.NewSimpleJSONProtocolFactory()
    jsProt365 := factory364.GetProtocol(mbTrans362)
    argvalue0 := storage.NewGetRequest()
    err366 := argvalue0.Read(jsProt365)
    if err366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg367 := flag.Arg(1)
    mbTrans368 := thrift.NewMemoryBufferLen(len(arg367))
    defer mbTrans368.Close()
    _, err369 := mbTrans368.WriteString(arg367)
    if err369 != nil {
      Usage()
      return
    }
    factory370 := thrift.NewSimpleJSONProtocolFactory()
    jsProt371 := factory370.GetProtocol(mbTrans368)
    argvalue0 := storage.NewRemoveRequest()
    err372 := argvalue0.Read(jsProt371)
    if err372 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg373 := flag.Arg(1)
    mbTrans374 := thrift.NewMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil {
      Usage()
      return
    }
    factory376 := thrift.NewSimpleJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    argvalue0 := storage.NewRemoveRangeRequest()
    err378 := argvalue0.Read(jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "getUUID":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUUID requires 1 args")
      flag.Usage()
    }
    arg379 := flag.Arg(1)
    mbTrans380 := thrift.NewMemoryBufferLen(len(arg379))
    defer mbTrans380.Close()
    _, err381 := mbTrans380.WriteString(arg379)
    if err381 != nil {
      Usage()
      return
    }
    factory382 := thrift.NewSimpleJSONProtocolFactory()
    jsProt383 := factory382.GetProtocol(mbTrans380)
    argvalue0 := storage.NewGetUUIDReq()
    err384 := argvalue0.Read(jsProt383)
    if err384 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUUID(value0))
    fmt.Print("\n")
    break
  case "lookUpIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LookUpIndex requires 1 args")
      flag.Usage()
    }
    arg385 := flag.Arg(1)
    mbTrans386 := thrift.NewMemoryBufferLen(len(arg385))
    defer mbTrans386.Close()
    _, err387 := mbTrans386.WriteString(arg385)
    if err387 != nil {
      Usage()
      return
    }
    factory388 := thrift.NewSimpleJSONProtocolFactory()
    jsProt389 := factory388.GetProtocol(mbTrans386)
    argvalue0 := storage.NewLookUpIndexRequest()
    err390 := argvalue0.Read(jsProt389)
    if err390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LookUpIndex(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
