// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package raftex

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

type RaftexService interface {
  // Parameters:
  //  - Req
  AskForVote(req *AskForVoteRequest) (r *AskForVoteResponse, err error)
  // Parameters:
  //  - Req
  AppendLog(req *AppendLogRequest) (r *AppendLogResponse, err error)
  // Parameters:
  //  - Req
  SendSnapshot(req *SendSnapshotRequest) (r *SendSnapshotResponse, err error)
}

type RaftexServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *RaftexServiceClient) Close() error {
  return client.Transport.Close()
}

func NewRaftexServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *RaftexServiceClient {
  return &RaftexServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRaftexServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaftexServiceClient {
  return &RaftexServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) AskForVote(req *AskForVoteRequest) (r *AskForVoteResponse, err error) {
  if err = p.sendAskForVote(req); err != nil { return }
  return p.recvAskForVote()
}

func (p *RaftexServiceClient) sendAskForVote(req *AskForVoteRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("askForVote", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceAskForVoteArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceClient) recvAskForVote() (value *AskForVoteResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "askForVote" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "askForVote failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "askForVote failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "askForVote failed: invalid message type")
    return
  }
  result := RaftexServiceAskForVoteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) AppendLog(req *AppendLogRequest) (r *AppendLogResponse, err error) {
  if err = p.sendAppendLog(req); err != nil { return }
  return p.recvAppendLog()
}

func (p *RaftexServiceClient) sendAppendLog(req *AppendLogRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("appendLog", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceAppendLogArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceClient) recvAppendLog() (value *AppendLogResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "appendLog" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "appendLog failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "appendLog failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "appendLog failed: invalid message type")
    return
  }
  result := RaftexServiceAppendLogResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *RaftexServiceClient) SendSnapshot(req *SendSnapshotRequest) (r *SendSnapshotResponse, err error) {
  if err = p.sendSendSnapshot(req); err != nil { return }
  return p.recvSendSnapshot()
}

func (p *RaftexServiceClient) sendSendSnapshot(req *SendSnapshotRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sendSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceSendSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceClient) recvSendSnapshot() (value *SendSnapshotResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sendSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sendSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sendSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendSnapshot failed: invalid message type")
    return
  }
  result := RaftexServiceSendSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type RaftexServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewRaftexServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *RaftexServiceThreadsafeClient {
  return &RaftexServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRaftexServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *RaftexServiceThreadsafeClient {
  return &RaftexServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *RaftexServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) AskForVote(req *AskForVoteRequest) (r *AskForVoteResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAskForVote(req); err != nil { return }
  return p.recvAskForVote()
}

func (p *RaftexServiceThreadsafeClient) sendAskForVote(req *AskForVoteRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("askForVote", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceAskForVoteArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceThreadsafeClient) recvAskForVote() (value *AskForVoteResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "askForVote" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "askForVote failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "askForVote failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "askForVote failed: invalid message type")
    return
  }
  result := RaftexServiceAskForVoteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) AppendLog(req *AppendLogRequest) (r *AppendLogResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAppendLog(req); err != nil { return }
  return p.recvAppendLog()
}

func (p *RaftexServiceThreadsafeClient) sendAppendLog(req *AppendLogRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("appendLog", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceAppendLogArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceThreadsafeClient) recvAppendLog() (value *AppendLogResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "appendLog" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "appendLog failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "appendLog failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "appendLog failed: invalid message type")
    return
  }
  result := RaftexServiceAppendLogResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *RaftexServiceThreadsafeClient) SendSnapshot(req *SendSnapshotRequest) (r *SendSnapshotResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSendSnapshot(req); err != nil { return }
  return p.recvSendSnapshot()
}

func (p *RaftexServiceThreadsafeClient) sendSendSnapshot(req *SendSnapshotRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sendSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RaftexServiceSendSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RaftexServiceThreadsafeClient) recvSendSnapshot() (value *SendSnapshotResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sendSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "sendSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "sendSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendSnapshot failed: invalid message type")
    return
  }
  result := RaftexServiceSendSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type RaftexServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler RaftexService
}

func (p *RaftexServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RaftexServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *RaftexServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewRaftexServiceProcessor(handler RaftexService) *RaftexServiceProcessor {
  self14 := &RaftexServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self14.processorMap["askForVote"] = &raftexServiceProcessorAskForVote{handler:handler}
  self14.processorMap["appendLog"] = &raftexServiceProcessorAppendLog{handler:handler}
  self14.processorMap["sendSnapshot"] = &raftexServiceProcessorSendSnapshot{handler:handler}
  return self14
}

type raftexServiceProcessorAskForVote struct {
  handler RaftexService
}

func (p *raftexServiceProcessorAskForVote) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceAskForVoteArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorAskForVote) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("askForVote", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorAskForVote) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceAskForVoteArgs)
  var result RaftexServiceAskForVoteResult
  if retval, err := p.handler.AskForVote(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing askForVote: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorAppendLog struct {
  handler RaftexService
}

func (p *raftexServiceProcessorAppendLog) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceAppendLogArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorAppendLog) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("appendLog", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorAppendLog) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceAppendLogArgs)
  var result RaftexServiceAppendLogResult
  if retval, err := p.handler.AppendLog(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendLog: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type raftexServiceProcessorSendSnapshot struct {
  handler RaftexService
}

func (p *raftexServiceProcessorSendSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := RaftexServiceSendSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *raftexServiceProcessorSendSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("sendSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *raftexServiceProcessorSendSnapshot) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*RaftexServiceSendSnapshotArgs)
  var result RaftexServiceSendSnapshotResult
  if retval, err := p.handler.SendSnapshot(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type RaftexServiceAskForVoteArgs struct {
  Req *AskForVoteRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceAskForVoteArgs() *RaftexServiceAskForVoteArgs {
  return &RaftexServiceAskForVoteArgs{}
}

var RaftexServiceAskForVoteArgs_Req_DEFAULT *AskForVoteRequest
func (p *RaftexServiceAskForVoteArgs) GetReq() *AskForVoteRequest {
  if !p.IsSetReq() {
    return RaftexServiceAskForVoteArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceAskForVoteArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RaftexServiceAskForVoteArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAskForVoteRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("askForVote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAskForVoteArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceAskForVoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceAskForVoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftexServiceAskForVoteResult struct {
  Success *AskForVoteResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceAskForVoteResult() *RaftexServiceAskForVoteResult {
  return &RaftexServiceAskForVoteResult{}
}

var RaftexServiceAskForVoteResult_Success_DEFAULT *AskForVoteResponse
func (p *RaftexServiceAskForVoteResult) GetSuccess() *AskForVoteResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceAskForVoteResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceAskForVoteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftexServiceAskForVoteResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAskForVoteResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceAskForVoteResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("askForVote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAskForVoteResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceAskForVoteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceAskForVoteResult(%+v)", *p)
}

// Attributes:
//  - Req
type RaftexServiceAppendLogArgs struct {
  Req *AppendLogRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceAppendLogArgs() *RaftexServiceAppendLogArgs {
  return &RaftexServiceAppendLogArgs{}
}

var RaftexServiceAppendLogArgs_Req_DEFAULT *AppendLogRequest
func (p *RaftexServiceAppendLogArgs) GetReq() *AppendLogRequest {
  if !p.IsSetReq() {
    return RaftexServiceAppendLogArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceAppendLogArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RaftexServiceAppendLogArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAppendLogRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("appendLog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAppendLogArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceAppendLogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceAppendLogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftexServiceAppendLogResult struct {
  Success *AppendLogResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceAppendLogResult() *RaftexServiceAppendLogResult {
  return &RaftexServiceAppendLogResult{}
}

var RaftexServiceAppendLogResult_Success_DEFAULT *AppendLogResponse
func (p *RaftexServiceAppendLogResult) GetSuccess() *AppendLogResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceAppendLogResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceAppendLogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftexServiceAppendLogResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAppendLogResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceAppendLogResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("appendLog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceAppendLogResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceAppendLogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceAppendLogResult(%+v)", *p)
}

// Attributes:
//  - Req
type RaftexServiceSendSnapshotArgs struct {
  Req *SendSnapshotRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftexServiceSendSnapshotArgs() *RaftexServiceSendSnapshotArgs {
  return &RaftexServiceSendSnapshotArgs{}
}

var RaftexServiceSendSnapshotArgs_Req_DEFAULT *SendSnapshotRequest
func (p *RaftexServiceSendSnapshotArgs) GetReq() *SendSnapshotRequest {
  if !p.IsSetReq() {
    return RaftexServiceSendSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftexServiceSendSnapshotArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RaftexServiceSendSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSendSnapshotRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceSendSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftexServiceSendSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceSendSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftexServiceSendSnapshotResult struct {
  Success *SendSnapshotResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftexServiceSendSnapshotResult() *RaftexServiceSendSnapshotResult {
  return &RaftexServiceSendSnapshotResult{}
}

var RaftexServiceSendSnapshotResult_Success_DEFAULT *SendSnapshotResponse
func (p *RaftexServiceSendSnapshotResult) GetSuccess() *SendSnapshotResponse {
  if !p.IsSetSuccess() {
    return RaftexServiceSendSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftexServiceSendSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftexServiceSendSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewSendSnapshotResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftexServiceSendSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftexServiceSendSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftexServiceSendSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftexServiceSendSnapshotResult(%+v)", *p)
}


