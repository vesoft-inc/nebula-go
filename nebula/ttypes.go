// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package nebula

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var GoUnusedProtection__ int;

type SupportedType int64
const (
  SupportedType_UNKNOWN SupportedType = 0
  SupportedType_BOOL SupportedType = 1
  SupportedType_INT SupportedType = 2
  SupportedType_VID SupportedType = 3
  SupportedType_FLOAT SupportedType = 4
  SupportedType_DOUBLE SupportedType = 5
  SupportedType_STRING SupportedType = 6
  SupportedType_TIMESTAMP SupportedType = 21
  SupportedType_YEAR SupportedType = 22
  SupportedType_YEARMONTH SupportedType = 23
  SupportedType_DATE SupportedType = 24
  SupportedType_DATETIME SupportedType = 25
  SupportedType_PATH SupportedType = 41
)

var SupportedTypeToName = map[SupportedType]string {
  SupportedType_UNKNOWN: "UNKNOWN",
  SupportedType_BOOL: "BOOL",
  SupportedType_INT: "INT",
  SupportedType_VID: "VID",
  SupportedType_FLOAT: "FLOAT",
  SupportedType_DOUBLE: "DOUBLE",
  SupportedType_STRING: "STRING",
  SupportedType_TIMESTAMP: "TIMESTAMP",
  SupportedType_YEAR: "YEAR",
  SupportedType_YEARMONTH: "YEARMONTH",
  SupportedType_DATE: "DATE",
  SupportedType_DATETIME: "DATETIME",
  SupportedType_PATH: "PATH",
}

var SupportedTypeToValue = map[string]SupportedType {
  "UNKNOWN": SupportedType_UNKNOWN,
  "BOOL": SupportedType_BOOL,
  "INT": SupportedType_INT,
  "VID": SupportedType_VID,
  "FLOAT": SupportedType_FLOAT,
  "DOUBLE": SupportedType_DOUBLE,
  "STRING": SupportedType_STRING,
  "TIMESTAMP": SupportedType_TIMESTAMP,
  "YEAR": SupportedType_YEAR,
  "YEARMONTH": SupportedType_YEARMONTH,
  "DATE": SupportedType_DATE,
  "DATETIME": SupportedType_DATETIME,
  "PATH": SupportedType_PATH,
}

func (p SupportedType) String() string {
  if v, ok := SupportedTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func SupportedTypeFromString(s string) (SupportedType, error) {
  if v, ok := SupportedTypeToValue[s]; ok {
    return v, nil
  }
  return SupportedType(0), fmt.Errorf("not a valid SupportedType string")
}

func SupportedTypePtr(v SupportedType) *SupportedType { return &v }

//* GOD is A global senior administrator.like root of Linux systems.
//* ADMIN is an administrator for a given Graph Space.
//* DBA is an schema administrator for a given Graph Space.
//* USER is a normal user for a given Graph Space. A User can access (read and write) the data in the Graph Space.
//* GUEST is a read-only role for a given Graph Space. A Guest cannot modify the data in the Graph Space.
//* Refer to header file src/graph/PermissionManager.h for details.
//
type RoleType int64
const (
  RoleType_GOD RoleType = 1
  RoleType_ADMIN RoleType = 2
  RoleType_DBA RoleType = 3
  RoleType_USER RoleType = 4
  RoleType_GUEST RoleType = 5
)

var RoleTypeToName = map[RoleType]string {
  RoleType_GOD: "GOD",
  RoleType_ADMIN: "ADMIN",
  RoleType_DBA: "DBA",
  RoleType_USER: "USER",
  RoleType_GUEST: "GUEST",
}

var RoleTypeToValue = map[string]RoleType {
  "GOD": RoleType_GOD,
  "ADMIN": RoleType_ADMIN,
  "DBA": RoleType_DBA,
  "USER": RoleType_USER,
  "GUEST": RoleType_GUEST,
}

func (p RoleType) String() string {
  if v, ok := RoleTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RoleTypeFromString(s string) (RoleType, error) {
  if v, ok := RoleTypeToValue[s]; ok {
    return v, nil
  }
  return RoleType(0), fmt.Errorf("not a valid RoleType string")
}

func RoleTypePtr(v RoleType) *RoleType { return &v }

type GraphSpaceID int32

func GraphSpaceIDPtr(v GraphSpaceID) *GraphSpaceID { return &v }

type PartitionID int32

func PartitionIDPtr(v PartitionID) *PartitionID { return &v }

type TagID int32

func TagIDPtr(v TagID) *TagID { return &v }

type EdgeType int32

func EdgeTypePtr(v EdgeType) *EdgeType { return &v }

type EdgeRanking int64

func EdgeRankingPtr(v EdgeRanking) *EdgeRanking { return &v }

type VertexID int64

func VertexIDPtr(v VertexID) *VertexID { return &v }

type IndexID int32

func IndexIDPtr(v IndexID) *IndexID { return &v }

type IPv4 int32

func IPv4Ptr(v IPv4) *IPv4 { return &v }

type Port int32

func PortPtr(v Port) *Port { return &v }

type SchemaVer int64

func SchemaVerPtr(v SchemaVer) *SchemaVer { return &v }

type ClusterID int64

func ClusterIDPtr(v ClusterID) *ClusterID { return &v }

// Attributes:
//  - Type
//  - ValueType
//  - Schema
type ValueType struct {
  Type SupportedType `thrift:"type,1" db:"type" json:"type"`
  ValueType *ValueType `thrift:"value_type,2" db:"value_type" json:"value_type,omitempty"`
  Schema *Schema `thrift:"schema,3" db:"schema" json:"schema,omitempty"`
}

func NewValueType() *ValueType {
  return &ValueType{}
}


func (p *ValueType) GetType() SupportedType {
  return p.Type
}
var ValueType_ValueType_DEFAULT *ValueType
func (p *ValueType) GetValueType() *ValueType {
  if !p.IsSetValueType() {
    return ValueType_ValueType_DEFAULT
  }
return p.ValueType
}
var ValueType_Schema_DEFAULT *Schema
func (p *ValueType) GetSchema() *Schema {
  if !p.IsSetSchema() {
    return ValueType_Schema_DEFAULT
  }
return p.Schema
}
func (p *ValueType) IsSetValueType() bool {
  return p.ValueType != nil
}

func (p *ValueType) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *ValueType) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ValueType)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SupportedType(v)
  p.Type = temp
}
  return nil
}

func (p *ValueType)  ReadField2(iprot thrift.Protocol) error {
  p.ValueType = NewValueType()
  if err := p.ValueType.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValueType), err)
  }
  return nil
}

func (p *ValueType)  ReadField3(iprot thrift.Protocol) error {
  p.Schema = NewSchema()
  if err := p.Schema.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *ValueType) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ValueType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ValueType) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ValueType) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetValueType() {
    if err := oprot.WriteFieldBegin("value_type", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value_type: ", p), err) }
    if err := p.ValueType.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValueType), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value_type: ", p), err) }
  }
  return err
}

func (p *ValueType) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetSchema() {
    if err := oprot.WriteFieldBegin("schema", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema: ", p), err) }
    if err := p.Schema.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema: ", p), err) }
  }
  return err
}

func (p *ValueType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ValueType(%+v)", *p)
}

// Attributes:
//  - IntValue
//  - BoolValue
//  - DoubleValue
//  - StringValue
//  - Timestamp
type Value struct {
  IntValue *int64 `thrift:"int_value,1" db:"int_value" json:"int_value,omitempty"`
  BoolValue *bool `thrift:"bool_value,2" db:"bool_value" json:"bool_value,omitempty"`
  DoubleValue *float64 `thrift:"double_value,3" db:"double_value" json:"double_value,omitempty"`
  StringValue *string `thrift:"string_value,4" db:"string_value" json:"string_value,omitempty"`
  Timestamp *int64 `thrift:"timestamp,5" db:"timestamp" json:"timestamp,omitempty"`
}

func NewValue() *Value {
  return &Value{}
}

var Value_IntValue_DEFAULT int64
func (p *Value) GetIntValue() int64 {
  if !p.IsSetIntValue() {
    return Value_IntValue_DEFAULT
  }
return *p.IntValue
}
var Value_BoolValue_DEFAULT bool
func (p *Value) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return Value_BoolValue_DEFAULT
  }
return *p.BoolValue
}
var Value_DoubleValue_DEFAULT float64
func (p *Value) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return Value_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var Value_StringValue_DEFAULT string
func (p *Value) GetStringValue() string {
  if !p.IsSetStringValue() {
    return Value_StringValue_DEFAULT
  }
return *p.StringValue
}
var Value_Timestamp_DEFAULT int64
func (p *Value) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return Value_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *Value) CountSetFieldsValue() int {
  count := 0
  if (p.IsSetIntValue()) {
    count++
  }
  if (p.IsSetBoolValue()) {
    count++
  }
  if (p.IsSetDoubleValue()) {
    count++
  }
  if (p.IsSetStringValue()) {
    count++
  }
  if (p.IsSetTimestamp()) {
    count++
  }
  return count

}

func (p *Value) IsSetIntValue() bool {
  return p.IntValue != nil
}

func (p *Value) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *Value) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *Value) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *Value) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *Value) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Value)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntValue = &v
}
  return nil
}

func (p *Value)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *Value)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *Value)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *Value)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *Value) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsValue(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("Value"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Value) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetIntValue() {
    if err := oprot.WriteFieldBegin("int_value", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int_value: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IntValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.int_value (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int_value: ", p), err) }
  }
  return err
}

func (p *Value) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin("bool_value", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bool_value: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bool_value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bool_value: ", p), err) }
  }
  return err
}

func (p *Value) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin("double_value", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:double_value: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.double_value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:double_value: ", p), err) }
  }
  return err
}

func (p *Value) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin("string_value", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:string_value: ", p), err) }
    if err := oprot.WriteString(string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.string_value (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:string_value: ", p), err) }
  }
  return err
}

func (p *Value) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err) }
  }
  return err
}

func (p *Value) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Value(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - DefaultValue
type ColumnDef struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Type *ValueType `thrift:"type,2,required" db:"type" json:"type"`
  DefaultValue *Value `thrift:"default_value,3" db:"default_value" json:"default_value,omitempty"`
}

func NewColumnDef() *ColumnDef {
  return &ColumnDef{}
}


func (p *ColumnDef) GetName() string {
  return p.Name
}
var ColumnDef_Type_DEFAULT *ValueType
func (p *ColumnDef) GetType() *ValueType {
  if !p.IsSetType() {
    return ColumnDef_Type_DEFAULT
  }
return p.Type
}
var ColumnDef_DefaultValue_DEFAULT *Value
func (p *ColumnDef) GetDefaultValue() *Value {
  if !p.IsSetDefaultValue() {
    return ColumnDef_DefaultValue_DEFAULT
  }
return p.DefaultValue
}
func (p *ColumnDef) IsSetType() bool {
  return p.Type != nil
}

func (p *ColumnDef) IsSetDefaultValue() bool {
  return p.DefaultValue != nil
}

func (p *ColumnDef) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetType = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  return nil
}

func (p *ColumnDef)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ColumnDef)  ReadField2(iprot thrift.Protocol) error {
  p.Type = NewValueType()
  if err := p.Type.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Type), err)
  }
  return nil
}

func (p *ColumnDef)  ReadField3(iprot thrift.Protocol) error {
  p.DefaultValue = NewValue()
  if err := p.DefaultValue.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultValue), err)
  }
  return nil
}

func (p *ColumnDef) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ColumnDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ColumnDef) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ColumnDef) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := p.Type.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Type), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ColumnDef) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetDefaultValue() {
    if err := oprot.WriteFieldBegin("default_value", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:default_value: ", p), err) }
    if err := p.DefaultValue.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultValue), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:default_value: ", p), err) }
  }
  return err
}

func (p *ColumnDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnDef(%+v)", *p)
}

// Attributes:
//  - TtlDuration
//  - TtlCol
type SchemaProp struct {
  TtlDuration *int64 `thrift:"ttl_duration,1" db:"ttl_duration" json:"ttl_duration,omitempty"`
  TtlCol *string `thrift:"ttl_col,2" db:"ttl_col" json:"ttl_col,omitempty"`
}

func NewSchemaProp() *SchemaProp {
  return &SchemaProp{}
}

var SchemaProp_TtlDuration_DEFAULT int64
func (p *SchemaProp) GetTtlDuration() int64 {
  if !p.IsSetTtlDuration() {
    return SchemaProp_TtlDuration_DEFAULT
  }
return *p.TtlDuration
}
var SchemaProp_TtlCol_DEFAULT string
func (p *SchemaProp) GetTtlCol() string {
  if !p.IsSetTtlCol() {
    return SchemaProp_TtlCol_DEFAULT
  }
return *p.TtlCol
}
func (p *SchemaProp) IsSetTtlDuration() bool {
  return p.TtlDuration != nil
}

func (p *SchemaProp) IsSetTtlCol() bool {
  return p.TtlCol != nil
}

func (p *SchemaProp) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaProp)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TtlDuration = &v
}
  return nil
}

func (p *SchemaProp)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TtlCol = &v
}
  return nil
}

func (p *SchemaProp) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("SchemaProp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaProp) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlDuration() {
    if err := oprot.WriteFieldBegin("ttl_duration", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ttl_duration: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TtlDuration)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_duration (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ttl_duration: ", p), err) }
  }
  return err
}

func (p *SchemaProp) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetTtlCol() {
    if err := oprot.WriteFieldBegin("ttl_col", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_col: ", p), err) }
    if err := oprot.WriteString(string(*p.TtlCol)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttl_col (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_col: ", p), err) }
  }
  return err
}

func (p *SchemaProp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaProp(%+v)", *p)
}

// Attributes:
//  - Columns
//  - SchemaProp
type Schema struct {
  Columns []*ColumnDef `thrift:"columns,1" db:"columns" json:"columns"`
  SchemaProp *SchemaProp `thrift:"schema_prop,2" db:"schema_prop" json:"schema_prop"`
}

func NewSchema() *Schema {
  return &Schema{}
}


func (p *Schema) GetColumns() []*ColumnDef {
  return p.Columns
}
var Schema_SchemaProp_DEFAULT *SchemaProp
func (p *Schema) GetSchemaProp() *SchemaProp {
  if !p.IsSetSchemaProp() {
    return Schema_SchemaProp_DEFAULT
  }
return p.SchemaProp
}
func (p *Schema) IsSetSchemaProp() bool {
  return p.SchemaProp != nil
}

func (p *Schema) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Schema)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := NewColumnDef()
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Columns = append(p.Columns, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Schema)  ReadField2(iprot thrift.Protocol) error {
  p.SchemaProp = NewSchemaProp()
  if err := p.SchemaProp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaProp), err)
  }
  return nil
}

func (p *Schema) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Schema"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Schema) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  return err
}

func (p *Schema) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_prop", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_prop: ", p), err) }
  if err := p.SchemaProp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaProp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_prop: ", p), err) }
  return err
}

func (p *Schema) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Schema(%+v)", *p)
}

// Attributes:
//  - TagID
//  - EdgeType
type SchemaID struct {
  TagID *TagID `thrift:"tag_id,1" db:"tag_id" json:"tag_id,omitempty"`
  EdgeType *EdgeType `thrift:"edge_type,2" db:"edge_type" json:"edge_type,omitempty"`
}

func NewSchemaID() *SchemaID {
  return &SchemaID{}
}

var SchemaID_TagID_DEFAULT TagID
func (p *SchemaID) GetTagID() TagID {
  if !p.IsSetTagID() {
    return SchemaID_TagID_DEFAULT
  }
return *p.TagID
}
var SchemaID_EdgeType_DEFAULT EdgeType
func (p *SchemaID) GetEdgeType() EdgeType {
  if !p.IsSetEdgeType() {
    return SchemaID_EdgeType_DEFAULT
  }
return *p.EdgeType
}
func (p *SchemaID) CountSetFieldsSchemaID() int {
  count := 0
  if (p.IsSetTagID()) {
    count++
  }
  if (p.IsSetEdgeType()) {
    count++
  }
  return count

}

func (p *SchemaID) IsSetTagID() bool {
  return p.TagID != nil
}

func (p *SchemaID) IsSetEdgeType() bool {
  return p.EdgeType != nil
}

func (p *SchemaID) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaID)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TagID(v)
  p.TagID = &temp
}
  return nil
}

func (p *SchemaID)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := EdgeType(v)
  p.EdgeType = &temp
}
  return nil
}

func (p *SchemaID) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsSchemaID(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("SchemaID"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaID) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetTagID() {
    if err := oprot.WriteFieldBegin("tag_id", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag_id: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TagID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tag_id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag_id: ", p), err) }
  }
  return err
}

func (p *SchemaID) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetEdgeType() {
    if err := oprot.WriteFieldBegin("edge_type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:edge_type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.EdgeType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.edge_type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:edge_type: ", p), err) }
  }
  return err
}

func (p *SchemaID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaID(%+v)", *p)
}

// Attributes:
//  - IndexID
//  - IndexName
//  - SchemaID
//  - SchemaName
//  - Fields
type IndexItem struct {
  IndexID IndexID `thrift:"index_id,1" db:"index_id" json:"index_id"`
  IndexName string `thrift:"index_name,2" db:"index_name" json:"index_name"`
  SchemaID *SchemaID `thrift:"schema_id,3" db:"schema_id" json:"schema_id"`
  SchemaName string `thrift:"schema_name,4" db:"schema_name" json:"schema_name"`
  Fields []*ColumnDef `thrift:"fields,5" db:"fields" json:"fields"`
}

func NewIndexItem() *IndexItem {
  return &IndexItem{}
}


func (p *IndexItem) GetIndexID() IndexID {
  return p.IndexID
}

func (p *IndexItem) GetIndexName() string {
  return p.IndexName
}
var IndexItem_SchemaID_DEFAULT *SchemaID
func (p *IndexItem) GetSchemaID() *SchemaID {
  if !p.IsSetSchemaID() {
    return IndexItem_SchemaID_DEFAULT
  }
return p.SchemaID
}

func (p *IndexItem) GetSchemaName() string {
  return p.SchemaName
}

func (p *IndexItem) GetFields() []*ColumnDef {
  return p.Fields
}
func (p *IndexItem) IsSetSchemaID() bool {
  return p.SchemaID != nil
}

func (p *IndexItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndexItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IndexID(v)
  p.IndexID = temp
}
  return nil
}

func (p *IndexItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IndexName = v
}
  return nil
}

func (p *IndexItem)  ReadField3(iprot thrift.Protocol) error {
  p.SchemaID = NewSchemaID()
  if err := p.SchemaID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaID), err)
  }
  return nil
}

func (p *IndexItem)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SchemaName = v
}
  return nil
}

func (p *IndexItem)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ColumnDef, 0, size)
  p.Fields =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := NewColumnDef()
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Fields = append(p.Fields, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IndexItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("IndexItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndexItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index_name: ", p), err) }
  if err := oprot.WriteString(string(p.IndexName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_id", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:schema_id: ", p), err) }
  if err := p.SchemaID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:schema_id: ", p), err) }
  return err
}

func (p *IndexItem) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("schema_name", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:schema_name: ", p), err) }
  if err := oprot.WriteString(string(p.SchemaName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schema_name (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:schema_name: ", p), err) }
  return err
}

func (p *IndexItem) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("fields", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fields: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fields {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fields: ", p), err) }
  return err
}

func (p *IndexItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndexItem(%+v)", *p)
}

// Attributes:
//  - Ip
//  - Port
type HostAddr struct {
  Ip IPv4 `thrift:"ip,1" db:"ip" json:"ip"`
  Port Port `thrift:"port,2" db:"port" json:"port"`
}

func NewHostAddr() *HostAddr {
  return &HostAddr{}
}


func (p *HostAddr) GetIp() IPv4 {
  return p.Ip
}

func (p *HostAddr) GetPort() Port {
  return p.Port
}
func (p *HostAddr) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostAddr)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IPv4(v)
  p.Ip = temp
}
  return nil
}

func (p *HostAddr)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Port(v)
  p.Port = temp
}
  return nil
}

func (p *HostAddr) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("HostAddr"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostAddr) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := oprot.WriteI32(int32(p.Ip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *HostAddr) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *HostAddr) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostAddr(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type Pair struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewPair() *Pair {
  return &Pair{}
}


func (p *Pair) GetKey() string {
  return p.Key
}

func (p *Pair) GetValue() string {
  return p.Value
}
func (p *Pair) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pair)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Pair)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Pair) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Pair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pair) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Pair) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Pair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pair(%+v)", *p)
}

// Attributes:
//  - User
//  - SpaceID
//  - RoleType
type RoleItem struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  SpaceID GraphSpaceID `thrift:"space_id,2" db:"space_id" json:"space_id"`
  RoleType RoleType `thrift:"role_type,3" db:"role_type" json:"role_type"`
}

func NewRoleItem() *RoleItem {
  return &RoleItem{}
}


func (p *RoleItem) GetUser() string {
  return p.User
}

func (p *RoleItem) GetSpaceID() GraphSpaceID {
  return p.SpaceID
}

func (p *RoleItem) GetRoleType() RoleType {
  return p.RoleType
}
func (p *RoleItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleItem)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *RoleItem)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := GraphSpaceID(v)
  p.SpaceID = temp
}
  return nil
}

func (p *RoleItem)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := RoleType(v)
  p.RoleType = temp
}
  return nil
}

func (p *RoleItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RoleItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleItem) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *RoleItem) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("space_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:space_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.space_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:space_id: ", p), err) }
  return err
}

func (p *RoleItem) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("role_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.RoleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role_type: ", p), err) }
  return err
}

func (p *RoleItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleItem(%+v)", *p)
}

