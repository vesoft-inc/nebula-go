// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/v2/raftex"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AskForVoteResponse askForVote(AskForVoteRequest req)")
  fmt.Fprintln(os.Stderr, "  AppendLogResponse appendLog(AppendLogRequest req)")
  fmt.Fprintln(os.Stderr, "  SendSnapshotResponse sendSnapshot(SendSnapshotRequest req)")
  fmt.Fprintln(os.Stderr, "  HeartbeatResponse heartbeat(HeartbeatRequest req)")
  fmt.Fprintln(os.Stderr, "  GetStateResponse getState(GetStateRequest req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := raftex.NewRaftexServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "askForVote":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AskForVote requires 1 args")
      flag.Usage()
    }
    arg5 := flag.Arg(1)
    mbTrans6 := thrift.NewMemoryBufferLen(len(arg5))
    defer mbTrans6.Close()
    _, err7 := mbTrans6.WriteString(arg5)
    if err7 != nil {
      Usage()
      return
    }
    factory8 := thrift.NewSimpleJSONProtocolFactory()
    jsProt9 := factory8.GetProtocol(mbTrans6)
    argvalue0 := raftex.NewAskForVoteRequest()
    err10 := argvalue0.Read(jsProt9)
    if err10 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AskForVote(value0))
    fmt.Print("\n")
    break
  case "appendLog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendLog requires 1 args")
      flag.Usage()
    }
    arg11 := flag.Arg(1)
    mbTrans12 := thrift.NewMemoryBufferLen(len(arg11))
    defer mbTrans12.Close()
    _, err13 := mbTrans12.WriteString(arg11)
    if err13 != nil {
      Usage()
      return
    }
    factory14 := thrift.NewSimpleJSONProtocolFactory()
    jsProt15 := factory14.GetProtocol(mbTrans12)
    argvalue0 := raftex.NewAppendLogRequest()
    err16 := argvalue0.Read(jsProt15)
    if err16 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendLog(value0))
    fmt.Print("\n")
    break
  case "sendSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSnapshot requires 1 args")
      flag.Usage()
    }
    arg17 := flag.Arg(1)
    mbTrans18 := thrift.NewMemoryBufferLen(len(arg17))
    defer mbTrans18.Close()
    _, err19 := mbTrans18.WriteString(arg17)
    if err19 != nil {
      Usage()
      return
    }
    factory20 := thrift.NewSimpleJSONProtocolFactory()
    jsProt21 := factory20.GetProtocol(mbTrans18)
    argvalue0 := raftex.NewSendSnapshotRequest()
    err22 := argvalue0.Read(jsProt21)
    if err22 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSnapshot(value0))
    fmt.Print("\n")
    break
  case "heartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
      flag.Usage()
    }
    arg23 := flag.Arg(1)
    mbTrans24 := thrift.NewMemoryBufferLen(len(arg23))
    defer mbTrans24.Close()
    _, err25 := mbTrans24.WriteString(arg23)
    if err25 != nil {
      Usage()
      return
    }
    factory26 := thrift.NewSimpleJSONProtocolFactory()
    jsProt27 := factory26.GetProtocol(mbTrans24)
    argvalue0 := raftex.NewHeartbeatRequest()
    err28 := argvalue0.Read(jsProt27)
    if err28 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Heartbeat(value0))
    fmt.Print("\n")
    break
  case "getState":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetState requires 1 args")
      flag.Usage()
    }
    arg29 := flag.Arg(1)
    mbTrans30 := thrift.NewMemoryBufferLen(len(arg29))
    defer mbTrans30.Close()
    _, err31 := mbTrans30.WriteString(arg29)
    if err31 != nil {
      Usage()
      return
    }
    factory32 := thrift.NewSimpleJSONProtocolFactory()
    jsProt33 := factory32.GetProtocol(mbTrans30)
    argvalue0 := raftex.NewGetStateRequest()
    err34 := argvalue0.Read(jsProt33)
    if err34 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetState(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
