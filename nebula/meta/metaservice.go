// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
type MetaService interface {
  // Parameters:
  //  - Req
  CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, err error)
  // Parameters:
  //  - Req
  MultiPut(ctx context.Context, req *MultiPutReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  Get(ctx context.Context, req *GetReq) (_r *GetResp, err error)
  // Parameters:
  //  - Req
  MultiGet(ctx context.Context, req *MultiGetReq) (_r *MultiGetResp, err error)
  // Parameters:
  //  - Req
  Remove(ctx context.Context, req *RemoveReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveRange(ctx context.Context, req *RemoveRangeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  Scan(ctx context.Context, req *ScanReq) (_r *ScanResp, err error)
  // Parameters:
  //  - Req
  CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, err error)
  // Parameters:
  //  - Req
  Balance(ctx context.Context, req *BalanceReq) (_r *BalanceResp, err error)
  // Parameters:
  //  - Req
  LeaderBalance(ctx context.Context, req *LeaderBalanceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, err error)
  // Parameters:
  //  - Req
  CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error)
  // Parameters:
  //  - Req
  RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, err error)
  // Parameters:
  //  - Req
  AddZone(ctx context.Context, req *AddZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddHostIntoZone(ctx context.Context, req *AddHostIntoZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropHostFromZone(ctx context.Context, req *DropHostFromZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, err error)
  // Parameters:
  //  - Req
  ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, err error)
  // Parameters:
  //  - Req
  AddGroup(ctx context.Context, req *AddGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropGroup(ctx context.Context, req *DropGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddZoneIntoGroup(ctx context.Context, req *AddZoneIntoGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZoneFromGroup(ctx context.Context, req *DropZoneFromGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetGroup(ctx context.Context, req *GetGroupReq) (_r *GetGroupResp, err error)
  // Parameters:
  //  - Req
  ListGroups(ctx context.Context, req *ListGroupsReq) (_r *ListGroupsResp, err error)
  // Parameters:
  //  - Req
  CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, err error)
  // Parameters:
  //  - Req
  RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, err error)
  // Parameters:
  //  - Req
  GetStatis(ctx context.Context, req *GetStatisReq) (_r *GetStatisResp, err error)
  // Parameters:
  //  - Req
  SignInFTService(ctx context.Context, req *SignInFTServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  SignOutFTService(ctx context.Context, req *SignOutFTServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListFTClients(ctx context.Context, req *ListFTClientsReq) (_r *ListFTClientsResp, err error)
  // Parameters:
  //  - Req
  CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, err error)
  // Parameters:
  //  - Req
  UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, err error)
  // Parameters:
  //  - Req
  GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, err error)
  // Parameters:
  //  - Req
  RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, err error)
}

type MetaServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Req
  CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(req *DropSpaceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  CreateTag(req *CreateTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(req *AlterTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(req *DropTagReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(req *GetTagReq) (_r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(req *ListTagsReq) (_r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(req *DropEdgeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  ListParts(req *ListPartsReq) (_r *ListPartsResp, err error)
  // Parameters:
  //  - Req
  MultiPut(req *MultiPutReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  Get(req *GetReq) (_r *GetResp, err error)
  // Parameters:
  //  - Req
  MultiGet(req *MultiGetReq) (_r *MultiGetResp, err error)
  // Parameters:
  //  - Req
  Remove(req *RemoveReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveRange(req *RemoveRangeReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  Scan(req *ScanReq) (_r *ScanResp, err error)
  // Parameters:
  //  - Req
  CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateUser(req *CreateUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(req *DropUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(req *AlterUserReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(req *GrantRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(req *HBReq) (_r *HBResp, err error)
  // Parameters:
  //  - Req
  Balance(req *BalanceReq) (_r *BalanceResp, err error)
  // Parameters:
  //  - Req
  LeaderBalance(req *LeaderBalanceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RegConfig(req *RegConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(req *SetConfigReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error)
  // Parameters:
  //  - Req
  CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error)
  // Parameters:
  //  - Req
  RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error)
  // Parameters:
  //  - Req
  AddZone(req *AddZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZone(req *DropZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddHostIntoZone(req *AddHostIntoZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropHostFromZone(req *DropHostFromZoneReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetZone(req *GetZoneReq) (_r *GetZoneResp, err error)
  // Parameters:
  //  - Req
  ListZones(req *ListZonesReq) (_r *ListZonesResp, err error)
  // Parameters:
  //  - Req
  AddGroup(req *AddGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropGroup(req *DropGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddZoneIntoGroup(req *AddZoneIntoGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZoneFromGroup(req *DropZoneFromGroupReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetGroup(req *GetGroupReq) (_r *GetGroupResp, err error)
  // Parameters:
  //  - Req
  ListGroups(req *ListGroupsReq) (_r *ListGroupsResp, err error)
  // Parameters:
  //  - Req
  CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error)
  // Parameters:
  //  - Req
  RestoreMeta(req *RestoreMetaReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddListener(req *AddListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListListener(req *ListListenerReq) (_r *ListListenerResp, err error)
  // Parameters:
  //  - Req
  GetStatis(req *GetStatisReq) (_r *GetStatisResp, err error)
  // Parameters:
  //  - Req
  SignInFTService(req *SignInFTServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  SignOutFTService(req *SignOutFTServiceReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListFTClients(req *ListFTClientsReq) (_r *ListFTClientsResp, err error)
  // Parameters:
  //  - Req
  CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error)
  // Parameters:
  //  - Req
  UpdateSessions(req *UpdateSessionsReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error)
  // Parameters:
  //  - Req
  GetSession(req *GetSessionReq) (_r *GetSessionResp, err error)
  // Parameters:
  //  - Req
  RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error)
}

type MetaServiceClient struct {
  MetaServiceClientInterface
  CC thrift.ClientConn
}

func(client *MetaServiceClient) Open() error {
  return client.CC.Open()
}

func(client *MetaServiceClient) Close() error {
  return client.CC.Close()
}

func(client *MetaServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewMetaServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceClient {
  return &MetaServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMetaServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceClient {
  return &MetaServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMetaServiceClientProtocol(prot thrift.Protocol) *MetaServiceClient {
  return NewMetaServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpace()
}


func (p *MetaServiceClient) recvCreateSpace() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceResult
  err = p.CC.RecvMsg("createSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSpace(req *DropSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSpace()
}


func (p *MetaServiceClient) recvDropSpace() (value *ExecResp, err error) {
  var result MetaServiceDropSpaceResult
  err = p.CC.RecvMsg("dropSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSpace()
}


func (p *MetaServiceClient) recvGetSpace() (value *GetSpaceResp, err error) {
  var result MetaServiceGetSpaceResult
  err = p.CC.RecvMsg("getSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSpaces", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSpaces()
}


func (p *MetaServiceClient) recvListSpaces() (value *ListSpacesResp, err error) {
  var result MetaServiceListSpacesResult
  err = p.CC.RecvMsg("listSpaces", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTag(req *CreateTagReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTag()
}


func (p *MetaServiceClient) recvCreateTag() (value *ExecResp, err error) {
  var result MetaServiceCreateTagResult
  err = p.CC.RecvMsg("createTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterTag(req *AlterTagReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterTag()
}


func (p *MetaServiceClient) recvAlterTag() (value *ExecResp, err error) {
  var result MetaServiceAlterTagResult
  err = p.CC.RecvMsg("alterTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTag(req *DropTagReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTag()
}


func (p *MetaServiceClient) recvDropTag() (value *ExecResp, err error) {
  var result MetaServiceDropTagResult
  err = p.CC.RecvMsg("dropTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTag(req *GetTagReq) (_r *GetTagResp, err error) {
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTag()
}


func (p *MetaServiceClient) recvGetTag() (value *GetTagResp, err error) {
  var result MetaServiceGetTagResult
  err = p.CC.RecvMsg("getTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTags(req *ListTagsReq) (_r *ListTagsResp, err error) {
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTags()
}


func (p *MetaServiceClient) recvListTags() (value *ListTagsResp, err error) {
  var result MetaServiceListTagsResult
  err = p.CC.RecvMsg("listTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdge()
}


func (p *MetaServiceClient) recvCreateEdge() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeResult
  err = p.CC.RecvMsg("createEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterEdge()
}


func (p *MetaServiceClient) recvAlterEdge() (value *ExecResp, err error) {
  var result MetaServiceAlterEdgeResult
  err = p.CC.RecvMsg("alterEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdge(req *DropEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdge()
}


func (p *MetaServiceClient) recvDropEdge() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeResult
  err = p.CC.RecvMsg("dropEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdge()
}


func (p *MetaServiceClient) recvGetEdge() (value *GetEdgeResp, err error) {
  var result MetaServiceGetEdgeResult
  err = p.CC.RecvMsg("getEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdges()
}


func (p *MetaServiceClient) recvListEdges() (value *ListEdgesResp, err error) {
  var result MetaServiceListEdgesResult
  err = p.CC.RecvMsg("listEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error) {
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListHosts()
}


func (p *MetaServiceClient) recvListHosts() (value *ListHostsResp, err error) {
  var result MetaServiceListHostsResult
  err = p.CC.RecvMsg("listHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getPartsAlloc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetPartsAlloc()
}


func (p *MetaServiceClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  var result MetaServiceGetPartsAllocResult
  err = p.CC.RecvMsg("getPartsAlloc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListParts(req *ListPartsReq) (_r *ListPartsResp, err error) {
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListParts()
}


func (p *MetaServiceClient) recvListParts() (value *ListPartsResp, err error) {
  var result MetaServiceListPartsResult
  err = p.CC.RecvMsg("listParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiPut(req *MultiPutReq) (_r *ExecResp, err error) {
  args := MetaServiceMultiPutArgs{
    Req : req,
  }
  err = p.CC.SendMsg("multiPut", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMultiPut()
}


func (p *MetaServiceClient) recvMultiPut() (value *ExecResp, err error) {
  var result MetaServiceMultiPutResult
  err = p.CC.RecvMsg("multiPut", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Get(req *GetReq) (_r *GetResp, err error) {
  args := MetaServiceGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("get", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGet()
}


func (p *MetaServiceClient) recvGet() (value *GetResp, err error) {
  var result MetaServiceGetResult
  err = p.CC.RecvMsg("get", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiGet(req *MultiGetReq) (_r *MultiGetResp, err error) {
  args := MetaServiceMultiGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("multiGet", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMultiGet()
}


func (p *MetaServiceClient) recvMultiGet() (value *MultiGetResp, err error) {
  var result MetaServiceMultiGetResult
  err = p.CC.RecvMsg("multiGet", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Remove(req *RemoveReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveArgs{
    Req : req,
  }
  err = p.CC.SendMsg("remove", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemove()
}


func (p *MetaServiceClient) recvRemove() (value *ExecResp, err error) {
  var result MetaServiceRemoveResult
  err = p.CC.RecvMsg("remove", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveRange(req *RemoveRangeReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveRangeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeRange", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveRange()
}


func (p *MetaServiceClient) recvRemoveRange() (value *ExecResp, err error) {
  var result MetaServiceRemoveRangeResult
  err = p.CC.RecvMsg("removeRange", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Scan(req *ScanReq) (_r *ScanResp, err error) {
  args := MetaServiceScanArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scan", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScan()
}


func (p *MetaServiceClient) recvScan() (value *ScanResp, err error) {
  var result MetaServiceScanResult
  err = p.CC.RecvMsg("scan", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTagIndex()
}


func (p *MetaServiceClient) recvCreateTagIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateTagIndexResult
  err = p.CC.RecvMsg("createTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTagIndex()
}


func (p *MetaServiceClient) recvDropTagIndex() (value *ExecResp, err error) {
  var result MetaServiceDropTagIndexResult
  err = p.CC.RecvMsg("dropTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTagIndex()
}


func (p *MetaServiceClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  var result MetaServiceGetTagIndexResult
  err = p.CC.RecvMsg("getTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexes()
}


func (p *MetaServiceClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  var result MetaServiceListTagIndexesResult
  err = p.CC.RecvMsg("listTagIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildTagIndex()
}


func (p *MetaServiceClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildTagIndexResult
  err = p.CC.RecvMsg("rebuildTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexStatus()
}


func (p *MetaServiceClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListTagIndexStatusResult
  err = p.CC.RecvMsg("listTagIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdgeIndex()
}


func (p *MetaServiceClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeIndexResult
  err = p.CC.RecvMsg("createEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdgeIndex()
}


func (p *MetaServiceClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeIndexResult
  err = p.CC.RecvMsg("dropEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdgeIndex()
}


func (p *MetaServiceClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  var result MetaServiceGetEdgeIndexResult
  err = p.CC.RecvMsg("getEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexes()
}


func (p *MetaServiceClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  var result MetaServiceListEdgeIndexesResult
  err = p.CC.RecvMsg("listEdgeIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildEdgeIndex()
}


func (p *MetaServiceClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildEdgeIndexResult
  err = p.CC.RecvMsg("rebuildEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexStatus()
}


func (p *MetaServiceClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListEdgeIndexStatusResult
  err = p.CC.RecvMsg("listEdgeIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateUser(req *CreateUserReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateUser()
}


func (p *MetaServiceClient) recvCreateUser() (value *ExecResp, err error) {
  var result MetaServiceCreateUserResult
  err = p.CC.RecvMsg("createUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropUser(req *DropUserReq) (_r *ExecResp, err error) {
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropUser()
}


func (p *MetaServiceClient) recvDropUser() (value *ExecResp, err error) {
  var result MetaServiceDropUserResult
  err = p.CC.RecvMsg("dropUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterUser(req *AlterUserReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterUser()
}


func (p *MetaServiceClient) recvAlterUser() (value *ExecResp, err error) {
  var result MetaServiceAlterUserResult
  err = p.CC.RecvMsg("alterUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GrantRole(req *GrantRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("grantRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGrantRole()
}


func (p *MetaServiceClient) recvGrantRole() (value *ExecResp, err error) {
  var result MetaServiceGrantRoleResult
  err = p.CC.RecvMsg("grantRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("revokeRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRevokeRole()
}


func (p *MetaServiceClient) recvRevokeRole() (value *ExecResp, err error) {
  var result MetaServiceRevokeRoleResult
  err = p.CC.RecvMsg("revokeRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error) {
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listUsers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListUsers()
}


func (p *MetaServiceClient) recvListUsers() (value *ListUsersResp, err error) {
  var result MetaServiceListUsersResult
  err = p.CC.RecvMsg("listUsers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListRoles()
}


func (p *MetaServiceClient) recvListRoles() (value *ListRolesResp, err error) {
  var result MetaServiceListRolesResult
  err = p.CC.RecvMsg("listRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUserRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUserRoles()
}


func (p *MetaServiceClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  var result MetaServiceGetUserRolesResult
  err = p.CC.RecvMsg("getUserRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error) {
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  err = p.CC.SendMsg("changePassword", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChangePassword()
}


func (p *MetaServiceClient) recvChangePassword() (value *ExecResp, err error) {
  var result MetaServiceChangePasswordResult
  err = p.CC.RecvMsg("changePassword", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) HeartBeat(req *HBReq) (_r *HBResp, err error) {
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartBeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartBeat()
}


func (p *MetaServiceClient) recvHeartBeat() (value *HBResp, err error) {
  var result MetaServiceHeartBeatResult
  err = p.CC.RecvMsg("heartBeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Balance(req *BalanceReq) (_r *BalanceResp, err error) {
  args := MetaServiceBalanceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("balance", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBalance()
}


func (p *MetaServiceClient) recvBalance() (value *BalanceResp, err error) {
  var result MetaServiceBalanceResult
  err = p.CC.RecvMsg("balance", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) LeaderBalance(req *LeaderBalanceReq) (_r *ExecResp, err error) {
  args := MetaServiceLeaderBalanceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("leaderBalance", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLeaderBalance()
}


func (p *MetaServiceClient) recvLeaderBalance() (value *ExecResp, err error) {
  var result MetaServiceLeaderBalanceResult
  err = p.CC.RecvMsg("leaderBalance", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RegConfig(req *RegConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("regConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRegConfig()
}


func (p *MetaServiceClient) recvRegConfig() (value *ExecResp, err error) {
  var result MetaServiceRegConfigResult
  err = p.CC.RecvMsg("regConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error) {
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetConfig()
}


func (p *MetaServiceClient) recvGetConfig() (value *GetConfigResp, err error) {
  var result MetaServiceGetConfigResult
  err = p.CC.RecvMsg("getConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SetConfig(req *SetConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("setConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSetConfig()
}


func (p *MetaServiceClient) recvSetConfig() (value *ExecResp, err error) {
  var result MetaServiceSetConfigResult
  err = p.CC.RecvMsg("setConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listConfigs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListConfigs()
}


func (p *MetaServiceClient) recvListConfigs() (value *ListConfigsResp, err error) {
  var result MetaServiceListConfigsResult
  err = p.CC.RecvMsg("listConfigs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSnapshot()
}


func (p *MetaServiceClient) recvCreateSnapshot() (value *ExecResp, err error) {
  var result MetaServiceCreateSnapshotResult
  err = p.CC.RecvMsg("createSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSnapshot()
}


func (p *MetaServiceClient) recvDropSnapshot() (value *ExecResp, err error) {
  var result MetaServiceDropSnapshotResult
  err = p.CC.RecvMsg("dropSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSnapshots", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSnapshots()
}


func (p *MetaServiceClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  var result MetaServiceListSnapshotsResult
  err = p.CC.RecvMsg("listSnapshots", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error) {
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  err = p.CC.SendMsg("runAdminJob", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRunAdminJob()
}


func (p *MetaServiceClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  var result MetaServiceRunAdminJobResult
  err = p.CC.RecvMsg("runAdminJob", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddZone(req *AddZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddZone()
}


func (p *MetaServiceClient) recvAddZone() (value *ExecResp, err error) {
  var result MetaServiceAddZoneResult
  err = p.CC.RecvMsg("addZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZone(req *DropZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZone()
}


func (p *MetaServiceClient) recvDropZone() (value *ExecResp, err error) {
  var result MetaServiceDropZoneResult
  err = p.CC.RecvMsg("dropZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHostIntoZone(req *AddHostIntoZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostIntoZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHostIntoZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHostIntoZone()
}


func (p *MetaServiceClient) recvAddHostIntoZone() (value *ExecResp, err error) {
  var result MetaServiceAddHostIntoZoneResult
  err = p.CC.RecvMsg("addHostIntoZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropHostFromZone(req *DropHostFromZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropHostFromZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropHostFromZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropHostFromZone()
}


func (p *MetaServiceClient) recvDropHostFromZone() (value *ExecResp, err error) {
  var result MetaServiceDropHostFromZoneResult
  err = p.CC.RecvMsg("dropHostFromZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetZone(req *GetZoneReq) (_r *GetZoneResp, err error) {
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetZone()
}


func (p *MetaServiceClient) recvGetZone() (value *GetZoneResp, err error) {
  var result MetaServiceGetZoneResult
  err = p.CC.RecvMsg("getZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListZones(req *ListZonesReq) (_r *ListZonesResp, err error) {
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listZones", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListZones()
}


func (p *MetaServiceClient) recvListZones() (value *ListZonesResp, err error) {
  var result MetaServiceListZonesResult
  err = p.CC.RecvMsg("listZones", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddGroup(req *AddGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceAddGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddGroup()
}


func (p *MetaServiceClient) recvAddGroup() (value *ExecResp, err error) {
  var result MetaServiceAddGroupResult
  err = p.CC.RecvMsg("addGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropGroup(req *DropGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceDropGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropGroup()
}


func (p *MetaServiceClient) recvDropGroup() (value *ExecResp, err error) {
  var result MetaServiceDropGroupResult
  err = p.CC.RecvMsg("dropGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddZoneIntoGroup(req *AddZoneIntoGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceAddZoneIntoGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addZoneIntoGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddZoneIntoGroup()
}


func (p *MetaServiceClient) recvAddZoneIntoGroup() (value *ExecResp, err error) {
  var result MetaServiceAddZoneIntoGroupResult
  err = p.CC.RecvMsg("addZoneIntoGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZoneFromGroup(req *DropZoneFromGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneFromGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZoneFromGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZoneFromGroup()
}


func (p *MetaServiceClient) recvDropZoneFromGroup() (value *ExecResp, err error) {
  var result MetaServiceDropZoneFromGroupResult
  err = p.CC.RecvMsg("dropZoneFromGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetGroup(req *GetGroupReq) (_r *GetGroupResp, err error) {
  args := MetaServiceGetGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetGroup()
}


func (p *MetaServiceClient) recvGetGroup() (value *GetGroupResp, err error) {
  var result MetaServiceGetGroupResult
  err = p.CC.RecvMsg("getGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListGroups(req *ListGroupsReq) (_r *ListGroupsResp, err error) {
  args := MetaServiceListGroupsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listGroups", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListGroups()
}


func (p *MetaServiceClient) recvListGroups() (value *ListGroupsResp, err error) {
  var result MetaServiceListGroupsResult
  err = p.CC.RecvMsg("listGroups", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createBackup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateBackup()
}


func (p *MetaServiceClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  var result MetaServiceCreateBackupResult
  err = p.CC.RecvMsg("createBackup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RestoreMeta(req *RestoreMetaReq) (_r *ExecResp, err error) {
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  err = p.CC.SendMsg("restoreMeta", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRestoreMeta()
}


func (p *MetaServiceClient) recvRestoreMeta() (value *ExecResp, err error) {
  var result MetaServiceRestoreMetaResult
  err = p.CC.RecvMsg("restoreMeta", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddListener(req *AddListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddListener()
}


func (p *MetaServiceClient) recvAddListener() (value *ExecResp, err error) {
  var result MetaServiceAddListenerResult
  err = p.CC.RecvMsg("addListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveListener()
}


func (p *MetaServiceClient) recvRemoveListener() (value *ExecResp, err error) {
  var result MetaServiceRemoveListenerResult
  err = p.CC.RecvMsg("removeListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListListener(req *ListListenerReq) (_r *ListListenerResp, err error) {
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListListener()
}


func (p *MetaServiceClient) recvListListener() (value *ListListenerResp, err error) {
  var result MetaServiceListListenerResult
  err = p.CC.RecvMsg("listListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetStatis(req *GetStatisReq) (_r *GetStatisResp, err error) {
  args := MetaServiceGetStatisArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getStatis", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetStatis()
}


func (p *MetaServiceClient) recvGetStatis() (value *GetStatisResp, err error) {
  var result MetaServiceGetStatisResult
  err = p.CC.RecvMsg("getStatis", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignInFTService(req *SignInFTServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignInFTServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signInFTService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignInFTService()
}


func (p *MetaServiceClient) recvSignInFTService() (value *ExecResp, err error) {
  var result MetaServiceSignInFTServiceResult
  err = p.CC.RecvMsg("signInFTService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignOutFTService(req *SignOutFTServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignOutFTServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signOutFTService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignOutFTService()
}


func (p *MetaServiceClient) recvSignOutFTService() (value *ExecResp, err error) {
  var result MetaServiceSignOutFTServiceResult
  err = p.CC.RecvMsg("signOutFTService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListFTClients(req *ListFTClientsReq) (_r *ListFTClientsResp, err error) {
  args := MetaServiceListFTClientsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listFTClients", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListFTClients()
}


func (p *MetaServiceClient) recvListFTClients() (value *ListFTClientsResp, err error) {
  var result MetaServiceListFTClientsResult
  err = p.CC.RecvMsg("listFTClients", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSession()
}


func (p *MetaServiceClient) recvCreateSession() (value *CreateSessionResp, err error) {
  var result MetaServiceCreateSessionResult
  err = p.CC.RecvMsg("createSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) UpdateSessions(req *UpdateSessionsReq) (_r *ExecResp, err error) {
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateSessions()
}


func (p *MetaServiceClient) recvUpdateSessions() (value *ExecResp, err error) {
  var result MetaServiceUpdateSessionsResult
  err = p.CC.RecvMsg("updateSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSessions()
}


func (p *MetaServiceClient) recvListSessions() (value *ListSessionsResp, err error) {
  var result MetaServiceListSessionsResult
  err = p.CC.RecvMsg("listSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSession(req *GetSessionReq) (_r *GetSessionResp, err error) {
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSession()
}


func (p *MetaServiceClient) recvGetSession() (value *GetSessionResp, err error) {
  var result MetaServiceGetSessionResult
  err = p.CC.RecvMsg("getSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveSession()
}


func (p *MetaServiceClient) recvRemoveSession() (value *ExecResp, err error) {
  var result MetaServiceRemoveSessionResult
  err = p.CC.RecvMsg("removeSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error) {
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  err = p.CC.SendMsg("reportTaskFinish", &args, thrift.CALL)
  if err != nil { return }
  return p.recvReportTaskFinish()
}


func (p *MetaServiceClient) recvReportTaskFinish() (value *ExecResp, err error) {
  var result MetaServiceReportTaskFinishResult
  err = p.CC.RecvMsg("reportTaskFinish", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceThreadsafeClient struct {
  MetaServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *MetaServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *MetaServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *MetaServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewMetaServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewMetaServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewMetaServiceThreadsafeClientProtocol(prot thrift.Protocol) *MetaServiceThreadsafeClient {
  return NewMetaServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSpace(req *CreateSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSpace()
}


func (p *MetaServiceThreadsafeClient) recvCreateSpace() (value *ExecResp, err error) {
  var result MetaServiceCreateSpaceResult
  err = p.CC.RecvMsg("createSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSpace(req *DropSpaceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSpace()
}


func (p *MetaServiceThreadsafeClient) recvDropSpace() (value *ExecResp, err error) {
  var result MetaServiceDropSpaceResult
  err = p.CC.RecvMsg("dropSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSpace(req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSpace", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSpace()
}


func (p *MetaServiceThreadsafeClient) recvGetSpace() (value *GetSpaceResp, err error) {
  var result MetaServiceGetSpaceResult
  err = p.CC.RecvMsg("getSpace", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSpaces(req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSpaces", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSpaces()
}


func (p *MetaServiceThreadsafeClient) recvListSpaces() (value *ListSpacesResp, err error) {
  var result MetaServiceListSpacesResult
  err = p.CC.RecvMsg("listSpaces", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTag(req *CreateTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTag()
}


func (p *MetaServiceThreadsafeClient) recvCreateTag() (value *ExecResp, err error) {
  var result MetaServiceCreateTagResult
  err = p.CC.RecvMsg("createTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterTag(req *AlterTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterTag()
}


func (p *MetaServiceThreadsafeClient) recvAlterTag() (value *ExecResp, err error) {
  var result MetaServiceAlterTagResult
  err = p.CC.RecvMsg("alterTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTag(req *DropTagReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTag()
}


func (p *MetaServiceThreadsafeClient) recvDropTag() (value *ExecResp, err error) {
  var result MetaServiceDropTagResult
  err = p.CC.RecvMsg("dropTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTag(req *GetTagReq) (_r *GetTagResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTag", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTag()
}


func (p *MetaServiceThreadsafeClient) recvGetTag() (value *GetTagResp, err error) {
  var result MetaServiceGetTagResult
  err = p.CC.RecvMsg("getTag", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTags(req *ListTagsReq) (_r *ListTagsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTags()
}


func (p *MetaServiceThreadsafeClient) recvListTags() (value *ListTagsResp, err error) {
  var result MetaServiceListTagsResult
  err = p.CC.RecvMsg("listTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdge(req *CreateEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdge()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdge() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeResult
  err = p.CC.RecvMsg("createEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterEdge(req *AlterEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterEdge()
}


func (p *MetaServiceThreadsafeClient) recvAlterEdge() (value *ExecResp, err error) {
  var result MetaServiceAlterEdgeResult
  err = p.CC.RecvMsg("alterEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdge(req *DropEdgeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdge()
}


func (p *MetaServiceThreadsafeClient) recvDropEdge() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeResult
  err = p.CC.RecvMsg("dropEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdge(req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdge()
}


func (p *MetaServiceThreadsafeClient) recvGetEdge() (value *GetEdgeResp, err error) {
  var result MetaServiceGetEdgeResult
  err = p.CC.RecvMsg("getEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdges(req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdges()
}


func (p *MetaServiceThreadsafeClient) recvListEdges() (value *ListEdgesResp, err error) {
  var result MetaServiceListEdgesResult
  err = p.CC.RecvMsg("listEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListHosts(req *ListHostsReq) (_r *ListHostsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listHosts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListHosts()
}


func (p *MetaServiceThreadsafeClient) recvListHosts() (value *ListHostsResp, err error) {
  var result MetaServiceListHostsResult
  err = p.CC.RecvMsg("listHosts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetPartsAlloc(req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getPartsAlloc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetPartsAlloc()
}


func (p *MetaServiceThreadsafeClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  var result MetaServiceGetPartsAllocResult
  err = p.CC.RecvMsg("getPartsAlloc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListParts(req *ListPartsReq) (_r *ListPartsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listParts", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListParts()
}


func (p *MetaServiceThreadsafeClient) recvListParts() (value *ListPartsResp, err error) {
  var result MetaServiceListPartsResult
  err = p.CC.RecvMsg("listParts", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiPut(req *MultiPutReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceMultiPutArgs{
    Req : req,
  }
  err = p.CC.SendMsg("multiPut", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMultiPut()
}


func (p *MetaServiceThreadsafeClient) recvMultiPut() (value *ExecResp, err error) {
  var result MetaServiceMultiPutResult
  err = p.CC.RecvMsg("multiPut", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Get(req *GetReq) (_r *GetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("get", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGet()
}


func (p *MetaServiceThreadsafeClient) recvGet() (value *GetResp, err error) {
  var result MetaServiceGetResult
  err = p.CC.RecvMsg("get", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiGet(req *MultiGetReq) (_r *MultiGetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceMultiGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("multiGet", &args, thrift.CALL)
  if err != nil { return }
  return p.recvMultiGet()
}


func (p *MetaServiceThreadsafeClient) recvMultiGet() (value *MultiGetResp, err error) {
  var result MetaServiceMultiGetResult
  err = p.CC.RecvMsg("multiGet", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Remove(req *RemoveReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveArgs{
    Req : req,
  }
  err = p.CC.SendMsg("remove", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemove()
}


func (p *MetaServiceThreadsafeClient) recvRemove() (value *ExecResp, err error) {
  var result MetaServiceRemoveResult
  err = p.CC.RecvMsg("remove", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveRange(req *RemoveRangeReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveRangeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeRange", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveRange()
}


func (p *MetaServiceThreadsafeClient) recvRemoveRange() (value *ExecResp, err error) {
  var result MetaServiceRemoveRangeResult
  err = p.CC.RecvMsg("removeRange", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Scan(req *ScanReq) (_r *ScanResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceScanArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scan", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScan()
}


func (p *MetaServiceThreadsafeClient) recvScan() (value *ScanResp, err error) {
  var result MetaServiceScanResult
  err = p.CC.RecvMsg("scan", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTagIndex(req *CreateTagIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvCreateTagIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateTagIndexResult
  err = p.CC.RecvMsg("createTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTagIndex(req *DropTagIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvDropTagIndex() (value *ExecResp, err error) {
  var result MetaServiceDropTagIndexResult
  err = p.CC.RecvMsg("dropTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTagIndex(req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  var result MetaServiceGetTagIndexResult
  err = p.CC.RecvMsg("getTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexes(req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexes()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  var result MetaServiceListTagIndexesResult
  err = p.CC.RecvMsg("listTagIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildTagIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildTagIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildTagIndex()
}


func (p *MetaServiceThreadsafeClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildTagIndexResult
  err = p.CC.RecvMsg("rebuildTagIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listTagIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListTagIndexStatus()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListTagIndexStatusResult
  err = p.CC.RecvMsg("listTagIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceCreateEdgeIndexResult
  err = p.CC.RecvMsg("createEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdgeIndex(req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceDropEdgeIndexResult
  err = p.CC.RecvMsg("dropEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdgeIndex(req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  var result MetaServiceGetEdgeIndexResult
  err = p.CC.RecvMsg("getEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexes", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexes()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  var result MetaServiceListEdgeIndexesResult
  err = p.CC.RecvMsg("listEdgeIndexes", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildEdgeIndex(req *RebuildIndexReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("rebuildEdgeIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRebuildEdgeIndex()
}


func (p *MetaServiceThreadsafeClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  var result MetaServiceRebuildEdgeIndexResult
  err = p.CC.RecvMsg("rebuildEdgeIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listEdgeIndexStatus", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListEdgeIndexStatus()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  var result MetaServiceListEdgeIndexStatusResult
  err = p.CC.RecvMsg("listEdgeIndexStatus", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateUser(req *CreateUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateUser()
}


func (p *MetaServiceThreadsafeClient) recvCreateUser() (value *ExecResp, err error) {
  var result MetaServiceCreateUserResult
  err = p.CC.RecvMsg("createUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropUser(req *DropUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropUser()
}


func (p *MetaServiceThreadsafeClient) recvDropUser() (value *ExecResp, err error) {
  var result MetaServiceDropUserResult
  err = p.CC.RecvMsg("dropUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterUser(req *AlterUserReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  err = p.CC.SendMsg("alterUser", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAlterUser()
}


func (p *MetaServiceThreadsafeClient) recvAlterUser() (value *ExecResp, err error) {
  var result MetaServiceAlterUserResult
  err = p.CC.RecvMsg("alterUser", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GrantRole(req *GrantRoleReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("grantRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGrantRole()
}


func (p *MetaServiceThreadsafeClient) recvGrantRole() (value *ExecResp, err error) {
  var result MetaServiceGrantRoleResult
  err = p.CC.RecvMsg("grantRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RevokeRole(req *RevokeRoleReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  err = p.CC.SendMsg("revokeRole", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRevokeRole()
}


func (p *MetaServiceThreadsafeClient) recvRevokeRole() (value *ExecResp, err error) {
  var result MetaServiceRevokeRoleResult
  err = p.CC.RecvMsg("revokeRole", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListUsers(req *ListUsersReq) (_r *ListUsersResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listUsers", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListUsers()
}


func (p *MetaServiceThreadsafeClient) recvListUsers() (value *ListUsersResp, err error) {
  var result MetaServiceListUsersResult
  err = p.CC.RecvMsg("listUsers", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListRoles(req *ListRolesReq) (_r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListRoles()
}


func (p *MetaServiceThreadsafeClient) recvListRoles() (value *ListRolesResp, err error) {
  var result MetaServiceListRolesResult
  err = p.CC.RecvMsg("listRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetUserRoles(req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUserRoles", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUserRoles()
}


func (p *MetaServiceThreadsafeClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  var result MetaServiceGetUserRolesResult
  err = p.CC.RecvMsg("getUserRoles", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ChangePassword(req *ChangePasswordReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  err = p.CC.SendMsg("changePassword", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChangePassword()
}


func (p *MetaServiceThreadsafeClient) recvChangePassword() (value *ExecResp, err error) {
  var result MetaServiceChangePasswordResult
  err = p.CC.RecvMsg("changePassword", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) HeartBeat(req *HBReq) (_r *HBResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  err = p.CC.SendMsg("heartBeat", &args, thrift.CALL)
  if err != nil { return }
  return p.recvHeartBeat()
}


func (p *MetaServiceThreadsafeClient) recvHeartBeat() (value *HBResp, err error) {
  var result MetaServiceHeartBeatResult
  err = p.CC.RecvMsg("heartBeat", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Balance(req *BalanceReq) (_r *BalanceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceBalanceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("balance", &args, thrift.CALL)
  if err != nil { return }
  return p.recvBalance()
}


func (p *MetaServiceThreadsafeClient) recvBalance() (value *BalanceResp, err error) {
  var result MetaServiceBalanceResult
  err = p.CC.RecvMsg("balance", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) LeaderBalance(req *LeaderBalanceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceLeaderBalanceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("leaderBalance", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLeaderBalance()
}


func (p *MetaServiceThreadsafeClient) recvLeaderBalance() (value *ExecResp, err error) {
  var result MetaServiceLeaderBalanceResult
  err = p.CC.RecvMsg("leaderBalance", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RegConfig(req *RegConfigReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("regConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRegConfig()
}


func (p *MetaServiceThreadsafeClient) recvRegConfig() (value *ExecResp, err error) {
  var result MetaServiceRegConfigResult
  err = p.CC.RecvMsg("regConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetConfig(req *GetConfigReq) (_r *GetConfigResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetConfig()
}


func (p *MetaServiceThreadsafeClient) recvGetConfig() (value *GetConfigResp, err error) {
  var result MetaServiceGetConfigResult
  err = p.CC.RecvMsg("getConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SetConfig(req *SetConfigReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  err = p.CC.SendMsg("setConfig", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSetConfig()
}


func (p *MetaServiceThreadsafeClient) recvSetConfig() (value *ExecResp, err error) {
  var result MetaServiceSetConfigResult
  err = p.CC.RecvMsg("setConfig", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListConfigs(req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listConfigs", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListConfigs()
}


func (p *MetaServiceThreadsafeClient) recvListConfigs() (value *ListConfigsResp, err error) {
  var result MetaServiceListConfigsResult
  err = p.CC.RecvMsg("listConfigs", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSnapshot(req *CreateSnapshotReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSnapshot()
}


func (p *MetaServiceThreadsafeClient) recvCreateSnapshot() (value *ExecResp, err error) {
  var result MetaServiceCreateSnapshotResult
  err = p.CC.RecvMsg("createSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSnapshot(req *DropSnapshotReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropSnapshot", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropSnapshot()
}


func (p *MetaServiceThreadsafeClient) recvDropSnapshot() (value *ExecResp, err error) {
  var result MetaServiceDropSnapshotResult
  err = p.CC.RecvMsg("dropSnapshot", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSnapshots(req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSnapshots", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSnapshots()
}


func (p *MetaServiceThreadsafeClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  var result MetaServiceListSnapshotsResult
  err = p.CC.RecvMsg("listSnapshots", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RunAdminJob(req *AdminJobReq) (_r *AdminJobResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  err = p.CC.SendMsg("runAdminJob", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRunAdminJob()
}


func (p *MetaServiceThreadsafeClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  var result MetaServiceRunAdminJobResult
  err = p.CC.RecvMsg("runAdminJob", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddZone(req *AddZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddZone()
}


func (p *MetaServiceThreadsafeClient) recvAddZone() (value *ExecResp, err error) {
  var result MetaServiceAddZoneResult
  err = p.CC.RecvMsg("addZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropZone(req *DropZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZone()
}


func (p *MetaServiceThreadsafeClient) recvDropZone() (value *ExecResp, err error) {
  var result MetaServiceDropZoneResult
  err = p.CC.RecvMsg("dropZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddHostIntoZone(req *AddHostIntoZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddHostIntoZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addHostIntoZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddHostIntoZone()
}


func (p *MetaServiceThreadsafeClient) recvAddHostIntoZone() (value *ExecResp, err error) {
  var result MetaServiceAddHostIntoZoneResult
  err = p.CC.RecvMsg("addHostIntoZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropHostFromZone(req *DropHostFromZoneReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropHostFromZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropHostFromZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropHostFromZone()
}


func (p *MetaServiceThreadsafeClient) recvDropHostFromZone() (value *ExecResp, err error) {
  var result MetaServiceDropHostFromZoneResult
  err = p.CC.RecvMsg("dropHostFromZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetZone(req *GetZoneReq) (_r *GetZoneResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getZone", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetZone()
}


func (p *MetaServiceThreadsafeClient) recvGetZone() (value *GetZoneResp, err error) {
  var result MetaServiceGetZoneResult
  err = p.CC.RecvMsg("getZone", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListZones(req *ListZonesReq) (_r *ListZonesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listZones", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListZones()
}


func (p *MetaServiceThreadsafeClient) recvListZones() (value *ListZonesResp, err error) {
  var result MetaServiceListZonesResult
  err = p.CC.RecvMsg("listZones", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddGroup(req *AddGroupReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddGroup()
}


func (p *MetaServiceThreadsafeClient) recvAddGroup() (value *ExecResp, err error) {
  var result MetaServiceAddGroupResult
  err = p.CC.RecvMsg("addGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropGroup(req *DropGroupReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropGroup()
}


func (p *MetaServiceThreadsafeClient) recvDropGroup() (value *ExecResp, err error) {
  var result MetaServiceDropGroupResult
  err = p.CC.RecvMsg("dropGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddZoneIntoGroup(req *AddZoneIntoGroupReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddZoneIntoGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addZoneIntoGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddZoneIntoGroup()
}


func (p *MetaServiceThreadsafeClient) recvAddZoneIntoGroup() (value *ExecResp, err error) {
  var result MetaServiceAddZoneIntoGroupResult
  err = p.CC.RecvMsg("addZoneIntoGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropZoneFromGroup(req *DropZoneFromGroupReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceDropZoneFromGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("dropZoneFromGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDropZoneFromGroup()
}


func (p *MetaServiceThreadsafeClient) recvDropZoneFromGroup() (value *ExecResp, err error) {
  var result MetaServiceDropZoneFromGroupResult
  err = p.CC.RecvMsg("dropZoneFromGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetGroup(req *GetGroupReq) (_r *GetGroupResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetGroupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getGroup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetGroup()
}


func (p *MetaServiceThreadsafeClient) recvGetGroup() (value *GetGroupResp, err error) {
  var result MetaServiceGetGroupResult
  err = p.CC.RecvMsg("getGroup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListGroups(req *ListGroupsReq) (_r *ListGroupsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListGroupsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listGroups", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListGroups()
}


func (p *MetaServiceThreadsafeClient) recvListGroups() (value *ListGroupsResp, err error) {
  var result MetaServiceListGroupsResult
  err = p.CC.RecvMsg("listGroups", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateBackup(req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createBackup", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateBackup()
}


func (p *MetaServiceThreadsafeClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  var result MetaServiceCreateBackupResult
  err = p.CC.RecvMsg("createBackup", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RestoreMeta(req *RestoreMetaReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  err = p.CC.SendMsg("restoreMeta", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRestoreMeta()
}


func (p *MetaServiceThreadsafeClient) recvRestoreMeta() (value *ExecResp, err error) {
  var result MetaServiceRestoreMetaResult
  err = p.CC.RecvMsg("restoreMeta", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddListener(req *AddListenerReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddListener()
}


func (p *MetaServiceThreadsafeClient) recvAddListener() (value *ExecResp, err error) {
  var result MetaServiceAddListenerResult
  err = p.CC.RecvMsg("addListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveListener(req *RemoveListenerReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveListener()
}


func (p *MetaServiceThreadsafeClient) recvRemoveListener() (value *ExecResp, err error) {
  var result MetaServiceRemoveListenerResult
  err = p.CC.RecvMsg("removeListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListListener(req *ListListenerReq) (_r *ListListenerResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listListener", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListListener()
}


func (p *MetaServiceThreadsafeClient) recvListListener() (value *ListListenerResp, err error) {
  var result MetaServiceListListenerResult
  err = p.CC.RecvMsg("listListener", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetStatis(req *GetStatisReq) (_r *GetStatisResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetStatisArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getStatis", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetStatis()
}


func (p *MetaServiceThreadsafeClient) recvGetStatis() (value *GetStatisResp, err error) {
  var result MetaServiceGetStatisResult
  err = p.CC.RecvMsg("getStatis", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignInFTService(req *SignInFTServiceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSignInFTServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signInFTService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignInFTService()
}


func (p *MetaServiceThreadsafeClient) recvSignInFTService() (value *ExecResp, err error) {
  var result MetaServiceSignInFTServiceResult
  err = p.CC.RecvMsg("signInFTService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignOutFTService(req *SignOutFTServiceReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceSignOutFTServiceArgs{
    Req : req,
  }
  err = p.CC.SendMsg("signOutFTService", &args, thrift.CALL)
  if err != nil { return }
  return p.recvSignOutFTService()
}


func (p *MetaServiceThreadsafeClient) recvSignOutFTService() (value *ExecResp, err error) {
  var result MetaServiceSignOutFTServiceResult
  err = p.CC.RecvMsg("signOutFTService", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListFTClients(req *ListFTClientsReq) (_r *ListFTClientsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListFTClientsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listFTClients", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListFTClients()
}


func (p *MetaServiceThreadsafeClient) recvListFTClients() (value *ListFTClientsResp, err error) {
  var result MetaServiceListFTClientsResult
  err = p.CC.RecvMsg("listFTClients", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSession(req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("createSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvCreateSession()
}


func (p *MetaServiceThreadsafeClient) recvCreateSession() (value *CreateSessionResp, err error) {
  var result MetaServiceCreateSessionResult
  err = p.CC.RecvMsg("createSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) UpdateSessions(req *UpdateSessionsReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateSessions()
}


func (p *MetaServiceThreadsafeClient) recvUpdateSessions() (value *ExecResp, err error) {
  var result MetaServiceUpdateSessionsResult
  err = p.CC.RecvMsg("updateSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSessions(req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("listSessions", &args, thrift.CALL)
  if err != nil { return }
  return p.recvListSessions()
}


func (p *MetaServiceThreadsafeClient) recvListSessions() (value *ListSessionsResp, err error) {
  var result MetaServiceListSessionsResult
  err = p.CC.RecvMsg("listSessions", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSession(req *GetSessionReq) (_r *GetSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetSession()
}


func (p *MetaServiceThreadsafeClient) recvGetSession() (value *GetSessionResp, err error) {
  var result MetaServiceGetSessionResult
  err = p.CC.RecvMsg("getSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveSession(req *RemoveSessionReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  err = p.CC.SendMsg("removeSession", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemoveSession()
}


func (p *MetaServiceThreadsafeClient) recvRemoveSession() (value *ExecResp, err error) {
  var result MetaServiceRemoveSessionResult
  err = p.CC.RecvMsg("removeSession", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ReportTaskFinish(req *ReportTaskReq) (_r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  err = p.CC.SendMsg("reportTaskFinish", &args, thrift.CALL)
  if err != nil { return }
  return p.recvReportTaskFinish()
}


func (p *MetaServiceThreadsafeClient) recvReportTaskFinish() (value *ExecResp, err error) {
  var result MetaServiceReportTaskFinishResult
  err = p.CC.RecvMsg("reportTaskFinish", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *MetaServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *MetaServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *MetaServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewMetaServiceChannelClient(channel thrift.RequestChannel) *MetaServiceChannelClient {
  return &MetaServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSpace(ctx context.Context, req *CreateSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSpaceArgs{
    Req : req,
  }
  var result MetaServiceCreateSpaceResult
  err = p.RequestChannel.Call(ctx, "createSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropSpace(ctx context.Context, req *DropSpaceReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSpaceArgs{
    Req : req,
  }
  var result MetaServiceDropSpaceResult
  err = p.RequestChannel.Call(ctx, "dropSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetSpace(ctx context.Context, req *GetSpaceReq) (_r *GetSpaceResp, err error) {
  args := MetaServiceGetSpaceArgs{
    Req : req,
  }
  var result MetaServiceGetSpaceResult
  err = p.RequestChannel.Call(ctx, "getSpace", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSpaces(ctx context.Context, req *ListSpacesReq) (_r *ListSpacesResp, err error) {
  args := MetaServiceListSpacesArgs{
    Req : req,
  }
  var result MetaServiceListSpacesResult
  err = p.RequestChannel.Call(ctx, "listSpaces", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateTag(ctx context.Context, req *CreateTagReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagArgs{
    Req : req,
  }
  var result MetaServiceCreateTagResult
  err = p.RequestChannel.Call(ctx, "createTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterTag(ctx context.Context, req *AlterTagReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterTagArgs{
    Req : req,
  }
  var result MetaServiceAlterTagResult
  err = p.RequestChannel.Call(ctx, "alterTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropTag(ctx context.Context, req *DropTagReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagArgs{
    Req : req,
  }
  var result MetaServiceDropTagResult
  err = p.RequestChannel.Call(ctx, "dropTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetTag(ctx context.Context, req *GetTagReq) (_r *GetTagResp, err error) {
  args := MetaServiceGetTagArgs{
    Req : req,
  }
  var result MetaServiceGetTagResult
  err = p.RequestChannel.Call(ctx, "getTag", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTags(ctx context.Context, req *ListTagsReq) (_r *ListTagsResp, err error) {
  args := MetaServiceListTagsArgs{
    Req : req,
  }
  var result MetaServiceListTagsResult
  err = p.RequestChannel.Call(ctx, "listTags", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateEdge(ctx context.Context, req *CreateEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeArgs{
    Req : req,
  }
  var result MetaServiceCreateEdgeResult
  err = p.RequestChannel.Call(ctx, "createEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterEdge(ctx context.Context, req *AlterEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterEdgeArgs{
    Req : req,
  }
  var result MetaServiceAlterEdgeResult
  err = p.RequestChannel.Call(ctx, "alterEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropEdge(ctx context.Context, req *DropEdgeReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeArgs{
    Req : req,
  }
  var result MetaServiceDropEdgeResult
  err = p.RequestChannel.Call(ctx, "dropEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetEdge(ctx context.Context, req *GetEdgeReq) (_r *GetEdgeResp, err error) {
  args := MetaServiceGetEdgeArgs{
    Req : req,
  }
  var result MetaServiceGetEdgeResult
  err = p.RequestChannel.Call(ctx, "getEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdges(ctx context.Context, req *ListEdgesReq) (_r *ListEdgesResp, err error) {
  args := MetaServiceListEdgesArgs{
    Req : req,
  }
  var result MetaServiceListEdgesResult
  err = p.RequestChannel.Call(ctx, "listEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListHosts(ctx context.Context, req *ListHostsReq) (_r *ListHostsResp, err error) {
  args := MetaServiceListHostsArgs{
    Req : req,
  }
  var result MetaServiceListHostsResult
  err = p.RequestChannel.Call(ctx, "listHosts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetPartsAlloc(ctx context.Context, req *GetPartsAllocReq) (_r *GetPartsAllocResp, err error) {
  args := MetaServiceGetPartsAllocArgs{
    Req : req,
  }
  var result MetaServiceGetPartsAllocResult
  err = p.RequestChannel.Call(ctx, "getPartsAlloc", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListParts(ctx context.Context, req *ListPartsReq) (_r *ListPartsResp, err error) {
  args := MetaServiceListPartsArgs{
    Req : req,
  }
  var result MetaServiceListPartsResult
  err = p.RequestChannel.Call(ctx, "listParts", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) MultiPut(ctx context.Context, req *MultiPutReq) (_r *ExecResp, err error) {
  args := MetaServiceMultiPutArgs{
    Req : req,
  }
  var result MetaServiceMultiPutResult
  err = p.RequestChannel.Call(ctx, "multiPut", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) Get(ctx context.Context, req *GetReq) (_r *GetResp, err error) {
  args := MetaServiceGetArgs{
    Req : req,
  }
  var result MetaServiceGetResult
  err = p.RequestChannel.Call(ctx, "get", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) MultiGet(ctx context.Context, req *MultiGetReq) (_r *MultiGetResp, err error) {
  args := MetaServiceMultiGetArgs{
    Req : req,
  }
  var result MetaServiceMultiGetResult
  err = p.RequestChannel.Call(ctx, "multiGet", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) Remove(ctx context.Context, req *RemoveReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveArgs{
    Req : req,
  }
  var result MetaServiceRemoveResult
  err = p.RequestChannel.Call(ctx, "remove", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RemoveRange(ctx context.Context, req *RemoveRangeReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveRangeArgs{
    Req : req,
  }
  var result MetaServiceRemoveRangeResult
  err = p.RequestChannel.Call(ctx, "removeRange", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) Scan(ctx context.Context, req *ScanReq) (_r *ScanResp, err error) {
  args := MetaServiceScanArgs{
    Req : req,
  }
  var result MetaServiceScanResult
  err = p.RequestChannel.Call(ctx, "scan", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateTagIndex(ctx context.Context, req *CreateTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateTagIndexArgs{
    Req : req,
  }
  var result MetaServiceCreateTagIndexResult
  err = p.RequestChannel.Call(ctx, "createTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropTagIndex(ctx context.Context, req *DropTagIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropTagIndexArgs{
    Req : req,
  }
  var result MetaServiceDropTagIndexResult
  err = p.RequestChannel.Call(ctx, "dropTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetTagIndex(ctx context.Context, req *GetTagIndexReq) (_r *GetTagIndexResp, err error) {
  args := MetaServiceGetTagIndexArgs{
    Req : req,
  }
  var result MetaServiceGetTagIndexResult
  err = p.RequestChannel.Call(ctx, "getTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTagIndexes(ctx context.Context, req *ListTagIndexesReq) (_r *ListTagIndexesResp, err error) {
  args := MetaServiceListTagIndexesArgs{
    Req : req,
  }
  var result MetaServiceListTagIndexesResult
  err = p.RequestChannel.Call(ctx, "listTagIndexes", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RebuildTagIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildTagIndexArgs{
    Req : req,
  }
  var result MetaServiceRebuildTagIndexResult
  err = p.RequestChannel.Call(ctx, "rebuildTagIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListTagIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListTagIndexStatusArgs{
    Req : req,
  }
  var result MetaServiceListTagIndexStatusResult
  err = p.RequestChannel.Call(ctx, "listTagIndexStatus", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateEdgeIndex(ctx context.Context, req *CreateEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceCreateEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "createEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropEdgeIndex(ctx context.Context, req *DropEdgeIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceDropEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceDropEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "dropEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetEdgeIndex(ctx context.Context, req *GetEdgeIndexReq) (_r *GetEdgeIndexResp, err error) {
  args := MetaServiceGetEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceGetEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "getEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdgeIndexes(ctx context.Context, req *ListEdgeIndexesReq) (_r *ListEdgeIndexesResp, err error) {
  args := MetaServiceListEdgeIndexesArgs{
    Req : req,
  }
  var result MetaServiceListEdgeIndexesResult
  err = p.RequestChannel.Call(ctx, "listEdgeIndexes", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RebuildEdgeIndex(ctx context.Context, req *RebuildIndexReq) (_r *ExecResp, err error) {
  args := MetaServiceRebuildEdgeIndexArgs{
    Req : req,
  }
  var result MetaServiceRebuildEdgeIndexResult
  err = p.RequestChannel.Call(ctx, "rebuildEdgeIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListEdgeIndexStatus(ctx context.Context, req *ListIndexStatusReq) (_r *ListIndexStatusResp, err error) {
  args := MetaServiceListEdgeIndexStatusArgs{
    Req : req,
  }
  var result MetaServiceListEdgeIndexStatusResult
  err = p.RequestChannel.Call(ctx, "listEdgeIndexStatus", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateUser(ctx context.Context, req *CreateUserReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateUserArgs{
    Req : req,
  }
  var result MetaServiceCreateUserResult
  err = p.RequestChannel.Call(ctx, "createUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropUser(ctx context.Context, req *DropUserReq) (_r *ExecResp, err error) {
  args := MetaServiceDropUserArgs{
    Req : req,
  }
  var result MetaServiceDropUserResult
  err = p.RequestChannel.Call(ctx, "dropUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AlterUser(ctx context.Context, req *AlterUserReq) (_r *ExecResp, err error) {
  args := MetaServiceAlterUserArgs{
    Req : req,
  }
  var result MetaServiceAlterUserResult
  err = p.RequestChannel.Call(ctx, "alterUser", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GrantRole(ctx context.Context, req *GrantRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceGrantRoleArgs{
    Req : req,
  }
  var result MetaServiceGrantRoleResult
  err = p.RequestChannel.Call(ctx, "grantRole", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RevokeRole(ctx context.Context, req *RevokeRoleReq) (_r *ExecResp, err error) {
  args := MetaServiceRevokeRoleArgs{
    Req : req,
  }
  var result MetaServiceRevokeRoleResult
  err = p.RequestChannel.Call(ctx, "revokeRole", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListUsers(ctx context.Context, req *ListUsersReq) (_r *ListUsersResp, err error) {
  args := MetaServiceListUsersArgs{
    Req : req,
  }
  var result MetaServiceListUsersResult
  err = p.RequestChannel.Call(ctx, "listUsers", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListRoles(ctx context.Context, req *ListRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceListRolesArgs{
    Req : req,
  }
  var result MetaServiceListRolesResult
  err = p.RequestChannel.Call(ctx, "listRoles", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetUserRoles(ctx context.Context, req *GetUserRolesReq) (_r *ListRolesResp, err error) {
  args := MetaServiceGetUserRolesArgs{
    Req : req,
  }
  var result MetaServiceGetUserRolesResult
  err = p.RequestChannel.Call(ctx, "getUserRoles", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ChangePassword(ctx context.Context, req *ChangePasswordReq) (_r *ExecResp, err error) {
  args := MetaServiceChangePasswordArgs{
    Req : req,
  }
  var result MetaServiceChangePasswordResult
  err = p.RequestChannel.Call(ctx, "changePassword", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) HeartBeat(ctx context.Context, req *HBReq) (_r *HBResp, err error) {
  args := MetaServiceHeartBeatArgs{
    Req : req,
  }
  var result MetaServiceHeartBeatResult
  err = p.RequestChannel.Call(ctx, "heartBeat", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) Balance(ctx context.Context, req *BalanceReq) (_r *BalanceResp, err error) {
  args := MetaServiceBalanceArgs{
    Req : req,
  }
  var result MetaServiceBalanceResult
  err = p.RequestChannel.Call(ctx, "balance", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) LeaderBalance(ctx context.Context, req *LeaderBalanceReq) (_r *ExecResp, err error) {
  args := MetaServiceLeaderBalanceArgs{
    Req : req,
  }
  var result MetaServiceLeaderBalanceResult
  err = p.RequestChannel.Call(ctx, "leaderBalance", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RegConfig(ctx context.Context, req *RegConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceRegConfigArgs{
    Req : req,
  }
  var result MetaServiceRegConfigResult
  err = p.RequestChannel.Call(ctx, "regConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetConfig(ctx context.Context, req *GetConfigReq) (_r *GetConfigResp, err error) {
  args := MetaServiceGetConfigArgs{
    Req : req,
  }
  var result MetaServiceGetConfigResult
  err = p.RequestChannel.Call(ctx, "getConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SetConfig(ctx context.Context, req *SetConfigReq) (_r *ExecResp, err error) {
  args := MetaServiceSetConfigArgs{
    Req : req,
  }
  var result MetaServiceSetConfigResult
  err = p.RequestChannel.Call(ctx, "setConfig", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListConfigs(ctx context.Context, req *ListConfigsReq) (_r *ListConfigsResp, err error) {
  args := MetaServiceListConfigsArgs{
    Req : req,
  }
  var result MetaServiceListConfigsResult
  err = p.RequestChannel.Call(ctx, "listConfigs", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSnapshot(ctx context.Context, req *CreateSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceCreateSnapshotArgs{
    Req : req,
  }
  var result MetaServiceCreateSnapshotResult
  err = p.RequestChannel.Call(ctx, "createSnapshot", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropSnapshot(ctx context.Context, req *DropSnapshotReq) (_r *ExecResp, err error) {
  args := MetaServiceDropSnapshotArgs{
    Req : req,
  }
  var result MetaServiceDropSnapshotResult
  err = p.RequestChannel.Call(ctx, "dropSnapshot", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSnapshots(ctx context.Context, req *ListSnapshotsReq) (_r *ListSnapshotsResp, err error) {
  args := MetaServiceListSnapshotsArgs{
    Req : req,
  }
  var result MetaServiceListSnapshotsResult
  err = p.RequestChannel.Call(ctx, "listSnapshots", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RunAdminJob(ctx context.Context, req *AdminJobReq) (_r *AdminJobResp, err error) {
  args := MetaServiceRunAdminJobArgs{
    Req : req,
  }
  var result MetaServiceRunAdminJobResult
  err = p.RequestChannel.Call(ctx, "runAdminJob", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddZone(ctx context.Context, req *AddZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddZoneArgs{
    Req : req,
  }
  var result MetaServiceAddZoneResult
  err = p.RequestChannel.Call(ctx, "addZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropZone(ctx context.Context, req *DropZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneArgs{
    Req : req,
  }
  var result MetaServiceDropZoneResult
  err = p.RequestChannel.Call(ctx, "dropZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddHostIntoZone(ctx context.Context, req *AddHostIntoZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceAddHostIntoZoneArgs{
    Req : req,
  }
  var result MetaServiceAddHostIntoZoneResult
  err = p.RequestChannel.Call(ctx, "addHostIntoZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropHostFromZone(ctx context.Context, req *DropHostFromZoneReq) (_r *ExecResp, err error) {
  args := MetaServiceDropHostFromZoneArgs{
    Req : req,
  }
  var result MetaServiceDropHostFromZoneResult
  err = p.RequestChannel.Call(ctx, "dropHostFromZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetZone(ctx context.Context, req *GetZoneReq) (_r *GetZoneResp, err error) {
  args := MetaServiceGetZoneArgs{
    Req : req,
  }
  var result MetaServiceGetZoneResult
  err = p.RequestChannel.Call(ctx, "getZone", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListZones(ctx context.Context, req *ListZonesReq) (_r *ListZonesResp, err error) {
  args := MetaServiceListZonesArgs{
    Req : req,
  }
  var result MetaServiceListZonesResult
  err = p.RequestChannel.Call(ctx, "listZones", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddGroup(ctx context.Context, req *AddGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceAddGroupArgs{
    Req : req,
  }
  var result MetaServiceAddGroupResult
  err = p.RequestChannel.Call(ctx, "addGroup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropGroup(ctx context.Context, req *DropGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceDropGroupArgs{
    Req : req,
  }
  var result MetaServiceDropGroupResult
  err = p.RequestChannel.Call(ctx, "dropGroup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddZoneIntoGroup(ctx context.Context, req *AddZoneIntoGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceAddZoneIntoGroupArgs{
    Req : req,
  }
  var result MetaServiceAddZoneIntoGroupResult
  err = p.RequestChannel.Call(ctx, "addZoneIntoGroup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) DropZoneFromGroup(ctx context.Context, req *DropZoneFromGroupReq) (_r *ExecResp, err error) {
  args := MetaServiceDropZoneFromGroupArgs{
    Req : req,
  }
  var result MetaServiceDropZoneFromGroupResult
  err = p.RequestChannel.Call(ctx, "dropZoneFromGroup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetGroup(ctx context.Context, req *GetGroupReq) (_r *GetGroupResp, err error) {
  args := MetaServiceGetGroupArgs{
    Req : req,
  }
  var result MetaServiceGetGroupResult
  err = p.RequestChannel.Call(ctx, "getGroup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListGroups(ctx context.Context, req *ListGroupsReq) (_r *ListGroupsResp, err error) {
  args := MetaServiceListGroupsArgs{
    Req : req,
  }
  var result MetaServiceListGroupsResult
  err = p.RequestChannel.Call(ctx, "listGroups", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateBackup(ctx context.Context, req *CreateBackupReq) (_r *CreateBackupResp, err error) {
  args := MetaServiceCreateBackupArgs{
    Req : req,
  }
  var result MetaServiceCreateBackupResult
  err = p.RequestChannel.Call(ctx, "createBackup", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RestoreMeta(ctx context.Context, req *RestoreMetaReq) (_r *ExecResp, err error) {
  args := MetaServiceRestoreMetaArgs{
    Req : req,
  }
  var result MetaServiceRestoreMetaResult
  err = p.RequestChannel.Call(ctx, "restoreMeta", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) AddListener(ctx context.Context, req *AddListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceAddListenerArgs{
    Req : req,
  }
  var result MetaServiceAddListenerResult
  err = p.RequestChannel.Call(ctx, "addListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RemoveListener(ctx context.Context, req *RemoveListenerReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveListenerArgs{
    Req : req,
  }
  var result MetaServiceRemoveListenerResult
  err = p.RequestChannel.Call(ctx, "removeListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListListener(ctx context.Context, req *ListListenerReq) (_r *ListListenerResp, err error) {
  args := MetaServiceListListenerArgs{
    Req : req,
  }
  var result MetaServiceListListenerResult
  err = p.RequestChannel.Call(ctx, "listListener", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetStatis(ctx context.Context, req *GetStatisReq) (_r *GetStatisResp, err error) {
  args := MetaServiceGetStatisArgs{
    Req : req,
  }
  var result MetaServiceGetStatisResult
  err = p.RequestChannel.Call(ctx, "getStatis", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SignInFTService(ctx context.Context, req *SignInFTServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignInFTServiceArgs{
    Req : req,
  }
  var result MetaServiceSignInFTServiceResult
  err = p.RequestChannel.Call(ctx, "signInFTService", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) SignOutFTService(ctx context.Context, req *SignOutFTServiceReq) (_r *ExecResp, err error) {
  args := MetaServiceSignOutFTServiceArgs{
    Req : req,
  }
  var result MetaServiceSignOutFTServiceResult
  err = p.RequestChannel.Call(ctx, "signOutFTService", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListFTClients(ctx context.Context, req *ListFTClientsReq) (_r *ListFTClientsResp, err error) {
  args := MetaServiceListFTClientsArgs{
    Req : req,
  }
  var result MetaServiceListFTClientsResult
  err = p.RequestChannel.Call(ctx, "listFTClients", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) CreateSession(ctx context.Context, req *CreateSessionReq) (_r *CreateSessionResp, err error) {
  args := MetaServiceCreateSessionArgs{
    Req : req,
  }
  var result MetaServiceCreateSessionResult
  err = p.RequestChannel.Call(ctx, "createSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) UpdateSessions(ctx context.Context, req *UpdateSessionsReq) (_r *ExecResp, err error) {
  args := MetaServiceUpdateSessionsArgs{
    Req : req,
  }
  var result MetaServiceUpdateSessionsResult
  err = p.RequestChannel.Call(ctx, "updateSessions", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ListSessions(ctx context.Context, req *ListSessionsReq) (_r *ListSessionsResp, err error) {
  args := MetaServiceListSessionsArgs{
    Req : req,
  }
  var result MetaServiceListSessionsResult
  err = p.RequestChannel.Call(ctx, "listSessions", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) GetSession(ctx context.Context, req *GetSessionReq) (_r *GetSessionResp, err error) {
  args := MetaServiceGetSessionArgs{
    Req : req,
  }
  var result MetaServiceGetSessionResult
  err = p.RequestChannel.Call(ctx, "getSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) RemoveSession(ctx context.Context, req *RemoveSessionReq) (_r *ExecResp, err error) {
  args := MetaServiceRemoveSessionArgs{
    Req : req,
  }
  var result MetaServiceRemoveSessionResult
  err = p.RequestChannel.Call(ctx, "removeSession", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *MetaServiceChannelClient) ReportTaskFinish(ctx context.Context, req *ReportTaskReq) (_r *ExecResp, err error) {
  args := MetaServiceReportTaskFinishArgs{
    Req : req,
  }
  var result MetaServiceReportTaskFinishResult
  err = p.RequestChannel.Call(ctx, "reportTaskFinish", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type MetaServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  handler MetaService
}

func (p *MetaServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *MetaServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *MetaServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func NewMetaServiceProcessor(handler MetaService) *MetaServiceProcessor {
  self80 := &MetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext)}
  self80.processorMap["createSpace"] = &metaServiceProcessorCreateSpace{handler:handler}
  self80.processorMap["dropSpace"] = &metaServiceProcessorDropSpace{handler:handler}
  self80.processorMap["getSpace"] = &metaServiceProcessorGetSpace{handler:handler}
  self80.processorMap["listSpaces"] = &metaServiceProcessorListSpaces{handler:handler}
  self80.processorMap["createTag"] = &metaServiceProcessorCreateTag{handler:handler}
  self80.processorMap["alterTag"] = &metaServiceProcessorAlterTag{handler:handler}
  self80.processorMap["dropTag"] = &metaServiceProcessorDropTag{handler:handler}
  self80.processorMap["getTag"] = &metaServiceProcessorGetTag{handler:handler}
  self80.processorMap["listTags"] = &metaServiceProcessorListTags{handler:handler}
  self80.processorMap["createEdge"] = &metaServiceProcessorCreateEdge{handler:handler}
  self80.processorMap["alterEdge"] = &metaServiceProcessorAlterEdge{handler:handler}
  self80.processorMap["dropEdge"] = &metaServiceProcessorDropEdge{handler:handler}
  self80.processorMap["getEdge"] = &metaServiceProcessorGetEdge{handler:handler}
  self80.processorMap["listEdges"] = &metaServiceProcessorListEdges{handler:handler}
  self80.processorMap["listHosts"] = &metaServiceProcessorListHosts{handler:handler}
  self80.processorMap["getPartsAlloc"] = &metaServiceProcessorGetPartsAlloc{handler:handler}
  self80.processorMap["listParts"] = &metaServiceProcessorListParts{handler:handler}
  self80.processorMap["multiPut"] = &metaServiceProcessorMultiPut{handler:handler}
  self80.processorMap["get"] = &metaServiceProcessorGet{handler:handler}
  self80.processorMap["multiGet"] = &metaServiceProcessorMultiGet{handler:handler}
  self80.processorMap["remove"] = &metaServiceProcessorRemove{handler:handler}
  self80.processorMap["removeRange"] = &metaServiceProcessorRemoveRange{handler:handler}
  self80.processorMap["scan"] = &metaServiceProcessorScan{handler:handler}
  self80.processorMap["createTagIndex"] = &metaServiceProcessorCreateTagIndex{handler:handler}
  self80.processorMap["dropTagIndex"] = &metaServiceProcessorDropTagIndex{handler:handler}
  self80.processorMap["getTagIndex"] = &metaServiceProcessorGetTagIndex{handler:handler}
  self80.processorMap["listTagIndexes"] = &metaServiceProcessorListTagIndexes{handler:handler}
  self80.processorMap["rebuildTagIndex"] = &metaServiceProcessorRebuildTagIndex{handler:handler}
  self80.processorMap["listTagIndexStatus"] = &metaServiceProcessorListTagIndexStatus{handler:handler}
  self80.processorMap["createEdgeIndex"] = &metaServiceProcessorCreateEdgeIndex{handler:handler}
  self80.processorMap["dropEdgeIndex"] = &metaServiceProcessorDropEdgeIndex{handler:handler}
  self80.processorMap["getEdgeIndex"] = &metaServiceProcessorGetEdgeIndex{handler:handler}
  self80.processorMap["listEdgeIndexes"] = &metaServiceProcessorListEdgeIndexes{handler:handler}
  self80.processorMap["rebuildEdgeIndex"] = &metaServiceProcessorRebuildEdgeIndex{handler:handler}
  self80.processorMap["listEdgeIndexStatus"] = &metaServiceProcessorListEdgeIndexStatus{handler:handler}
  self80.processorMap["createUser"] = &metaServiceProcessorCreateUser{handler:handler}
  self80.processorMap["dropUser"] = &metaServiceProcessorDropUser{handler:handler}
  self80.processorMap["alterUser"] = &metaServiceProcessorAlterUser{handler:handler}
  self80.processorMap["grantRole"] = &metaServiceProcessorGrantRole{handler:handler}
  self80.processorMap["revokeRole"] = &metaServiceProcessorRevokeRole{handler:handler}
  self80.processorMap["listUsers"] = &metaServiceProcessorListUsers{handler:handler}
  self80.processorMap["listRoles"] = &metaServiceProcessorListRoles{handler:handler}
  self80.processorMap["getUserRoles"] = &metaServiceProcessorGetUserRoles{handler:handler}
  self80.processorMap["changePassword"] = &metaServiceProcessorChangePassword{handler:handler}
  self80.processorMap["heartBeat"] = &metaServiceProcessorHeartBeat{handler:handler}
  self80.processorMap["balance"] = &metaServiceProcessorBalance{handler:handler}
  self80.processorMap["leaderBalance"] = &metaServiceProcessorLeaderBalance{handler:handler}
  self80.processorMap["regConfig"] = &metaServiceProcessorRegConfig{handler:handler}
  self80.processorMap["getConfig"] = &metaServiceProcessorGetConfig{handler:handler}
  self80.processorMap["setConfig"] = &metaServiceProcessorSetConfig{handler:handler}
  self80.processorMap["listConfigs"] = &metaServiceProcessorListConfigs{handler:handler}
  self80.processorMap["createSnapshot"] = &metaServiceProcessorCreateSnapshot{handler:handler}
  self80.processorMap["dropSnapshot"] = &metaServiceProcessorDropSnapshot{handler:handler}
  self80.processorMap["listSnapshots"] = &metaServiceProcessorListSnapshots{handler:handler}
  self80.processorMap["runAdminJob"] = &metaServiceProcessorRunAdminJob{handler:handler}
  self80.processorMap["addZone"] = &metaServiceProcessorAddZone{handler:handler}
  self80.processorMap["dropZone"] = &metaServiceProcessorDropZone{handler:handler}
  self80.processorMap["addHostIntoZone"] = &metaServiceProcessorAddHostIntoZone{handler:handler}
  self80.processorMap["dropHostFromZone"] = &metaServiceProcessorDropHostFromZone{handler:handler}
  self80.processorMap["getZone"] = &metaServiceProcessorGetZone{handler:handler}
  self80.processorMap["listZones"] = &metaServiceProcessorListZones{handler:handler}
  self80.processorMap["addGroup"] = &metaServiceProcessorAddGroup{handler:handler}
  self80.processorMap["dropGroup"] = &metaServiceProcessorDropGroup{handler:handler}
  self80.processorMap["addZoneIntoGroup"] = &metaServiceProcessorAddZoneIntoGroup{handler:handler}
  self80.processorMap["dropZoneFromGroup"] = &metaServiceProcessorDropZoneFromGroup{handler:handler}
  self80.processorMap["getGroup"] = &metaServiceProcessorGetGroup{handler:handler}
  self80.processorMap["listGroups"] = &metaServiceProcessorListGroups{handler:handler}
  self80.processorMap["createBackup"] = &metaServiceProcessorCreateBackup{handler:handler}
  self80.processorMap["restoreMeta"] = &metaServiceProcessorRestoreMeta{handler:handler}
  self80.processorMap["addListener"] = &metaServiceProcessorAddListener{handler:handler}
  self80.processorMap["removeListener"] = &metaServiceProcessorRemoveListener{handler:handler}
  self80.processorMap["listListener"] = &metaServiceProcessorListListener{handler:handler}
  self80.processorMap["getStatis"] = &metaServiceProcessorGetStatis{handler:handler}
  self80.processorMap["signInFTService"] = &metaServiceProcessorSignInFTService{handler:handler}
  self80.processorMap["signOutFTService"] = &metaServiceProcessorSignOutFTService{handler:handler}
  self80.processorMap["listFTClients"] = &metaServiceProcessorListFTClients{handler:handler}
  self80.processorMap["createSession"] = &metaServiceProcessorCreateSession{handler:handler}
  self80.processorMap["updateSessions"] = &metaServiceProcessorUpdateSessions{handler:handler}
  self80.processorMap["listSessions"] = &metaServiceProcessorListSessions{handler:handler}
  self80.processorMap["getSession"] = &metaServiceProcessorGetSession{handler:handler}
  self80.processorMap["removeSession"] = &metaServiceProcessorRemoveSession{handler:handler}
  self80.processorMap["reportTaskFinish"] = &metaServiceProcessorReportTaskFinish{handler:handler}
  return self80
}

type metaServiceProcessorCreateSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSpaceArgs)
  var result MetaServiceCreateSpaceResult
  if retval, err := p.handler.CreateSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSpaceArgs)
  var result MetaServiceDropSpaceResult
  if retval, err := p.handler.DropSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSpace) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSpaceArgs)
  var result MetaServiceGetSpaceResult
  if retval, err := p.handler.GetSpace(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSpaces struct {
  handler MetaService
}

func (p *metaServiceProcessorListSpaces) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSpacesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSpaces) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSpaces", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSpaces) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSpacesArgs)
  var result MetaServiceListSpacesResult
  if retval, err := p.handler.ListSpaces(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSpaces: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTag struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagArgs)
  var result MetaServiceCreateTagResult
  if retval, err := p.handler.CreateTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterTag struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterTagArgs)
  var result MetaServiceAlterTagResult
  if retval, err := p.handler.AlterTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTag struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagArgs)
  var result MetaServiceDropTagResult
  if retval, err := p.handler.DropTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTag struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTag) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagArgs)
  var result MetaServiceGetTagResult
  if retval, err := p.handler.GetTag(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTags struct {
  handler MetaService
}

func (p *metaServiceProcessorListTags) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTags) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTags", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTags) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagsArgs)
  var result MetaServiceListTagsResult
  if retval, err := p.handler.ListTags(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeArgs)
  var result MetaServiceCreateEdgeResult
  if retval, err := p.handler.CreateEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterEdgeArgs)
  var result MetaServiceAlterEdgeResult
  if retval, err := p.handler.AlterEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeArgs)
  var result MetaServiceDropEdgeResult
  if retval, err := p.handler.DropEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeArgs)
  var result MetaServiceGetEdgeResult
  if retval, err := p.handler.GetEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdges struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgesArgs)
  var result MetaServiceListEdgesResult
  if retval, err := p.handler.ListEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorListHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListHosts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListHostsArgs)
  var result MetaServiceListHostsResult
  if retval, err := p.handler.ListHosts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetPartsAlloc struct {
  handler MetaService
}

func (p *metaServiceProcessorGetPartsAlloc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetPartsAllocArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetPartsAlloc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getPartsAlloc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetPartsAlloc) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetPartsAllocArgs)
  var result MetaServiceGetPartsAllocResult
  if retval, err := p.handler.GetPartsAlloc(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartsAlloc: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListParts struct {
  handler MetaService
}

func (p *metaServiceProcessorListParts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListPartsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListParts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listParts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListParts) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListPartsArgs)
  var result MetaServiceListPartsResult
  if retval, err := p.handler.ListParts(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listParts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiPut struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiPut) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiPutArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiPut) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiPut", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiPut) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiPutArgs)
  var result MetaServiceMultiPutResult
  if retval, err := p.handler.MultiPut(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGet struct {
  handler MetaService
}

func (p *metaServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGet) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetArgs)
  var result MetaServiceGetResult
  if retval, err := p.handler.Get(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiGet struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiGet", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiGet) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiGetArgs)
  var result MetaServiceMultiGetResult
  if retval, err := p.handler.MultiGet(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGet: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemove struct {
  handler MetaService
}

func (p *metaServiceProcessorRemove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("remove", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemove) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveArgs)
  var result MetaServiceRemoveResult
  if retval, err := p.handler.Remove(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveRange struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveRange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveRangeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveRange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeRange", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveRange) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveRangeArgs)
  var result MetaServiceRemoveRangeResult
  if retval, err := p.handler.RemoveRange(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRange: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorScan struct {
  handler MetaService
}

func (p *metaServiceProcessorScan) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceScanArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorScan) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("scan", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorScan) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceScanArgs)
  var result MetaServiceScanResult
  if retval, err := p.handler.Scan(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagIndexArgs)
  var result MetaServiceCreateTagIndexResult
  if retval, err := p.handler.CreateTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagIndexArgs)
  var result MetaServiceDropTagIndexResult
  if retval, err := p.handler.DropTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagIndexArgs)
  var result MetaServiceGetTagIndexResult
  if retval, err := p.handler.GetTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexes) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexesArgs)
  var result MetaServiceListTagIndexesResult
  if retval, err := p.handler.ListTagIndexes(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildTagIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildTagIndexArgs)
  var result MetaServiceRebuildTagIndexResult
  if retval, err := p.handler.RebuildTagIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexStatus) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexStatusArgs)
  var result MetaServiceListTagIndexStatusResult
  if retval, err := p.handler.ListTagIndexStatus(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeIndexArgs)
  var result MetaServiceCreateEdgeIndexResult
  if retval, err := p.handler.CreateEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeIndexArgs)
  var result MetaServiceDropEdgeIndexResult
  if retval, err := p.handler.DropEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeIndexArgs)
  var result MetaServiceGetEdgeIndexResult
  if retval, err := p.handler.GetEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexes) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexesArgs)
  var result MetaServiceListEdgeIndexesResult
  if retval, err := p.handler.ListEdgeIndexes(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildEdgeIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildEdgeIndexArgs)
  var result MetaServiceRebuildEdgeIndexResult
  if retval, err := p.handler.RebuildEdgeIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexStatus) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexStatusArgs)
  var result MetaServiceListEdgeIndexStatusResult
  if retval, err := p.handler.ListEdgeIndexStatus(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateUser struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateUserArgs)
  var result MetaServiceCreateUserResult
  if retval, err := p.handler.CreateUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropUser struct {
  handler MetaService
}

func (p *metaServiceProcessorDropUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropUserArgs)
  var result MetaServiceDropUserResult
  if retval, err := p.handler.DropUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterUser struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterUser) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterUserArgs)
  var result MetaServiceAlterUserResult
  if retval, err := p.handler.AlterUser(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGrantRole struct {
  handler MetaService
}

func (p *metaServiceProcessorGrantRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGrantRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGrantRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("grantRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGrantRole) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGrantRoleArgs)
  var result MetaServiceGrantRoleResult
  if retval, err := p.handler.GrantRole(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRevokeRole struct {
  handler MetaService
}

func (p *metaServiceProcessorRevokeRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRevokeRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRevokeRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("revokeRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRevokeRole) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRevokeRoleArgs)
  var result MetaServiceRevokeRoleResult
  if retval, err := p.handler.RevokeRole(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListUsers struct {
  handler MetaService
}

func (p *metaServiceProcessorListUsers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListUsersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListUsers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listUsers", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListUsers) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListUsersArgs)
  var result MetaServiceListUsersResult
  if retval, err := p.handler.ListUsers(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUsers: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorListRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListRoles) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListRolesArgs)
  var result MetaServiceListRolesResult
  if retval, err := p.handler.ListRoles(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetUserRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorGetUserRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetUserRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetUserRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getUserRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetUserRoles) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetUserRolesArgs)
  var result MetaServiceGetUserRolesResult
  if retval, err := p.handler.GetUserRoles(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorChangePassword struct {
  handler MetaService
}

func (p *metaServiceProcessorChangePassword) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceChangePasswordArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorChangePassword) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("changePassword", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorChangePassword) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceChangePasswordArgs)
  var result MetaServiceChangePasswordResult
  if retval, err := p.handler.ChangePassword(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorHeartBeat struct {
  handler MetaService
}

func (p *metaServiceProcessorHeartBeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceHeartBeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorHeartBeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("heartBeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorHeartBeat) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceHeartBeatArgs)
  var result MetaServiceHeartBeatResult
  if retval, err := p.handler.HeartBeat(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("balance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorBalance) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceBalanceArgs)
  var result MetaServiceBalanceResult
  if retval, err := p.handler.Balance(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing balance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorLeaderBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorLeaderBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceLeaderBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorLeaderBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("leaderBalance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorLeaderBalance) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceLeaderBalanceArgs)
  var result MetaServiceLeaderBalanceResult
  if retval, err := p.handler.LeaderBalance(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaderBalance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRegConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorRegConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRegConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRegConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("regConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRegConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRegConfigArgs)
  var result MetaServiceRegConfigResult
  if retval, err := p.handler.RegConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing regConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorGetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetConfigArgs)
  var result MetaServiceGetConfigResult
  if retval, err := p.handler.GetConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorSetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("setConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSetConfig) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSetConfigArgs)
  var result MetaServiceSetConfigResult
  if retval, err := p.handler.SetConfig(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListConfigs struct {
  handler MetaService
}

func (p *metaServiceProcessorListConfigs) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListConfigsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListConfigs) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listConfigs", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListConfigs) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListConfigsArgs)
  var result MetaServiceListConfigsResult
  if retval, err := p.handler.ListConfigs(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConfigs: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSnapshot) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSnapshotArgs)
  var result MetaServiceCreateSnapshotResult
  if retval, err := p.handler.CreateSnapshot(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSnapshot) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSnapshotArgs)
  var result MetaServiceDropSnapshotResult
  if retval, err := p.handler.DropSnapshot(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSnapshots struct {
  handler MetaService
}

func (p *metaServiceProcessorListSnapshots) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSnapshotsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSnapshots) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSnapshots", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSnapshots) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSnapshotsArgs)
  var result MetaServiceListSnapshotsResult
  if retval, err := p.handler.ListSnapshots(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSnapshots: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRunAdminJob struct {
  handler MetaService
}

func (p *metaServiceProcessorRunAdminJob) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRunAdminJobArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRunAdminJob) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("runAdminJob", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRunAdminJob) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRunAdminJobArgs)
  var result MetaServiceRunAdminJobResult
  if retval, err := p.handler.RunAdminJob(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing runAdminJob: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddZone struct {
  handler MetaService
}

func (p *metaServiceProcessorAddZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddZoneArgs)
  var result MetaServiceAddZoneResult
  if retval, err := p.handler.AddZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDropZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropZoneArgs)
  var result MetaServiceDropZoneResult
  if retval, err := p.handler.DropZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddHostIntoZone struct {
  handler MetaService
}

func (p *metaServiceProcessorAddHostIntoZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddHostIntoZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddHostIntoZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addHostIntoZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddHostIntoZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddHostIntoZoneArgs)
  var result MetaServiceAddHostIntoZoneResult
  if retval, err := p.handler.AddHostIntoZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHostIntoZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropHostFromZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDropHostFromZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropHostFromZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropHostFromZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropHostFromZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropHostFromZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropHostFromZoneArgs)
  var result MetaServiceDropHostFromZoneResult
  if retval, err := p.handler.DropHostFromZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropHostFromZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetZone struct {
  handler MetaService
}

func (p *metaServiceProcessorGetZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetZone) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetZoneArgs)
  var result MetaServiceGetZoneResult
  if retval, err := p.handler.GetZone(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListZones struct {
  handler MetaService
}

func (p *metaServiceProcessorListZones) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListZonesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListZones) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listZones", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListZones) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListZonesArgs)
  var result MetaServiceListZonesResult
  if retval, err := p.handler.ListZones(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listZones: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorAddGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddGroup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddGroupArgs)
  var result MetaServiceAddGroupResult
  if retval, err := p.handler.AddGroup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorDropGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropGroup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropGroupArgs)
  var result MetaServiceDropGroupResult
  if retval, err := p.handler.DropGroup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddZoneIntoGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorAddZoneIntoGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddZoneIntoGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddZoneIntoGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addZoneIntoGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddZoneIntoGroup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddZoneIntoGroupArgs)
  var result MetaServiceAddZoneIntoGroupResult
  if retval, err := p.handler.AddZoneIntoGroup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addZoneIntoGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropZoneFromGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorDropZoneFromGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropZoneFromGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropZoneFromGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropZoneFromGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropZoneFromGroup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropZoneFromGroupArgs)
  var result MetaServiceDropZoneFromGroupResult
  if retval, err := p.handler.DropZoneFromGroup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZoneFromGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorGetGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetGroup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetGroupArgs)
  var result MetaServiceGetGroupResult
  if retval, err := p.handler.GetGroup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListGroups struct {
  handler MetaService
}

func (p *metaServiceProcessorListGroups) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListGroupsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListGroups) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listGroups", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListGroups) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListGroupsArgs)
  var result MetaServiceListGroupsResult
  if retval, err := p.handler.ListGroups(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listGroups: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateBackup struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateBackup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateBackupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateBackup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createBackup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateBackup) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateBackupArgs)
  var result MetaServiceCreateBackupResult
  if retval, err := p.handler.CreateBackup(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createBackup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRestoreMeta struct {
  handler MetaService
}

func (p *metaServiceProcessorRestoreMeta) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRestoreMetaArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRestoreMeta) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("restoreMeta", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRestoreMeta) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRestoreMetaArgs)
  var result MetaServiceRestoreMetaResult
  if retval, err := p.handler.RestoreMeta(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restoreMeta: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddListener struct {
  handler MetaService
}

func (p *metaServiceProcessorAddListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddListenerArgs)
  var result MetaServiceAddListenerResult
  if retval, err := p.handler.AddListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveListener struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveListenerArgs)
  var result MetaServiceRemoveListenerResult
  if retval, err := p.handler.RemoveListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListListener struct {
  handler MetaService
}

func (p *metaServiceProcessorListListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListListener) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListListenerArgs)
  var result MetaServiceListListenerResult
  if retval, err := p.handler.ListListener(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetStatis struct {
  handler MetaService
}

func (p *metaServiceProcessorGetStatis) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetStatisArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetStatis) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getStatis", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetStatis) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetStatisArgs)
  var result MetaServiceGetStatisResult
  if retval, err := p.handler.GetStatis(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatis: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignInFTService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignInFTService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignInFTServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignInFTService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signInFTService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignInFTService) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignInFTServiceArgs)
  var result MetaServiceSignInFTServiceResult
  if retval, err := p.handler.SignInFTService(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signInFTService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignOutFTService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignOutFTService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignOutFTServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignOutFTService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signOutFTService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignOutFTService) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignOutFTServiceArgs)
  var result MetaServiceSignOutFTServiceResult
  if retval, err := p.handler.SignOutFTService(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signOutFTService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListFTClients struct {
  handler MetaService
}

func (p *metaServiceProcessorListFTClients) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListFTClientsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListFTClients) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listFTClients", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListFTClients) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListFTClientsArgs)
  var result MetaServiceListFTClientsResult
  if retval, err := p.handler.ListFTClients(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listFTClients: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSession struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSessionArgs)
  var result MetaServiceCreateSessionResult
  if retval, err := p.handler.CreateSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorUpdateSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorUpdateSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceUpdateSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorUpdateSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("updateSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorUpdateSessions) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceUpdateSessionsArgs)
  var result MetaServiceUpdateSessionsResult
  if retval, err := p.handler.UpdateSessions(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorListSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSessions) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSessionsArgs)
  var result MetaServiceListSessionsResult
  if retval, err := p.handler.ListSessions(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSession struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSessionArgs)
  var result MetaServiceGetSessionResult
  if retval, err := p.handler.GetSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveSession struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveSession) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveSessionArgs)
  var result MetaServiceRemoveSessionResult
  if retval, err := p.handler.RemoveSession(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorReportTaskFinish struct {
  handler MetaService
}

func (p *metaServiceProcessorReportTaskFinish) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceReportTaskFinishArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorReportTaskFinish) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("reportTaskFinish", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorReportTaskFinish) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceReportTaskFinishArgs)
  var result MetaServiceReportTaskFinishResult
  if retval, err := p.handler.ReportTaskFinish(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskFinish: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type MetaServiceCreateSpaceArgs struct {
  thrift.IRequest
  Req *CreateSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceArgs() *MetaServiceCreateSpaceArgs {
  return &MetaServiceCreateSpaceArgs{
    Req: NewCreateSpaceReq(),
  }
}

var MetaServiceCreateSpaceArgs_Req_DEFAULT *CreateSpaceReq
func (p *MetaServiceCreateSpaceArgs) GetReq() *CreateSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceResult() *MetaServiceCreateSpaceResult {
  return &MetaServiceCreateSpaceResult{}
}

var MetaServiceCreateSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropSpaceArgs struct {
  thrift.IRequest
  Req *DropSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSpaceArgs() *MetaServiceDropSpaceArgs {
  return &MetaServiceDropSpaceArgs{
    Req: NewDropSpaceReq(),
  }
}

var MetaServiceDropSpaceArgs_Req_DEFAULT *DropSpaceReq
func (p *MetaServiceDropSpaceArgs) GetReq() *DropSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceDropSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropSpaceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSpaceResult() *MetaServiceDropSpaceResult {
  return &MetaServiceDropSpaceResult{}
}

var MetaServiceDropSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetSpaceArgs struct {
  thrift.IRequest
  Req *GetSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSpaceArgs() *MetaServiceGetSpaceArgs {
  return &MetaServiceGetSpaceArgs{
    Req: NewGetSpaceReq(),
  }
}

var MetaServiceGetSpaceArgs_Req_DEFAULT *GetSpaceReq
func (p *MetaServiceGetSpaceArgs) GetReq() *GetSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceGetSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSpaceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetSpaceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetSpaceResult struct {
  thrift.IResponse
  Success *GetSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSpaceResult() *MetaServiceGetSpaceResult {
  return &MetaServiceGetSpaceResult{}
}

var MetaServiceGetSpaceResult_Success_DEFAULT *GetSpaceResp
func (p *MetaServiceGetSpaceResult) GetSuccess() *GetSpaceResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSpaceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSpaceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetSpaceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSpacesArgs struct {
  thrift.IRequest
  Req *ListSpacesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSpacesArgs() *MetaServiceListSpacesArgs {
  return &MetaServiceListSpacesArgs{
    Req: NewListSpacesReq(),
  }
}

var MetaServiceListSpacesArgs_Req_DEFAULT *ListSpacesReq
func (p *MetaServiceListSpacesArgs) GetReq() *ListSpacesReq {
  if !p.IsSetReq() {
    return MetaServiceListSpacesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSpacesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListSpacesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSpacesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSpacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSpacesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSpacesResult struct {
  thrift.IResponse
  Success *ListSpacesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSpacesResult() *MetaServiceListSpacesResult {
  return &MetaServiceListSpacesResult{}
}

var MetaServiceListSpacesResult_Success_DEFAULT *ListSpacesResp
func (p *MetaServiceListSpacesResult) GetSuccess() *ListSpacesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSpacesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSpacesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListSpacesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSpacesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSpacesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSpacesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateTagArgs struct {
  thrift.IRequest
  Req *CreateTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagArgs() *MetaServiceCreateTagArgs {
  return &MetaServiceCreateTagArgs{
    Req: NewCreateTagReq(),
  }
}

var MetaServiceCreateTagArgs_Req_DEFAULT *CreateTagReq
func (p *MetaServiceCreateTagArgs) GetReq() *CreateTagReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagResult() *MetaServiceCreateTagResult {
  return &MetaServiceCreateTagResult{}
}

var MetaServiceCreateTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterTagArgs struct {
  thrift.IRequest
  Req *AlterTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterTagArgs() *MetaServiceAlterTagArgs {
  return &MetaServiceAlterTagArgs{
    Req: NewAlterTagReq(),
  }
}

var MetaServiceAlterTagArgs_Req_DEFAULT *AlterTagReq
func (p *MetaServiceAlterTagArgs) GetReq() *AlterTagReq {
  if !p.IsSetReq() {
    return MetaServiceAlterTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAlterTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterTagResult() *MetaServiceAlterTagResult {
  return &MetaServiceAlterTagResult{}
}

var MetaServiceAlterTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAlterTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropTagArgs struct {
  thrift.IRequest
  Req *DropTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagArgs() *MetaServiceDropTagArgs {
  return &MetaServiceDropTagArgs{
    Req: NewDropTagReq(),
  }
}

var MetaServiceDropTagArgs_Req_DEFAULT *DropTagReq
func (p *MetaServiceDropTagArgs) GetReq() *DropTagReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropTagResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagResult() *MetaServiceDropTagResult {
  return &MetaServiceDropTagResult{}
}

var MetaServiceDropTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetTagArgs struct {
  thrift.IRequest
  Req *GetTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagArgs() *MetaServiceGetTagArgs {
  return &MetaServiceGetTagArgs{
    Req: NewGetTagReq(),
  }
}

var MetaServiceGetTagArgs_Req_DEFAULT *GetTagReq
func (p *MetaServiceGetTagArgs) GetReq() *GetTagReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetTagArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetTagResult struct {
  thrift.IResponse
  Success *GetTagResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagResult() *MetaServiceGetTagResult {
  return &MetaServiceGetTagResult{}
}

var MetaServiceGetTagResult_Success_DEFAULT *GetTagResp
func (p *MetaServiceGetTagResult) GetSuccess() *GetTagResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetTagResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagsArgs struct {
  thrift.IRequest
  Req *ListTagsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagsArgs() *MetaServiceListTagsArgs {
  return &MetaServiceListTagsArgs{
    Req: NewListTagsReq(),
  }
}

var MetaServiceListTagsArgs_Req_DEFAULT *ListTagsReq
func (p *MetaServiceListTagsArgs) GetReq() *ListTagsReq {
  if !p.IsSetReq() {
    return MetaServiceListTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListTagsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagsResult struct {
  thrift.IResponse
  Success *ListTagsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagsResult() *MetaServiceListTagsResult {
  return &MetaServiceListTagsResult{}
}

var MetaServiceListTagsResult_Success_DEFAULT *ListTagsResp
func (p *MetaServiceListTagsResult) GetSuccess() *ListTagsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListTagsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeArgs struct {
  thrift.IRequest
  Req *CreateEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeArgs() *MetaServiceCreateEdgeArgs {
  return &MetaServiceCreateEdgeArgs{
    Req: NewCreateEdgeReq(),
  }
}

var MetaServiceCreateEdgeArgs_Req_DEFAULT *CreateEdgeReq
func (p *MetaServiceCreateEdgeArgs) GetReq() *CreateEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeResult() *MetaServiceCreateEdgeResult {
  return &MetaServiceCreateEdgeResult{}
}

var MetaServiceCreateEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterEdgeArgs struct {
  thrift.IRequest
  Req *AlterEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterEdgeArgs() *MetaServiceAlterEdgeArgs {
  return &MetaServiceAlterEdgeArgs{
    Req: NewAlterEdgeReq(),
  }
}

var MetaServiceAlterEdgeArgs_Req_DEFAULT *AlterEdgeReq
func (p *MetaServiceAlterEdgeArgs) GetReq() *AlterEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceAlterEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAlterEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterEdgeResult() *MetaServiceAlterEdgeResult {
  return &MetaServiceAlterEdgeResult{}
}

var MetaServiceAlterEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAlterEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeArgs struct {
  thrift.IRequest
  Req *DropEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeArgs() *MetaServiceDropEdgeArgs {
  return &MetaServiceDropEdgeArgs{
    Req: NewDropEdgeReq(),
  }
}

var MetaServiceDropEdgeArgs_Req_DEFAULT *DropEdgeReq
func (p *MetaServiceDropEdgeArgs) GetReq() *DropEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeResult() *MetaServiceDropEdgeResult {
  return &MetaServiceDropEdgeResult{}
}

var MetaServiceDropEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeArgs struct {
  thrift.IRequest
  Req *GetEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeArgs() *MetaServiceGetEdgeArgs {
  return &MetaServiceGetEdgeArgs{
    Req: NewGetEdgeReq(),
  }
}

var MetaServiceGetEdgeArgs_Req_DEFAULT *GetEdgeReq
func (p *MetaServiceGetEdgeArgs) GetReq() *GetEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeResult struct {
  thrift.IResponse
  Success *GetEdgeResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeResult() *MetaServiceGetEdgeResult {
  return &MetaServiceGetEdgeResult{}
}

var MetaServiceGetEdgeResult_Success_DEFAULT *GetEdgeResp
func (p *MetaServiceGetEdgeResult) GetSuccess() *GetEdgeResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgesArgs struct {
  thrift.IRequest
  Req *ListEdgesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgesArgs() *MetaServiceListEdgesArgs {
  return &MetaServiceListEdgesArgs{
    Req: NewListEdgesReq(),
  }
}

var MetaServiceListEdgesArgs_Req_DEFAULT *ListEdgesReq
func (p *MetaServiceListEdgesArgs) GetReq() *ListEdgesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgesResult struct {
  thrift.IResponse
  Success *ListEdgesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgesResult() *MetaServiceListEdgesResult {
  return &MetaServiceListEdgesResult{}
}

var MetaServiceListEdgesResult_Success_DEFAULT *ListEdgesResp
func (p *MetaServiceListEdgesResult) GetSuccess() *ListEdgesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListHostsArgs struct {
  thrift.IRequest
  Req *ListHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListHostsArgs() *MetaServiceListHostsArgs {
  return &MetaServiceListHostsArgs{
    Req: NewListHostsReq(),
  }
}

var MetaServiceListHostsArgs_Req_DEFAULT *ListHostsReq
func (p *MetaServiceListHostsArgs) GetReq() *ListHostsReq {
  if !p.IsSetReq() {
    return MetaServiceListHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListHostsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListHostsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListHostsResult struct {
  thrift.IResponse
  Success *ListHostsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListHostsResult() *MetaServiceListHostsResult {
  return &MetaServiceListHostsResult{}
}

var MetaServiceListHostsResult_Success_DEFAULT *ListHostsResp
func (p *MetaServiceListHostsResult) GetSuccess() *ListHostsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListHostsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListHostsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListHostsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetPartsAllocArgs struct {
  thrift.IRequest
  Req *GetPartsAllocReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetPartsAllocArgs() *MetaServiceGetPartsAllocArgs {
  return &MetaServiceGetPartsAllocArgs{
    Req: NewGetPartsAllocReq(),
  }
}

var MetaServiceGetPartsAllocArgs_Req_DEFAULT *GetPartsAllocReq
func (p *MetaServiceGetPartsAllocArgs) GetReq() *GetPartsAllocReq {
  if !p.IsSetReq() {
    return MetaServiceGetPartsAllocArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetPartsAllocArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetPartsAllocArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetPartsAllocReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetPartsAllocArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetPartsAllocResult struct {
  thrift.IResponse
  Success *GetPartsAllocResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetPartsAllocResult() *MetaServiceGetPartsAllocResult {
  return &MetaServiceGetPartsAllocResult{}
}

var MetaServiceGetPartsAllocResult_Success_DEFAULT *GetPartsAllocResp
func (p *MetaServiceGetPartsAllocResult) GetSuccess() *GetPartsAllocResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetPartsAllocResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetPartsAllocResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetPartsAllocResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetPartsAllocResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetPartsAllocResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListPartsArgs struct {
  thrift.IRequest
  Req *ListPartsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListPartsArgs() *MetaServiceListPartsArgs {
  return &MetaServiceListPartsArgs{
    Req: NewListPartsReq(),
  }
}

var MetaServiceListPartsArgs_Req_DEFAULT *ListPartsReq
func (p *MetaServiceListPartsArgs) GetReq() *ListPartsReq {
  if !p.IsSetReq() {
    return MetaServiceListPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListPartsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListPartsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListPartsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListPartsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListPartsResult struct {
  thrift.IResponse
  Success *ListPartsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListPartsResult() *MetaServiceListPartsResult {
  return &MetaServiceListPartsResult{}
}

var MetaServiceListPartsResult_Success_DEFAULT *ListPartsResp
func (p *MetaServiceListPartsResult) GetSuccess() *ListPartsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListPartsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListPartsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListPartsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListPartsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceMultiPutArgs struct {
  thrift.IRequest
  Req *MultiPutReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiPutArgs() *MetaServiceMultiPutArgs {
  return &MetaServiceMultiPutArgs{
    Req: NewMultiPutReq(),
  }
}

var MetaServiceMultiPutArgs_Req_DEFAULT *MultiPutReq
func (p *MetaServiceMultiPutArgs) GetReq() *MultiPutReq {
  if !p.IsSetReq() {
    return MetaServiceMultiPutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiPutArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceMultiPutArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiPutReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceMultiPutArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceMultiPutResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiPutResult() *MetaServiceMultiPutResult {
  return &MetaServiceMultiPutResult{}
}

var MetaServiceMultiPutResult_Success_DEFAULT *ExecResp
func (p *MetaServiceMultiPutResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiPutResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceMultiPutResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceMultiPutResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetArgs struct {
  thrift.IRequest
  Req *GetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetArgs() *MetaServiceGetArgs {
  return &MetaServiceGetArgs{
    Req: NewGetReq(),
  }
}

var MetaServiceGetArgs_Req_DEFAULT *GetReq
func (p *MetaServiceGetArgs) GetReq() *GetReq {
  if !p.IsSetReq() {
    return MetaServiceGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetResult struct {
  thrift.IResponse
  Success *GetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetResult() *MetaServiceGetResult {
  return &MetaServiceGetResult{}
}

var MetaServiceGetResult_Success_DEFAULT *GetResp
func (p *MetaServiceGetResult) GetSuccess() *GetResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceMultiGetArgs struct {
  thrift.IRequest
  Req *MultiGetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiGetArgs() *MetaServiceMultiGetArgs {
  return &MetaServiceMultiGetArgs{
    Req: NewMultiGetReq(),
  }
}

var MetaServiceMultiGetArgs_Req_DEFAULT *MultiGetReq
func (p *MetaServiceMultiGetArgs) GetReq() *MultiGetReq {
  if !p.IsSetReq() {
    return MetaServiceMultiGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiGetArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceMultiGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceMultiGetArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceMultiGetResult struct {
  thrift.IResponse
  Success *MultiGetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiGetResult() *MetaServiceMultiGetResult {
  return &MetaServiceMultiGetResult{}
}

var MetaServiceMultiGetResult_Success_DEFAULT *MultiGetResp
func (p *MetaServiceMultiGetResult) GetSuccess() *MultiGetResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiGetResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceMultiGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewMultiGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiGetResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceMultiGetResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveArgs struct {
  thrift.IRequest
  Req *RemoveReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveArgs() *MetaServiceRemoveArgs {
  return &MetaServiceRemoveArgs{
    Req: NewRemoveReq(),
  }
}

var MetaServiceRemoveArgs_Req_DEFAULT *RemoveReq
func (p *MetaServiceRemoveArgs) GetReq() *RemoveReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRemoveArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveResult() *MetaServiceRemoveResult {
  return &MetaServiceRemoveResult{}
}

var MetaServiceRemoveResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRemoveResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveRangeArgs struct {
  thrift.IRequest
  Req *RemoveRangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveRangeArgs() *MetaServiceRemoveRangeArgs {
  return &MetaServiceRemoveRangeArgs{
    Req: NewRemoveRangeReq(),
  }
}

var MetaServiceRemoveRangeArgs_Req_DEFAULT *RemoveRangeReq
func (p *MetaServiceRemoveRangeArgs) GetReq() *RemoveRangeReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveRangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveRangeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRemoveRangeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveRangeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveRangeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveRangeResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveRangeResult() *MetaServiceRemoveRangeResult {
  return &MetaServiceRemoveRangeResult{}
}

var MetaServiceRemoveRangeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveRangeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveRangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveRangeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRemoveRangeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveRangeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceScanArgs struct {
  thrift.IRequest
  Req *ScanReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceScanArgs() *MetaServiceScanArgs {
  return &MetaServiceScanArgs{
    Req: NewScanReq(),
  }
}

var MetaServiceScanArgs_Req_DEFAULT *ScanReq
func (p *MetaServiceScanArgs) GetReq() *ScanReq {
  if !p.IsSetReq() {
    return MetaServiceScanArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceScanArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceScanArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewScanReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceScanArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceScanArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceScanArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceScanResult struct {
  thrift.IResponse
  Success *ScanResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceScanResult() *MetaServiceScanResult {
  return &MetaServiceScanResult{}
}

var MetaServiceScanResult_Success_DEFAULT *ScanResp
func (p *MetaServiceScanResult) GetSuccess() *ScanResp {
  if !p.IsSetSuccess() {
    return MetaServiceScanResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceScanResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceScanResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewScanResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceScanResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceScanResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceScanResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateTagIndexArgs struct {
  thrift.IRequest
  Req *CreateTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagIndexArgs() *MetaServiceCreateTagIndexArgs {
  return &MetaServiceCreateTagIndexArgs{
    Req: NewCreateTagIndexReq(),
  }
}

var MetaServiceCreateTagIndexArgs_Req_DEFAULT *CreateTagIndexReq
func (p *MetaServiceCreateTagIndexArgs) GetReq() *CreateTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagIndexResult() *MetaServiceCreateTagIndexResult {
  return &MetaServiceCreateTagIndexResult{}
}

var MetaServiceCreateTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropTagIndexArgs struct {
  thrift.IRequest
  Req *DropTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagIndexArgs() *MetaServiceDropTagIndexArgs {
  return &MetaServiceDropTagIndexArgs{
    Req: NewDropTagIndexReq(),
  }
}

var MetaServiceDropTagIndexArgs_Req_DEFAULT *DropTagIndexReq
func (p *MetaServiceDropTagIndexArgs) GetReq() *DropTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagIndexResult() *MetaServiceDropTagIndexResult {
  return &MetaServiceDropTagIndexResult{}
}

var MetaServiceDropTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetTagIndexArgs struct {
  thrift.IRequest
  Req *GetTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagIndexArgs() *MetaServiceGetTagIndexArgs {
  return &MetaServiceGetTagIndexArgs{
    Req: NewGetTagIndexReq(),
  }
}

var MetaServiceGetTagIndexArgs_Req_DEFAULT *GetTagIndexReq
func (p *MetaServiceGetTagIndexArgs) GetReq() *GetTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetTagIndexResult struct {
  thrift.IResponse
  Success *GetTagIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagIndexResult() *MetaServiceGetTagIndexResult {
  return &MetaServiceGetTagIndexResult{}
}

var MetaServiceGetTagIndexResult_Success_DEFAULT *GetTagIndexResp
func (p *MetaServiceGetTagIndexResult) GetSuccess() *GetTagIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexesArgs struct {
  thrift.IRequest
  Req *ListTagIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexesArgs() *MetaServiceListTagIndexesArgs {
  return &MetaServiceListTagIndexesArgs{
    Req: NewListTagIndexesReq(),
  }
}

var MetaServiceListTagIndexesArgs_Req_DEFAULT *ListTagIndexesReq
func (p *MetaServiceListTagIndexesArgs) GetReq() *ListTagIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListTagIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagIndexesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexesResult struct {
  thrift.IResponse
  Success *ListTagIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexesResult() *MetaServiceListTagIndexesResult {
  return &MetaServiceListTagIndexesResult{}
}

var MetaServiceListTagIndexesResult_Success_DEFAULT *ListTagIndexesResp
func (p *MetaServiceListTagIndexesResult) GetSuccess() *ListTagIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListTagIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagIndexesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRebuildTagIndexArgs struct {
  thrift.IRequest
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildTagIndexArgs() *MetaServiceRebuildTagIndexArgs {
  return &MetaServiceRebuildTagIndexArgs{
    Req: NewRebuildIndexReq(),
  }
}

var MetaServiceRebuildTagIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildTagIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildTagIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRebuildTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRebuildTagIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildTagIndexResult() *MetaServiceRebuildTagIndexResult {
  return &MetaServiceRebuildTagIndexResult{}
}

var MetaServiceRebuildTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildTagIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRebuildTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexStatusArgs struct {
  thrift.IRequest
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexStatusArgs() *MetaServiceListTagIndexStatusArgs {
  return &MetaServiceListTagIndexStatusArgs{
    Req: NewListIndexStatusReq(),
  }
}

var MetaServiceListTagIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListTagIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexStatusArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListTagIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexStatusResult struct {
  thrift.IResponse
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexStatusResult() *MetaServiceListTagIndexStatusResult {
  return &MetaServiceListTagIndexStatusResult{}
}

var MetaServiceListTagIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListTagIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexStatusResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListTagIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeIndexArgs struct {
  thrift.IRequest
  Req *CreateEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeIndexArgs() *MetaServiceCreateEdgeIndexArgs {
  return &MetaServiceCreateEdgeIndexArgs{
    Req: NewCreateEdgeIndexReq(),
  }
}

var MetaServiceCreateEdgeIndexArgs_Req_DEFAULT *CreateEdgeIndexReq
func (p *MetaServiceCreateEdgeIndexArgs) GetReq() *CreateEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeIndexResult() *MetaServiceCreateEdgeIndexResult {
  return &MetaServiceCreateEdgeIndexResult{}
}

var MetaServiceCreateEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeIndexArgs struct {
  thrift.IRequest
  Req *DropEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeIndexArgs() *MetaServiceDropEdgeIndexArgs {
  return &MetaServiceDropEdgeIndexArgs{
    Req: NewDropEdgeIndexReq(),
  }
}

var MetaServiceDropEdgeIndexArgs_Req_DEFAULT *DropEdgeIndexReq
func (p *MetaServiceDropEdgeIndexArgs) GetReq() *DropEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeIndexResult() *MetaServiceDropEdgeIndexResult {
  return &MetaServiceDropEdgeIndexResult{}
}

var MetaServiceDropEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeIndexArgs struct {
  thrift.IRequest
  Req *GetEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeIndexArgs() *MetaServiceGetEdgeIndexArgs {
  return &MetaServiceGetEdgeIndexArgs{
    Req: NewGetEdgeIndexReq(),
  }
}

var MetaServiceGetEdgeIndexArgs_Req_DEFAULT *GetEdgeIndexReq
func (p *MetaServiceGetEdgeIndexArgs) GetReq() *GetEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeIndexResult struct {
  thrift.IResponse
  Success *GetEdgeIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeIndexResult() *MetaServiceGetEdgeIndexResult {
  return &MetaServiceGetEdgeIndexResult{}
}

var MetaServiceGetEdgeIndexResult_Success_DEFAULT *GetEdgeIndexResp
func (p *MetaServiceGetEdgeIndexResult) GetSuccess() *GetEdgeIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexesArgs struct {
  thrift.IRequest
  Req *ListEdgeIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexesArgs() *MetaServiceListEdgeIndexesArgs {
  return &MetaServiceListEdgeIndexesArgs{
    Req: NewListEdgeIndexesReq(),
  }
}

var MetaServiceListEdgeIndexesArgs_Req_DEFAULT *ListEdgeIndexesReq
func (p *MetaServiceListEdgeIndexesArgs) GetReq() *ListEdgeIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListEdgeIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgeIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexesResult struct {
  thrift.IResponse
  Success *ListEdgeIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexesResult() *MetaServiceListEdgeIndexesResult {
  return &MetaServiceListEdgeIndexesResult{}
}

var MetaServiceListEdgeIndexesResult_Success_DEFAULT *ListEdgeIndexesResp
func (p *MetaServiceListEdgeIndexesResult) GetSuccess() *ListEdgeIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListEdgeIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgeIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRebuildEdgeIndexArgs struct {
  thrift.IRequest
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildEdgeIndexArgs() *MetaServiceRebuildEdgeIndexArgs {
  return &MetaServiceRebuildEdgeIndexArgs{
    Req: NewRebuildIndexReq(),
  }
}

var MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildEdgeIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildEdgeIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRebuildEdgeIndexResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildEdgeIndexResult() *MetaServiceRebuildEdgeIndexResult {
  return &MetaServiceRebuildEdgeIndexResult{}
}

var MetaServiceRebuildEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildEdgeIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexStatusArgs struct {
  thrift.IRequest
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexStatusArgs() *MetaServiceListEdgeIndexStatusArgs {
  return &MetaServiceListEdgeIndexStatusArgs{
    Req: NewListIndexStatusReq(),
  }
}

var MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListEdgeIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexStatusArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexStatusResult struct {
  thrift.IResponse
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexStatusResult() *MetaServiceListEdgeIndexStatusResult {
  return &MetaServiceListEdgeIndexStatusResult{}
}

var MetaServiceListEdgeIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListEdgeIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexStatusResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateUserArgs struct {
  thrift.IRequest
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateUserArgs() *MetaServiceCreateUserArgs {
  return &MetaServiceCreateUserArgs{
    Req: NewCreateUserReq(),
  }
}

var MetaServiceCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *MetaServiceCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return MetaServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateUserResult() *MetaServiceCreateUserResult {
  return &MetaServiceCreateUserResult{}
}

var MetaServiceCreateUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropUserArgs struct {
  thrift.IRequest
  Req *DropUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropUserArgs() *MetaServiceDropUserArgs {
  return &MetaServiceDropUserArgs{
    Req: NewDropUserReq(),
  }
}

var MetaServiceDropUserArgs_Req_DEFAULT *DropUserReq
func (p *MetaServiceDropUserArgs) GetReq() *DropUserReq {
  if !p.IsSetReq() {
    return MetaServiceDropUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropUserResult() *MetaServiceDropUserResult {
  return &MetaServiceDropUserResult{}
}

var MetaServiceDropUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAlterUserArgs struct {
  thrift.IRequest
  Req *AlterUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterUserArgs() *MetaServiceAlterUserArgs {
  return &MetaServiceAlterUserArgs{
    Req: NewAlterUserReq(),
  }
}

var MetaServiceAlterUserArgs_Req_DEFAULT *AlterUserReq
func (p *MetaServiceAlterUserArgs) GetReq() *AlterUserReq {
  if !p.IsSetReq() {
    return MetaServiceAlterUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterUserArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAlterUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAlterUserArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAlterUserResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterUserResult() *MetaServiceAlterUserResult {
  return &MetaServiceAlterUserResult{}
}

var MetaServiceAlterUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterUserResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAlterUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAlterUserResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGrantRoleArgs struct {
  thrift.IRequest
  Req *GrantRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGrantRoleArgs() *MetaServiceGrantRoleArgs {
  return &MetaServiceGrantRoleArgs{
    Req: NewGrantRoleReq(),
  }
}

var MetaServiceGrantRoleArgs_Req_DEFAULT *GrantRoleReq
func (p *MetaServiceGrantRoleArgs) GetReq() *GrantRoleReq {
  if !p.IsSetReq() {
    return MetaServiceGrantRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGrantRoleArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGrantRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGrantRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGrantRoleArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGrantRoleResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGrantRoleResult() *MetaServiceGrantRoleResult {
  return &MetaServiceGrantRoleResult{}
}

var MetaServiceGrantRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceGrantRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceGrantRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGrantRoleResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGrantRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGrantRoleResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRevokeRoleArgs struct {
  thrift.IRequest
  Req *RevokeRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRevokeRoleArgs() *MetaServiceRevokeRoleArgs {
  return &MetaServiceRevokeRoleArgs{
    Req: NewRevokeRoleReq(),
  }
}

var MetaServiceRevokeRoleArgs_Req_DEFAULT *RevokeRoleReq
func (p *MetaServiceRevokeRoleArgs) GetReq() *RevokeRoleReq {
  if !p.IsSetReq() {
    return MetaServiceRevokeRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRevokeRoleArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRevokeRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRevokeRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRevokeRoleArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRevokeRoleResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRevokeRoleResult() *MetaServiceRevokeRoleResult {
  return &MetaServiceRevokeRoleResult{}
}

var MetaServiceRevokeRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRevokeRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRevokeRoleResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRevokeRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRevokeRoleResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListUsersArgs struct {
  thrift.IRequest
  Req *ListUsersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListUsersArgs() *MetaServiceListUsersArgs {
  return &MetaServiceListUsersArgs{
    Req: NewListUsersReq(),
  }
}

var MetaServiceListUsersArgs_Req_DEFAULT *ListUsersReq
func (p *MetaServiceListUsersArgs) GetReq() *ListUsersReq {
  if !p.IsSetReq() {
    return MetaServiceListUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListUsersArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListUsersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListUsersReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListUsersArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListUsersResult struct {
  thrift.IResponse
  Success *ListUsersResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListUsersResult() *MetaServiceListUsersResult {
  return &MetaServiceListUsersResult{}
}

var MetaServiceListUsersResult_Success_DEFAULT *ListUsersResp
func (p *MetaServiceListUsersResult) GetSuccess() *ListUsersResp {
  if !p.IsSetSuccess() {
    return MetaServiceListUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListUsersResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListUsersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListUsersResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListUsersResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListRolesArgs struct {
  thrift.IRequest
  Req *ListRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListRolesArgs() *MetaServiceListRolesArgs {
  return &MetaServiceListRolesArgs{
    Req: NewListRolesReq(),
  }
}

var MetaServiceListRolesArgs_Req_DEFAULT *ListRolesReq
func (p *MetaServiceListRolesArgs) GetReq() *ListRolesReq {
  if !p.IsSetReq() {
    return MetaServiceListRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListRolesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListRolesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListRolesResult struct {
  thrift.IResponse
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListRolesResult() *MetaServiceListRolesResult {
  return &MetaServiceListRolesResult{}
}

var MetaServiceListRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceListRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListRolesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListRolesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetUserRolesArgs struct {
  thrift.IRequest
  Req *GetUserRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetUserRolesArgs() *MetaServiceGetUserRolesArgs {
  return &MetaServiceGetUserRolesArgs{
    Req: NewGetUserRolesReq(),
  }
}

var MetaServiceGetUserRolesArgs_Req_DEFAULT *GetUserRolesReq
func (p *MetaServiceGetUserRolesArgs) GetReq() *GetUserRolesReq {
  if !p.IsSetReq() {
    return MetaServiceGetUserRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetUserRolesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetUserRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetUserRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetUserRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetUserRolesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetUserRolesResult struct {
  thrift.IResponse
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetUserRolesResult() *MetaServiceGetUserRolesResult {
  return &MetaServiceGetUserRolesResult{}
}

var MetaServiceGetUserRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceGetUserRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetUserRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetUserRolesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetUserRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetUserRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetUserRolesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceChangePasswordArgs struct {
  thrift.IRequest
  Req *ChangePasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceChangePasswordArgs() *MetaServiceChangePasswordArgs {
  return &MetaServiceChangePasswordArgs{
    Req: NewChangePasswordReq(),
  }
}

var MetaServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq
func (p *MetaServiceChangePasswordArgs) GetReq() *ChangePasswordReq {
  if !p.IsSetReq() {
    return MetaServiceChangePasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceChangePasswordArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceChangePasswordArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewChangePasswordReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceChangePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceChangePasswordArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceChangePasswordResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceChangePasswordResult() *MetaServiceChangePasswordResult {
  return &MetaServiceChangePasswordResult{}
}

var MetaServiceChangePasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceChangePasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceChangePasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceChangePasswordResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceChangePasswordResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceChangePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceChangePasswordResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceHeartBeatArgs struct {
  thrift.IRequest
  Req *HBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceHeartBeatArgs() *MetaServiceHeartBeatArgs {
  return &MetaServiceHeartBeatArgs{
    Req: NewHBReq(),
  }
}

var MetaServiceHeartBeatArgs_Req_DEFAULT *HBReq
func (p *MetaServiceHeartBeatArgs) GetReq() *HBReq {
  if !p.IsSetReq() {
    return MetaServiceHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceHeartBeatArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceHeartBeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewHBReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceHeartBeatArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceHeartBeatResult struct {
  thrift.IResponse
  Success *HBResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceHeartBeatResult() *MetaServiceHeartBeatResult {
  return &MetaServiceHeartBeatResult{}
}

var MetaServiceHeartBeatResult_Success_DEFAULT *HBResp
func (p *MetaServiceHeartBeatResult) GetSuccess() *HBResp {
  if !p.IsSetSuccess() {
    return MetaServiceHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceHeartBeatResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceHeartBeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHBResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceHeartBeatResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceBalanceArgs struct {
  thrift.IRequest
  Req *BalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceBalanceArgs() *MetaServiceBalanceArgs {
  return &MetaServiceBalanceArgs{
    Req: NewBalanceReq(),
  }
}

var MetaServiceBalanceArgs_Req_DEFAULT *BalanceReq
func (p *MetaServiceBalanceArgs) GetReq() *BalanceReq {
  if !p.IsSetReq() {
    return MetaServiceBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceBalanceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceBalanceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceBalanceResult struct {
  thrift.IResponse
  Success *BalanceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceBalanceResult() *MetaServiceBalanceResult {
  return &MetaServiceBalanceResult{}
}

var MetaServiceBalanceResult_Success_DEFAULT *BalanceResp
func (p *MetaServiceBalanceResult) GetSuccess() *BalanceResp {
  if !p.IsSetSuccess() {
    return MetaServiceBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceBalanceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewBalanceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceBalanceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceLeaderBalanceArgs struct {
  thrift.IRequest
  Req *LeaderBalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceLeaderBalanceArgs() *MetaServiceLeaderBalanceArgs {
  return &MetaServiceLeaderBalanceArgs{
    Req: NewLeaderBalanceReq(),
  }
}

var MetaServiceLeaderBalanceArgs_Req_DEFAULT *LeaderBalanceReq
func (p *MetaServiceLeaderBalanceArgs) GetReq() *LeaderBalanceReq {
  if !p.IsSetReq() {
    return MetaServiceLeaderBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceLeaderBalanceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceLeaderBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewLeaderBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceLeaderBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceLeaderBalanceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceLeaderBalanceResult() *MetaServiceLeaderBalanceResult {
  return &MetaServiceLeaderBalanceResult{}
}

var MetaServiceLeaderBalanceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceLeaderBalanceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceLeaderBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceLeaderBalanceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceLeaderBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceLeaderBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRegConfigArgs struct {
  thrift.IRequest
  Req *RegConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRegConfigArgs() *MetaServiceRegConfigArgs {
  return &MetaServiceRegConfigArgs{
    Req: NewRegConfigReq(),
  }
}

var MetaServiceRegConfigArgs_Req_DEFAULT *RegConfigReq
func (p *MetaServiceRegConfigArgs) GetReq() *RegConfigReq {
  if !p.IsSetReq() {
    return MetaServiceRegConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRegConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRegConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRegConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRegConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRegConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRegConfigResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRegConfigResult() *MetaServiceRegConfigResult {
  return &MetaServiceRegConfigResult{}
}

var MetaServiceRegConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRegConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRegConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRegConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRegConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRegConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRegConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetConfigArgs struct {
  thrift.IRequest
  Req *GetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetConfigArgs() *MetaServiceGetConfigArgs {
  return &MetaServiceGetConfigArgs{
    Req: NewGetConfigReq(),
  }
}

var MetaServiceGetConfigArgs_Req_DEFAULT *GetConfigReq
func (p *MetaServiceGetConfigArgs) GetReq() *GetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceGetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetConfigResult struct {
  thrift.IResponse
  Success *GetConfigResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetConfigResult() *MetaServiceGetConfigResult {
  return &MetaServiceGetConfigResult{}
}

var MetaServiceGetConfigResult_Success_DEFAULT *GetConfigResp
func (p *MetaServiceGetConfigResult) GetSuccess() *GetConfigResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetConfigResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSetConfigArgs struct {
  thrift.IRequest
  Req *SetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSetConfigArgs() *MetaServiceSetConfigArgs {
  return &MetaServiceSetConfigArgs{
    Req: NewSetConfigReq(),
  }
}

var MetaServiceSetConfigArgs_Req_DEFAULT *SetConfigReq
func (p *MetaServiceSetConfigArgs) GetReq() *SetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceSetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSetConfigArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceSetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSetConfigArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSetConfigResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSetConfigResult() *MetaServiceSetConfigResult {
  return &MetaServiceSetConfigResult{}
}

var MetaServiceSetConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSetConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSetConfigResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceSetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSetConfigResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListConfigsArgs struct {
  thrift.IRequest
  Req *ListConfigsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListConfigsArgs() *MetaServiceListConfigsArgs {
  return &MetaServiceListConfigsArgs{
    Req: NewListConfigsReq(),
  }
}

var MetaServiceListConfigsArgs_Req_DEFAULT *ListConfigsReq
func (p *MetaServiceListConfigsArgs) GetReq() *ListConfigsReq {
  if !p.IsSetReq() {
    return MetaServiceListConfigsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListConfigsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListConfigsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListConfigsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListConfigsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListConfigsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListConfigsResult struct {
  thrift.IResponse
  Success *ListConfigsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListConfigsResult() *MetaServiceListConfigsResult {
  return &MetaServiceListConfigsResult{}
}

var MetaServiceListConfigsResult_Success_DEFAULT *ListConfigsResp
func (p *MetaServiceListConfigsResult) GetSuccess() *ListConfigsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListConfigsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListConfigsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListConfigsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListConfigsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListConfigsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListConfigsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateSnapshotArgs struct {
  thrift.IRequest
  Req *CreateSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSnapshotArgs() *MetaServiceCreateSnapshotArgs {
  return &MetaServiceCreateSnapshotArgs{
    Req: NewCreateSnapshotReq(),
  }
}

var MetaServiceCreateSnapshotArgs_Req_DEFAULT *CreateSnapshotReq
func (p *MetaServiceCreateSnapshotArgs) GetReq() *CreateSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSnapshotArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSnapshotResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSnapshotResult() *MetaServiceCreateSnapshotResult {
  return &MetaServiceCreateSnapshotResult{}
}

var MetaServiceCreateSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSnapshotResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropSnapshotArgs struct {
  thrift.IRequest
  Req *DropSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSnapshotArgs() *MetaServiceDropSnapshotArgs {
  return &MetaServiceDropSnapshotArgs{
    Req: NewDropSnapshotReq(),
  }
}

var MetaServiceDropSnapshotArgs_Req_DEFAULT *DropSnapshotReq
func (p *MetaServiceDropSnapshotArgs) GetReq() *DropSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceDropSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSnapshotArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropSnapshotArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropSnapshotResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSnapshotResult() *MetaServiceDropSnapshotResult {
  return &MetaServiceDropSnapshotResult{}
}

var MetaServiceDropSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSnapshotResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropSnapshotResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSnapshotsArgs struct {
  thrift.IRequest
  Req *ListSnapshotsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSnapshotsArgs() *MetaServiceListSnapshotsArgs {
  return &MetaServiceListSnapshotsArgs{
    Req: NewListSnapshotsReq(),
  }
}

var MetaServiceListSnapshotsArgs_Req_DEFAULT *ListSnapshotsReq
func (p *MetaServiceListSnapshotsArgs) GetReq() *ListSnapshotsReq {
  if !p.IsSetReq() {
    return MetaServiceListSnapshotsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSnapshotsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListSnapshotsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSnapshotsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSnapshotsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSnapshotsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSnapshotsResult struct {
  thrift.IResponse
  Success *ListSnapshotsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSnapshotsResult() *MetaServiceListSnapshotsResult {
  return &MetaServiceListSnapshotsResult{}
}

var MetaServiceListSnapshotsResult_Success_DEFAULT *ListSnapshotsResp
func (p *MetaServiceListSnapshotsResult) GetSuccess() *ListSnapshotsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSnapshotsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSnapshotsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListSnapshotsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSnapshotsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSnapshotsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSnapshotsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRunAdminJobArgs struct {
  thrift.IRequest
  Req *AdminJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRunAdminJobArgs() *MetaServiceRunAdminJobArgs {
  return &MetaServiceRunAdminJobArgs{
    Req: NewAdminJobReq(),
  }
}

var MetaServiceRunAdminJobArgs_Req_DEFAULT *AdminJobReq
func (p *MetaServiceRunAdminJobArgs) GetReq() *AdminJobReq {
  if !p.IsSetReq() {
    return MetaServiceRunAdminJobArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRunAdminJobArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRunAdminJobArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAdminJobReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRunAdminJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRunAdminJobArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRunAdminJobResult struct {
  thrift.IResponse
  Success *AdminJobResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRunAdminJobResult() *MetaServiceRunAdminJobResult {
  return &MetaServiceRunAdminJobResult{}
}

var MetaServiceRunAdminJobResult_Success_DEFAULT *AdminJobResp
func (p *MetaServiceRunAdminJobResult) GetSuccess() *AdminJobResp {
  if !p.IsSetSuccess() {
    return MetaServiceRunAdminJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRunAdminJobResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRunAdminJobResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminJobResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRunAdminJobResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRunAdminJobResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddZoneArgs struct {
  thrift.IRequest
  Req *AddZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddZoneArgs() *MetaServiceAddZoneArgs {
  return &MetaServiceAddZoneArgs{
    Req: NewAddZoneReq(),
  }
}

var MetaServiceAddZoneArgs_Req_DEFAULT *AddZoneReq
func (p *MetaServiceAddZoneArgs) GetReq() *AddZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAddZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddZoneResult() *MetaServiceAddZoneResult {
  return &MetaServiceAddZoneResult{}
}

var MetaServiceAddZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAddZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropZoneArgs struct {
  thrift.IRequest
  Req *DropZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneArgs() *MetaServiceDropZoneArgs {
  return &MetaServiceDropZoneArgs{
    Req: NewDropZoneReq(),
  }
}

var MetaServiceDropZoneArgs_Req_DEFAULT *DropZoneReq
func (p *MetaServiceDropZoneArgs) GetReq() *DropZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneResult() *MetaServiceDropZoneResult {
  return &MetaServiceDropZoneResult{}
}

var MetaServiceDropZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddHostIntoZoneArgs struct {
  thrift.IRequest
  Req *AddHostIntoZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostIntoZoneArgs() *MetaServiceAddHostIntoZoneArgs {
  return &MetaServiceAddHostIntoZoneArgs{
    Req: NewAddHostIntoZoneReq(),
  }
}

var MetaServiceAddHostIntoZoneArgs_Req_DEFAULT *AddHostIntoZoneReq
func (p *MetaServiceAddHostIntoZoneArgs) GetReq() *AddHostIntoZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostIntoZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostIntoZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAddHostIntoZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddHostIntoZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostIntoZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostIntoZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddHostIntoZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddHostIntoZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostIntoZoneResult() *MetaServiceAddHostIntoZoneResult {
  return &MetaServiceAddHostIntoZoneResult{}
}

var MetaServiceAddHostIntoZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostIntoZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostIntoZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostIntoZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAddHostIntoZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostIntoZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostIntoZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddHostIntoZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropHostFromZoneArgs struct {
  thrift.IRequest
  Req *DropHostFromZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropHostFromZoneArgs() *MetaServiceDropHostFromZoneArgs {
  return &MetaServiceDropHostFromZoneArgs{
    Req: NewDropHostFromZoneReq(),
  }
}

var MetaServiceDropHostFromZoneArgs_Req_DEFAULT *DropHostFromZoneReq
func (p *MetaServiceDropHostFromZoneArgs) GetReq() *DropHostFromZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropHostFromZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropHostFromZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropHostFromZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropHostFromZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHostFromZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropHostFromZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropHostFromZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropHostFromZoneResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropHostFromZoneResult() *MetaServiceDropHostFromZoneResult {
  return &MetaServiceDropHostFromZoneResult{}
}

var MetaServiceDropHostFromZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropHostFromZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropHostFromZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropHostFromZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropHostFromZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHostFromZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropHostFromZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropHostFromZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetZoneArgs struct {
  thrift.IRequest
  Req *GetZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetZoneArgs() *MetaServiceGetZoneArgs {
  return &MetaServiceGetZoneArgs{
    Req: NewGetZoneReq(),
  }
}

var MetaServiceGetZoneArgs_Req_DEFAULT *GetZoneReq
func (p *MetaServiceGetZoneArgs) GetReq() *GetZoneReq {
  if !p.IsSetReq() {
    return MetaServiceGetZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetZoneArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetZoneArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetZoneResult struct {
  thrift.IResponse
  Success *GetZoneResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetZoneResult() *MetaServiceGetZoneResult {
  return &MetaServiceGetZoneResult{}
}

var MetaServiceGetZoneResult_Success_DEFAULT *GetZoneResp
func (p *MetaServiceGetZoneResult) GetSuccess() *GetZoneResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetZoneResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetZoneResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetZoneResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListZonesArgs struct {
  thrift.IRequest
  Req *ListZonesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListZonesArgs() *MetaServiceListZonesArgs {
  return &MetaServiceListZonesArgs{
    Req: NewListZonesReq(),
  }
}

var MetaServiceListZonesArgs_Req_DEFAULT *ListZonesReq
func (p *MetaServiceListZonesArgs) GetReq() *ListZonesReq {
  if !p.IsSetReq() {
    return MetaServiceListZonesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListZonesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListZonesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListZonesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListZonesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListZonesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListZonesResult struct {
  thrift.IResponse
  Success *ListZonesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListZonesResult() *MetaServiceListZonesResult {
  return &MetaServiceListZonesResult{}
}

var MetaServiceListZonesResult_Success_DEFAULT *ListZonesResp
func (p *MetaServiceListZonesResult) GetSuccess() *ListZonesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListZonesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListZonesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListZonesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListZonesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListZonesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListZonesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddGroupArgs struct {
  thrift.IRequest
  Req *AddGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddGroupArgs() *MetaServiceAddGroupArgs {
  return &MetaServiceAddGroupArgs{
    Req: NewAddGroupReq(),
  }
}

var MetaServiceAddGroupArgs_Req_DEFAULT *AddGroupReq
func (p *MetaServiceAddGroupArgs) GetReq() *AddGroupReq {
  if !p.IsSetReq() {
    return MetaServiceAddGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddGroupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAddGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddGroupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddGroupResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddGroupResult() *MetaServiceAddGroupResult {
  return &MetaServiceAddGroupResult{}
}

var MetaServiceAddGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddGroupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAddGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddGroupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropGroupArgs struct {
  thrift.IRequest
  Req *DropGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropGroupArgs() *MetaServiceDropGroupArgs {
  return &MetaServiceDropGroupArgs{
    Req: NewDropGroupReq(),
  }
}

var MetaServiceDropGroupArgs_Req_DEFAULT *DropGroupReq
func (p *MetaServiceDropGroupArgs) GetReq() *DropGroupReq {
  if !p.IsSetReq() {
    return MetaServiceDropGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropGroupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropGroupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropGroupResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropGroupResult() *MetaServiceDropGroupResult {
  return &MetaServiceDropGroupResult{}
}

var MetaServiceDropGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropGroupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropGroupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddZoneIntoGroupArgs struct {
  thrift.IRequest
  Req *AddZoneIntoGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddZoneIntoGroupArgs() *MetaServiceAddZoneIntoGroupArgs {
  return &MetaServiceAddZoneIntoGroupArgs{
    Req: NewAddZoneIntoGroupReq(),
  }
}

var MetaServiceAddZoneIntoGroupArgs_Req_DEFAULT *AddZoneIntoGroupReq
func (p *MetaServiceAddZoneIntoGroupArgs) GetReq() *AddZoneIntoGroupReq {
  if !p.IsSetReq() {
    return MetaServiceAddZoneIntoGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddZoneIntoGroupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddZoneIntoGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZoneIntoGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddZoneIntoGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddZoneIntoGroupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddZoneIntoGroupResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddZoneIntoGroupResult() *MetaServiceAddZoneIntoGroupResult {
  return &MetaServiceAddZoneIntoGroupResult{}
}

var MetaServiceAddZoneIntoGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddZoneIntoGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddZoneIntoGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddZoneIntoGroupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAddZoneIntoGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZoneIntoGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddZoneIntoGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddZoneIntoGroupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceDropZoneFromGroupArgs struct {
  thrift.IRequest
  Req *DropZoneFromGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneFromGroupArgs() *MetaServiceDropZoneFromGroupArgs {
  return &MetaServiceDropZoneFromGroupArgs{
    Req: NewDropZoneFromGroupReq(),
  }
}

var MetaServiceDropZoneFromGroupArgs_Req_DEFAULT *DropZoneFromGroupReq
func (p *MetaServiceDropZoneFromGroupArgs) GetReq() *DropZoneFromGroupReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneFromGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneFromGroupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceDropZoneFromGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropZoneFromGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZoneFromGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneFromGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceDropZoneFromGroupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceDropZoneFromGroupResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneFromGroupResult() *MetaServiceDropZoneFromGroupResult {
  return &MetaServiceDropZoneFromGroupResult{}
}

var MetaServiceDropZoneFromGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneFromGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneFromGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneFromGroupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceDropZoneFromGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZoneFromGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneFromGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceDropZoneFromGroupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetGroupArgs struct {
  thrift.IRequest
  Req *GetGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetGroupArgs() *MetaServiceGetGroupArgs {
  return &MetaServiceGetGroupArgs{
    Req: NewGetGroupReq(),
  }
}

var MetaServiceGetGroupArgs_Req_DEFAULT *GetGroupReq
func (p *MetaServiceGetGroupArgs) GetReq() *GetGroupReq {
  if !p.IsSetReq() {
    return MetaServiceGetGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetGroupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetGroupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetGroupResult struct {
  thrift.IResponse
  Success *GetGroupResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetGroupResult() *MetaServiceGetGroupResult {
  return &MetaServiceGetGroupResult{}
}

var MetaServiceGetGroupResult_Success_DEFAULT *GetGroupResp
func (p *MetaServiceGetGroupResult) GetSuccess() *GetGroupResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetGroupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetGroupResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetGroupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListGroupsArgs struct {
  thrift.IRequest
  Req *ListGroupsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListGroupsArgs() *MetaServiceListGroupsArgs {
  return &MetaServiceListGroupsArgs{
    Req: NewListGroupsReq(),
  }
}

var MetaServiceListGroupsArgs_Req_DEFAULT *ListGroupsReq
func (p *MetaServiceListGroupsArgs) GetReq() *ListGroupsReq {
  if !p.IsSetReq() {
    return MetaServiceListGroupsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListGroupsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListGroupsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListGroupsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListGroupsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListGroupsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListGroupsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListGroupsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListGroupsResult struct {
  thrift.IResponse
  Success *ListGroupsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListGroupsResult() *MetaServiceListGroupsResult {
  return &MetaServiceListGroupsResult{}
}

var MetaServiceListGroupsResult_Success_DEFAULT *ListGroupsResp
func (p *MetaServiceListGroupsResult) GetSuccess() *ListGroupsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListGroupsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListGroupsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListGroupsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListGroupsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListGroupsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListGroupsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListGroupsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateBackupArgs struct {
  thrift.IRequest
  Req *CreateBackupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateBackupArgs() *MetaServiceCreateBackupArgs {
  return &MetaServiceCreateBackupArgs{
    Req: NewCreateBackupReq(),
  }
}

var MetaServiceCreateBackupArgs_Req_DEFAULT *CreateBackupReq
func (p *MetaServiceCreateBackupArgs) GetReq() *CreateBackupReq {
  if !p.IsSetReq() {
    return MetaServiceCreateBackupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateBackupArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateBackupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateBackupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateBackupArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateBackupArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateBackupResult struct {
  thrift.IResponse
  Success *CreateBackupResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateBackupResult() *MetaServiceCreateBackupResult {
  return &MetaServiceCreateBackupResult{}
}

var MetaServiceCreateBackupResult_Success_DEFAULT *CreateBackupResp
func (p *MetaServiceCreateBackupResult) GetSuccess() *CreateBackupResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateBackupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateBackupResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateBackupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateBackupResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateBackupResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateBackupResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRestoreMetaArgs struct {
  thrift.IRequest
  Req *RestoreMetaReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRestoreMetaArgs() *MetaServiceRestoreMetaArgs {
  return &MetaServiceRestoreMetaArgs{
    Req: NewRestoreMetaReq(),
  }
}

var MetaServiceRestoreMetaArgs_Req_DEFAULT *RestoreMetaReq
func (p *MetaServiceRestoreMetaArgs) GetReq() *RestoreMetaReq {
  if !p.IsSetReq() {
    return MetaServiceRestoreMetaArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRestoreMetaArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRestoreMetaArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRestoreMetaReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRestoreMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRestoreMetaArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRestoreMetaResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRestoreMetaResult() *MetaServiceRestoreMetaResult {
  return &MetaServiceRestoreMetaResult{}
}

var MetaServiceRestoreMetaResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRestoreMetaResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRestoreMetaResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRestoreMetaResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRestoreMetaResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRestoreMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRestoreMetaResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceAddListenerArgs struct {
  thrift.IRequest
  Req *AddListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddListenerArgs() *MetaServiceAddListenerArgs {
  return &MetaServiceAddListenerArgs{
    Req: NewAddListenerReq(),
  }
}

var MetaServiceAddListenerArgs_Req_DEFAULT *AddListenerReq
func (p *MetaServiceAddListenerArgs) GetReq() *AddListenerReq {
  if !p.IsSetReq() {
    return MetaServiceAddListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceAddListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceAddListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceAddListenerResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddListenerResult() *MetaServiceAddListenerResult {
  return &MetaServiceAddListenerResult{}
}

var MetaServiceAddListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceAddListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceAddListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveListenerArgs struct {
  thrift.IRequest
  Req *RemoveListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveListenerArgs() *MetaServiceRemoveListenerArgs {
  return &MetaServiceRemoveListenerArgs{
    Req: NewRemoveListenerReq(),
  }
}

var MetaServiceRemoveListenerArgs_Req_DEFAULT *RemoveListenerReq
func (p *MetaServiceRemoveListenerArgs) GetReq() *RemoveListenerReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRemoveListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveListenerResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveListenerResult() *MetaServiceRemoveListenerResult {
  return &MetaServiceRemoveListenerResult{}
}

var MetaServiceRemoveListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRemoveListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListListenerArgs struct {
  thrift.IRequest
  Req *ListListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListListenerArgs() *MetaServiceListListenerArgs {
  return &MetaServiceListListenerArgs{
    Req: NewListListenerReq(),
  }
}

var MetaServiceListListenerArgs_Req_DEFAULT *ListListenerReq
func (p *MetaServiceListListenerArgs) GetReq() *ListListenerReq {
  if !p.IsSetReq() {
    return MetaServiceListListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListListenerArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListListenerArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListListenerResult struct {
  thrift.IResponse
  Success *ListListenerResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListListenerResult() *MetaServiceListListenerResult {
  return &MetaServiceListListenerResult{}
}

var MetaServiceListListenerResult_Success_DEFAULT *ListListenerResp
func (p *MetaServiceListListenerResult) GetSuccess() *ListListenerResp {
  if !p.IsSetSuccess() {
    return MetaServiceListListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListListenerResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListListenerResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListListenerResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetStatisArgs struct {
  thrift.IRequest
  Req *GetStatisReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetStatisArgs() *MetaServiceGetStatisArgs {
  return &MetaServiceGetStatisArgs{
    Req: NewGetStatisReq(),
  }
}

var MetaServiceGetStatisArgs_Req_DEFAULT *GetStatisReq
func (p *MetaServiceGetStatisArgs) GetReq() *GetStatisReq {
  if !p.IsSetReq() {
    return MetaServiceGetStatisArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetStatisArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetStatisArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatisArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetStatisReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetStatisArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatis_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatisArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetStatisArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetStatisArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetStatisResult struct {
  thrift.IResponse
  Success *GetStatisResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetStatisResult() *MetaServiceGetStatisResult {
  return &MetaServiceGetStatisResult{}
}

var MetaServiceGetStatisResult_Success_DEFAULT *GetStatisResp
func (p *MetaServiceGetStatisResult) GetSuccess() *GetStatisResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetStatisResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetStatisResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetStatisResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatisResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetStatisResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetStatisResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatis_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatisResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetStatisResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetStatisResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSignInFTServiceArgs struct {
  thrift.IRequest
  Req *SignInFTServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignInFTServiceArgs() *MetaServiceSignInFTServiceArgs {
  return &MetaServiceSignInFTServiceArgs{
    Req: NewSignInFTServiceReq(),
  }
}

var MetaServiceSignInFTServiceArgs_Req_DEFAULT *SignInFTServiceReq
func (p *MetaServiceSignInFTServiceArgs) GetReq() *SignInFTServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignInFTServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignInFTServiceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceSignInFTServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignInFTServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInFTService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignInFTServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSignInFTServiceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSignInFTServiceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignInFTServiceResult() *MetaServiceSignInFTServiceResult {
  return &MetaServiceSignInFTServiceResult{}
}

var MetaServiceSignInFTServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignInFTServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignInFTServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignInFTServiceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceSignInFTServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInFTService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInFTServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignInFTServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSignInFTServiceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceSignOutFTServiceArgs struct {
  thrift.IRequest
  Req *SignOutFTServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignOutFTServiceArgs() *MetaServiceSignOutFTServiceArgs {
  return &MetaServiceSignOutFTServiceArgs{
    Req: NewSignOutFTServiceReq(),
  }
}

var MetaServiceSignOutFTServiceArgs_Req_DEFAULT *SignOutFTServiceReq
func (p *MetaServiceSignOutFTServiceArgs) GetReq() *SignOutFTServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignOutFTServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignOutFTServiceArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceSignOutFTServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignOutFTServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutFTService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignOutFTServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceSignOutFTServiceArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceSignOutFTServiceResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignOutFTServiceResult() *MetaServiceSignOutFTServiceResult {
  return &MetaServiceSignOutFTServiceResult{}
}

var MetaServiceSignOutFTServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignOutFTServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignOutFTServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignOutFTServiceResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceSignOutFTServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutFTService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignOutFTServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceSignOutFTServiceResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListFTClientsArgs struct {
  thrift.IRequest
  Req *ListFTClientsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListFTClientsArgs() *MetaServiceListFTClientsArgs {
  return &MetaServiceListFTClientsArgs{
    Req: NewListFTClientsReq(),
  }
}

var MetaServiceListFTClientsArgs_Req_DEFAULT *ListFTClientsReq
func (p *MetaServiceListFTClientsArgs) GetReq() *ListFTClientsReq {
  if !p.IsSetReq() {
    return MetaServiceListFTClientsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListFTClientsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListFTClientsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListFTClientsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTClientsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListFTClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListFTClientsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListFTClientsResult struct {
  thrift.IResponse
  Success *ListFTClientsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListFTClientsResult() *MetaServiceListFTClientsResult {
  return &MetaServiceListFTClientsResult{}
}

var MetaServiceListFTClientsResult_Success_DEFAULT *ListFTClientsResp
func (p *MetaServiceListFTClientsResult) GetSuccess() *ListFTClientsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListFTClientsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListFTClientsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListFTClientsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListFTClientsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTClientsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListFTClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListFTClientsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceCreateSessionArgs struct {
  thrift.IRequest
  Req *CreateSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSessionArgs() *MetaServiceCreateSessionArgs {
  return &MetaServiceCreateSessionArgs{
    Req: NewCreateSessionReq(),
  }
}

var MetaServiceCreateSessionArgs_Req_DEFAULT *CreateSessionReq
func (p *MetaServiceCreateSessionArgs) GetReq() *CreateSessionReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceCreateSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceCreateSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceCreateSessionResult struct {
  thrift.IResponse
  Success *CreateSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSessionResult() *MetaServiceCreateSessionResult {
  return &MetaServiceCreateSessionResult{}
}

var MetaServiceCreateSessionResult_Success_DEFAULT *CreateSessionResp
func (p *MetaServiceCreateSessionResult) GetSuccess() *CreateSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceCreateSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceCreateSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceUpdateSessionsArgs struct {
  thrift.IRequest
  Req *UpdateSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceUpdateSessionsArgs() *MetaServiceUpdateSessionsArgs {
  return &MetaServiceUpdateSessionsArgs{
    Req: NewUpdateSessionsReq(),
  }
}

var MetaServiceUpdateSessionsArgs_Req_DEFAULT *UpdateSessionsReq
func (p *MetaServiceUpdateSessionsArgs) GetReq() *UpdateSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceUpdateSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceUpdateSessionsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceUpdateSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceUpdateSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceUpdateSessionsResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceUpdateSessionsResult() *MetaServiceUpdateSessionsResult {
  return &MetaServiceUpdateSessionsResult{}
}

var MetaServiceUpdateSessionsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceUpdateSessionsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceUpdateSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceUpdateSessionsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceUpdateSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceUpdateSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceListSessionsArgs struct {
  thrift.IRequest
  Req *ListSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSessionsArgs() *MetaServiceListSessionsArgs {
  return &MetaServiceListSessionsArgs{
    Req: NewListSessionsReq(),
  }
}

var MetaServiceListSessionsArgs_Req_DEFAULT *ListSessionsReq
func (p *MetaServiceListSessionsArgs) GetReq() *ListSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceListSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSessionsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceListSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceListSessionsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceListSessionsResult struct {
  thrift.IResponse
  Success *ListSessionsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSessionsResult() *MetaServiceListSessionsResult {
  return &MetaServiceListSessionsResult{}
}

var MetaServiceListSessionsResult_Success_DEFAULT *ListSessionsResp
func (p *MetaServiceListSessionsResult) GetSuccess() *ListSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSessionsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceListSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSessionsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceListSessionsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceGetSessionArgs struct {
  thrift.IRequest
  Req *GetSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSessionArgs() *MetaServiceGetSessionArgs {
  return &MetaServiceGetSessionArgs{
    Req: NewGetSessionReq(),
  }
}

var MetaServiceGetSessionArgs_Req_DEFAULT *GetSessionReq
func (p *MetaServiceGetSessionArgs) GetReq() *GetSessionReq {
  if !p.IsSetReq() {
    return MetaServiceGetSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceGetSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceGetSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceGetSessionResult struct {
  thrift.IResponse
  Success *GetSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSessionResult() *MetaServiceGetSessionResult {
  return &MetaServiceGetSessionResult{}
}

var MetaServiceGetSessionResult_Success_DEFAULT *GetSessionResp
func (p *MetaServiceGetSessionResult) GetSuccess() *GetSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceGetSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceGetSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceRemoveSessionArgs struct {
  thrift.IRequest
  Req *RemoveSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveSessionArgs() *MetaServiceRemoveSessionArgs {
  return &MetaServiceRemoveSessionArgs{
    Req: NewRemoveSessionReq(),
  }
}

var MetaServiceRemoveSessionArgs_Req_DEFAULT *RemoveSessionReq
func (p *MetaServiceRemoveSessionArgs) GetReq() *RemoveSessionReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveSessionArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceRemoveSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceRemoveSessionArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceRemoveSessionResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveSessionResult() *MetaServiceRemoveSessionResult {
  return &MetaServiceRemoveSessionResult{}
}

var MetaServiceRemoveSessionResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveSessionResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveSessionResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceRemoveSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceRemoveSessionResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type MetaServiceReportTaskFinishArgs struct {
  thrift.IRequest
  Req *ReportTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceReportTaskFinishArgs() *MetaServiceReportTaskFinishArgs {
  return &MetaServiceReportTaskFinishArgs{
    Req: NewReportTaskReq(),
  }
}

var MetaServiceReportTaskFinishArgs_Req_DEFAULT *ReportTaskReq
func (p *MetaServiceReportTaskFinishArgs) GetReq() *ReportTaskReq {
  if !p.IsSetReq() {
    return MetaServiceReportTaskFinishArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceReportTaskFinishArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

func (p *MetaServiceReportTaskFinishArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewReportTaskReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceReportTaskFinishArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type MetaServiceReportTaskFinishResult struct {
  thrift.IResponse
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceReportTaskFinishResult() *MetaServiceReportTaskFinishResult {
  return &MetaServiceReportTaskFinishResult{}
}

var MetaServiceReportTaskFinishResult_Success_DEFAULT *ExecResp
func (p *MetaServiceReportTaskFinishResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceReportTaskFinishResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceReportTaskFinishResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

func (p *MetaServiceReportTaskFinishResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceReportTaskFinishResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishResult({Success:%s})", successVal)
}


