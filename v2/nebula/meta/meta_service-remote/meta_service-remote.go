// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/v2/nebula/meta"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ListPartsResp listParts(ListPartsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp multiPut(MultiPutReq req)")
  fmt.Fprintln(os.Stderr, "  GetResp get(GetReq req)")
  fmt.Fprintln(os.Stderr, "  MultiGetResp multiGet(MultiGetReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp remove(RemoveReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeRange(RemoveRangeReq req)")
  fmt.Fprintln(os.Stderr, "  ScanResp scan(ScanReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTagIndex(CreateTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTagIndex(DropTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagIndexResp getTagIndex(GetTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildTagIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdgeIndex(CreateEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdgeIndex(DropEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildEdgeIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp getUserRoles(GetUserRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  BalanceResp balance(BalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp leaderBalance(LeaderBalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSnapshot(CreateSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSnapshot(DropSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ListSnapshotsResp listSnapshots(ListSnapshotsReq req)")
  fmt.Fprintln(os.Stderr, "  AdminJobResp runAdminJob(AdminJobReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := meta.NewMetaServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg269 := flag.Arg(1)
    mbTrans270 := thrift.NewMemoryBufferLen(len(arg269))
    defer mbTrans270.Close()
    _, err271 := mbTrans270.WriteString(arg269)
    if err271 != nil {
      Usage()
      return
    }
    factory272 := thrift.NewSimpleJSONProtocolFactory()
    jsProt273 := factory272.GetProtocol(mbTrans270)
    argvalue0 := meta.NewCreateSpaceReq()
    err274 := argvalue0.Read(jsProt273)
    if err274 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg275 := flag.Arg(1)
    mbTrans276 := thrift.NewMemoryBufferLen(len(arg275))
    defer mbTrans276.Close()
    _, err277 := mbTrans276.WriteString(arg275)
    if err277 != nil {
      Usage()
      return
    }
    factory278 := thrift.NewSimpleJSONProtocolFactory()
    jsProt279 := factory278.GetProtocol(mbTrans276)
    argvalue0 := meta.NewDropSpaceReq()
    err280 := argvalue0.Read(jsProt279)
    if err280 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg281 := flag.Arg(1)
    mbTrans282 := thrift.NewMemoryBufferLen(len(arg281))
    defer mbTrans282.Close()
    _, err283 := mbTrans282.WriteString(arg281)
    if err283 != nil {
      Usage()
      return
    }
    factory284 := thrift.NewSimpleJSONProtocolFactory()
    jsProt285 := factory284.GetProtocol(mbTrans282)
    argvalue0 := meta.NewGetSpaceReq()
    err286 := argvalue0.Read(jsProt285)
    if err286 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg287 := flag.Arg(1)
    mbTrans288 := thrift.NewMemoryBufferLen(len(arg287))
    defer mbTrans288.Close()
    _, err289 := mbTrans288.WriteString(arg287)
    if err289 != nil {
      Usage()
      return
    }
    factory290 := thrift.NewSimpleJSONProtocolFactory()
    jsProt291 := factory290.GetProtocol(mbTrans288)
    argvalue0 := meta.NewListSpacesReq()
    err292 := argvalue0.Read(jsProt291)
    if err292 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg293 := flag.Arg(1)
    mbTrans294 := thrift.NewMemoryBufferLen(len(arg293))
    defer mbTrans294.Close()
    _, err295 := mbTrans294.WriteString(arg293)
    if err295 != nil {
      Usage()
      return
    }
    factory296 := thrift.NewSimpleJSONProtocolFactory()
    jsProt297 := factory296.GetProtocol(mbTrans294)
    argvalue0 := meta.NewCreateTagReq()
    err298 := argvalue0.Read(jsProt297)
    if err298 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg299 := flag.Arg(1)
    mbTrans300 := thrift.NewMemoryBufferLen(len(arg299))
    defer mbTrans300.Close()
    _, err301 := mbTrans300.WriteString(arg299)
    if err301 != nil {
      Usage()
      return
    }
    factory302 := thrift.NewSimpleJSONProtocolFactory()
    jsProt303 := factory302.GetProtocol(mbTrans300)
    argvalue0 := meta.NewAlterTagReq()
    err304 := argvalue0.Read(jsProt303)
    if err304 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg305 := flag.Arg(1)
    mbTrans306 := thrift.NewMemoryBufferLen(len(arg305))
    defer mbTrans306.Close()
    _, err307 := mbTrans306.WriteString(arg305)
    if err307 != nil {
      Usage()
      return
    }
    factory308 := thrift.NewSimpleJSONProtocolFactory()
    jsProt309 := factory308.GetProtocol(mbTrans306)
    argvalue0 := meta.NewDropTagReq()
    err310 := argvalue0.Read(jsProt309)
    if err310 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg311 := flag.Arg(1)
    mbTrans312 := thrift.NewMemoryBufferLen(len(arg311))
    defer mbTrans312.Close()
    _, err313 := mbTrans312.WriteString(arg311)
    if err313 != nil {
      Usage()
      return
    }
    factory314 := thrift.NewSimpleJSONProtocolFactory()
    jsProt315 := factory314.GetProtocol(mbTrans312)
    argvalue0 := meta.NewGetTagReq()
    err316 := argvalue0.Read(jsProt315)
    if err316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg317 := flag.Arg(1)
    mbTrans318 := thrift.NewMemoryBufferLen(len(arg317))
    defer mbTrans318.Close()
    _, err319 := mbTrans318.WriteString(arg317)
    if err319 != nil {
      Usage()
      return
    }
    factory320 := thrift.NewSimpleJSONProtocolFactory()
    jsProt321 := factory320.GetProtocol(mbTrans318)
    argvalue0 := meta.NewListTagsReq()
    err322 := argvalue0.Read(jsProt321)
    if err322 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg323 := flag.Arg(1)
    mbTrans324 := thrift.NewMemoryBufferLen(len(arg323))
    defer mbTrans324.Close()
    _, err325 := mbTrans324.WriteString(arg323)
    if err325 != nil {
      Usage()
      return
    }
    factory326 := thrift.NewSimpleJSONProtocolFactory()
    jsProt327 := factory326.GetProtocol(mbTrans324)
    argvalue0 := meta.NewCreateEdgeReq()
    err328 := argvalue0.Read(jsProt327)
    if err328 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg329 := flag.Arg(1)
    mbTrans330 := thrift.NewMemoryBufferLen(len(arg329))
    defer mbTrans330.Close()
    _, err331 := mbTrans330.WriteString(arg329)
    if err331 != nil {
      Usage()
      return
    }
    factory332 := thrift.NewSimpleJSONProtocolFactory()
    jsProt333 := factory332.GetProtocol(mbTrans330)
    argvalue0 := meta.NewAlterEdgeReq()
    err334 := argvalue0.Read(jsProt333)
    if err334 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg335 := flag.Arg(1)
    mbTrans336 := thrift.NewMemoryBufferLen(len(arg335))
    defer mbTrans336.Close()
    _, err337 := mbTrans336.WriteString(arg335)
    if err337 != nil {
      Usage()
      return
    }
    factory338 := thrift.NewSimpleJSONProtocolFactory()
    jsProt339 := factory338.GetProtocol(mbTrans336)
    argvalue0 := meta.NewDropEdgeReq()
    err340 := argvalue0.Read(jsProt339)
    if err340 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg341 := flag.Arg(1)
    mbTrans342 := thrift.NewMemoryBufferLen(len(arg341))
    defer mbTrans342.Close()
    _, err343 := mbTrans342.WriteString(arg341)
    if err343 != nil {
      Usage()
      return
    }
    factory344 := thrift.NewSimpleJSONProtocolFactory()
    jsProt345 := factory344.GetProtocol(mbTrans342)
    argvalue0 := meta.NewGetEdgeReq()
    err346 := argvalue0.Read(jsProt345)
    if err346 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg347 := flag.Arg(1)
    mbTrans348 := thrift.NewMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewSimpleJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue0 := meta.NewListEdgesReq()
    err352 := argvalue0.Read(jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg353 := flag.Arg(1)
    mbTrans354 := thrift.NewMemoryBufferLen(len(arg353))
    defer mbTrans354.Close()
    _, err355 := mbTrans354.WriteString(arg353)
    if err355 != nil {
      Usage()
      return
    }
    factory356 := thrift.NewSimpleJSONProtocolFactory()
    jsProt357 := factory356.GetProtocol(mbTrans354)
    argvalue0 := meta.NewListHostsReq()
    err358 := argvalue0.Read(jsProt357)
    if err358 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg359 := flag.Arg(1)
    mbTrans360 := thrift.NewMemoryBufferLen(len(arg359))
    defer mbTrans360.Close()
    _, err361 := mbTrans360.WriteString(arg359)
    if err361 != nil {
      Usage()
      return
    }
    factory362 := thrift.NewSimpleJSONProtocolFactory()
    jsProt363 := factory362.GetProtocol(mbTrans360)
    argvalue0 := meta.NewGetPartsAllocReq()
    err364 := argvalue0.Read(jsProt363)
    if err364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(value0))
    fmt.Print("\n")
    break
  case "listParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListParts requires 1 args")
      flag.Usage()
    }
    arg365 := flag.Arg(1)
    mbTrans366 := thrift.NewMemoryBufferLen(len(arg365))
    defer mbTrans366.Close()
    _, err367 := mbTrans366.WriteString(arg365)
    if err367 != nil {
      Usage()
      return
    }
    factory368 := thrift.NewSimpleJSONProtocolFactory()
    jsProt369 := factory368.GetProtocol(mbTrans366)
    argvalue0 := meta.NewListPartsReq()
    err370 := argvalue0.Read(jsProt369)
    if err370 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListParts(value0))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg371 := flag.Arg(1)
    mbTrans372 := thrift.NewMemoryBufferLen(len(arg371))
    defer mbTrans372.Close()
    _, err373 := mbTrans372.WriteString(arg371)
    if err373 != nil {
      Usage()
      return
    }
    factory374 := thrift.NewSimpleJSONProtocolFactory()
    jsProt375 := factory374.GetProtocol(mbTrans372)
    argvalue0 := meta.NewMultiPutReq()
    err376 := argvalue0.Read(jsProt375)
    if err376 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg377 := flag.Arg(1)
    mbTrans378 := thrift.NewMemoryBufferLen(len(arg377))
    defer mbTrans378.Close()
    _, err379 := mbTrans378.WriteString(arg377)
    if err379 != nil {
      Usage()
      return
    }
    factory380 := thrift.NewSimpleJSONProtocolFactory()
    jsProt381 := factory380.GetProtocol(mbTrans378)
    argvalue0 := meta.NewGetReq()
    err382 := argvalue0.Read(jsProt381)
    if err382 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "multiGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg383 := flag.Arg(1)
    mbTrans384 := thrift.NewMemoryBufferLen(len(arg383))
    defer mbTrans384.Close()
    _, err385 := mbTrans384.WriteString(arg383)
    if err385 != nil {
      Usage()
      return
    }
    factory386 := thrift.NewSimpleJSONProtocolFactory()
    jsProt387 := factory386.GetProtocol(mbTrans384)
    argvalue0 := meta.NewMultiGetReq()
    err388 := argvalue0.Read(jsProt387)
    if err388 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg389 := flag.Arg(1)
    mbTrans390 := thrift.NewMemoryBufferLen(len(arg389))
    defer mbTrans390.Close()
    _, err391 := mbTrans390.WriteString(arg389)
    if err391 != nil {
      Usage()
      return
    }
    factory392 := thrift.NewSimpleJSONProtocolFactory()
    jsProt393 := factory392.GetProtocol(mbTrans390)
    argvalue0 := meta.NewRemoveReq()
    err394 := argvalue0.Read(jsProt393)
    if err394 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg395 := flag.Arg(1)
    mbTrans396 := thrift.NewMemoryBufferLen(len(arg395))
    defer mbTrans396.Close()
    _, err397 := mbTrans396.WriteString(arg395)
    if err397 != nil {
      Usage()
      return
    }
    factory398 := thrift.NewSimpleJSONProtocolFactory()
    jsProt399 := factory398.GetProtocol(mbTrans396)
    argvalue0 := meta.NewRemoveRangeReq()
    err400 := argvalue0.Read(jsProt399)
    if err400 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg401 := flag.Arg(1)
    mbTrans402 := thrift.NewMemoryBufferLen(len(arg401))
    defer mbTrans402.Close()
    _, err403 := mbTrans402.WriteString(arg401)
    if err403 != nil {
      Usage()
      return
    }
    factory404 := thrift.NewSimpleJSONProtocolFactory()
    jsProt405 := factory404.GetProtocol(mbTrans402)
    argvalue0 := meta.NewScanReq()
    err406 := argvalue0.Read(jsProt405)
    if err406 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(value0))
    fmt.Print("\n")
    break
  case "createTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTagIndex requires 1 args")
      flag.Usage()
    }
    arg407 := flag.Arg(1)
    mbTrans408 := thrift.NewMemoryBufferLen(len(arg407))
    defer mbTrans408.Close()
    _, err409 := mbTrans408.WriteString(arg407)
    if err409 != nil {
      Usage()
      return
    }
    factory410 := thrift.NewSimpleJSONProtocolFactory()
    jsProt411 := factory410.GetProtocol(mbTrans408)
    argvalue0 := meta.NewCreateTagIndexReq()
    err412 := argvalue0.Read(jsProt411)
    if err412 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTagIndex(value0))
    fmt.Print("\n")
    break
  case "dropTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTagIndex requires 1 args")
      flag.Usage()
    }
    arg413 := flag.Arg(1)
    mbTrans414 := thrift.NewMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil {
      Usage()
      return
    }
    factory416 := thrift.NewSimpleJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    argvalue0 := meta.NewDropTagIndexReq()
    err418 := argvalue0.Read(jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTagIndex(value0))
    fmt.Print("\n")
    break
  case "getTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTagIndex requires 1 args")
      flag.Usage()
    }
    arg419 := flag.Arg(1)
    mbTrans420 := thrift.NewMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewSimpleJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue0 := meta.NewGetTagIndexReq()
    err424 := argvalue0.Read(jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexes requires 1 args")
      flag.Usage()
    }
    arg425 := flag.Arg(1)
    mbTrans426 := thrift.NewMemoryBufferLen(len(arg425))
    defer mbTrans426.Close()
    _, err427 := mbTrans426.WriteString(arg425)
    if err427 != nil {
      Usage()
      return
    }
    factory428 := thrift.NewSimpleJSONProtocolFactory()
    jsProt429 := factory428.GetProtocol(mbTrans426)
    argvalue0 := meta.NewListTagIndexesReq()
    err430 := argvalue0.Read(jsProt429)
    if err430 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg431 := flag.Arg(1)
    mbTrans432 := thrift.NewMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewSimpleJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue0 := meta.NewRebuildIndexReq()
    err436 := argvalue0.Read(jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexStatus requires 1 args")
      flag.Usage()
    }
    arg437 := flag.Arg(1)
    mbTrans438 := thrift.NewMemoryBufferLen(len(arg437))
    defer mbTrans438.Close()
    _, err439 := mbTrans438.WriteString(arg437)
    if err439 != nil {
      Usage()
      return
    }
    factory440 := thrift.NewSimpleJSONProtocolFactory()
    jsProt441 := factory440.GetProtocol(mbTrans438)
    argvalue0 := meta.NewListIndexStatusReq()
    err442 := argvalue0.Read(jsProt441)
    if err442 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg443 := flag.Arg(1)
    mbTrans444 := thrift.NewMemoryBufferLen(len(arg443))
    defer mbTrans444.Close()
    _, err445 := mbTrans444.WriteString(arg443)
    if err445 != nil {
      Usage()
      return
    }
    factory446 := thrift.NewSimpleJSONProtocolFactory()
    jsProt447 := factory446.GetProtocol(mbTrans444)
    argvalue0 := meta.NewCreateEdgeIndexReq()
    err448 := argvalue0.Read(jsProt447)
    if err448 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "dropEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg449 := flag.Arg(1)
    mbTrans450 := thrift.NewMemoryBufferLen(len(arg449))
    defer mbTrans450.Close()
    _, err451 := mbTrans450.WriteString(arg449)
    if err451 != nil {
      Usage()
      return
    }
    factory452 := thrift.NewSimpleJSONProtocolFactory()
    jsProt453 := factory452.GetProtocol(mbTrans450)
    argvalue0 := meta.NewDropEdgeIndexReq()
    err454 := argvalue0.Read(jsProt453)
    if err454 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "getEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg455 := flag.Arg(1)
    mbTrans456 := thrift.NewMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewSimpleJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue0 := meta.NewGetEdgeIndexReq()
    err460 := argvalue0.Read(jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexes requires 1 args")
      flag.Usage()
    }
    arg461 := flag.Arg(1)
    mbTrans462 := thrift.NewMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil {
      Usage()
      return
    }
    factory464 := thrift.NewSimpleJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    argvalue0 := meta.NewListEdgeIndexesReq()
    err466 := argvalue0.Read(jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg467 := flag.Arg(1)
    mbTrans468 := thrift.NewMemoryBufferLen(len(arg467))
    defer mbTrans468.Close()
    _, err469 := mbTrans468.WriteString(arg467)
    if err469 != nil {
      Usage()
      return
    }
    factory470 := thrift.NewSimpleJSONProtocolFactory()
    jsProt471 := factory470.GetProtocol(mbTrans468)
    argvalue0 := meta.NewRebuildIndexReq()
    err472 := argvalue0.Read(jsProt471)
    if err472 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexStatus requires 1 args")
      flag.Usage()
    }
    arg473 := flag.Arg(1)
    mbTrans474 := thrift.NewMemoryBufferLen(len(arg473))
    defer mbTrans474.Close()
    _, err475 := mbTrans474.WriteString(arg473)
    if err475 != nil {
      Usage()
      return
    }
    factory476 := thrift.NewSimpleJSONProtocolFactory()
    jsProt477 := factory476.GetProtocol(mbTrans474)
    argvalue0 := meta.NewListIndexStatusReq()
    err478 := argvalue0.Read(jsProt477)
    if err478 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg479 := flag.Arg(1)
    mbTrans480 := thrift.NewMemoryBufferLen(len(arg479))
    defer mbTrans480.Close()
    _, err481 := mbTrans480.WriteString(arg479)
    if err481 != nil {
      Usage()
      return
    }
    factory482 := thrift.NewSimpleJSONProtocolFactory()
    jsProt483 := factory482.GetProtocol(mbTrans480)
    argvalue0 := meta.NewCreateUserReq()
    err484 := argvalue0.Read(jsProt483)
    if err484 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg485 := flag.Arg(1)
    mbTrans486 := thrift.NewMemoryBufferLen(len(arg485))
    defer mbTrans486.Close()
    _, err487 := mbTrans486.WriteString(arg485)
    if err487 != nil {
      Usage()
      return
    }
    factory488 := thrift.NewSimpleJSONProtocolFactory()
    jsProt489 := factory488.GetProtocol(mbTrans486)
    argvalue0 := meta.NewDropUserReq()
    err490 := argvalue0.Read(jsProt489)
    if err490 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg491 := flag.Arg(1)
    mbTrans492 := thrift.NewMemoryBufferLen(len(arg491))
    defer mbTrans492.Close()
    _, err493 := mbTrans492.WriteString(arg491)
    if err493 != nil {
      Usage()
      return
    }
    factory494 := thrift.NewSimpleJSONProtocolFactory()
    jsProt495 := factory494.GetProtocol(mbTrans492)
    argvalue0 := meta.NewAlterUserReq()
    err496 := argvalue0.Read(jsProt495)
    if err496 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg497 := flag.Arg(1)
    mbTrans498 := thrift.NewMemoryBufferLen(len(arg497))
    defer mbTrans498.Close()
    _, err499 := mbTrans498.WriteString(arg497)
    if err499 != nil {
      Usage()
      return
    }
    factory500 := thrift.NewSimpleJSONProtocolFactory()
    jsProt501 := factory500.GetProtocol(mbTrans498)
    argvalue0 := meta.NewGrantRoleReq()
    err502 := argvalue0.Read(jsProt501)
    if err502 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg503 := flag.Arg(1)
    mbTrans504 := thrift.NewMemoryBufferLen(len(arg503))
    defer mbTrans504.Close()
    _, err505 := mbTrans504.WriteString(arg503)
    if err505 != nil {
      Usage()
      return
    }
    factory506 := thrift.NewSimpleJSONProtocolFactory()
    jsProt507 := factory506.GetProtocol(mbTrans504)
    argvalue0 := meta.NewRevokeRoleReq()
    err508 := argvalue0.Read(jsProt507)
    if err508 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg509 := flag.Arg(1)
    mbTrans510 := thrift.NewMemoryBufferLen(len(arg509))
    defer mbTrans510.Close()
    _, err511 := mbTrans510.WriteString(arg509)
    if err511 != nil {
      Usage()
      return
    }
    factory512 := thrift.NewSimpleJSONProtocolFactory()
    jsProt513 := factory512.GetProtocol(mbTrans510)
    argvalue0 := meta.NewListUsersReq()
    err514 := argvalue0.Read(jsProt513)
    if err514 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg515 := flag.Arg(1)
    mbTrans516 := thrift.NewMemoryBufferLen(len(arg515))
    defer mbTrans516.Close()
    _, err517 := mbTrans516.WriteString(arg515)
    if err517 != nil {
      Usage()
      return
    }
    factory518 := thrift.NewSimpleJSONProtocolFactory()
    jsProt519 := factory518.GetProtocol(mbTrans516)
    argvalue0 := meta.NewListRolesReq()
    err520 := argvalue0.Read(jsProt519)
    if err520 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(value0))
    fmt.Print("\n")
    break
  case "getUserRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserRoles requires 1 args")
      flag.Usage()
    }
    arg521 := flag.Arg(1)
    mbTrans522 := thrift.NewMemoryBufferLen(len(arg521))
    defer mbTrans522.Close()
    _, err523 := mbTrans522.WriteString(arg521)
    if err523 != nil {
      Usage()
      return
    }
    factory524 := thrift.NewSimpleJSONProtocolFactory()
    jsProt525 := factory524.GetProtocol(mbTrans522)
    argvalue0 := meta.NewGetUserRolesReq()
    err526 := argvalue0.Read(jsProt525)
    if err526 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserRoles(value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg527 := flag.Arg(1)
    mbTrans528 := thrift.NewMemoryBufferLen(len(arg527))
    defer mbTrans528.Close()
    _, err529 := mbTrans528.WriteString(arg527)
    if err529 != nil {
      Usage()
      return
    }
    factory530 := thrift.NewSimpleJSONProtocolFactory()
    jsProt531 := factory530.GetProtocol(mbTrans528)
    argvalue0 := meta.NewChangePasswordReq()
    err532 := argvalue0.Read(jsProt531)
    if err532 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg533 := flag.Arg(1)
    mbTrans534 := thrift.NewMemoryBufferLen(len(arg533))
    defer mbTrans534.Close()
    _, err535 := mbTrans534.WriteString(arg533)
    if err535 != nil {
      Usage()
      return
    }
    factory536 := thrift.NewSimpleJSONProtocolFactory()
    jsProt537 := factory536.GetProtocol(mbTrans534)
    argvalue0 := meta.NewHBReq()
    err538 := argvalue0.Read(jsProt537)
    if err538 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg539 := flag.Arg(1)
    mbTrans540 := thrift.NewMemoryBufferLen(len(arg539))
    defer mbTrans540.Close()
    _, err541 := mbTrans540.WriteString(arg539)
    if err541 != nil {
      Usage()
      return
    }
    factory542 := thrift.NewSimpleJSONProtocolFactory()
    jsProt543 := factory542.GetProtocol(mbTrans540)
    argvalue0 := meta.NewBalanceReq()
    err544 := argvalue0.Read(jsProt543)
    if err544 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(value0))
    fmt.Print("\n")
    break
  case "leaderBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LeaderBalance requires 1 args")
      flag.Usage()
    }
    arg545 := flag.Arg(1)
    mbTrans546 := thrift.NewMemoryBufferLen(len(arg545))
    defer mbTrans546.Close()
    _, err547 := mbTrans546.WriteString(arg545)
    if err547 != nil {
      Usage()
      return
    }
    factory548 := thrift.NewSimpleJSONProtocolFactory()
    jsProt549 := factory548.GetProtocol(mbTrans546)
    argvalue0 := meta.NewLeaderBalanceReq()
    err550 := argvalue0.Read(jsProt549)
    if err550 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LeaderBalance(value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg551 := flag.Arg(1)
    mbTrans552 := thrift.NewMemoryBufferLen(len(arg551))
    defer mbTrans552.Close()
    _, err553 := mbTrans552.WriteString(arg551)
    if err553 != nil {
      Usage()
      return
    }
    factory554 := thrift.NewSimpleJSONProtocolFactory()
    jsProt555 := factory554.GetProtocol(mbTrans552)
    argvalue0 := meta.NewRegConfigReq()
    err556 := argvalue0.Read(jsProt555)
    if err556 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg557 := flag.Arg(1)
    mbTrans558 := thrift.NewMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewSimpleJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue0 := meta.NewGetConfigReq()
    err562 := argvalue0.Read(jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg563 := flag.Arg(1)
    mbTrans564 := thrift.NewMemoryBufferLen(len(arg563))
    defer mbTrans564.Close()
    _, err565 := mbTrans564.WriteString(arg563)
    if err565 != nil {
      Usage()
      return
    }
    factory566 := thrift.NewSimpleJSONProtocolFactory()
    jsProt567 := factory566.GetProtocol(mbTrans564)
    argvalue0 := meta.NewSetConfigReq()
    err568 := argvalue0.Read(jsProt567)
    if err568 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg569 := flag.Arg(1)
    mbTrans570 := thrift.NewMemoryBufferLen(len(arg569))
    defer mbTrans570.Close()
    _, err571 := mbTrans570.WriteString(arg569)
    if err571 != nil {
      Usage()
      return
    }
    factory572 := thrift.NewSimpleJSONProtocolFactory()
    jsProt573 := factory572.GetProtocol(mbTrans570)
    argvalue0 := meta.NewListConfigsReq()
    err574 := argvalue0.Read(jsProt573)
    if err574 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(value0))
    fmt.Print("\n")
    break
  case "createSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSnapshot requires 1 args")
      flag.Usage()
    }
    arg575 := flag.Arg(1)
    mbTrans576 := thrift.NewMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewSimpleJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue0 := meta.NewCreateSnapshotReq()
    err580 := argvalue0.Read(jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSnapshot(value0))
    fmt.Print("\n")
    break
  case "dropSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSnapshot requires 1 args")
      flag.Usage()
    }
    arg581 := flag.Arg(1)
    mbTrans582 := thrift.NewMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewSimpleJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue0 := meta.NewDropSnapshotReq()
    err586 := argvalue0.Read(jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSnapshot(value0))
    fmt.Print("\n")
    break
  case "listSnapshots":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
      flag.Usage()
    }
    arg587 := flag.Arg(1)
    mbTrans588 := thrift.NewMemoryBufferLen(len(arg587))
    defer mbTrans588.Close()
    _, err589 := mbTrans588.WriteString(arg587)
    if err589 != nil {
      Usage()
      return
    }
    factory590 := thrift.NewSimpleJSONProtocolFactory()
    jsProt591 := factory590.GetProtocol(mbTrans588)
    argvalue0 := meta.NewListSnapshotsReq()
    err592 := argvalue0.Read(jsProt591)
    if err592 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSnapshots(value0))
    fmt.Print("\n")
    break
  case "runAdminJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RunAdminJob requires 1 args")
      flag.Usage()
    }
    arg593 := flag.Arg(1)
    mbTrans594 := thrift.NewMemoryBufferLen(len(arg593))
    defer mbTrans594.Close()
    _, err595 := mbTrans594.WriteString(arg593)
    if err595 != nil {
      Usage()
      return
    }
    factory596 := thrift.NewSimpleJSONProtocolFactory()
    jsProt597 := factory596.GetProtocol(mbTrans594)
    argvalue0 := meta.NewAdminJobReq()
    err598 := argvalue0.Read(jsProt597)
    if err598 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RunAdminJob(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
