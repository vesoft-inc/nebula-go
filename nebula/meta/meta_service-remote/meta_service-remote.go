// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/nebula/meta"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ListPartsResp listParts(ListPartsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp multiPut(MultiPutReq req)")
  fmt.Fprintln(os.Stderr, "  GetResp get(GetReq req)")
  fmt.Fprintln(os.Stderr, "  MultiGetResp multiGet(MultiGetReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp remove(RemoveReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeRange(RemoveRangeReq req)")
  fmt.Fprintln(os.Stderr, "  ScanResp scan(ScanReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTagIndex(CreateTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTagIndex(DropTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagIndexResp getTagIndex(GetTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildTagIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdgeIndex(CreateEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdgeIndex(DropEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildEdgeIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp getUserRoles(GetUserRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  BalanceResp balance(BalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp leaderBalance(LeaderBalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSnapshot(CreateSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSnapshot(DropSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ListSnapshotsResp listSnapshots(ListSnapshotsReq req)")
  fmt.Fprintln(os.Stderr, "  AdminJobResp runAdminJob(AdminJobReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZone(AddZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZone(DropZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHostIntoZone(AddHostIntoZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropHostFromZone(DropHostFromZoneReq req)")
  fmt.Fprintln(os.Stderr, "  GetZoneResp getZone(GetZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ListZonesResp listZones(ListZonesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addGroup(AddGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropGroup(DropGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZoneIntoGroup(AddZoneIntoGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZoneFromGroup(DropZoneFromGroupReq req)")
  fmt.Fprintln(os.Stderr, "  GetGroupResp getGroup(GetGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ListGroupsResp listGroups(ListGroupsReq req)")
  fmt.Fprintln(os.Stderr, "  CreateBackupResp createBackup(CreateBackupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp restoreMeta(RestoreMetaReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addListener(AddListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeListener(RemoveListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ListListenerResp listListener(ListListenerReq req)")
  fmt.Fprintln(os.Stderr, "  GetStatisResp getStatis(GetStatisReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signInFTService(SignInFTServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signOutFTService(SignOutFTServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ListFTClientsResp listFTClients(ListFTClientsReq req)")
  fmt.Fprintln(os.Stderr, "  CreateSessionResp createSession(CreateSessionReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp updateSessions(UpdateSessionsReq req)")
  fmt.Fprintln(os.Stderr, "  ListSessionsResp listSessions(ListSessionsReq req)")
  fmt.Fprintln(os.Stderr, "  GetSessionResp getSession(GetSessionReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeSession(RemoveSessionReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp reportTaskFinish(ReportTaskReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := meta.NewMetaServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg407 := flag.Arg(1)
    mbTrans408 := thrift.NewMemoryBufferLen(len(arg407))
    defer mbTrans408.Close()
    _, err409 := mbTrans408.WriteString(arg407)
    if err409 != nil {
      Usage()
      return
    }
    factory410 := thrift.NewSimpleJSONProtocolFactory()
    jsProt411 := factory410.GetProtocol(mbTrans408)
    argvalue0 := meta.NewCreateSpaceReq()
    err412 := argvalue0.Read(jsProt411)
    if err412 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg413 := flag.Arg(1)
    mbTrans414 := thrift.NewMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil {
      Usage()
      return
    }
    factory416 := thrift.NewSimpleJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    argvalue0 := meta.NewDropSpaceReq()
    err418 := argvalue0.Read(jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg419 := flag.Arg(1)
    mbTrans420 := thrift.NewMemoryBufferLen(len(arg419))
    defer mbTrans420.Close()
    _, err421 := mbTrans420.WriteString(arg419)
    if err421 != nil {
      Usage()
      return
    }
    factory422 := thrift.NewSimpleJSONProtocolFactory()
    jsProt423 := factory422.GetProtocol(mbTrans420)
    argvalue0 := meta.NewGetSpaceReq()
    err424 := argvalue0.Read(jsProt423)
    if err424 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg425 := flag.Arg(1)
    mbTrans426 := thrift.NewMemoryBufferLen(len(arg425))
    defer mbTrans426.Close()
    _, err427 := mbTrans426.WriteString(arg425)
    if err427 != nil {
      Usage()
      return
    }
    factory428 := thrift.NewSimpleJSONProtocolFactory()
    jsProt429 := factory428.GetProtocol(mbTrans426)
    argvalue0 := meta.NewListSpacesReq()
    err430 := argvalue0.Read(jsProt429)
    if err430 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg431 := flag.Arg(1)
    mbTrans432 := thrift.NewMemoryBufferLen(len(arg431))
    defer mbTrans432.Close()
    _, err433 := mbTrans432.WriteString(arg431)
    if err433 != nil {
      Usage()
      return
    }
    factory434 := thrift.NewSimpleJSONProtocolFactory()
    jsProt435 := factory434.GetProtocol(mbTrans432)
    argvalue0 := meta.NewCreateTagReq()
    err436 := argvalue0.Read(jsProt435)
    if err436 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg437 := flag.Arg(1)
    mbTrans438 := thrift.NewMemoryBufferLen(len(arg437))
    defer mbTrans438.Close()
    _, err439 := mbTrans438.WriteString(arg437)
    if err439 != nil {
      Usage()
      return
    }
    factory440 := thrift.NewSimpleJSONProtocolFactory()
    jsProt441 := factory440.GetProtocol(mbTrans438)
    argvalue0 := meta.NewAlterTagReq()
    err442 := argvalue0.Read(jsProt441)
    if err442 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg443 := flag.Arg(1)
    mbTrans444 := thrift.NewMemoryBufferLen(len(arg443))
    defer mbTrans444.Close()
    _, err445 := mbTrans444.WriteString(arg443)
    if err445 != nil {
      Usage()
      return
    }
    factory446 := thrift.NewSimpleJSONProtocolFactory()
    jsProt447 := factory446.GetProtocol(mbTrans444)
    argvalue0 := meta.NewDropTagReq()
    err448 := argvalue0.Read(jsProt447)
    if err448 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg449 := flag.Arg(1)
    mbTrans450 := thrift.NewMemoryBufferLen(len(arg449))
    defer mbTrans450.Close()
    _, err451 := mbTrans450.WriteString(arg449)
    if err451 != nil {
      Usage()
      return
    }
    factory452 := thrift.NewSimpleJSONProtocolFactory()
    jsProt453 := factory452.GetProtocol(mbTrans450)
    argvalue0 := meta.NewGetTagReq()
    err454 := argvalue0.Read(jsProt453)
    if err454 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg455 := flag.Arg(1)
    mbTrans456 := thrift.NewMemoryBufferLen(len(arg455))
    defer mbTrans456.Close()
    _, err457 := mbTrans456.WriteString(arg455)
    if err457 != nil {
      Usage()
      return
    }
    factory458 := thrift.NewSimpleJSONProtocolFactory()
    jsProt459 := factory458.GetProtocol(mbTrans456)
    argvalue0 := meta.NewListTagsReq()
    err460 := argvalue0.Read(jsProt459)
    if err460 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg461 := flag.Arg(1)
    mbTrans462 := thrift.NewMemoryBufferLen(len(arg461))
    defer mbTrans462.Close()
    _, err463 := mbTrans462.WriteString(arg461)
    if err463 != nil {
      Usage()
      return
    }
    factory464 := thrift.NewSimpleJSONProtocolFactory()
    jsProt465 := factory464.GetProtocol(mbTrans462)
    argvalue0 := meta.NewCreateEdgeReq()
    err466 := argvalue0.Read(jsProt465)
    if err466 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg467 := flag.Arg(1)
    mbTrans468 := thrift.NewMemoryBufferLen(len(arg467))
    defer mbTrans468.Close()
    _, err469 := mbTrans468.WriteString(arg467)
    if err469 != nil {
      Usage()
      return
    }
    factory470 := thrift.NewSimpleJSONProtocolFactory()
    jsProt471 := factory470.GetProtocol(mbTrans468)
    argvalue0 := meta.NewAlterEdgeReq()
    err472 := argvalue0.Read(jsProt471)
    if err472 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg473 := flag.Arg(1)
    mbTrans474 := thrift.NewMemoryBufferLen(len(arg473))
    defer mbTrans474.Close()
    _, err475 := mbTrans474.WriteString(arg473)
    if err475 != nil {
      Usage()
      return
    }
    factory476 := thrift.NewSimpleJSONProtocolFactory()
    jsProt477 := factory476.GetProtocol(mbTrans474)
    argvalue0 := meta.NewDropEdgeReq()
    err478 := argvalue0.Read(jsProt477)
    if err478 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg479 := flag.Arg(1)
    mbTrans480 := thrift.NewMemoryBufferLen(len(arg479))
    defer mbTrans480.Close()
    _, err481 := mbTrans480.WriteString(arg479)
    if err481 != nil {
      Usage()
      return
    }
    factory482 := thrift.NewSimpleJSONProtocolFactory()
    jsProt483 := factory482.GetProtocol(mbTrans480)
    argvalue0 := meta.NewGetEdgeReq()
    err484 := argvalue0.Read(jsProt483)
    if err484 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg485 := flag.Arg(1)
    mbTrans486 := thrift.NewMemoryBufferLen(len(arg485))
    defer mbTrans486.Close()
    _, err487 := mbTrans486.WriteString(arg485)
    if err487 != nil {
      Usage()
      return
    }
    factory488 := thrift.NewSimpleJSONProtocolFactory()
    jsProt489 := factory488.GetProtocol(mbTrans486)
    argvalue0 := meta.NewListEdgesReq()
    err490 := argvalue0.Read(jsProt489)
    if err490 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg491 := flag.Arg(1)
    mbTrans492 := thrift.NewMemoryBufferLen(len(arg491))
    defer mbTrans492.Close()
    _, err493 := mbTrans492.WriteString(arg491)
    if err493 != nil {
      Usage()
      return
    }
    factory494 := thrift.NewSimpleJSONProtocolFactory()
    jsProt495 := factory494.GetProtocol(mbTrans492)
    argvalue0 := meta.NewListHostsReq()
    err496 := argvalue0.Read(jsProt495)
    if err496 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg497 := flag.Arg(1)
    mbTrans498 := thrift.NewMemoryBufferLen(len(arg497))
    defer mbTrans498.Close()
    _, err499 := mbTrans498.WriteString(arg497)
    if err499 != nil {
      Usage()
      return
    }
    factory500 := thrift.NewSimpleJSONProtocolFactory()
    jsProt501 := factory500.GetProtocol(mbTrans498)
    argvalue0 := meta.NewGetPartsAllocReq()
    err502 := argvalue0.Read(jsProt501)
    if err502 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(value0))
    fmt.Print("\n")
    break
  case "listParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListParts requires 1 args")
      flag.Usage()
    }
    arg503 := flag.Arg(1)
    mbTrans504 := thrift.NewMemoryBufferLen(len(arg503))
    defer mbTrans504.Close()
    _, err505 := mbTrans504.WriteString(arg503)
    if err505 != nil {
      Usage()
      return
    }
    factory506 := thrift.NewSimpleJSONProtocolFactory()
    jsProt507 := factory506.GetProtocol(mbTrans504)
    argvalue0 := meta.NewListPartsReq()
    err508 := argvalue0.Read(jsProt507)
    if err508 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListParts(value0))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg509 := flag.Arg(1)
    mbTrans510 := thrift.NewMemoryBufferLen(len(arg509))
    defer mbTrans510.Close()
    _, err511 := mbTrans510.WriteString(arg509)
    if err511 != nil {
      Usage()
      return
    }
    factory512 := thrift.NewSimpleJSONProtocolFactory()
    jsProt513 := factory512.GetProtocol(mbTrans510)
    argvalue0 := meta.NewMultiPutReq()
    err514 := argvalue0.Read(jsProt513)
    if err514 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg515 := flag.Arg(1)
    mbTrans516 := thrift.NewMemoryBufferLen(len(arg515))
    defer mbTrans516.Close()
    _, err517 := mbTrans516.WriteString(arg515)
    if err517 != nil {
      Usage()
      return
    }
    factory518 := thrift.NewSimpleJSONProtocolFactory()
    jsProt519 := factory518.GetProtocol(mbTrans516)
    argvalue0 := meta.NewGetReq()
    err520 := argvalue0.Read(jsProt519)
    if err520 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "multiGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg521 := flag.Arg(1)
    mbTrans522 := thrift.NewMemoryBufferLen(len(arg521))
    defer mbTrans522.Close()
    _, err523 := mbTrans522.WriteString(arg521)
    if err523 != nil {
      Usage()
      return
    }
    factory524 := thrift.NewSimpleJSONProtocolFactory()
    jsProt525 := factory524.GetProtocol(mbTrans522)
    argvalue0 := meta.NewMultiGetReq()
    err526 := argvalue0.Read(jsProt525)
    if err526 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg527 := flag.Arg(1)
    mbTrans528 := thrift.NewMemoryBufferLen(len(arg527))
    defer mbTrans528.Close()
    _, err529 := mbTrans528.WriteString(arg527)
    if err529 != nil {
      Usage()
      return
    }
    factory530 := thrift.NewSimpleJSONProtocolFactory()
    jsProt531 := factory530.GetProtocol(mbTrans528)
    argvalue0 := meta.NewRemoveReq()
    err532 := argvalue0.Read(jsProt531)
    if err532 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg533 := flag.Arg(1)
    mbTrans534 := thrift.NewMemoryBufferLen(len(arg533))
    defer mbTrans534.Close()
    _, err535 := mbTrans534.WriteString(arg533)
    if err535 != nil {
      Usage()
      return
    }
    factory536 := thrift.NewSimpleJSONProtocolFactory()
    jsProt537 := factory536.GetProtocol(mbTrans534)
    argvalue0 := meta.NewRemoveRangeReq()
    err538 := argvalue0.Read(jsProt537)
    if err538 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg539 := flag.Arg(1)
    mbTrans540 := thrift.NewMemoryBufferLen(len(arg539))
    defer mbTrans540.Close()
    _, err541 := mbTrans540.WriteString(arg539)
    if err541 != nil {
      Usage()
      return
    }
    factory542 := thrift.NewSimpleJSONProtocolFactory()
    jsProt543 := factory542.GetProtocol(mbTrans540)
    argvalue0 := meta.NewScanReq()
    err544 := argvalue0.Read(jsProt543)
    if err544 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(value0))
    fmt.Print("\n")
    break
  case "createTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTagIndex requires 1 args")
      flag.Usage()
    }
    arg545 := flag.Arg(1)
    mbTrans546 := thrift.NewMemoryBufferLen(len(arg545))
    defer mbTrans546.Close()
    _, err547 := mbTrans546.WriteString(arg545)
    if err547 != nil {
      Usage()
      return
    }
    factory548 := thrift.NewSimpleJSONProtocolFactory()
    jsProt549 := factory548.GetProtocol(mbTrans546)
    argvalue0 := meta.NewCreateTagIndexReq()
    err550 := argvalue0.Read(jsProt549)
    if err550 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTagIndex(value0))
    fmt.Print("\n")
    break
  case "dropTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTagIndex requires 1 args")
      flag.Usage()
    }
    arg551 := flag.Arg(1)
    mbTrans552 := thrift.NewMemoryBufferLen(len(arg551))
    defer mbTrans552.Close()
    _, err553 := mbTrans552.WriteString(arg551)
    if err553 != nil {
      Usage()
      return
    }
    factory554 := thrift.NewSimpleJSONProtocolFactory()
    jsProt555 := factory554.GetProtocol(mbTrans552)
    argvalue0 := meta.NewDropTagIndexReq()
    err556 := argvalue0.Read(jsProt555)
    if err556 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTagIndex(value0))
    fmt.Print("\n")
    break
  case "getTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTagIndex requires 1 args")
      flag.Usage()
    }
    arg557 := flag.Arg(1)
    mbTrans558 := thrift.NewMemoryBufferLen(len(arg557))
    defer mbTrans558.Close()
    _, err559 := mbTrans558.WriteString(arg557)
    if err559 != nil {
      Usage()
      return
    }
    factory560 := thrift.NewSimpleJSONProtocolFactory()
    jsProt561 := factory560.GetProtocol(mbTrans558)
    argvalue0 := meta.NewGetTagIndexReq()
    err562 := argvalue0.Read(jsProt561)
    if err562 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexes requires 1 args")
      flag.Usage()
    }
    arg563 := flag.Arg(1)
    mbTrans564 := thrift.NewMemoryBufferLen(len(arg563))
    defer mbTrans564.Close()
    _, err565 := mbTrans564.WriteString(arg563)
    if err565 != nil {
      Usage()
      return
    }
    factory566 := thrift.NewSimpleJSONProtocolFactory()
    jsProt567 := factory566.GetProtocol(mbTrans564)
    argvalue0 := meta.NewListTagIndexesReq()
    err568 := argvalue0.Read(jsProt567)
    if err568 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg569 := flag.Arg(1)
    mbTrans570 := thrift.NewMemoryBufferLen(len(arg569))
    defer mbTrans570.Close()
    _, err571 := mbTrans570.WriteString(arg569)
    if err571 != nil {
      Usage()
      return
    }
    factory572 := thrift.NewSimpleJSONProtocolFactory()
    jsProt573 := factory572.GetProtocol(mbTrans570)
    argvalue0 := meta.NewRebuildIndexReq()
    err574 := argvalue0.Read(jsProt573)
    if err574 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexStatus requires 1 args")
      flag.Usage()
    }
    arg575 := flag.Arg(1)
    mbTrans576 := thrift.NewMemoryBufferLen(len(arg575))
    defer mbTrans576.Close()
    _, err577 := mbTrans576.WriteString(arg575)
    if err577 != nil {
      Usage()
      return
    }
    factory578 := thrift.NewSimpleJSONProtocolFactory()
    jsProt579 := factory578.GetProtocol(mbTrans576)
    argvalue0 := meta.NewListIndexStatusReq()
    err580 := argvalue0.Read(jsProt579)
    if err580 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg581 := flag.Arg(1)
    mbTrans582 := thrift.NewMemoryBufferLen(len(arg581))
    defer mbTrans582.Close()
    _, err583 := mbTrans582.WriteString(arg581)
    if err583 != nil {
      Usage()
      return
    }
    factory584 := thrift.NewSimpleJSONProtocolFactory()
    jsProt585 := factory584.GetProtocol(mbTrans582)
    argvalue0 := meta.NewCreateEdgeIndexReq()
    err586 := argvalue0.Read(jsProt585)
    if err586 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "dropEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg587 := flag.Arg(1)
    mbTrans588 := thrift.NewMemoryBufferLen(len(arg587))
    defer mbTrans588.Close()
    _, err589 := mbTrans588.WriteString(arg587)
    if err589 != nil {
      Usage()
      return
    }
    factory590 := thrift.NewSimpleJSONProtocolFactory()
    jsProt591 := factory590.GetProtocol(mbTrans588)
    argvalue0 := meta.NewDropEdgeIndexReq()
    err592 := argvalue0.Read(jsProt591)
    if err592 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "getEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg593 := flag.Arg(1)
    mbTrans594 := thrift.NewMemoryBufferLen(len(arg593))
    defer mbTrans594.Close()
    _, err595 := mbTrans594.WriteString(arg593)
    if err595 != nil {
      Usage()
      return
    }
    factory596 := thrift.NewSimpleJSONProtocolFactory()
    jsProt597 := factory596.GetProtocol(mbTrans594)
    argvalue0 := meta.NewGetEdgeIndexReq()
    err598 := argvalue0.Read(jsProt597)
    if err598 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexes requires 1 args")
      flag.Usage()
    }
    arg599 := flag.Arg(1)
    mbTrans600 := thrift.NewMemoryBufferLen(len(arg599))
    defer mbTrans600.Close()
    _, err601 := mbTrans600.WriteString(arg599)
    if err601 != nil {
      Usage()
      return
    }
    factory602 := thrift.NewSimpleJSONProtocolFactory()
    jsProt603 := factory602.GetProtocol(mbTrans600)
    argvalue0 := meta.NewListEdgeIndexesReq()
    err604 := argvalue0.Read(jsProt603)
    if err604 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg605 := flag.Arg(1)
    mbTrans606 := thrift.NewMemoryBufferLen(len(arg605))
    defer mbTrans606.Close()
    _, err607 := mbTrans606.WriteString(arg605)
    if err607 != nil {
      Usage()
      return
    }
    factory608 := thrift.NewSimpleJSONProtocolFactory()
    jsProt609 := factory608.GetProtocol(mbTrans606)
    argvalue0 := meta.NewRebuildIndexReq()
    err610 := argvalue0.Read(jsProt609)
    if err610 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexStatus requires 1 args")
      flag.Usage()
    }
    arg611 := flag.Arg(1)
    mbTrans612 := thrift.NewMemoryBufferLen(len(arg611))
    defer mbTrans612.Close()
    _, err613 := mbTrans612.WriteString(arg611)
    if err613 != nil {
      Usage()
      return
    }
    factory614 := thrift.NewSimpleJSONProtocolFactory()
    jsProt615 := factory614.GetProtocol(mbTrans612)
    argvalue0 := meta.NewListIndexStatusReq()
    err616 := argvalue0.Read(jsProt615)
    if err616 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg617 := flag.Arg(1)
    mbTrans618 := thrift.NewMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil {
      Usage()
      return
    }
    factory620 := thrift.NewSimpleJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    argvalue0 := meta.NewCreateUserReq()
    err622 := argvalue0.Read(jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg623 := flag.Arg(1)
    mbTrans624 := thrift.NewMemoryBufferLen(len(arg623))
    defer mbTrans624.Close()
    _, err625 := mbTrans624.WriteString(arg623)
    if err625 != nil {
      Usage()
      return
    }
    factory626 := thrift.NewSimpleJSONProtocolFactory()
    jsProt627 := factory626.GetProtocol(mbTrans624)
    argvalue0 := meta.NewDropUserReq()
    err628 := argvalue0.Read(jsProt627)
    if err628 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg629 := flag.Arg(1)
    mbTrans630 := thrift.NewMemoryBufferLen(len(arg629))
    defer mbTrans630.Close()
    _, err631 := mbTrans630.WriteString(arg629)
    if err631 != nil {
      Usage()
      return
    }
    factory632 := thrift.NewSimpleJSONProtocolFactory()
    jsProt633 := factory632.GetProtocol(mbTrans630)
    argvalue0 := meta.NewAlterUserReq()
    err634 := argvalue0.Read(jsProt633)
    if err634 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg635 := flag.Arg(1)
    mbTrans636 := thrift.NewMemoryBufferLen(len(arg635))
    defer mbTrans636.Close()
    _, err637 := mbTrans636.WriteString(arg635)
    if err637 != nil {
      Usage()
      return
    }
    factory638 := thrift.NewSimpleJSONProtocolFactory()
    jsProt639 := factory638.GetProtocol(mbTrans636)
    argvalue0 := meta.NewGrantRoleReq()
    err640 := argvalue0.Read(jsProt639)
    if err640 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg641 := flag.Arg(1)
    mbTrans642 := thrift.NewMemoryBufferLen(len(arg641))
    defer mbTrans642.Close()
    _, err643 := mbTrans642.WriteString(arg641)
    if err643 != nil {
      Usage()
      return
    }
    factory644 := thrift.NewSimpleJSONProtocolFactory()
    jsProt645 := factory644.GetProtocol(mbTrans642)
    argvalue0 := meta.NewRevokeRoleReq()
    err646 := argvalue0.Read(jsProt645)
    if err646 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg647 := flag.Arg(1)
    mbTrans648 := thrift.NewMemoryBufferLen(len(arg647))
    defer mbTrans648.Close()
    _, err649 := mbTrans648.WriteString(arg647)
    if err649 != nil {
      Usage()
      return
    }
    factory650 := thrift.NewSimpleJSONProtocolFactory()
    jsProt651 := factory650.GetProtocol(mbTrans648)
    argvalue0 := meta.NewListUsersReq()
    err652 := argvalue0.Read(jsProt651)
    if err652 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg653 := flag.Arg(1)
    mbTrans654 := thrift.NewMemoryBufferLen(len(arg653))
    defer mbTrans654.Close()
    _, err655 := mbTrans654.WriteString(arg653)
    if err655 != nil {
      Usage()
      return
    }
    factory656 := thrift.NewSimpleJSONProtocolFactory()
    jsProt657 := factory656.GetProtocol(mbTrans654)
    argvalue0 := meta.NewListRolesReq()
    err658 := argvalue0.Read(jsProt657)
    if err658 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(value0))
    fmt.Print("\n")
    break
  case "getUserRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserRoles requires 1 args")
      flag.Usage()
    }
    arg659 := flag.Arg(1)
    mbTrans660 := thrift.NewMemoryBufferLen(len(arg659))
    defer mbTrans660.Close()
    _, err661 := mbTrans660.WriteString(arg659)
    if err661 != nil {
      Usage()
      return
    }
    factory662 := thrift.NewSimpleJSONProtocolFactory()
    jsProt663 := factory662.GetProtocol(mbTrans660)
    argvalue0 := meta.NewGetUserRolesReq()
    err664 := argvalue0.Read(jsProt663)
    if err664 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserRoles(value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg665 := flag.Arg(1)
    mbTrans666 := thrift.NewMemoryBufferLen(len(arg665))
    defer mbTrans666.Close()
    _, err667 := mbTrans666.WriteString(arg665)
    if err667 != nil {
      Usage()
      return
    }
    factory668 := thrift.NewSimpleJSONProtocolFactory()
    jsProt669 := factory668.GetProtocol(mbTrans666)
    argvalue0 := meta.NewChangePasswordReq()
    err670 := argvalue0.Read(jsProt669)
    if err670 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg671 := flag.Arg(1)
    mbTrans672 := thrift.NewMemoryBufferLen(len(arg671))
    defer mbTrans672.Close()
    _, err673 := mbTrans672.WriteString(arg671)
    if err673 != nil {
      Usage()
      return
    }
    factory674 := thrift.NewSimpleJSONProtocolFactory()
    jsProt675 := factory674.GetProtocol(mbTrans672)
    argvalue0 := meta.NewHBReq()
    err676 := argvalue0.Read(jsProt675)
    if err676 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg677 := flag.Arg(1)
    mbTrans678 := thrift.NewMemoryBufferLen(len(arg677))
    defer mbTrans678.Close()
    _, err679 := mbTrans678.WriteString(arg677)
    if err679 != nil {
      Usage()
      return
    }
    factory680 := thrift.NewSimpleJSONProtocolFactory()
    jsProt681 := factory680.GetProtocol(mbTrans678)
    argvalue0 := meta.NewBalanceReq()
    err682 := argvalue0.Read(jsProt681)
    if err682 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(value0))
    fmt.Print("\n")
    break
  case "leaderBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LeaderBalance requires 1 args")
      flag.Usage()
    }
    arg683 := flag.Arg(1)
    mbTrans684 := thrift.NewMemoryBufferLen(len(arg683))
    defer mbTrans684.Close()
    _, err685 := mbTrans684.WriteString(arg683)
    if err685 != nil {
      Usage()
      return
    }
    factory686 := thrift.NewSimpleJSONProtocolFactory()
    jsProt687 := factory686.GetProtocol(mbTrans684)
    argvalue0 := meta.NewLeaderBalanceReq()
    err688 := argvalue0.Read(jsProt687)
    if err688 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LeaderBalance(value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg689 := flag.Arg(1)
    mbTrans690 := thrift.NewMemoryBufferLen(len(arg689))
    defer mbTrans690.Close()
    _, err691 := mbTrans690.WriteString(arg689)
    if err691 != nil {
      Usage()
      return
    }
    factory692 := thrift.NewSimpleJSONProtocolFactory()
    jsProt693 := factory692.GetProtocol(mbTrans690)
    argvalue0 := meta.NewRegConfigReq()
    err694 := argvalue0.Read(jsProt693)
    if err694 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg695 := flag.Arg(1)
    mbTrans696 := thrift.NewMemoryBufferLen(len(arg695))
    defer mbTrans696.Close()
    _, err697 := mbTrans696.WriteString(arg695)
    if err697 != nil {
      Usage()
      return
    }
    factory698 := thrift.NewSimpleJSONProtocolFactory()
    jsProt699 := factory698.GetProtocol(mbTrans696)
    argvalue0 := meta.NewGetConfigReq()
    err700 := argvalue0.Read(jsProt699)
    if err700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg701 := flag.Arg(1)
    mbTrans702 := thrift.NewMemoryBufferLen(len(arg701))
    defer mbTrans702.Close()
    _, err703 := mbTrans702.WriteString(arg701)
    if err703 != nil {
      Usage()
      return
    }
    factory704 := thrift.NewSimpleJSONProtocolFactory()
    jsProt705 := factory704.GetProtocol(mbTrans702)
    argvalue0 := meta.NewSetConfigReq()
    err706 := argvalue0.Read(jsProt705)
    if err706 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg707 := flag.Arg(1)
    mbTrans708 := thrift.NewMemoryBufferLen(len(arg707))
    defer mbTrans708.Close()
    _, err709 := mbTrans708.WriteString(arg707)
    if err709 != nil {
      Usage()
      return
    }
    factory710 := thrift.NewSimpleJSONProtocolFactory()
    jsProt711 := factory710.GetProtocol(mbTrans708)
    argvalue0 := meta.NewListConfigsReq()
    err712 := argvalue0.Read(jsProt711)
    if err712 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(value0))
    fmt.Print("\n")
    break
  case "createSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSnapshot requires 1 args")
      flag.Usage()
    }
    arg713 := flag.Arg(1)
    mbTrans714 := thrift.NewMemoryBufferLen(len(arg713))
    defer mbTrans714.Close()
    _, err715 := mbTrans714.WriteString(arg713)
    if err715 != nil {
      Usage()
      return
    }
    factory716 := thrift.NewSimpleJSONProtocolFactory()
    jsProt717 := factory716.GetProtocol(mbTrans714)
    argvalue0 := meta.NewCreateSnapshotReq()
    err718 := argvalue0.Read(jsProt717)
    if err718 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSnapshot(value0))
    fmt.Print("\n")
    break
  case "dropSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSnapshot requires 1 args")
      flag.Usage()
    }
    arg719 := flag.Arg(1)
    mbTrans720 := thrift.NewMemoryBufferLen(len(arg719))
    defer mbTrans720.Close()
    _, err721 := mbTrans720.WriteString(arg719)
    if err721 != nil {
      Usage()
      return
    }
    factory722 := thrift.NewSimpleJSONProtocolFactory()
    jsProt723 := factory722.GetProtocol(mbTrans720)
    argvalue0 := meta.NewDropSnapshotReq()
    err724 := argvalue0.Read(jsProt723)
    if err724 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSnapshot(value0))
    fmt.Print("\n")
    break
  case "listSnapshots":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
      flag.Usage()
    }
    arg725 := flag.Arg(1)
    mbTrans726 := thrift.NewMemoryBufferLen(len(arg725))
    defer mbTrans726.Close()
    _, err727 := mbTrans726.WriteString(arg725)
    if err727 != nil {
      Usage()
      return
    }
    factory728 := thrift.NewSimpleJSONProtocolFactory()
    jsProt729 := factory728.GetProtocol(mbTrans726)
    argvalue0 := meta.NewListSnapshotsReq()
    err730 := argvalue0.Read(jsProt729)
    if err730 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSnapshots(value0))
    fmt.Print("\n")
    break
  case "runAdminJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RunAdminJob requires 1 args")
      flag.Usage()
    }
    arg731 := flag.Arg(1)
    mbTrans732 := thrift.NewMemoryBufferLen(len(arg731))
    defer mbTrans732.Close()
    _, err733 := mbTrans732.WriteString(arg731)
    if err733 != nil {
      Usage()
      return
    }
    factory734 := thrift.NewSimpleJSONProtocolFactory()
    jsProt735 := factory734.GetProtocol(mbTrans732)
    argvalue0 := meta.NewAdminJobReq()
    err736 := argvalue0.Read(jsProt735)
    if err736 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RunAdminJob(value0))
    fmt.Print("\n")
    break
  case "addZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZone requires 1 args")
      flag.Usage()
    }
    arg737 := flag.Arg(1)
    mbTrans738 := thrift.NewMemoryBufferLen(len(arg737))
    defer mbTrans738.Close()
    _, err739 := mbTrans738.WriteString(arg737)
    if err739 != nil {
      Usage()
      return
    }
    factory740 := thrift.NewSimpleJSONProtocolFactory()
    jsProt741 := factory740.GetProtocol(mbTrans738)
    argvalue0 := meta.NewAddZoneReq()
    err742 := argvalue0.Read(jsProt741)
    if err742 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZone(value0))
    fmt.Print("\n")
    break
  case "dropZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZone requires 1 args")
      flag.Usage()
    }
    arg743 := flag.Arg(1)
    mbTrans744 := thrift.NewMemoryBufferLen(len(arg743))
    defer mbTrans744.Close()
    _, err745 := mbTrans744.WriteString(arg743)
    if err745 != nil {
      Usage()
      return
    }
    factory746 := thrift.NewSimpleJSONProtocolFactory()
    jsProt747 := factory746.GetProtocol(mbTrans744)
    argvalue0 := meta.NewDropZoneReq()
    err748 := argvalue0.Read(jsProt747)
    if err748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZone(value0))
    fmt.Print("\n")
    break
  case "addHostIntoZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHostIntoZone requires 1 args")
      flag.Usage()
    }
    arg749 := flag.Arg(1)
    mbTrans750 := thrift.NewMemoryBufferLen(len(arg749))
    defer mbTrans750.Close()
    _, err751 := mbTrans750.WriteString(arg749)
    if err751 != nil {
      Usage()
      return
    }
    factory752 := thrift.NewSimpleJSONProtocolFactory()
    jsProt753 := factory752.GetProtocol(mbTrans750)
    argvalue0 := meta.NewAddHostIntoZoneReq()
    err754 := argvalue0.Read(jsProt753)
    if err754 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHostIntoZone(value0))
    fmt.Print("\n")
    break
  case "dropHostFromZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropHostFromZone requires 1 args")
      flag.Usage()
    }
    arg755 := flag.Arg(1)
    mbTrans756 := thrift.NewMemoryBufferLen(len(arg755))
    defer mbTrans756.Close()
    _, err757 := mbTrans756.WriteString(arg755)
    if err757 != nil {
      Usage()
      return
    }
    factory758 := thrift.NewSimpleJSONProtocolFactory()
    jsProt759 := factory758.GetProtocol(mbTrans756)
    argvalue0 := meta.NewDropHostFromZoneReq()
    err760 := argvalue0.Read(jsProt759)
    if err760 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropHostFromZone(value0))
    fmt.Print("\n")
    break
  case "getZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetZone requires 1 args")
      flag.Usage()
    }
    arg761 := flag.Arg(1)
    mbTrans762 := thrift.NewMemoryBufferLen(len(arg761))
    defer mbTrans762.Close()
    _, err763 := mbTrans762.WriteString(arg761)
    if err763 != nil {
      Usage()
      return
    }
    factory764 := thrift.NewSimpleJSONProtocolFactory()
    jsProt765 := factory764.GetProtocol(mbTrans762)
    argvalue0 := meta.NewGetZoneReq()
    err766 := argvalue0.Read(jsProt765)
    if err766 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetZone(value0))
    fmt.Print("\n")
    break
  case "listZones":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListZones requires 1 args")
      flag.Usage()
    }
    arg767 := flag.Arg(1)
    mbTrans768 := thrift.NewMemoryBufferLen(len(arg767))
    defer mbTrans768.Close()
    _, err769 := mbTrans768.WriteString(arg767)
    if err769 != nil {
      Usage()
      return
    }
    factory770 := thrift.NewSimpleJSONProtocolFactory()
    jsProt771 := factory770.GetProtocol(mbTrans768)
    argvalue0 := meta.NewListZonesReq()
    err772 := argvalue0.Read(jsProt771)
    if err772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListZones(value0))
    fmt.Print("\n")
    break
  case "addGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddGroup requires 1 args")
      flag.Usage()
    }
    arg773 := flag.Arg(1)
    mbTrans774 := thrift.NewMemoryBufferLen(len(arg773))
    defer mbTrans774.Close()
    _, err775 := mbTrans774.WriteString(arg773)
    if err775 != nil {
      Usage()
      return
    }
    factory776 := thrift.NewSimpleJSONProtocolFactory()
    jsProt777 := factory776.GetProtocol(mbTrans774)
    argvalue0 := meta.NewAddGroupReq()
    err778 := argvalue0.Read(jsProt777)
    if err778 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddGroup(value0))
    fmt.Print("\n")
    break
  case "dropGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropGroup requires 1 args")
      flag.Usage()
    }
    arg779 := flag.Arg(1)
    mbTrans780 := thrift.NewMemoryBufferLen(len(arg779))
    defer mbTrans780.Close()
    _, err781 := mbTrans780.WriteString(arg779)
    if err781 != nil {
      Usage()
      return
    }
    factory782 := thrift.NewSimpleJSONProtocolFactory()
    jsProt783 := factory782.GetProtocol(mbTrans780)
    argvalue0 := meta.NewDropGroupReq()
    err784 := argvalue0.Read(jsProt783)
    if err784 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropGroup(value0))
    fmt.Print("\n")
    break
  case "addZoneIntoGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZoneIntoGroup requires 1 args")
      flag.Usage()
    }
    arg785 := flag.Arg(1)
    mbTrans786 := thrift.NewMemoryBufferLen(len(arg785))
    defer mbTrans786.Close()
    _, err787 := mbTrans786.WriteString(arg785)
    if err787 != nil {
      Usage()
      return
    }
    factory788 := thrift.NewSimpleJSONProtocolFactory()
    jsProt789 := factory788.GetProtocol(mbTrans786)
    argvalue0 := meta.NewAddZoneIntoGroupReq()
    err790 := argvalue0.Read(jsProt789)
    if err790 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZoneIntoGroup(value0))
    fmt.Print("\n")
    break
  case "dropZoneFromGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZoneFromGroup requires 1 args")
      flag.Usage()
    }
    arg791 := flag.Arg(1)
    mbTrans792 := thrift.NewMemoryBufferLen(len(arg791))
    defer mbTrans792.Close()
    _, err793 := mbTrans792.WriteString(arg791)
    if err793 != nil {
      Usage()
      return
    }
    factory794 := thrift.NewSimpleJSONProtocolFactory()
    jsProt795 := factory794.GetProtocol(mbTrans792)
    argvalue0 := meta.NewDropZoneFromGroupReq()
    err796 := argvalue0.Read(jsProt795)
    if err796 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZoneFromGroup(value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    arg797 := flag.Arg(1)
    mbTrans798 := thrift.NewMemoryBufferLen(len(arg797))
    defer mbTrans798.Close()
    _, err799 := mbTrans798.WriteString(arg797)
    if err799 != nil {
      Usage()
      return
    }
    factory800 := thrift.NewSimpleJSONProtocolFactory()
    jsProt801 := factory800.GetProtocol(mbTrans798)
    argvalue0 := meta.NewGetGroupReq()
    err802 := argvalue0.Read(jsProt801)
    if err802 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGroup(value0))
    fmt.Print("\n")
    break
  case "listGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListGroups requires 1 args")
      flag.Usage()
    }
    arg803 := flag.Arg(1)
    mbTrans804 := thrift.NewMemoryBufferLen(len(arg803))
    defer mbTrans804.Close()
    _, err805 := mbTrans804.WriteString(arg803)
    if err805 != nil {
      Usage()
      return
    }
    factory806 := thrift.NewSimpleJSONProtocolFactory()
    jsProt807 := factory806.GetProtocol(mbTrans804)
    argvalue0 := meta.NewListGroupsReq()
    err808 := argvalue0.Read(jsProt807)
    if err808 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListGroups(value0))
    fmt.Print("\n")
    break
  case "createBackup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateBackup requires 1 args")
      flag.Usage()
    }
    arg809 := flag.Arg(1)
    mbTrans810 := thrift.NewMemoryBufferLen(len(arg809))
    defer mbTrans810.Close()
    _, err811 := mbTrans810.WriteString(arg809)
    if err811 != nil {
      Usage()
      return
    }
    factory812 := thrift.NewSimpleJSONProtocolFactory()
    jsProt813 := factory812.GetProtocol(mbTrans810)
    argvalue0 := meta.NewCreateBackupReq()
    err814 := argvalue0.Read(jsProt813)
    if err814 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateBackup(value0))
    fmt.Print("\n")
    break
  case "restoreMeta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RestoreMeta requires 1 args")
      flag.Usage()
    }
    arg815 := flag.Arg(1)
    mbTrans816 := thrift.NewMemoryBufferLen(len(arg815))
    defer mbTrans816.Close()
    _, err817 := mbTrans816.WriteString(arg815)
    if err817 != nil {
      Usage()
      return
    }
    factory818 := thrift.NewSimpleJSONProtocolFactory()
    jsProt819 := factory818.GetProtocol(mbTrans816)
    argvalue0 := meta.NewRestoreMetaReq()
    err820 := argvalue0.Read(jsProt819)
    if err820 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RestoreMeta(value0))
    fmt.Print("\n")
    break
  case "addListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddListener requires 1 args")
      flag.Usage()
    }
    arg821 := flag.Arg(1)
    mbTrans822 := thrift.NewMemoryBufferLen(len(arg821))
    defer mbTrans822.Close()
    _, err823 := mbTrans822.WriteString(arg821)
    if err823 != nil {
      Usage()
      return
    }
    factory824 := thrift.NewSimpleJSONProtocolFactory()
    jsProt825 := factory824.GetProtocol(mbTrans822)
    argvalue0 := meta.NewAddListenerReq()
    err826 := argvalue0.Read(jsProt825)
    if err826 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddListener(value0))
    fmt.Print("\n")
    break
  case "removeListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveListener requires 1 args")
      flag.Usage()
    }
    arg827 := flag.Arg(1)
    mbTrans828 := thrift.NewMemoryBufferLen(len(arg827))
    defer mbTrans828.Close()
    _, err829 := mbTrans828.WriteString(arg827)
    if err829 != nil {
      Usage()
      return
    }
    factory830 := thrift.NewSimpleJSONProtocolFactory()
    jsProt831 := factory830.GetProtocol(mbTrans828)
    argvalue0 := meta.NewRemoveListenerReq()
    err832 := argvalue0.Read(jsProt831)
    if err832 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveListener(value0))
    fmt.Print("\n")
    break
  case "listListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListListener requires 1 args")
      flag.Usage()
    }
    arg833 := flag.Arg(1)
    mbTrans834 := thrift.NewMemoryBufferLen(len(arg833))
    defer mbTrans834.Close()
    _, err835 := mbTrans834.WriteString(arg833)
    if err835 != nil {
      Usage()
      return
    }
    factory836 := thrift.NewSimpleJSONProtocolFactory()
    jsProt837 := factory836.GetProtocol(mbTrans834)
    argvalue0 := meta.NewListListenerReq()
    err838 := argvalue0.Read(jsProt837)
    if err838 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListListener(value0))
    fmt.Print("\n")
    break
  case "getStatis":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStatis requires 1 args")
      flag.Usage()
    }
    arg839 := flag.Arg(1)
    mbTrans840 := thrift.NewMemoryBufferLen(len(arg839))
    defer mbTrans840.Close()
    _, err841 := mbTrans840.WriteString(arg839)
    if err841 != nil {
      Usage()
      return
    }
    factory842 := thrift.NewSimpleJSONProtocolFactory()
    jsProt843 := factory842.GetProtocol(mbTrans840)
    argvalue0 := meta.NewGetStatisReq()
    err844 := argvalue0.Read(jsProt843)
    if err844 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetStatis(value0))
    fmt.Print("\n")
    break
  case "signInFTService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignInFTService requires 1 args")
      flag.Usage()
    }
    arg845 := flag.Arg(1)
    mbTrans846 := thrift.NewMemoryBufferLen(len(arg845))
    defer mbTrans846.Close()
    _, err847 := mbTrans846.WriteString(arg845)
    if err847 != nil {
      Usage()
      return
    }
    factory848 := thrift.NewSimpleJSONProtocolFactory()
    jsProt849 := factory848.GetProtocol(mbTrans846)
    argvalue0 := meta.NewSignInFTServiceReq()
    err850 := argvalue0.Read(jsProt849)
    if err850 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignInFTService(value0))
    fmt.Print("\n")
    break
  case "signOutFTService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignOutFTService requires 1 args")
      flag.Usage()
    }
    arg851 := flag.Arg(1)
    mbTrans852 := thrift.NewMemoryBufferLen(len(arg851))
    defer mbTrans852.Close()
    _, err853 := mbTrans852.WriteString(arg851)
    if err853 != nil {
      Usage()
      return
    }
    factory854 := thrift.NewSimpleJSONProtocolFactory()
    jsProt855 := factory854.GetProtocol(mbTrans852)
    argvalue0 := meta.NewSignOutFTServiceReq()
    err856 := argvalue0.Read(jsProt855)
    if err856 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignOutFTService(value0))
    fmt.Print("\n")
    break
  case "listFTClients":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListFTClients requires 1 args")
      flag.Usage()
    }
    arg857 := flag.Arg(1)
    mbTrans858 := thrift.NewMemoryBufferLen(len(arg857))
    defer mbTrans858.Close()
    _, err859 := mbTrans858.WriteString(arg857)
    if err859 != nil {
      Usage()
      return
    }
    factory860 := thrift.NewSimpleJSONProtocolFactory()
    jsProt861 := factory860.GetProtocol(mbTrans858)
    argvalue0 := meta.NewListFTClientsReq()
    err862 := argvalue0.Read(jsProt861)
    if err862 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListFTClients(value0))
    fmt.Print("\n")
    break
  case "createSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSession requires 1 args")
      flag.Usage()
    }
    arg863 := flag.Arg(1)
    mbTrans864 := thrift.NewMemoryBufferLen(len(arg863))
    defer mbTrans864.Close()
    _, err865 := mbTrans864.WriteString(arg863)
    if err865 != nil {
      Usage()
      return
    }
    factory866 := thrift.NewSimpleJSONProtocolFactory()
    jsProt867 := factory866.GetProtocol(mbTrans864)
    argvalue0 := meta.NewCreateSessionReq()
    err868 := argvalue0.Read(jsProt867)
    if err868 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSession(value0))
    fmt.Print("\n")
    break
  case "updateSessions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateSessions requires 1 args")
      flag.Usage()
    }
    arg869 := flag.Arg(1)
    mbTrans870 := thrift.NewMemoryBufferLen(len(arg869))
    defer mbTrans870.Close()
    _, err871 := mbTrans870.WriteString(arg869)
    if err871 != nil {
      Usage()
      return
    }
    factory872 := thrift.NewSimpleJSONProtocolFactory()
    jsProt873 := factory872.GetProtocol(mbTrans870)
    argvalue0 := meta.NewUpdateSessionsReq()
    err874 := argvalue0.Read(jsProt873)
    if err874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateSessions(value0))
    fmt.Print("\n")
    break
  case "listSessions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSessions requires 1 args")
      flag.Usage()
    }
    arg875 := flag.Arg(1)
    mbTrans876 := thrift.NewMemoryBufferLen(len(arg875))
    defer mbTrans876.Close()
    _, err877 := mbTrans876.WriteString(arg875)
    if err877 != nil {
      Usage()
      return
    }
    factory878 := thrift.NewSimpleJSONProtocolFactory()
    jsProt879 := factory878.GetProtocol(mbTrans876)
    argvalue0 := meta.NewListSessionsReq()
    err880 := argvalue0.Read(jsProt879)
    if err880 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSessions(value0))
    fmt.Print("\n")
    break
  case "getSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSession requires 1 args")
      flag.Usage()
    }
    arg881 := flag.Arg(1)
    mbTrans882 := thrift.NewMemoryBufferLen(len(arg881))
    defer mbTrans882.Close()
    _, err883 := mbTrans882.WriteString(arg881)
    if err883 != nil {
      Usage()
      return
    }
    factory884 := thrift.NewSimpleJSONProtocolFactory()
    jsProt885 := factory884.GetProtocol(mbTrans882)
    argvalue0 := meta.NewGetSessionReq()
    err886 := argvalue0.Read(jsProt885)
    if err886 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSession(value0))
    fmt.Print("\n")
    break
  case "removeSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveSession requires 1 args")
      flag.Usage()
    }
    arg887 := flag.Arg(1)
    mbTrans888 := thrift.NewMemoryBufferLen(len(arg887))
    defer mbTrans888.Close()
    _, err889 := mbTrans888.WriteString(arg887)
    if err889 != nil {
      Usage()
      return
    }
    factory890 := thrift.NewSimpleJSONProtocolFactory()
    jsProt891 := factory890.GetProtocol(mbTrans888)
    argvalue0 := meta.NewRemoveSessionReq()
    err892 := argvalue0.Read(jsProt891)
    if err892 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveSession(value0))
    fmt.Print("\n")
    break
  case "reportTaskFinish":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReportTaskFinish requires 1 args")
      flag.Usage()
    }
    arg893 := flag.Arg(1)
    mbTrans894 := thrift.NewMemoryBufferLen(len(arg893))
    defer mbTrans894.Close()
    _, err895 := mbTrans894.WriteString(arg893)
    if err895 != nil {
      Usage()
      return
    }
    factory896 := thrift.NewSimpleJSONProtocolFactory()
    jsProt897 := factory896.GetProtocol(mbTrans894)
    argvalue0 := meta.NewReportTaskReq()
    err898 := argvalue0.Read(jsProt897)
    if err898 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReportTaskFinish(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
