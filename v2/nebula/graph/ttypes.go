// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package graph

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v2/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
var GoUnusedProtection__ int;

type ErrorCode int64
const (
  ErrorCode_SUCCEEDED ErrorCode = 0
  ErrorCode_E_DISCONNECTED ErrorCode = -1
  ErrorCode_E_FAIL_TO_CONNECT ErrorCode = -2
  ErrorCode_E_RPC_FAILURE ErrorCode = -3
  ErrorCode_E_BAD_USERNAME_PASSWORD ErrorCode = -4
  ErrorCode_E_SESSION_INVALID ErrorCode = -5
  ErrorCode_E_SESSION_TIMEOUT ErrorCode = -6
  ErrorCode_E_SYNTAX_ERROR ErrorCode = -7
  ErrorCode_E_EXECUTION_ERROR ErrorCode = -8
  ErrorCode_E_STATEMENT_EMTPY ErrorCode = -9
)

var ErrorCodeToName = map[ErrorCode]string {
  ErrorCode_SUCCEEDED: "SUCCEEDED",
  ErrorCode_E_DISCONNECTED: "E_DISCONNECTED",
  ErrorCode_E_FAIL_TO_CONNECT: "E_FAIL_TO_CONNECT",
  ErrorCode_E_RPC_FAILURE: "E_RPC_FAILURE",
  ErrorCode_E_BAD_USERNAME_PASSWORD: "E_BAD_USERNAME_PASSWORD",
  ErrorCode_E_SESSION_INVALID: "E_SESSION_INVALID",
  ErrorCode_E_SESSION_TIMEOUT: "E_SESSION_TIMEOUT",
  ErrorCode_E_SYNTAX_ERROR: "E_SYNTAX_ERROR",
  ErrorCode_E_EXECUTION_ERROR: "E_EXECUTION_ERROR",
  ErrorCode_E_STATEMENT_EMTPY: "E_STATEMENT_EMTPY",
}

var ErrorCodeToValue = map[string]ErrorCode {
  "SUCCEEDED": ErrorCode_SUCCEEDED,
  "E_DISCONNECTED": ErrorCode_E_DISCONNECTED,
  "E_FAIL_TO_CONNECT": ErrorCode_E_FAIL_TO_CONNECT,
  "E_RPC_FAILURE": ErrorCode_E_RPC_FAILURE,
  "E_BAD_USERNAME_PASSWORD": ErrorCode_E_BAD_USERNAME_PASSWORD,
  "E_SESSION_INVALID": ErrorCode_E_SESSION_INVALID,
  "E_SESSION_TIMEOUT": ErrorCode_E_SESSION_TIMEOUT,
  "E_SYNTAX_ERROR": ErrorCode_E_SYNTAX_ERROR,
  "E_EXECUTION_ERROR": ErrorCode_E_EXECUTION_ERROR,
  "E_STATEMENT_EMTPY": ErrorCode_E_STATEMENT_EMTPY,
}

func (p ErrorCode) String() string {
  if v, ok := ErrorCodeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  if v, ok := ErrorCodeToValue[s]; ok {
    return v, nil
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

// Attributes:
//  - ErrorCode
//  - LatencyInUs
//  - Data
//  - SpaceName
//  - ErrorMsg
type ExecutionResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  LatencyInUs int32 `thrift:"latency_in_us,2,required" db:"latency_in_us" json:"latency_in_us"`
  Data *nebula0.DataSet `thrift:"data,3" db:"data" json:"data,omitempty"`
  SpaceName []byte `thrift:"space_name,4" db:"space_name" json:"space_name,omitempty"`
  ErrorMsg []byte `thrift:"error_msg,5" db:"error_msg" json:"error_msg,omitempty"`
}

func NewExecutionResponse() *ExecutionResponse {
  return &ExecutionResponse{}
}


func (p *ExecutionResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *ExecutionResponse) GetLatencyInUs() int32 {
  return p.LatencyInUs
}
var ExecutionResponse_Data_DEFAULT *nebula0.DataSet
func (p *ExecutionResponse) GetData() *nebula0.DataSet {
  if !p.IsSetData() {
    return ExecutionResponse_Data_DEFAULT
  }
return p.Data
}
var ExecutionResponse_SpaceName_DEFAULT []byte

func (p *ExecutionResponse) GetSpaceName() []byte {
  return p.SpaceName
}
var ExecutionResponse_ErrorMsg_DEFAULT []byte

func (p *ExecutionResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
func (p *ExecutionResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *ExecutionResponse) IsSetSpaceName() bool {
  return p.SpaceName != nil
}

func (p *ExecutionResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *ExecutionResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetLatencyInUs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLatencyInUs = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetLatencyInUs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LatencyInUs is not set"));
  }
  return nil
}

func (p *ExecutionResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *ExecutionResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LatencyInUs = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField3(iprot thrift.Protocol) error {
  p.Data = nebula0.NewDataSet()
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *ExecutionResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SpaceName = v
}
  return nil
}

func (p *ExecutionResponse)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *ExecutionResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExecutionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecutionResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("latency_in_us", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latency_in_us: ", p), err) }
  if err := oprot.WriteI32(int32(p.LatencyInUs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latency_in_us (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latency_in_us: ", p), err) }
  return err
}

func (p *ExecutionResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetSpaceName() {
    if err := oprot.WriteFieldBegin("space_name", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:space_name: ", p), err) }
    if err := oprot.WriteBinary(p.SpaceName); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.space_name (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:space_name: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:error_msg: ", p), err) }
  }
  return err
}

func (p *ExecutionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecutionResponse(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - ErrorMsg
//  - SessionID
type AuthResponse struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorMsg []byte `thrift:"error_msg,2" db:"error_msg" json:"error_msg,omitempty"`
  SessionID *int64 `thrift:"session_id,3" db:"session_id" json:"session_id,omitempty"`
}

func NewAuthResponse() *AuthResponse {
  return &AuthResponse{}
}


func (p *AuthResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}
var AuthResponse_ErrorMsg_DEFAULT []byte

func (p *AuthResponse) GetErrorMsg() []byte {
  return p.ErrorMsg
}
var AuthResponse_SessionID_DEFAULT int64
func (p *AuthResponse) GetSessionID() int64 {
  if !p.IsSetSessionID() {
    return AuthResponse_SessionID_DEFAULT
  }
return *p.SessionID
}
func (p *AuthResponse) IsSetErrorMsg() bool {
  return p.ErrorMsg != nil
}

func (p *AuthResponse) IsSetSessionID() bool {
  return p.SessionID != nil
}

func (p *AuthResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetErrorCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *AuthResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AuthResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorMsg = v
}
  return nil
}

func (p *AuthResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SessionID = &v
}
  return nil
}

func (p *AuthResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("AuthResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *AuthResponse) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetErrorMsg() {
    if err := oprot.WriteFieldBegin("error_msg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_msg: ", p), err) }
    if err := oprot.WriteBinary(p.ErrorMsg); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.error_msg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_msg: ", p), err) }
  }
  return err
}

func (p *AuthResponse) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetSessionID() {
    if err := oprot.WriteFieldBegin("session_id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session_id: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SessionID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.session_id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session_id: ", p), err) }
  }
  return err
}

func (p *AuthResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthResponse(%+v)", *p)
}

