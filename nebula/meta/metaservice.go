// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package meta

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/nebula"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = nebula0.GoUnusedProtection__
type MetaService interface {
  // Parameters:
  //  - Req
  CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSpace(req *DropSpaceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error)
  // Parameters:
  //  - Req
  ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error)
  // Parameters:
  //  - Req
  CreateTag(req *CreateTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterTag(req *AlterTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTag(req *DropTagReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTag(req *GetTagReq) (r *GetTagResp, err error)
  // Parameters:
  //  - Req
  ListTags(req *ListTagsReq) (r *ListTagsResp, err error)
  // Parameters:
  //  - Req
  CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdge(req *DropEdgeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error)
  // Parameters:
  //  - Req
  ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error)
  // Parameters:
  //  - Req
  ListHosts(req *ListHostsReq) (r *ListHostsResp, err error)
  // Parameters:
  //  - Req
  GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error)
  // Parameters:
  //  - Req
  ListParts(req *ListPartsReq) (r *ListPartsResp, err error)
  // Parameters:
  //  - Req
  MultiPut(req *MultiPutReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  Get(req *GetReq) (r *GetResp, err error)
  // Parameters:
  //  - Req
  MultiGet(req *MultiGetReq) (r *MultiGetResp, err error)
  // Parameters:
  //  - Req
  Remove(req *RemoveReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  Scan(req *ScanReq) (r *ScanResp, err error)
  // Parameters:
  //  - Req
  CreateTagIndex(req *CreateTagIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropTagIndex(req *DropTagIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetTagIndex(req *GetTagIndexReq) (r *GetTagIndexResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexes(req *ListTagIndexesReq) (r *ListTagIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildTagIndex(req *RebuildIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListTagIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateEdgeIndex(req *CreateEdgeIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropEdgeIndex(req *DropEdgeIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetEdgeIndex(req *GetEdgeIndexReq) (r *GetEdgeIndexResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexes(req *ListEdgeIndexesReq) (r *ListEdgeIndexesResp, err error)
  // Parameters:
  //  - Req
  RebuildEdgeIndex(req *RebuildIndexReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListEdgeIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error)
  // Parameters:
  //  - Req
  CreateUser(req *CreateUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropUser(req *DropUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AlterUser(req *AlterUserReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GrantRole(req *GrantRoleReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListUsers(req *ListUsersReq) (r *ListUsersResp, err error)
  // Parameters:
  //  - Req
  ListRoles(req *ListRolesReq) (r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  GetUserRoles(req *GetUserRolesReq) (r *ListRolesResp, err error)
  // Parameters:
  //  - Req
  ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  HeartBeat(req *HBReq) (r *HBResp, err error)
  // Parameters:
  //  - Req
  Balance(req *BalanceReq) (r *BalanceResp, err error)
  // Parameters:
  //  - Req
  LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RegConfig(req *RegConfigReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetConfig(req *GetConfigReq) (r *GetConfigResp, err error)
  // Parameters:
  //  - Req
  SetConfig(req *SetConfigReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error)
  // Parameters:
  //  - Req
  CreateSnapshot(req *CreateSnapshotReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropSnapshot(req *DropSnapshotReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSnapshots(req *ListSnapshotsReq) (r *ListSnapshotsResp, err error)
  // Parameters:
  //  - Req
  RunAdminJob(req *AdminJobReq) (r *AdminJobResp, err error)
  // Parameters:
  //  - Req
  AddZone(req *AddZoneReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZone(req *DropZoneReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddHostIntoZone(req *AddHostIntoZoneReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropHostFromZone(req *DropHostFromZoneReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetZone(req *GetZoneReq) (r *GetZoneResp, err error)
  // Parameters:
  //  - Req
  ListZones(req *ListZonesReq) (r *ListZonesResp, err error)
  // Parameters:
  //  - Req
  AddGroup(req *AddGroupReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropGroup(req *DropGroupReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddZoneIntoGroup(req *AddZoneIntoGroupReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  DropZoneFromGroup(req *DropZoneFromGroupReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  GetGroup(req *GetGroupReq) (r *GetGroupResp, err error)
  // Parameters:
  //  - Req
  ListGroups(req *ListGroupsReq) (r *ListGroupsResp, err error)
  // Parameters:
  //  - Req
  CreateBackup(req *CreateBackupReq) (r *CreateBackupResp, err error)
  // Parameters:
  //  - Req
  RestoreMeta(req *RestoreMetaReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  AddListener(req *AddListenerReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  RemoveListener(req *RemoveListenerReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListListener(req *ListListenerReq) (r *ListListenerResp, err error)
  // Parameters:
  //  - Req
  GetStatis(req *GetStatisReq) (r *GetStatisResp, err error)
  // Parameters:
  //  - Req
  SignInFTService(req *SignInFTServiceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  SignOutFTService(req *SignOutFTServiceReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListFTClients(req *ListFTClientsReq) (r *ListFTClientsResp, err error)
  // Parameters:
  //  - Req
  CreateSession(req *CreateSessionReq) (r *CreateSessionResp, err error)
  // Parameters:
  //  - Req
  UpdateSessions(req *UpdateSessionsReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ListSessions(req *ListSessionsReq) (r *ListSessionsResp, err error)
  // Parameters:
  //  - Req
  GetSession(req *GetSessionReq) (r *GetSessionResp, err error)
  // Parameters:
  //  - Req
  RemoveSession(req *RemoveSessionReq) (r *ExecResp, err error)
  // Parameters:
  //  - Req
  ReportTaskFinish(req *ReportTaskReq) (r *ExecResp, err error)
}

type MetaServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *MetaServiceClient) Close() error {
  return client.Transport.Close()
}

func NewMetaServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceClient {
  return &MetaServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMetaServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceClient {
  return &MetaServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error) {
  if err = p.sendCreateSpace(req); err != nil { return }
  return p.recvCreateSpace()
}

func (p *MetaServiceClient) sendCreateSpace(req *CreateSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error77 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error78 error
    error78, err = error77.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error78
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSpace failed: invalid message type")
    return
  }
  result := MetaServiceCreateSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSpace(req *DropSpaceReq) (r *ExecResp, err error) {
  if err = p.sendDropSpace(req); err != nil { return }
  return p.recvDropSpace()
}

func (p *MetaServiceClient) sendDropSpace(req *DropSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error79 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error80 error
    error80, err = error79.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error80
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSpace failed: invalid message type")
    return
  }
  result := MetaServiceDropSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error) {
  if err = p.sendGetSpace(req); err != nil { return }
  return p.recvGetSpace()
}

func (p *MetaServiceClient) sendGetSpace(req *GetSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetSpace() (value *GetSpaceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error81 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error82 error
    error82, err = error81.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error82
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSpace failed: invalid message type")
    return
  }
  result := MetaServiceGetSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error) {
  if err = p.sendListSpaces(req); err != nil { return }
  return p.recvListSpaces()
}

func (p *MetaServiceClient) sendListSpaces(req *ListSpacesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSpaces", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSpacesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListSpaces() (value *ListSpacesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSpaces" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSpaces failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSpaces failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error83 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error84 error
    error84, err = error83.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error84
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSpaces failed: invalid message type")
    return
  }
  result := MetaServiceListSpacesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTag(req *CreateTagReq) (r *ExecResp, err error) {
  if err = p.sendCreateTag(req); err != nil { return }
  return p.recvCreateTag()
}

func (p *MetaServiceClient) sendCreateTag(req *CreateTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error85 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error86 error
    error86, err = error85.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error86
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTag failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterTag(req *AlterTagReq) (r *ExecResp, err error) {
  if err = p.sendAlterTag(req); err != nil { return }
  return p.recvAlterTag()
}

func (p *MetaServiceClient) sendAlterTag(req *AlterTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error87 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error88 error
    error88, err = error87.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error88
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterTag failed: invalid message type")
    return
  }
  result := MetaServiceAlterTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTag(req *DropTagReq) (r *ExecResp, err error) {
  if err = p.sendDropTag(req); err != nil { return }
  return p.recvDropTag()
}

func (p *MetaServiceClient) sendDropTag(req *DropTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error89 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error90 error
    error90, err = error89.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error90
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTag failed: invalid message type")
    return
  }
  result := MetaServiceDropTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTag(req *GetTagReq) (r *GetTagResp, err error) {
  if err = p.sendGetTag(req); err != nil { return }
  return p.recvGetTag()
}

func (p *MetaServiceClient) sendGetTag(req *GetTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetTag() (value *GetTagResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error91 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error92 error
    error92, err = error91.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error92
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTag failed: invalid message type")
    return
  }
  result := MetaServiceGetTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTags(req *ListTagsReq) (r *ListTagsResp, err error) {
  if err = p.sendListTags(req); err != nil { return }
  return p.recvListTags()
}

func (p *MetaServiceClient) sendListTags(req *ListTagsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListTags() (value *ListTagsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTags" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTags failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTags failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error93 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error94 error
    error94, err = error93.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error94
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTags failed: invalid message type")
    return
  }
  result := MetaServiceListTagsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error) {
  if err = p.sendCreateEdge(req); err != nil { return }
  return p.recvCreateEdge()
}

func (p *MetaServiceClient) sendCreateEdge(req *CreateEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error95 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error96 error
    error96, err = error95.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error96
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdge failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error) {
  if err = p.sendAlterEdge(req); err != nil { return }
  return p.recvAlterEdge()
}

func (p *MetaServiceClient) sendAlterEdge(req *AlterEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error97 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error98 error
    error98, err = error97.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error98
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterEdge failed: invalid message type")
    return
  }
  result := MetaServiceAlterEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdge(req *DropEdgeReq) (r *ExecResp, err error) {
  if err = p.sendDropEdge(req); err != nil { return }
  return p.recvDropEdge()
}

func (p *MetaServiceClient) sendDropEdge(req *DropEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error99 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error100 error
    error100, err = error99.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error100
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdge failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error) {
  if err = p.sendGetEdge(req); err != nil { return }
  return p.recvGetEdge()
}

func (p *MetaServiceClient) sendGetEdge(req *GetEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetEdge() (value *GetEdgeResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error101 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error102 error
    error102, err = error101.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error102
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdge failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error) {
  if err = p.sendListEdges(req); err != nil { return }
  return p.recvListEdges()
}

func (p *MetaServiceClient) sendListEdges(req *ListEdgesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdges", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListEdges() (value *ListEdgesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdges" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdges failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdges failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error103 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error104 error
    error104, err = error103.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error104
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdges failed: invalid message type")
    return
  }
  result := MetaServiceListEdgesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListHosts(req *ListHostsReq) (r *ListHostsResp, err error) {
  if err = p.sendListHosts(req); err != nil { return }
  return p.recvListHosts()
}

func (p *MetaServiceClient) sendListHosts(req *ListHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListHosts() (value *ListHostsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error105 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error106 error
    error106, err = error105.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error106
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
    return
  }
  result := MetaServiceListHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error) {
  if err = p.sendGetPartsAlloc(req); err != nil { return }
  return p.recvGetPartsAlloc()
}

func (p *MetaServiceClient) sendGetPartsAlloc(req *GetPartsAllocReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getPartsAlloc", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetPartsAllocArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getPartsAlloc" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getPartsAlloc failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getPartsAlloc failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error107 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error108 error
    error108, err = error107.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error108
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPartsAlloc failed: invalid message type")
    return
  }
  result := MetaServiceGetPartsAllocResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListParts(req *ListPartsReq) (r *ListPartsResp, err error) {
  if err = p.sendListParts(req); err != nil { return }
  return p.recvListParts()
}

func (p *MetaServiceClient) sendListParts(req *ListPartsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listParts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListPartsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListParts() (value *ListPartsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listParts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listParts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listParts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error109 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error110 error
    error110, err = error109.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error110
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listParts failed: invalid message type")
    return
  }
  result := MetaServiceListPartsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiPut(req *MultiPutReq) (r *ExecResp, err error) {
  if err = p.sendMultiPut(req); err != nil { return }
  return p.recvMultiPut()
}

func (p *MetaServiceClient) sendMultiPut(req *MultiPutReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPut", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiPutArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvMultiPut() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPut" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPut failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPut failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error111 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error112 error
    error112, err = error111.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error112
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPut failed: invalid message type")
    return
  }
  result := MetaServiceMultiPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Get(req *GetReq) (r *GetResp, err error) {
  if err = p.sendGet(req); err != nil { return }
  return p.recvGet()
}

func (p *MetaServiceClient) sendGet(req *GetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGet() (value *GetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error113 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error114 error
    error114, err = error113.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error114
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := MetaServiceGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) MultiGet(req *MultiGetReq) (r *MultiGetResp, err error) {
  if err = p.sendMultiGet(req); err != nil { return }
  return p.recvMultiGet()
}

func (p *MetaServiceClient) sendMultiGet(req *MultiGetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiGet", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvMultiGet() (value *MultiGetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiGet" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiGet failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiGet failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error115 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error116 error
    error116, err = error115.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error116
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiGet failed: invalid message type")
    return
  }
  result := MetaServiceMultiGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Remove(req *RemoveReq) (r *ExecResp, err error) {
  if err = p.sendRemove(req); err != nil { return }
  return p.recvRemove()
}

func (p *MetaServiceClient) sendRemove(req *RemoveReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemove() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "remove" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error117 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error118 error
    error118, err = error117.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error118
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
    return
  }
  result := MetaServiceRemoveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error) {
  if err = p.sendRemoveRange(req); err != nil { return }
  return p.recvRemoveRange()
}

func (p *MetaServiceClient) sendRemoveRange(req *RemoveRangeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveRangeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemoveRange() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeRange" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error119 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error120 error
    error120, err = error119.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error120
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
    return
  }
  result := MetaServiceRemoveRangeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Scan(req *ScanReq) (r *ScanResp, err error) {
  if err = p.sendScan(req); err != nil { return }
  return p.recvScan()
}

func (p *MetaServiceClient) sendScan(req *ScanReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("scan", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceScanArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvScan() (value *ScanResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "scan" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scan failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scan failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error121 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error122 error
    error122, err = error121.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error122
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scan failed: invalid message type")
    return
  }
  result := MetaServiceScanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateTagIndex(req *CreateTagIndexReq) (r *ExecResp, err error) {
  if err = p.sendCreateTagIndex(req); err != nil { return }
  return p.recvCreateTagIndex()
}

func (p *MetaServiceClient) sendCreateTagIndex(req *CreateTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error123 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error124 error
    error124, err = error123.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error124
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropTagIndex(req *DropTagIndexReq) (r *ExecResp, err error) {
  if err = p.sendDropTagIndex(req); err != nil { return }
  return p.recvDropTagIndex()
}

func (p *MetaServiceClient) sendDropTagIndex(req *DropTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error125 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error126 error
    error126, err = error125.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error126
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceDropTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetTagIndex(req *GetTagIndexReq) (r *GetTagIndexResp, err error) {
  if err = p.sendGetTagIndex(req); err != nil { return }
  return p.recvGetTagIndex()
}

func (p *MetaServiceClient) sendGetTagIndex(req *GetTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error127 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error128 error
    error128, err = error127.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error128
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceGetTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexes(req *ListTagIndexesReq) (r *ListTagIndexesResp, err error) {
  if err = p.sendListTagIndexes(req); err != nil { return }
  return p.recvListTagIndexes()
}

func (p *MetaServiceClient) sendListTagIndexes(req *ListTagIndexesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTagIndexes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagIndexesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTagIndexes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTagIndexes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTagIndexes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error129 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error130 error
    error130, err = error129.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error130
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTagIndexes failed: invalid message type")
    return
  }
  result := MetaServiceListTagIndexesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildTagIndex(req *RebuildIndexReq) (r *ExecResp, err error) {
  if err = p.sendRebuildTagIndex(req); err != nil { return }
  return p.recvRebuildTagIndex()
}

func (p *MetaServiceClient) sendRebuildTagIndex(req *RebuildIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rebuildTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRebuildTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rebuildTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rebuildTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rebuildTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error131 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error132 error
    error132, err = error131.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error132
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rebuildTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceRebuildTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListTagIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error) {
  if err = p.sendListTagIndexStatus(req); err != nil { return }
  return p.recvListTagIndexStatus()
}

func (p *MetaServiceClient) sendListTagIndexStatus(req *ListIndexStatusReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTagIndexStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagIndexStatusArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTagIndexStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTagIndexStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTagIndexStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error133 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error134 error
    error134, err = error133.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error134
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTagIndexStatus failed: invalid message type")
    return
  }
  result := MetaServiceListTagIndexStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (r *ExecResp, err error) {
  if err = p.sendCreateEdgeIndex(req); err != nil { return }
  return p.recvCreateEdgeIndex()
}

func (p *MetaServiceClient) sendCreateEdgeIndex(req *CreateEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error135 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error136 error
    error136, err = error135.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error136
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropEdgeIndex(req *DropEdgeIndexReq) (r *ExecResp, err error) {
  if err = p.sendDropEdgeIndex(req); err != nil { return }
  return p.recvDropEdgeIndex()
}

func (p *MetaServiceClient) sendDropEdgeIndex(req *DropEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error137 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error138 error
    error138, err = error137.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error138
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetEdgeIndex(req *GetEdgeIndexReq) (r *GetEdgeIndexResp, err error) {
  if err = p.sendGetEdgeIndex(req); err != nil { return }
  return p.recvGetEdgeIndex()
}

func (p *MetaServiceClient) sendGetEdgeIndex(req *GetEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error139 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error140 error
    error140, err = error139.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error140
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (r *ListEdgeIndexesResp, err error) {
  if err = p.sendListEdgeIndexes(req); err != nil { return }
  return p.recvListEdgeIndexes()
}

func (p *MetaServiceClient) sendListEdgeIndexes(req *ListEdgeIndexesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdgeIndexes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgeIndexesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdgeIndexes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdgeIndexes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdgeIndexes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error141 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error142 error
    error142, err = error141.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error142
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdgeIndexes failed: invalid message type")
    return
  }
  result := MetaServiceListEdgeIndexesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RebuildEdgeIndex(req *RebuildIndexReq) (r *ExecResp, err error) {
  if err = p.sendRebuildEdgeIndex(req); err != nil { return }
  return p.recvRebuildEdgeIndex()
}

func (p *MetaServiceClient) sendRebuildEdgeIndex(req *RebuildIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rebuildEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRebuildEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rebuildEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rebuildEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rebuildEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error143 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error144 error
    error144, err = error143.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error144
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rebuildEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceRebuildEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error) {
  if err = p.sendListEdgeIndexStatus(req); err != nil { return }
  return p.recvListEdgeIndexStatus()
}

func (p *MetaServiceClient) sendListEdgeIndexStatus(req *ListIndexStatusReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdgeIndexStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgeIndexStatusArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdgeIndexStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdgeIndexStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdgeIndexStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error145 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error146 error
    error146, err = error145.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error146
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdgeIndexStatus failed: invalid message type")
    return
  }
  result := MetaServiceListEdgeIndexStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateUser(req *CreateUserReq) (r *ExecResp, err error) {
  if err = p.sendCreateUser(req); err != nil { return }
  return p.recvCreateUser()
}

func (p *MetaServiceClient) sendCreateUser(req *CreateUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error147 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error148 error
    error148, err = error147.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error148
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createUser failed: invalid message type")
    return
  }
  result := MetaServiceCreateUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropUser(req *DropUserReq) (r *ExecResp, err error) {
  if err = p.sendDropUser(req); err != nil { return }
  return p.recvDropUser()
}

func (p *MetaServiceClient) sendDropUser(req *DropUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error149 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error150 error
    error150, err = error149.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error150
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropUser failed: invalid message type")
    return
  }
  result := MetaServiceDropUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AlterUser(req *AlterUserReq) (r *ExecResp, err error) {
  if err = p.sendAlterUser(req); err != nil { return }
  return p.recvAlterUser()
}

func (p *MetaServiceClient) sendAlterUser(req *AlterUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAlterUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error151 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error152 error
    error152, err = error151.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error152
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterUser failed: invalid message type")
    return
  }
  result := MetaServiceAlterUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GrantRole(req *GrantRoleReq) (r *ExecResp, err error) {
  if err = p.sendGrantRole(req); err != nil { return }
  return p.recvGrantRole()
}

func (p *MetaServiceClient) sendGrantRole(req *GrantRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("grantRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGrantRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGrantRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "grantRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "grantRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "grantRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error153 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error154 error
    error154, err = error153.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error154
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantRole failed: invalid message type")
    return
  }
  result := MetaServiceGrantRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error) {
  if err = p.sendRevokeRole(req); err != nil { return }
  return p.recvRevokeRole()
}

func (p *MetaServiceClient) sendRevokeRole(req *RevokeRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("revokeRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRevokeRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRevokeRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "revokeRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "revokeRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "revokeRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error155 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error156 error
    error156, err = error155.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error156
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeRole failed: invalid message type")
    return
  }
  result := MetaServiceRevokeRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListUsers(req *ListUsersReq) (r *ListUsersResp, err error) {
  if err = p.sendListUsers(req); err != nil { return }
  return p.recvListUsers()
}

func (p *MetaServiceClient) sendListUsers(req *ListUsersReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListUsersArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListUsers() (value *ListUsersResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listUsers" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error157 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error158 error
    error158, err = error157.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error158
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listUsers failed: invalid message type")
    return
  }
  result := MetaServiceListUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListRoles(req *ListRolesReq) (r *ListRolesResp, err error) {
  if err = p.sendListRoles(req); err != nil { return }
  return p.recvListRoles()
}

func (p *MetaServiceClient) sendListRoles(req *ListRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error159 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error160 error
    error160, err = error159.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error160
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listRoles failed: invalid message type")
    return
  }
  result := MetaServiceListRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetUserRoles(req *GetUserRolesReq) (r *ListRolesResp, err error) {
  if err = p.sendGetUserRoles(req); err != nil { return }
  return p.recvGetUserRoles()
}

func (p *MetaServiceClient) sendGetUserRoles(req *GetUserRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetUserRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUserRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUserRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error161 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error162 error
    error162, err = error161.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error162
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserRoles failed: invalid message type")
    return
  }
  result := MetaServiceGetUserRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error) {
  if err = p.sendChangePassword(req); err != nil { return }
  return p.recvChangePassword()
}

func (p *MetaServiceClient) sendChangePassword(req *ChangePasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changePassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceChangePasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvChangePassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changePassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "changePassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error163 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error164 error
    error164, err = error163.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error164
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changePassword failed: invalid message type")
    return
  }
  result := MetaServiceChangePasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) HeartBeat(req *HBReq) (r *HBResp, err error) {
  if err = p.sendHeartBeat(req); err != nil { return }
  return p.recvHeartBeat()
}

func (p *MetaServiceClient) sendHeartBeat(req *HBReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceHeartBeatArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvHeartBeat() (value *HBResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "heartBeat" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error165 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error166 error
    error166, err = error165.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error166
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
    return
  }
  result := MetaServiceHeartBeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) Balance(req *BalanceReq) (r *BalanceResp, err error) {
  if err = p.sendBalance(req); err != nil { return }
  return p.recvBalance()
}

func (p *MetaServiceClient) sendBalance(req *BalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("balance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvBalance() (value *BalanceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "balance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "balance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "balance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error167 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error168 error
    error168, err = error167.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error168
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "balance failed: invalid message type")
    return
  }
  result := MetaServiceBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error) {
  if err = p.sendLeaderBalance(req); err != nil { return }
  return p.recvLeaderBalance()
}

func (p *MetaServiceClient) sendLeaderBalance(req *LeaderBalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("leaderBalance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceLeaderBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvLeaderBalance() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "leaderBalance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "leaderBalance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "leaderBalance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error169 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error170 error
    error170, err = error169.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error170
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaderBalance failed: invalid message type")
    return
  }
  result := MetaServiceLeaderBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RegConfig(req *RegConfigReq) (r *ExecResp, err error) {
  if err = p.sendRegConfig(req); err != nil { return }
  return p.recvRegConfig()
}

func (p *MetaServiceClient) sendRegConfig(req *RegConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("regConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRegConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRegConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "regConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "regConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "regConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error171 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error172 error
    error172, err = error171.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error172
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "regConfig failed: invalid message type")
    return
  }
  result := MetaServiceRegConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetConfig(req *GetConfigReq) (r *GetConfigResp, err error) {
  if err = p.sendGetConfig(req); err != nil { return }
  return p.recvGetConfig()
}

func (p *MetaServiceClient) sendGetConfig(req *GetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetConfig() (value *GetConfigResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error173 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error174 error
    error174, err = error173.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error174
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfig failed: invalid message type")
    return
  }
  result := MetaServiceGetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SetConfig(req *SetConfigReq) (r *ExecResp, err error) {
  if err = p.sendSetConfig(req); err != nil { return }
  return p.recvSetConfig()
}

func (p *MetaServiceClient) sendSetConfig(req *SetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvSetConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error175 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error176 error
    error176, err = error175.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error176
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConfig failed: invalid message type")
    return
  }
  result := MetaServiceSetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error) {
  if err = p.sendListConfigs(req); err != nil { return }
  return p.recvListConfigs()
}

func (p *MetaServiceClient) sendListConfigs(req *ListConfigsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConfigs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListConfigsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListConfigs() (value *ListConfigsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConfigs" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listConfigs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listConfigs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error177 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error178 error
    error178, err = error177.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error178
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConfigs failed: invalid message type")
    return
  }
  result := MetaServiceListConfigsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSnapshot(req *CreateSnapshotReq) (r *ExecResp, err error) {
  if err = p.sendCreateSnapshot(req); err != nil { return }
  return p.recvCreateSnapshot()
}

func (p *MetaServiceClient) sendCreateSnapshot(req *CreateSnapshotReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateSnapshot() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error179 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error180 error
    error180, err = error179.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error180
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSnapshot failed: invalid message type")
    return
  }
  result := MetaServiceCreateSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropSnapshot(req *DropSnapshotReq) (r *ExecResp, err error) {
  if err = p.sendDropSnapshot(req); err != nil { return }
  return p.recvDropSnapshot()
}

func (p *MetaServiceClient) sendDropSnapshot(req *DropSnapshotReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropSnapshot() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error181 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error182 error
    error182, err = error181.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error182
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSnapshot failed: invalid message type")
    return
  }
  result := MetaServiceDropSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSnapshots(req *ListSnapshotsReq) (r *ListSnapshotsResp, err error) {
  if err = p.sendListSnapshots(req); err != nil { return }
  return p.recvListSnapshots()
}

func (p *MetaServiceClient) sendListSnapshots(req *ListSnapshotsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSnapshots", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSnapshotsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSnapshots" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSnapshots failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSnapshots failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error183 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error184 error
    error184, err = error183.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error184
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSnapshots failed: invalid message type")
    return
  }
  result := MetaServiceListSnapshotsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RunAdminJob(req *AdminJobReq) (r *AdminJobResp, err error) {
  if err = p.sendRunAdminJob(req); err != nil { return }
  return p.recvRunAdminJob()
}

func (p *MetaServiceClient) sendRunAdminJob(req *AdminJobReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("runAdminJob", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRunAdminJobArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "runAdminJob" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "runAdminJob failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "runAdminJob failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error185 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error186 error
    error186, err = error185.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error186
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "runAdminJob failed: invalid message type")
    return
  }
  result := MetaServiceRunAdminJobResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddZone(req *AddZoneReq) (r *ExecResp, err error) {
  if err = p.sendAddZone(req); err != nil { return }
  return p.recvAddZone()
}

func (p *MetaServiceClient) sendAddZone(req *AddZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error187 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error188 error
    error188, err = error187.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error188
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addZone failed: invalid message type")
    return
  }
  result := MetaServiceAddZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZone(req *DropZoneReq) (r *ExecResp, err error) {
  if err = p.sendDropZone(req); err != nil { return }
  return p.recvDropZone()
}

func (p *MetaServiceClient) sendDropZone(req *DropZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error189 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error190 error
    error190, err = error189.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error190
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropZone failed: invalid message type")
    return
  }
  result := MetaServiceDropZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddHostIntoZone(req *AddHostIntoZoneReq) (r *ExecResp, err error) {
  if err = p.sendAddHostIntoZone(req); err != nil { return }
  return p.recvAddHostIntoZone()
}

func (p *MetaServiceClient) sendAddHostIntoZone(req *AddHostIntoZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addHostIntoZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddHostIntoZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddHostIntoZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addHostIntoZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addHostIntoZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addHostIntoZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error191 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error192 error
    error192, err = error191.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error192
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHostIntoZone failed: invalid message type")
    return
  }
  result := MetaServiceAddHostIntoZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropHostFromZone(req *DropHostFromZoneReq) (r *ExecResp, err error) {
  if err = p.sendDropHostFromZone(req); err != nil { return }
  return p.recvDropHostFromZone()
}

func (p *MetaServiceClient) sendDropHostFromZone(req *DropHostFromZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropHostFromZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropHostFromZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropHostFromZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropHostFromZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropHostFromZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropHostFromZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error193 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error194 error
    error194, err = error193.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error194
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropHostFromZone failed: invalid message type")
    return
  }
  result := MetaServiceDropHostFromZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetZone(req *GetZoneReq) (r *GetZoneResp, err error) {
  if err = p.sendGetZone(req); err != nil { return }
  return p.recvGetZone()
}

func (p *MetaServiceClient) sendGetZone(req *GetZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetZone() (value *GetZoneResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error195 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error196 error
    error196, err = error195.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error196
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getZone failed: invalid message type")
    return
  }
  result := MetaServiceGetZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListZones(req *ListZonesReq) (r *ListZonesResp, err error) {
  if err = p.sendListZones(req); err != nil { return }
  return p.recvListZones()
}

func (p *MetaServiceClient) sendListZones(req *ListZonesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listZones", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListZonesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListZones() (value *ListZonesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listZones" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listZones failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listZones failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error197 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error198 error
    error198, err = error197.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error198
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listZones failed: invalid message type")
    return
  }
  result := MetaServiceListZonesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddGroup(req *AddGroupReq) (r *ExecResp, err error) {
  if err = p.sendAddGroup(req); err != nil { return }
  return p.recvAddGroup()
}

func (p *MetaServiceClient) sendAddGroup(req *AddGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error199 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error200 error
    error200, err = error199.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error200
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGroup failed: invalid message type")
    return
  }
  result := MetaServiceAddGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropGroup(req *DropGroupReq) (r *ExecResp, err error) {
  if err = p.sendDropGroup(req); err != nil { return }
  return p.recvDropGroup()
}

func (p *MetaServiceClient) sendDropGroup(req *DropGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error201 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error202 error
    error202, err = error201.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error202
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropGroup failed: invalid message type")
    return
  }
  result := MetaServiceDropGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddZoneIntoGroup(req *AddZoneIntoGroupReq) (r *ExecResp, err error) {
  if err = p.sendAddZoneIntoGroup(req); err != nil { return }
  return p.recvAddZoneIntoGroup()
}

func (p *MetaServiceClient) sendAddZoneIntoGroup(req *AddZoneIntoGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addZoneIntoGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddZoneIntoGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddZoneIntoGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addZoneIntoGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addZoneIntoGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addZoneIntoGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error203 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error204 error
    error204, err = error203.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error204
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addZoneIntoGroup failed: invalid message type")
    return
  }
  result := MetaServiceAddZoneIntoGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) DropZoneFromGroup(req *DropZoneFromGroupReq) (r *ExecResp, err error) {
  if err = p.sendDropZoneFromGroup(req); err != nil { return }
  return p.recvDropZoneFromGroup()
}

func (p *MetaServiceClient) sendDropZoneFromGroup(req *DropZoneFromGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropZoneFromGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropZoneFromGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvDropZoneFromGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropZoneFromGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropZoneFromGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropZoneFromGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error205 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error206 error
    error206, err = error205.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error206
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropZoneFromGroup failed: invalid message type")
    return
  }
  result := MetaServiceDropZoneFromGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetGroup(req *GetGroupReq) (r *GetGroupResp, err error) {
  if err = p.sendGetGroup(req); err != nil { return }
  return p.recvGetGroup()
}

func (p *MetaServiceClient) sendGetGroup(req *GetGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetGroup() (value *GetGroupResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error207 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error208 error
    error208, err = error207.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error208
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroup failed: invalid message type")
    return
  }
  result := MetaServiceGetGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListGroups(req *ListGroupsReq) (r *ListGroupsResp, err error) {
  if err = p.sendListGroups(req); err != nil { return }
  return p.recvListGroups()
}

func (p *MetaServiceClient) sendListGroups(req *ListGroupsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListGroupsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListGroups() (value *ListGroupsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listGroups" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error209 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error210 error
    error210, err = error209.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error210
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listGroups failed: invalid message type")
    return
  }
  result := MetaServiceListGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateBackup(req *CreateBackupReq) (r *CreateBackupResp, err error) {
  if err = p.sendCreateBackup(req); err != nil { return }
  return p.recvCreateBackup()
}

func (p *MetaServiceClient) sendCreateBackup(req *CreateBackupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createBackup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateBackupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createBackup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createBackup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createBackup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error211 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error212 error
    error212, err = error211.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error212
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createBackup failed: invalid message type")
    return
  }
  result := MetaServiceCreateBackupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RestoreMeta(req *RestoreMetaReq) (r *ExecResp, err error) {
  if err = p.sendRestoreMeta(req); err != nil { return }
  return p.recvRestoreMeta()
}

func (p *MetaServiceClient) sendRestoreMeta(req *RestoreMetaReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("restoreMeta", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRestoreMetaArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRestoreMeta() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "restoreMeta" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "restoreMeta failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "restoreMeta failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error213 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error214 error
    error214, err = error213.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error214
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "restoreMeta failed: invalid message type")
    return
  }
  result := MetaServiceRestoreMetaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) AddListener(req *AddListenerReq) (r *ExecResp, err error) {
  if err = p.sendAddListener(req); err != nil { return }
  return p.recvAddListener()
}

func (p *MetaServiceClient) sendAddListener(req *AddListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvAddListener() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error215 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error216 error
    error216, err = error215.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error216
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addListener failed: invalid message type")
    return
  }
  result := MetaServiceAddListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveListener(req *RemoveListenerReq) (r *ExecResp, err error) {
  if err = p.sendRemoveListener(req); err != nil { return }
  return p.recvRemoveListener()
}

func (p *MetaServiceClient) sendRemoveListener(req *RemoveListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemoveListener() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error217 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error218 error
    error218, err = error217.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error218
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeListener failed: invalid message type")
    return
  }
  result := MetaServiceRemoveListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListListener(req *ListListenerReq) (r *ListListenerResp, err error) {
  if err = p.sendListListener(req); err != nil { return }
  return p.recvListListener()
}

func (p *MetaServiceClient) sendListListener(req *ListListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListListener() (value *ListListenerResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error219 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error220 error
    error220, err = error219.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error220
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listListener failed: invalid message type")
    return
  }
  result := MetaServiceListListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetStatis(req *GetStatisReq) (r *GetStatisResp, err error) {
  if err = p.sendGetStatis(req); err != nil { return }
  return p.recvGetStatis()
}

func (p *MetaServiceClient) sendGetStatis(req *GetStatisReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStatis", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetStatisArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetStatis() (value *GetStatisResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStatis" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getStatis failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getStatis failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error221 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error222 error
    error222, err = error221.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error222
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatis failed: invalid message type")
    return
  }
  result := MetaServiceGetStatisResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignInFTService(req *SignInFTServiceReq) (r *ExecResp, err error) {
  if err = p.sendSignInFTService(req); err != nil { return }
  return p.recvSignInFTService()
}

func (p *MetaServiceClient) sendSignInFTService(req *SignInFTServiceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("signInFTService", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSignInFTServiceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvSignInFTService() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "signInFTService" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "signInFTService failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "signInFTService failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error223 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error224 error
    error224, err = error223.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error224
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "signInFTService failed: invalid message type")
    return
  }
  result := MetaServiceSignInFTServiceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) SignOutFTService(req *SignOutFTServiceReq) (r *ExecResp, err error) {
  if err = p.sendSignOutFTService(req); err != nil { return }
  return p.recvSignOutFTService()
}

func (p *MetaServiceClient) sendSignOutFTService(req *SignOutFTServiceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("signOutFTService", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSignOutFTServiceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvSignOutFTService() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "signOutFTService" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "signOutFTService failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "signOutFTService failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error225 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error226 error
    error226, err = error225.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error226
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "signOutFTService failed: invalid message type")
    return
  }
  result := MetaServiceSignOutFTServiceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListFTClients(req *ListFTClientsReq) (r *ListFTClientsResp, err error) {
  if err = p.sendListFTClients(req); err != nil { return }
  return p.recvListFTClients()
}

func (p *MetaServiceClient) sendListFTClients(req *ListFTClientsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listFTClients", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListFTClientsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListFTClients() (value *ListFTClientsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listFTClients" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listFTClients failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listFTClients failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error227 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error228 error
    error228, err = error227.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error228
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listFTClients failed: invalid message type")
    return
  }
  result := MetaServiceListFTClientsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) CreateSession(req *CreateSessionReq) (r *CreateSessionResp, err error) {
  if err = p.sendCreateSession(req); err != nil { return }
  return p.recvCreateSession()
}

func (p *MetaServiceClient) sendCreateSession(req *CreateSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvCreateSession() (value *CreateSessionResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error229 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error230 error
    error230, err = error229.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error230
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSession failed: invalid message type")
    return
  }
  result := MetaServiceCreateSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) UpdateSessions(req *UpdateSessionsReq) (r *ExecResp, err error) {
  if err = p.sendUpdateSessions(req); err != nil { return }
  return p.recvUpdateSessions()
}

func (p *MetaServiceClient) sendUpdateSessions(req *UpdateSessionsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateSessions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceUpdateSessionsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvUpdateSessions() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateSessions" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateSessions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateSessions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error231 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error232 error
    error232, err = error231.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error232
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSessions failed: invalid message type")
    return
  }
  result := MetaServiceUpdateSessionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ListSessions(req *ListSessionsReq) (r *ListSessionsResp, err error) {
  if err = p.sendListSessions(req); err != nil { return }
  return p.recvListSessions()
}

func (p *MetaServiceClient) sendListSessions(req *ListSessionsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSessions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSessionsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvListSessions() (value *ListSessionsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSessions" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSessions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSessions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error233 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error234 error
    error234, err = error233.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error234
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSessions failed: invalid message type")
    return
  }
  result := MetaServiceListSessionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) GetSession(req *GetSessionReq) (r *GetSessionResp, err error) {
  if err = p.sendGetSession(req); err != nil { return }
  return p.recvGetSession()
}

func (p *MetaServiceClient) sendGetSession(req *GetSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvGetSession() (value *GetSessionResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error235 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error236 error
    error236, err = error235.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error236
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSession failed: invalid message type")
    return
  }
  result := MetaServiceGetSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) RemoveSession(req *RemoveSessionReq) (r *ExecResp, err error) {
  if err = p.sendRemoveSession(req); err != nil { return }
  return p.recvRemoveSession()
}

func (p *MetaServiceClient) sendRemoveSession(req *RemoveSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvRemoveSession() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error237 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error238 error
    error238, err = error237.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error238
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeSession failed: invalid message type")
    return
  }
  result := MetaServiceRemoveSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceClient) ReportTaskFinish(req *ReportTaskReq) (r *ExecResp, err error) {
  if err = p.sendReportTaskFinish(req); err != nil { return }
  return p.recvReportTaskFinish()
}

func (p *MetaServiceClient) sendReportTaskFinish(req *ReportTaskReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportTaskFinish", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceReportTaskFinishArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceClient) recvReportTaskFinish() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportTaskFinish" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "reportTaskFinish failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "reportTaskFinish failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error239 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error240 error
    error240, err = error239.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error240
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportTaskFinish failed: invalid message type")
    return
  }
  result := MetaServiceReportTaskFinishResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type MetaServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewMetaServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMetaServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *MetaServiceThreadsafeClient {
  return &MetaServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *MetaServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSpace(req *CreateSpaceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateSpace(req); err != nil { return }
  return p.recvCreateSpace()
}

func (p *MetaServiceThreadsafeClient) sendCreateSpace(req *CreateSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error241 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error242 error
    error242, err = error241.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error242
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSpace failed: invalid message type")
    return
  }
  result := MetaServiceCreateSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSpace(req *DropSpaceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropSpace(req); err != nil { return }
  return p.recvDropSpace()
}

func (p *MetaServiceThreadsafeClient) sendDropSpace(req *DropSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropSpace() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error243 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error244 error
    error244, err = error243.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error244
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSpace failed: invalid message type")
    return
  }
  result := MetaServiceDropSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSpace(req *GetSpaceReq) (r *GetSpaceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetSpace(req); err != nil { return }
  return p.recvGetSpace()
}

func (p *MetaServiceThreadsafeClient) sendGetSpace(req *GetSpaceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSpace", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSpaceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetSpace() (value *GetSpaceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSpace" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSpace failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSpace failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error245 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error246 error
    error246, err = error245.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error246
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSpace failed: invalid message type")
    return
  }
  result := MetaServiceGetSpaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSpaces(req *ListSpacesReq) (r *ListSpacesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListSpaces(req); err != nil { return }
  return p.recvListSpaces()
}

func (p *MetaServiceThreadsafeClient) sendListSpaces(req *ListSpacesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSpaces", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSpacesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListSpaces() (value *ListSpacesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSpaces" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSpaces failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSpaces failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error247 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error248 error
    error248, err = error247.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error248
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSpaces failed: invalid message type")
    return
  }
  result := MetaServiceListSpacesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTag(req *CreateTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateTag(req); err != nil { return }
  return p.recvCreateTag()
}

func (p *MetaServiceThreadsafeClient) sendCreateTag(req *CreateTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error249 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error250 error
    error250, err = error249.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error250
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTag failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterTag(req *AlterTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterTag(req); err != nil { return }
  return p.recvAlterTag()
}

func (p *MetaServiceThreadsafeClient) sendAlterTag(req *AlterTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error251 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error252 error
    error252, err = error251.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error252
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterTag failed: invalid message type")
    return
  }
  result := MetaServiceAlterTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTag(req *DropTagReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropTag(req); err != nil { return }
  return p.recvDropTag()
}

func (p *MetaServiceThreadsafeClient) sendDropTag(req *DropTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropTag() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error253 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error254 error
    error254, err = error253.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error254
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTag failed: invalid message type")
    return
  }
  result := MetaServiceDropTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTag(req *GetTagReq) (r *GetTagResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetTag(req); err != nil { return }
  return p.recvGetTag()
}

func (p *MetaServiceThreadsafeClient) sendGetTag(req *GetTagReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetTag() (value *GetTagResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTag" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTag failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTag failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error255 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error256 error
    error256, err = error255.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error256
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTag failed: invalid message type")
    return
  }
  result := MetaServiceGetTagResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTags(req *ListTagsReq) (r *ListTagsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListTags(req); err != nil { return }
  return p.recvListTags()
}

func (p *MetaServiceThreadsafeClient) sendListTags(req *ListTagsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListTags() (value *ListTagsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTags" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTags failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTags failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error257 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error258 error
    error258, err = error257.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error258
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTags failed: invalid message type")
    return
  }
  result := MetaServiceListTagsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdge(req *CreateEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateEdge(req); err != nil { return }
  return p.recvCreateEdge()
}

func (p *MetaServiceThreadsafeClient) sendCreateEdge(req *CreateEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error259 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error260 error
    error260, err = error259.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error260
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdge failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterEdge(req *AlterEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterEdge(req); err != nil { return }
  return p.recvAlterEdge()
}

func (p *MetaServiceThreadsafeClient) sendAlterEdge(req *AlterEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error261 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error262 error
    error262, err = error261.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error262
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterEdge failed: invalid message type")
    return
  }
  result := MetaServiceAlterEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdge(req *DropEdgeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropEdge(req); err != nil { return }
  return p.recvDropEdge()
}

func (p *MetaServiceThreadsafeClient) sendDropEdge(req *DropEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropEdge() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error263 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error264 error
    error264, err = error263.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error264
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdge failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdge(req *GetEdgeReq) (r *GetEdgeResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetEdge(req); err != nil { return }
  return p.recvGetEdge()
}

func (p *MetaServiceThreadsafeClient) sendGetEdge(req *GetEdgeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdge", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetEdge() (value *GetEdgeResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdge" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdge failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdge failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error265 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error266 error
    error266, err = error265.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error266
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdge failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdges(req *ListEdgesReq) (r *ListEdgesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListEdges(req); err != nil { return }
  return p.recvListEdges()
}

func (p *MetaServiceThreadsafeClient) sendListEdges(req *ListEdgesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdges", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListEdges() (value *ListEdgesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdges" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdges failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdges failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error267 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error268 error
    error268, err = error267.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error268
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdges failed: invalid message type")
    return
  }
  result := MetaServiceListEdgesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListHosts(req *ListHostsReq) (r *ListHostsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListHosts(req); err != nil { return }
  return p.recvListHosts()
}

func (p *MetaServiceThreadsafeClient) sendListHosts(req *ListHostsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListHostsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListHosts() (value *ListHostsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listHosts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error269 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error270 error
    error270, err = error269.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error270
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
    return
  }
  result := MetaServiceListHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetPartsAlloc(req *GetPartsAllocReq) (r *GetPartsAllocResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetPartsAlloc(req); err != nil { return }
  return p.recvGetPartsAlloc()
}

func (p *MetaServiceThreadsafeClient) sendGetPartsAlloc(req *GetPartsAllocReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getPartsAlloc", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetPartsAllocArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetPartsAlloc() (value *GetPartsAllocResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getPartsAlloc" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getPartsAlloc failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getPartsAlloc failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error271 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error272 error
    error272, err = error271.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error272
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPartsAlloc failed: invalid message type")
    return
  }
  result := MetaServiceGetPartsAllocResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListParts(req *ListPartsReq) (r *ListPartsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListParts(req); err != nil { return }
  return p.recvListParts()
}

func (p *MetaServiceThreadsafeClient) sendListParts(req *ListPartsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listParts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListPartsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListParts() (value *ListPartsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listParts" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listParts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listParts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error273 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error274 error
    error274, err = error273.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error274
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listParts failed: invalid message type")
    return
  }
  result := MetaServiceListPartsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiPut(req *MultiPutReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendMultiPut(req); err != nil { return }
  return p.recvMultiPut()
}

func (p *MetaServiceThreadsafeClient) sendMultiPut(req *MultiPutReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPut", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiPutArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvMultiPut() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPut" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPut failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPut failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error275 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error276 error
    error276, err = error275.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error276
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPut failed: invalid message type")
    return
  }
  result := MetaServiceMultiPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Get(req *GetReq) (r *GetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGet(req); err != nil { return }
  return p.recvGet()
}

func (p *MetaServiceThreadsafeClient) sendGet(req *GetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGet() (value *GetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error277 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error278 error
    error278, err = error277.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error278
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := MetaServiceGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) MultiGet(req *MultiGetReq) (r *MultiGetResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendMultiGet(req); err != nil { return }
  return p.recvMultiGet()
}

func (p *MetaServiceThreadsafeClient) sendMultiGet(req *MultiGetReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiGet", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceMultiGetArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvMultiGet() (value *MultiGetResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiGet" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiGet failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiGet failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error279 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error280 error
    error280, err = error279.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error280
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiGet failed: invalid message type")
    return
  }
  result := MetaServiceMultiGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Remove(req *RemoveReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemove(req); err != nil { return }
  return p.recvRemove()
}

func (p *MetaServiceThreadsafeClient) sendRemove(req *RemoveReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemove() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "remove" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error281 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error282 error
    error282, err = error281.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error282
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
    return
  }
  result := MetaServiceRemoveResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveRange(req *RemoveRangeReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveRange(req); err != nil { return }
  return p.recvRemoveRange()
}

func (p *MetaServiceThreadsafeClient) sendRemoveRange(req *RemoveRangeReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeRange", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveRangeArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemoveRange() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeRange" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeRange failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeRange failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error283 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error284 error
    error284, err = error283.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error284
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeRange failed: invalid message type")
    return
  }
  result := MetaServiceRemoveRangeResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Scan(req *ScanReq) (r *ScanResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendScan(req); err != nil { return }
  return p.recvScan()
}

func (p *MetaServiceThreadsafeClient) sendScan(req *ScanReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("scan", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceScanArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvScan() (value *ScanResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "scan" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "scan failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "scan failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error285 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error286 error
    error286, err = error285.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error286
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scan failed: invalid message type")
    return
  }
  result := MetaServiceScanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateTagIndex(req *CreateTagIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateTagIndex(req); err != nil { return }
  return p.recvCreateTagIndex()
}

func (p *MetaServiceThreadsafeClient) sendCreateTagIndex(req *CreateTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error287 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error288 error
    error288, err = error287.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error288
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceCreateTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropTagIndex(req *DropTagIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropTagIndex(req); err != nil { return }
  return p.recvDropTagIndex()
}

func (p *MetaServiceThreadsafeClient) sendDropTagIndex(req *DropTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error289 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error290 error
    error290, err = error289.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error290
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceDropTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetTagIndex(req *GetTagIndexReq) (r *GetTagIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetTagIndex(req); err != nil { return }
  return p.recvGetTagIndex()
}

func (p *MetaServiceThreadsafeClient) sendGetTagIndex(req *GetTagIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetTagIndex() (value *GetTagIndexResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error291 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error292 error
    error292, err = error291.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error292
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceGetTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexes(req *ListTagIndexesReq) (r *ListTagIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListTagIndexes(req); err != nil { return }
  return p.recvListTagIndexes()
}

func (p *MetaServiceThreadsafeClient) sendListTagIndexes(req *ListTagIndexesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTagIndexes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagIndexesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexes() (value *ListTagIndexesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTagIndexes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTagIndexes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTagIndexes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error293 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error294 error
    error294, err = error293.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error294
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTagIndexes failed: invalid message type")
    return
  }
  result := MetaServiceListTagIndexesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildTagIndex(req *RebuildIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRebuildTagIndex(req); err != nil { return }
  return p.recvRebuildTagIndex()
}

func (p *MetaServiceThreadsafeClient) sendRebuildTagIndex(req *RebuildIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rebuildTagIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRebuildTagIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRebuildTagIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rebuildTagIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rebuildTagIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rebuildTagIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error295 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error296 error
    error296, err = error295.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error296
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rebuildTagIndex failed: invalid message type")
    return
  }
  result := MetaServiceRebuildTagIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListTagIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListTagIndexStatus(req); err != nil { return }
  return p.recvListTagIndexStatus()
}

func (p *MetaServiceThreadsafeClient) sendListTagIndexStatus(req *ListIndexStatusReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listTagIndexStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListTagIndexStatusArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListTagIndexStatus() (value *ListIndexStatusResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listTagIndexStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listTagIndexStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listTagIndexStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error297 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error298 error
    error298, err = error297.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error298
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTagIndexStatus failed: invalid message type")
    return
  }
  result := MetaServiceListTagIndexStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateEdgeIndex(req *CreateEdgeIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateEdgeIndex(req); err != nil { return }
  return p.recvCreateEdgeIndex()
}

func (p *MetaServiceThreadsafeClient) sendCreateEdgeIndex(req *CreateEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error299 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error300 error
    error300, err = error299.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error300
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceCreateEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropEdgeIndex(req *DropEdgeIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropEdgeIndex(req); err != nil { return }
  return p.recvDropEdgeIndex()
}

func (p *MetaServiceThreadsafeClient) sendDropEdgeIndex(req *DropEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error301 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error302 error
    error302, err = error301.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error302
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceDropEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetEdgeIndex(req *GetEdgeIndexReq) (r *GetEdgeIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetEdgeIndex(req); err != nil { return }
  return p.recvGetEdgeIndex()
}

func (p *MetaServiceThreadsafeClient) sendGetEdgeIndex(req *GetEdgeIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetEdgeIndex() (value *GetEdgeIndexResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error303 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error304 error
    error304, err = error303.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error304
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceGetEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexes(req *ListEdgeIndexesReq) (r *ListEdgeIndexesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListEdgeIndexes(req); err != nil { return }
  return p.recvListEdgeIndexes()
}

func (p *MetaServiceThreadsafeClient) sendListEdgeIndexes(req *ListEdgeIndexesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdgeIndexes", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgeIndexesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexes() (value *ListEdgeIndexesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdgeIndexes" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdgeIndexes failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdgeIndexes failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error305 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error306 error
    error306, err = error305.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error306
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdgeIndexes failed: invalid message type")
    return
  }
  result := MetaServiceListEdgeIndexesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RebuildEdgeIndex(req *RebuildIndexReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRebuildEdgeIndex(req); err != nil { return }
  return p.recvRebuildEdgeIndex()
}

func (p *MetaServiceThreadsafeClient) sendRebuildEdgeIndex(req *RebuildIndexReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("rebuildEdgeIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRebuildEdgeIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRebuildEdgeIndex() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "rebuildEdgeIndex" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "rebuildEdgeIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "rebuildEdgeIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error307 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error308 error
    error308, err = error307.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error308
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rebuildEdgeIndex failed: invalid message type")
    return
  }
  result := MetaServiceRebuildEdgeIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListEdgeIndexStatus(req *ListIndexStatusReq) (r *ListIndexStatusResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListEdgeIndexStatus(req); err != nil { return }
  return p.recvListEdgeIndexStatus()
}

func (p *MetaServiceThreadsafeClient) sendListEdgeIndexStatus(req *ListIndexStatusReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listEdgeIndexStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListEdgeIndexStatusArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListEdgeIndexStatus() (value *ListIndexStatusResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listEdgeIndexStatus" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listEdgeIndexStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listEdgeIndexStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error309 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error310 error
    error310, err = error309.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error310
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listEdgeIndexStatus failed: invalid message type")
    return
  }
  result := MetaServiceListEdgeIndexStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateUser(req *CreateUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateUser(req); err != nil { return }
  return p.recvCreateUser()
}

func (p *MetaServiceThreadsafeClient) sendCreateUser(req *CreateUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error311 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error312 error
    error312, err = error311.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error312
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createUser failed: invalid message type")
    return
  }
  result := MetaServiceCreateUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropUser(req *DropUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropUser(req); err != nil { return }
  return p.recvDropUser()
}

func (p *MetaServiceThreadsafeClient) sendDropUser(req *DropUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error313 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error314 error
    error314, err = error313.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error314
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropUser failed: invalid message type")
    return
  }
  result := MetaServiceDropUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AlterUser(req *AlterUserReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAlterUser(req); err != nil { return }
  return p.recvAlterUser()
}

func (p *MetaServiceThreadsafeClient) sendAlterUser(req *AlterUserReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("alterUser", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAlterUserArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAlterUser() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "alterUser" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "alterUser failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "alterUser failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error315 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error316 error
    error316, err = error315.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error316
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "alterUser failed: invalid message type")
    return
  }
  result := MetaServiceAlterUserResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GrantRole(req *GrantRoleReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGrantRole(req); err != nil { return }
  return p.recvGrantRole()
}

func (p *MetaServiceThreadsafeClient) sendGrantRole(req *GrantRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("grantRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGrantRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGrantRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "grantRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "grantRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "grantRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error317 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error318 error
    error318, err = error317.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error318
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantRole failed: invalid message type")
    return
  }
  result := MetaServiceGrantRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RevokeRole(req *RevokeRoleReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRevokeRole(req); err != nil { return }
  return p.recvRevokeRole()
}

func (p *MetaServiceThreadsafeClient) sendRevokeRole(req *RevokeRoleReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("revokeRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRevokeRoleArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRevokeRole() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "revokeRole" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "revokeRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "revokeRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error319 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error320 error
    error320, err = error319.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error320
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeRole failed: invalid message type")
    return
  }
  result := MetaServiceRevokeRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListUsers(req *ListUsersReq) (r *ListUsersResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListUsers(req); err != nil { return }
  return p.recvListUsers()
}

func (p *MetaServiceThreadsafeClient) sendListUsers(req *ListUsersReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listUsers", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListUsersArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListUsers() (value *ListUsersResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listUsers" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listUsers failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listUsers failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error321 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error322 error
    error322, err = error321.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error322
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listUsers failed: invalid message type")
    return
  }
  result := MetaServiceListUsersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListRoles(req *ListRolesReq) (r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListRoles(req); err != nil { return }
  return p.recvListRoles()
}

func (p *MetaServiceThreadsafeClient) sendListRoles(req *ListRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error323 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error324 error
    error324, err = error323.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error324
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listRoles failed: invalid message type")
    return
  }
  result := MetaServiceListRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetUserRoles(req *GetUserRolesReq) (r *ListRolesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetUserRoles(req); err != nil { return }
  return p.recvGetUserRoles()
}

func (p *MetaServiceThreadsafeClient) sendGetUserRoles(req *GetUserRolesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserRoles", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetUserRolesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetUserRoles() (value *ListRolesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserRoles" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getUserRoles failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getUserRoles failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error325 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error326 error
    error326, err = error325.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error326
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserRoles failed: invalid message type")
    return
  }
  result := MetaServiceGetUserRolesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ChangePassword(req *ChangePasswordReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendChangePassword(req); err != nil { return }
  return p.recvChangePassword()
}

func (p *MetaServiceThreadsafeClient) sendChangePassword(req *ChangePasswordReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("changePassword", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceChangePasswordArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvChangePassword() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "changePassword" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "changePassword failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "changePassword failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error327 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error328 error
    error328, err = error327.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error328
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changePassword failed: invalid message type")
    return
  }
  result := MetaServiceChangePasswordResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) HeartBeat(req *HBReq) (r *HBResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendHeartBeat(req); err != nil { return }
  return p.recvHeartBeat()
}

func (p *MetaServiceThreadsafeClient) sendHeartBeat(req *HBReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceHeartBeatArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvHeartBeat() (value *HBResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "heartBeat" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error329 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error330 error
    error330, err = error329.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error330
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
    return
  }
  result := MetaServiceHeartBeatResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) Balance(req *BalanceReq) (r *BalanceResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendBalance(req); err != nil { return }
  return p.recvBalance()
}

func (p *MetaServiceThreadsafeClient) sendBalance(req *BalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("balance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvBalance() (value *BalanceResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "balance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "balance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "balance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error331 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error332 error
    error332, err = error331.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error332
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "balance failed: invalid message type")
    return
  }
  result := MetaServiceBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) LeaderBalance(req *LeaderBalanceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendLeaderBalance(req); err != nil { return }
  return p.recvLeaderBalance()
}

func (p *MetaServiceThreadsafeClient) sendLeaderBalance(req *LeaderBalanceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("leaderBalance", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceLeaderBalanceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvLeaderBalance() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "leaderBalance" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "leaderBalance failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "leaderBalance failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error333 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error334 error
    error334, err = error333.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error334
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "leaderBalance failed: invalid message type")
    return
  }
  result := MetaServiceLeaderBalanceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RegConfig(req *RegConfigReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRegConfig(req); err != nil { return }
  return p.recvRegConfig()
}

func (p *MetaServiceThreadsafeClient) sendRegConfig(req *RegConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("regConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRegConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRegConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "regConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "regConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "regConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error335 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error336 error
    error336, err = error335.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error336
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "regConfig failed: invalid message type")
    return
  }
  result := MetaServiceRegConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetConfig(req *GetConfigReq) (r *GetConfigResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetConfig(req); err != nil { return }
  return p.recvGetConfig()
}

func (p *MetaServiceThreadsafeClient) sendGetConfig(req *GetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetConfig() (value *GetConfigResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error337 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error338 error
    error338, err = error337.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error338
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getConfig failed: invalid message type")
    return
  }
  result := MetaServiceGetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SetConfig(req *SetConfigReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSetConfig(req); err != nil { return }
  return p.recvSetConfig()
}

func (p *MetaServiceThreadsafeClient) sendSetConfig(req *SetConfigReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSetConfigArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvSetConfig() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setConfig" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "setConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "setConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error339 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error340 error
    error340, err = error339.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error340
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConfig failed: invalid message type")
    return
  }
  result := MetaServiceSetConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListConfigs(req *ListConfigsReq) (r *ListConfigsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListConfigs(req); err != nil { return }
  return p.recvListConfigs()
}

func (p *MetaServiceThreadsafeClient) sendListConfigs(req *ListConfigsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConfigs", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListConfigsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListConfigs() (value *ListConfigsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConfigs" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listConfigs failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listConfigs failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error341 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error342 error
    error342, err = error341.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error342
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConfigs failed: invalid message type")
    return
  }
  result := MetaServiceListConfigsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSnapshot(req *CreateSnapshotReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateSnapshot(req); err != nil { return }
  return p.recvCreateSnapshot()
}

func (p *MetaServiceThreadsafeClient) sendCreateSnapshot(req *CreateSnapshotReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateSnapshot() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error343 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error344 error
    error344, err = error343.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error344
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSnapshot failed: invalid message type")
    return
  }
  result := MetaServiceCreateSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropSnapshot(req *DropSnapshotReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropSnapshot(req); err != nil { return }
  return p.recvDropSnapshot()
}

func (p *MetaServiceThreadsafeClient) sendDropSnapshot(req *DropSnapshotReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropSnapshot", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropSnapshotArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropSnapshot() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropSnapshot" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropSnapshot failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropSnapshot failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error345 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error346 error
    error346, err = error345.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error346
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropSnapshot failed: invalid message type")
    return
  }
  result := MetaServiceDropSnapshotResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSnapshots(req *ListSnapshotsReq) (r *ListSnapshotsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListSnapshots(req); err != nil { return }
  return p.recvListSnapshots()
}

func (p *MetaServiceThreadsafeClient) sendListSnapshots(req *ListSnapshotsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSnapshots", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSnapshotsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListSnapshots() (value *ListSnapshotsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSnapshots" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSnapshots failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSnapshots failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error347 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error348 error
    error348, err = error347.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error348
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSnapshots failed: invalid message type")
    return
  }
  result := MetaServiceListSnapshotsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RunAdminJob(req *AdminJobReq) (r *AdminJobResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRunAdminJob(req); err != nil { return }
  return p.recvRunAdminJob()
}

func (p *MetaServiceThreadsafeClient) sendRunAdminJob(req *AdminJobReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("runAdminJob", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRunAdminJobArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRunAdminJob() (value *AdminJobResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "runAdminJob" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "runAdminJob failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "runAdminJob failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error349 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error350 error
    error350, err = error349.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error350
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "runAdminJob failed: invalid message type")
    return
  }
  result := MetaServiceRunAdminJobResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddZone(req *AddZoneReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddZone(req); err != nil { return }
  return p.recvAddZone()
}

func (p *MetaServiceThreadsafeClient) sendAddZone(req *AddZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error351 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error352 error
    error352, err = error351.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error352
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addZone failed: invalid message type")
    return
  }
  result := MetaServiceAddZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropZone(req *DropZoneReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropZone(req); err != nil { return }
  return p.recvDropZone()
}

func (p *MetaServiceThreadsafeClient) sendDropZone(req *DropZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error353 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error354 error
    error354, err = error353.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error354
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropZone failed: invalid message type")
    return
  }
  result := MetaServiceDropZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddHostIntoZone(req *AddHostIntoZoneReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddHostIntoZone(req); err != nil { return }
  return p.recvAddHostIntoZone()
}

func (p *MetaServiceThreadsafeClient) sendAddHostIntoZone(req *AddHostIntoZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addHostIntoZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddHostIntoZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddHostIntoZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addHostIntoZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addHostIntoZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addHostIntoZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error355 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error356 error
    error356, err = error355.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error356
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addHostIntoZone failed: invalid message type")
    return
  }
  result := MetaServiceAddHostIntoZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropHostFromZone(req *DropHostFromZoneReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropHostFromZone(req); err != nil { return }
  return p.recvDropHostFromZone()
}

func (p *MetaServiceThreadsafeClient) sendDropHostFromZone(req *DropHostFromZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropHostFromZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropHostFromZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropHostFromZone() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropHostFromZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropHostFromZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropHostFromZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error357 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error358 error
    error358, err = error357.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error358
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropHostFromZone failed: invalid message type")
    return
  }
  result := MetaServiceDropHostFromZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetZone(req *GetZoneReq) (r *GetZoneResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetZone(req); err != nil { return }
  return p.recvGetZone()
}

func (p *MetaServiceThreadsafeClient) sendGetZone(req *GetZoneReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getZone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetZoneArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetZone() (value *GetZoneResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getZone" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getZone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getZone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error359 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error360 error
    error360, err = error359.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error360
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getZone failed: invalid message type")
    return
  }
  result := MetaServiceGetZoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListZones(req *ListZonesReq) (r *ListZonesResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListZones(req); err != nil { return }
  return p.recvListZones()
}

func (p *MetaServiceThreadsafeClient) sendListZones(req *ListZonesReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listZones", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListZonesArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListZones() (value *ListZonesResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listZones" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listZones failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listZones failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error361 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error362 error
    error362, err = error361.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error362
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listZones failed: invalid message type")
    return
  }
  result := MetaServiceListZonesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddGroup(req *AddGroupReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddGroup(req); err != nil { return }
  return p.recvAddGroup()
}

func (p *MetaServiceThreadsafeClient) sendAddGroup(req *AddGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error363 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error364 error
    error364, err = error363.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error364
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addGroup failed: invalid message type")
    return
  }
  result := MetaServiceAddGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropGroup(req *DropGroupReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropGroup(req); err != nil { return }
  return p.recvDropGroup()
}

func (p *MetaServiceThreadsafeClient) sendDropGroup(req *DropGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error365 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error366 error
    error366, err = error365.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error366
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropGroup failed: invalid message type")
    return
  }
  result := MetaServiceDropGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddZoneIntoGroup(req *AddZoneIntoGroupReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddZoneIntoGroup(req); err != nil { return }
  return p.recvAddZoneIntoGroup()
}

func (p *MetaServiceThreadsafeClient) sendAddZoneIntoGroup(req *AddZoneIntoGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addZoneIntoGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddZoneIntoGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddZoneIntoGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addZoneIntoGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addZoneIntoGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addZoneIntoGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error367 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error368 error
    error368, err = error367.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error368
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addZoneIntoGroup failed: invalid message type")
    return
  }
  result := MetaServiceAddZoneIntoGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) DropZoneFromGroup(req *DropZoneFromGroupReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendDropZoneFromGroup(req); err != nil { return }
  return p.recvDropZoneFromGroup()
}

func (p *MetaServiceThreadsafeClient) sendDropZoneFromGroup(req *DropZoneFromGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("dropZoneFromGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceDropZoneFromGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvDropZoneFromGroup() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "dropZoneFromGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "dropZoneFromGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "dropZoneFromGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error369 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error370 error
    error370, err = error369.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error370
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropZoneFromGroup failed: invalid message type")
    return
  }
  result := MetaServiceDropZoneFromGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetGroup(req *GetGroupReq) (r *GetGroupResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetGroup(req); err != nil { return }
  return p.recvGetGroup()
}

func (p *MetaServiceThreadsafeClient) sendGetGroup(req *GetGroupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetGroupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetGroup() (value *GetGroupResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getGroup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error371 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error372 error
    error372, err = error371.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error372
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGroup failed: invalid message type")
    return
  }
  result := MetaServiceGetGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListGroups(req *ListGroupsReq) (r *ListGroupsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListGroups(req); err != nil { return }
  return p.recvListGroups()
}

func (p *MetaServiceThreadsafeClient) sendListGroups(req *ListGroupsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListGroupsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListGroups() (value *ListGroupsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listGroups" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error373 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error374 error
    error374, err = error373.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error374
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listGroups failed: invalid message type")
    return
  }
  result := MetaServiceListGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateBackup(req *CreateBackupReq) (r *CreateBackupResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateBackup(req); err != nil { return }
  return p.recvCreateBackup()
}

func (p *MetaServiceThreadsafeClient) sendCreateBackup(req *CreateBackupReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createBackup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateBackupArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateBackup() (value *CreateBackupResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createBackup" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createBackup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createBackup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error375 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error376 error
    error376, err = error375.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error376
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createBackup failed: invalid message type")
    return
  }
  result := MetaServiceCreateBackupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RestoreMeta(req *RestoreMetaReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRestoreMeta(req); err != nil { return }
  return p.recvRestoreMeta()
}

func (p *MetaServiceThreadsafeClient) sendRestoreMeta(req *RestoreMetaReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("restoreMeta", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRestoreMetaArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRestoreMeta() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "restoreMeta" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "restoreMeta failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "restoreMeta failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error377 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error378 error
    error378, err = error377.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error378
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "restoreMeta failed: invalid message type")
    return
  }
  result := MetaServiceRestoreMetaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) AddListener(req *AddListenerReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendAddListener(req); err != nil { return }
  return p.recvAddListener()
}

func (p *MetaServiceThreadsafeClient) sendAddListener(req *AddListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceAddListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvAddListener() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "addListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "addListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error379 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error380 error
    error380, err = error379.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error380
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addListener failed: invalid message type")
    return
  }
  result := MetaServiceAddListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveListener(req *RemoveListenerReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveListener(req); err != nil { return }
  return p.recvRemoveListener()
}

func (p *MetaServiceThreadsafeClient) sendRemoveListener(req *RemoveListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemoveListener() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error381 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error382 error
    error382, err = error381.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error382
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeListener failed: invalid message type")
    return
  }
  result := MetaServiceRemoveListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListListener(req *ListListenerReq) (r *ListListenerResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListListener(req); err != nil { return }
  return p.recvListListener()
}

func (p *MetaServiceThreadsafeClient) sendListListener(req *ListListenerReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listListener", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListListenerArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListListener() (value *ListListenerResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listListener" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listListener failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listListener failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error383 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error384 error
    error384, err = error383.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error384
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listListener failed: invalid message type")
    return
  }
  result := MetaServiceListListenerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetStatis(req *GetStatisReq) (r *GetStatisResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetStatis(req); err != nil { return }
  return p.recvGetStatis()
}

func (p *MetaServiceThreadsafeClient) sendGetStatis(req *GetStatisReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getStatis", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetStatisArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetStatis() (value *GetStatisResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getStatis" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getStatis failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getStatis failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error385 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error386 error
    error386, err = error385.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error386
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatis failed: invalid message type")
    return
  }
  result := MetaServiceGetStatisResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignInFTService(req *SignInFTServiceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSignInFTService(req); err != nil { return }
  return p.recvSignInFTService()
}

func (p *MetaServiceThreadsafeClient) sendSignInFTService(req *SignInFTServiceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("signInFTService", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSignInFTServiceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvSignInFTService() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "signInFTService" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "signInFTService failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "signInFTService failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error387 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error388 error
    error388, err = error387.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error388
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "signInFTService failed: invalid message type")
    return
  }
  result := MetaServiceSignInFTServiceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) SignOutFTService(req *SignOutFTServiceReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendSignOutFTService(req); err != nil { return }
  return p.recvSignOutFTService()
}

func (p *MetaServiceThreadsafeClient) sendSignOutFTService(req *SignOutFTServiceReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("signOutFTService", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceSignOutFTServiceArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvSignOutFTService() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "signOutFTService" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "signOutFTService failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "signOutFTService failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error389 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error390 error
    error390, err = error389.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error390
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "signOutFTService failed: invalid message type")
    return
  }
  result := MetaServiceSignOutFTServiceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListFTClients(req *ListFTClientsReq) (r *ListFTClientsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListFTClients(req); err != nil { return }
  return p.recvListFTClients()
}

func (p *MetaServiceThreadsafeClient) sendListFTClients(req *ListFTClientsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listFTClients", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListFTClientsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListFTClients() (value *ListFTClientsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listFTClients" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listFTClients failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listFTClients failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error391 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error392 error
    error392, err = error391.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error392
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listFTClients failed: invalid message type")
    return
  }
  result := MetaServiceListFTClientsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) CreateSession(req *CreateSessionReq) (r *CreateSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCreateSession(req); err != nil { return }
  return p.recvCreateSession()
}

func (p *MetaServiceThreadsafeClient) sendCreateSession(req *CreateSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceCreateSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvCreateSession() (value *CreateSessionResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "createSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "createSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error393 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error394 error
    error394, err = error393.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error394
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSession failed: invalid message type")
    return
  }
  result := MetaServiceCreateSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) UpdateSessions(req *UpdateSessionsReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendUpdateSessions(req); err != nil { return }
  return p.recvUpdateSessions()
}

func (p *MetaServiceThreadsafeClient) sendUpdateSessions(req *UpdateSessionsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateSessions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceUpdateSessionsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvUpdateSessions() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateSessions" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "updateSessions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "updateSessions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error395 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error396 error
    error396, err = error395.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error396
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSessions failed: invalid message type")
    return
  }
  result := MetaServiceUpdateSessionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ListSessions(req *ListSessionsReq) (r *ListSessionsResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendListSessions(req); err != nil { return }
  return p.recvListSessions()
}

func (p *MetaServiceThreadsafeClient) sendListSessions(req *ListSessionsReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listSessions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceListSessionsArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvListSessions() (value *ListSessionsResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listSessions" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "listSessions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "listSessions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error397 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error398 error
    error398, err = error397.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error398
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSessions failed: invalid message type")
    return
  }
  result := MetaServiceListSessionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) GetSession(req *GetSessionReq) (r *GetSessionResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendGetSession(req); err != nil { return }
  return p.recvGetSession()
}

func (p *MetaServiceThreadsafeClient) sendGetSession(req *GetSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceGetSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvGetSession() (value *GetSessionResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "getSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "getSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error399 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error400 error
    error400, err = error399.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error400
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSession failed: invalid message type")
    return
  }
  result := MetaServiceGetSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) RemoveSession(req *RemoveSessionReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendRemoveSession(req); err != nil { return }
  return p.recvRemoveSession()
}

func (p *MetaServiceThreadsafeClient) sendRemoveSession(req *RemoveSessionReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeSession", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceRemoveSessionArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvRemoveSession() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeSession" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "removeSession failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "removeSession failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error401 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error402 error
    error402, err = error401.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error402
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeSession failed: invalid message type")
    return
  }
  result := MetaServiceRemoveSessionResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *MetaServiceThreadsafeClient) ReportTaskFinish(req *ReportTaskReq) (r *ExecResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendReportTaskFinish(req); err != nil { return }
  return p.recvReportTaskFinish()
}

func (p *MetaServiceThreadsafeClient) sendReportTaskFinish(req *ReportTaskReq)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportTaskFinish", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetaServiceReportTaskFinishArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetaServiceThreadsafeClient) recvReportTaskFinish() (value *ExecResp, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportTaskFinish" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "reportTaskFinish failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "reportTaskFinish failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error403 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error404 error
    error404, err = error403.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error404
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportTaskFinish failed: invalid message type")
    return
  }
  result := MetaServiceReportTaskFinishResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type MetaServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler MetaService
}

func (p *MetaServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *MetaServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewMetaServiceProcessor(handler MetaService) *MetaServiceProcessor {
  self405 := &MetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self405.processorMap["createSpace"] = &metaServiceProcessorCreateSpace{handler:handler}
  self405.processorMap["dropSpace"] = &metaServiceProcessorDropSpace{handler:handler}
  self405.processorMap["getSpace"] = &metaServiceProcessorGetSpace{handler:handler}
  self405.processorMap["listSpaces"] = &metaServiceProcessorListSpaces{handler:handler}
  self405.processorMap["createTag"] = &metaServiceProcessorCreateTag{handler:handler}
  self405.processorMap["alterTag"] = &metaServiceProcessorAlterTag{handler:handler}
  self405.processorMap["dropTag"] = &metaServiceProcessorDropTag{handler:handler}
  self405.processorMap["getTag"] = &metaServiceProcessorGetTag{handler:handler}
  self405.processorMap["listTags"] = &metaServiceProcessorListTags{handler:handler}
  self405.processorMap["createEdge"] = &metaServiceProcessorCreateEdge{handler:handler}
  self405.processorMap["alterEdge"] = &metaServiceProcessorAlterEdge{handler:handler}
  self405.processorMap["dropEdge"] = &metaServiceProcessorDropEdge{handler:handler}
  self405.processorMap["getEdge"] = &metaServiceProcessorGetEdge{handler:handler}
  self405.processorMap["listEdges"] = &metaServiceProcessorListEdges{handler:handler}
  self405.processorMap["listHosts"] = &metaServiceProcessorListHosts{handler:handler}
  self405.processorMap["getPartsAlloc"] = &metaServiceProcessorGetPartsAlloc{handler:handler}
  self405.processorMap["listParts"] = &metaServiceProcessorListParts{handler:handler}
  self405.processorMap["multiPut"] = &metaServiceProcessorMultiPut{handler:handler}
  self405.processorMap["get"] = &metaServiceProcessorGet{handler:handler}
  self405.processorMap["multiGet"] = &metaServiceProcessorMultiGet{handler:handler}
  self405.processorMap["remove"] = &metaServiceProcessorRemove{handler:handler}
  self405.processorMap["removeRange"] = &metaServiceProcessorRemoveRange{handler:handler}
  self405.processorMap["scan"] = &metaServiceProcessorScan{handler:handler}
  self405.processorMap["createTagIndex"] = &metaServiceProcessorCreateTagIndex{handler:handler}
  self405.processorMap["dropTagIndex"] = &metaServiceProcessorDropTagIndex{handler:handler}
  self405.processorMap["getTagIndex"] = &metaServiceProcessorGetTagIndex{handler:handler}
  self405.processorMap["listTagIndexes"] = &metaServiceProcessorListTagIndexes{handler:handler}
  self405.processorMap["rebuildTagIndex"] = &metaServiceProcessorRebuildTagIndex{handler:handler}
  self405.processorMap["listTagIndexStatus"] = &metaServiceProcessorListTagIndexStatus{handler:handler}
  self405.processorMap["createEdgeIndex"] = &metaServiceProcessorCreateEdgeIndex{handler:handler}
  self405.processorMap["dropEdgeIndex"] = &metaServiceProcessorDropEdgeIndex{handler:handler}
  self405.processorMap["getEdgeIndex"] = &metaServiceProcessorGetEdgeIndex{handler:handler}
  self405.processorMap["listEdgeIndexes"] = &metaServiceProcessorListEdgeIndexes{handler:handler}
  self405.processorMap["rebuildEdgeIndex"] = &metaServiceProcessorRebuildEdgeIndex{handler:handler}
  self405.processorMap["listEdgeIndexStatus"] = &metaServiceProcessorListEdgeIndexStatus{handler:handler}
  self405.processorMap["createUser"] = &metaServiceProcessorCreateUser{handler:handler}
  self405.processorMap["dropUser"] = &metaServiceProcessorDropUser{handler:handler}
  self405.processorMap["alterUser"] = &metaServiceProcessorAlterUser{handler:handler}
  self405.processorMap["grantRole"] = &metaServiceProcessorGrantRole{handler:handler}
  self405.processorMap["revokeRole"] = &metaServiceProcessorRevokeRole{handler:handler}
  self405.processorMap["listUsers"] = &metaServiceProcessorListUsers{handler:handler}
  self405.processorMap["listRoles"] = &metaServiceProcessorListRoles{handler:handler}
  self405.processorMap["getUserRoles"] = &metaServiceProcessorGetUserRoles{handler:handler}
  self405.processorMap["changePassword"] = &metaServiceProcessorChangePassword{handler:handler}
  self405.processorMap["heartBeat"] = &metaServiceProcessorHeartBeat{handler:handler}
  self405.processorMap["balance"] = &metaServiceProcessorBalance{handler:handler}
  self405.processorMap["leaderBalance"] = &metaServiceProcessorLeaderBalance{handler:handler}
  self405.processorMap["regConfig"] = &metaServiceProcessorRegConfig{handler:handler}
  self405.processorMap["getConfig"] = &metaServiceProcessorGetConfig{handler:handler}
  self405.processorMap["setConfig"] = &metaServiceProcessorSetConfig{handler:handler}
  self405.processorMap["listConfigs"] = &metaServiceProcessorListConfigs{handler:handler}
  self405.processorMap["createSnapshot"] = &metaServiceProcessorCreateSnapshot{handler:handler}
  self405.processorMap["dropSnapshot"] = &metaServiceProcessorDropSnapshot{handler:handler}
  self405.processorMap["listSnapshots"] = &metaServiceProcessorListSnapshots{handler:handler}
  self405.processorMap["runAdminJob"] = &metaServiceProcessorRunAdminJob{handler:handler}
  self405.processorMap["addZone"] = &metaServiceProcessorAddZone{handler:handler}
  self405.processorMap["dropZone"] = &metaServiceProcessorDropZone{handler:handler}
  self405.processorMap["addHostIntoZone"] = &metaServiceProcessorAddHostIntoZone{handler:handler}
  self405.processorMap["dropHostFromZone"] = &metaServiceProcessorDropHostFromZone{handler:handler}
  self405.processorMap["getZone"] = &metaServiceProcessorGetZone{handler:handler}
  self405.processorMap["listZones"] = &metaServiceProcessorListZones{handler:handler}
  self405.processorMap["addGroup"] = &metaServiceProcessorAddGroup{handler:handler}
  self405.processorMap["dropGroup"] = &metaServiceProcessorDropGroup{handler:handler}
  self405.processorMap["addZoneIntoGroup"] = &metaServiceProcessorAddZoneIntoGroup{handler:handler}
  self405.processorMap["dropZoneFromGroup"] = &metaServiceProcessorDropZoneFromGroup{handler:handler}
  self405.processorMap["getGroup"] = &metaServiceProcessorGetGroup{handler:handler}
  self405.processorMap["listGroups"] = &metaServiceProcessorListGroups{handler:handler}
  self405.processorMap["createBackup"] = &metaServiceProcessorCreateBackup{handler:handler}
  self405.processorMap["restoreMeta"] = &metaServiceProcessorRestoreMeta{handler:handler}
  self405.processorMap["addListener"] = &metaServiceProcessorAddListener{handler:handler}
  self405.processorMap["removeListener"] = &metaServiceProcessorRemoveListener{handler:handler}
  self405.processorMap["listListener"] = &metaServiceProcessorListListener{handler:handler}
  self405.processorMap["getStatis"] = &metaServiceProcessorGetStatis{handler:handler}
  self405.processorMap["signInFTService"] = &metaServiceProcessorSignInFTService{handler:handler}
  self405.processorMap["signOutFTService"] = &metaServiceProcessorSignOutFTService{handler:handler}
  self405.processorMap["listFTClients"] = &metaServiceProcessorListFTClients{handler:handler}
  self405.processorMap["createSession"] = &metaServiceProcessorCreateSession{handler:handler}
  self405.processorMap["updateSessions"] = &metaServiceProcessorUpdateSessions{handler:handler}
  self405.processorMap["listSessions"] = &metaServiceProcessorListSessions{handler:handler}
  self405.processorMap["getSession"] = &metaServiceProcessorGetSession{handler:handler}
  self405.processorMap["removeSession"] = &metaServiceProcessorRemoveSession{handler:handler}
  self405.processorMap["reportTaskFinish"] = &metaServiceProcessorReportTaskFinish{handler:handler}
  return self405
}

type metaServiceProcessorCreateSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSpaceArgs)
  var result MetaServiceCreateSpaceResult
  if retval, err := p.handler.CreateSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSpaceArgs)
  var result MetaServiceDropSpaceResult
  if retval, err := p.handler.DropSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSpace struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSpace) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSpaceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSpace) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSpace", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSpace) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSpaceArgs)
  var result MetaServiceGetSpaceResult
  if retval, err := p.handler.GetSpace(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSpace: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSpaces struct {
  handler MetaService
}

func (p *metaServiceProcessorListSpaces) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSpacesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSpaces) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSpaces", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSpaces) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSpacesArgs)
  var result MetaServiceListSpacesResult
  if retval, err := p.handler.ListSpaces(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSpaces: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTag struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagArgs)
  var result MetaServiceCreateTagResult
  if retval, err := p.handler.CreateTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterTag struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterTagArgs)
  var result MetaServiceAlterTagResult
  if retval, err := p.handler.AlterTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTag struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagArgs)
  var result MetaServiceDropTagResult
  if retval, err := p.handler.DropTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTag struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTag) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTag) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTag", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTag) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagArgs)
  var result MetaServiceGetTagResult
  if retval, err := p.handler.GetTag(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTags struct {
  handler MetaService
}

func (p *metaServiceProcessorListTags) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTags) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTags", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTags) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagsArgs)
  var result MetaServiceListTagsResult
  if retval, err := p.handler.ListTags(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeArgs)
  var result MetaServiceCreateEdgeResult
  if retval, err := p.handler.CreateEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterEdgeArgs)
  var result MetaServiceAlterEdgeResult
  if retval, err := p.handler.AlterEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeArgs)
  var result MetaServiceDropEdgeResult
  if retval, err := p.handler.DropEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdge struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdge) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeArgs)
  var result MetaServiceGetEdgeResult
  if retval, err := p.handler.GetEdge(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdges struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdges) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgesArgs)
  var result MetaServiceListEdgesResult
  if retval, err := p.handler.ListEdges(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListHosts struct {
  handler MetaService
}

func (p *metaServiceProcessorListHosts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListHostsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListHosts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listHosts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListHosts) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListHostsArgs)
  var result MetaServiceListHostsResult
  if retval, err := p.handler.ListHosts(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetPartsAlloc struct {
  handler MetaService
}

func (p *metaServiceProcessorGetPartsAlloc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetPartsAllocArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetPartsAlloc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getPartsAlloc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetPartsAlloc) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetPartsAllocArgs)
  var result MetaServiceGetPartsAllocResult
  if retval, err := p.handler.GetPartsAlloc(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPartsAlloc: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListParts struct {
  handler MetaService
}

func (p *metaServiceProcessorListParts) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListPartsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListParts) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listParts", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListParts) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListPartsArgs)
  var result MetaServiceListPartsResult
  if retval, err := p.handler.ListParts(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listParts: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiPut struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiPut) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiPutArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiPut) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiPut", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiPut) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiPutArgs)
  var result MetaServiceMultiPutResult
  if retval, err := p.handler.MultiPut(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGet struct {
  handler MetaService
}

func (p *metaServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetArgs)
  var result MetaServiceGetResult
  if retval, err := p.handler.Get(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorMultiGet struct {
  handler MetaService
}

func (p *metaServiceProcessorMultiGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceMultiGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorMultiGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiGet", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorMultiGet) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceMultiGetArgs)
  var result MetaServiceMultiGetResult
  if retval, err := p.handler.MultiGet(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiGet: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemove struct {
  handler MetaService
}

func (p *metaServiceProcessorRemove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("remove", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemove) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveArgs)
  var result MetaServiceRemoveResult
  if retval, err := p.handler.Remove(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveRange struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveRange) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveRangeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveRange) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeRange", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveRange) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveRangeArgs)
  var result MetaServiceRemoveRangeResult
  if retval, err := p.handler.RemoveRange(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRange: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorScan struct {
  handler MetaService
}

func (p *metaServiceProcessorScan) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceScanArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorScan) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("scan", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorScan) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceScanArgs)
  var result MetaServiceScanResult
  if retval, err := p.handler.Scan(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scan: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateTagIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateTagIndexArgs)
  var result MetaServiceCreateTagIndexResult
  if retval, err := p.handler.CreateTagIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropTagIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropTagIndexArgs)
  var result MetaServiceDropTagIndexResult
  if retval, err := p.handler.DropTagIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetTagIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetTagIndexArgs)
  var result MetaServiceGetTagIndexResult
  if retval, err := p.handler.GetTagIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexes) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexesArgs)
  var result MetaServiceListTagIndexesResult
  if retval, err := p.handler.ListTagIndexes(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildTagIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildTagIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildTagIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildTagIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildTagIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildTagIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildTagIndexArgs)
  var result MetaServiceRebuildTagIndexResult
  if retval, err := p.handler.RebuildTagIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildTagIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListTagIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListTagIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListTagIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListTagIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listTagIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListTagIndexStatus) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListTagIndexStatusArgs)
  var result MetaServiceListTagIndexStatusResult
  if retval, err := p.handler.ListTagIndexStatus(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateEdgeIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateEdgeIndexArgs)
  var result MetaServiceCreateEdgeIndexResult
  if retval, err := p.handler.CreateEdgeIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorDropEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropEdgeIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropEdgeIndexArgs)
  var result MetaServiceDropEdgeIndexResult
  if retval, err := p.handler.DropEdgeIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorGetEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetEdgeIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetEdgeIndexArgs)
  var result MetaServiceGetEdgeIndexResult
  if retval, err := p.handler.GetEdgeIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexes struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexes) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexes) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexes", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexes) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexesArgs)
  var result MetaServiceListEdgeIndexesResult
  if retval, err := p.handler.ListEdgeIndexes(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexes: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRebuildEdgeIndex struct {
  handler MetaService
}

func (p *metaServiceProcessorRebuildEdgeIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRebuildEdgeIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRebuildEdgeIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("rebuildEdgeIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRebuildEdgeIndex) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRebuildEdgeIndexArgs)
  var result MetaServiceRebuildEdgeIndexResult
  if retval, err := p.handler.RebuildEdgeIndex(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rebuildEdgeIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListEdgeIndexStatus struct {
  handler MetaService
}

func (p *metaServiceProcessorListEdgeIndexStatus) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListEdgeIndexStatusArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListEdgeIndexStatus) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listEdgeIndexStatus", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListEdgeIndexStatus) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListEdgeIndexStatusArgs)
  var result MetaServiceListEdgeIndexStatusResult
  if retval, err := p.handler.ListEdgeIndexStatus(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listEdgeIndexStatus: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateUser struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateUserArgs)
  var result MetaServiceCreateUserResult
  if retval, err := p.handler.CreateUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropUser struct {
  handler MetaService
}

func (p *metaServiceProcessorDropUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropUserArgs)
  var result MetaServiceDropUserResult
  if retval, err := p.handler.DropUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAlterUser struct {
  handler MetaService
}

func (p *metaServiceProcessorAlterUser) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAlterUserArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAlterUser) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("alterUser", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAlterUser) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAlterUserArgs)
  var result MetaServiceAlterUserResult
  if retval, err := p.handler.AlterUser(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alterUser: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGrantRole struct {
  handler MetaService
}

func (p *metaServiceProcessorGrantRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGrantRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGrantRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("grantRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGrantRole) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGrantRoleArgs)
  var result MetaServiceGrantRoleResult
  if retval, err := p.handler.GrantRole(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRevokeRole struct {
  handler MetaService
}

func (p *metaServiceProcessorRevokeRole) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRevokeRoleArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRevokeRole) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("revokeRole", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRevokeRole) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRevokeRoleArgs)
  var result MetaServiceRevokeRoleResult
  if retval, err := p.handler.RevokeRole(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeRole: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListUsers struct {
  handler MetaService
}

func (p *metaServiceProcessorListUsers) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListUsersArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListUsers) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listUsers", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListUsers) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListUsersArgs)
  var result MetaServiceListUsersResult
  if retval, err := p.handler.ListUsers(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listUsers: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorListRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListRoles) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListRolesArgs)
  var result MetaServiceListRolesResult
  if retval, err := p.handler.ListRoles(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetUserRoles struct {
  handler MetaService
}

func (p *metaServiceProcessorGetUserRoles) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetUserRolesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetUserRoles) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getUserRoles", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetUserRoles) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetUserRolesArgs)
  var result MetaServiceGetUserRolesResult
  if retval, err := p.handler.GetUserRoles(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRoles: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorChangePassword struct {
  handler MetaService
}

func (p *metaServiceProcessorChangePassword) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceChangePasswordArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorChangePassword) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("changePassword", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorChangePassword) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceChangePasswordArgs)
  var result MetaServiceChangePasswordResult
  if retval, err := p.handler.ChangePassword(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changePassword: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorHeartBeat struct {
  handler MetaService
}

func (p *metaServiceProcessorHeartBeat) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceHeartBeatArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorHeartBeat) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("heartBeat", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorHeartBeat) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceHeartBeatArgs)
  var result MetaServiceHeartBeatResult
  if retval, err := p.handler.HeartBeat(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("balance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorBalance) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceBalanceArgs)
  var result MetaServiceBalanceResult
  if retval, err := p.handler.Balance(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing balance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorLeaderBalance struct {
  handler MetaService
}

func (p *metaServiceProcessorLeaderBalance) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceLeaderBalanceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorLeaderBalance) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("leaderBalance", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorLeaderBalance) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceLeaderBalanceArgs)
  var result MetaServiceLeaderBalanceResult
  if retval, err := p.handler.LeaderBalance(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaderBalance: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRegConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorRegConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRegConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRegConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("regConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRegConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRegConfigArgs)
  var result MetaServiceRegConfigResult
  if retval, err := p.handler.RegConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing regConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorGetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetConfigArgs)
  var result MetaServiceGetConfigResult
  if retval, err := p.handler.GetConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSetConfig struct {
  handler MetaService
}

func (p *metaServiceProcessorSetConfig) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSetConfigArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSetConfig) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("setConfig", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSetConfig) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSetConfigArgs)
  var result MetaServiceSetConfigResult
  if retval, err := p.handler.SetConfig(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConfig: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListConfigs struct {
  handler MetaService
}

func (p *metaServiceProcessorListConfigs) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListConfigsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListConfigs) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listConfigs", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListConfigs) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListConfigsArgs)
  var result MetaServiceListConfigsResult
  if retval, err := p.handler.ListConfigs(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConfigs: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSnapshot) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSnapshotArgs)
  var result MetaServiceCreateSnapshotResult
  if retval, err := p.handler.CreateSnapshot(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropSnapshot struct {
  handler MetaService
}

func (p *metaServiceProcessorDropSnapshot) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropSnapshotArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropSnapshot) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropSnapshot", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropSnapshot) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropSnapshotArgs)
  var result MetaServiceDropSnapshotResult
  if retval, err := p.handler.DropSnapshot(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropSnapshot: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSnapshots struct {
  handler MetaService
}

func (p *metaServiceProcessorListSnapshots) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSnapshotsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSnapshots) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSnapshots", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSnapshots) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSnapshotsArgs)
  var result MetaServiceListSnapshotsResult
  if retval, err := p.handler.ListSnapshots(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSnapshots: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRunAdminJob struct {
  handler MetaService
}

func (p *metaServiceProcessorRunAdminJob) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRunAdminJobArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRunAdminJob) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("runAdminJob", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRunAdminJob) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRunAdminJobArgs)
  var result MetaServiceRunAdminJobResult
  if retval, err := p.handler.RunAdminJob(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing runAdminJob: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddZone struct {
  handler MetaService
}

func (p *metaServiceProcessorAddZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddZone) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddZoneArgs)
  var result MetaServiceAddZoneResult
  if retval, err := p.handler.AddZone(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDropZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropZone) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropZoneArgs)
  var result MetaServiceDropZoneResult
  if retval, err := p.handler.DropZone(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddHostIntoZone struct {
  handler MetaService
}

func (p *metaServiceProcessorAddHostIntoZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddHostIntoZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddHostIntoZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addHostIntoZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddHostIntoZone) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddHostIntoZoneArgs)
  var result MetaServiceAddHostIntoZoneResult
  if retval, err := p.handler.AddHostIntoZone(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addHostIntoZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropHostFromZone struct {
  handler MetaService
}

func (p *metaServiceProcessorDropHostFromZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropHostFromZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropHostFromZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropHostFromZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropHostFromZone) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropHostFromZoneArgs)
  var result MetaServiceDropHostFromZoneResult
  if retval, err := p.handler.DropHostFromZone(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropHostFromZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetZone struct {
  handler MetaService
}

func (p *metaServiceProcessorGetZone) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetZoneArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetZone) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getZone", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetZone) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetZoneArgs)
  var result MetaServiceGetZoneResult
  if retval, err := p.handler.GetZone(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getZone: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListZones struct {
  handler MetaService
}

func (p *metaServiceProcessorListZones) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListZonesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListZones) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listZones", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListZones) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListZonesArgs)
  var result MetaServiceListZonesResult
  if retval, err := p.handler.ListZones(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listZones: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorAddGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddGroup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddGroupArgs)
  var result MetaServiceAddGroupResult
  if retval, err := p.handler.AddGroup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorDropGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropGroup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropGroupArgs)
  var result MetaServiceDropGroupResult
  if retval, err := p.handler.DropGroup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddZoneIntoGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorAddZoneIntoGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddZoneIntoGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddZoneIntoGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addZoneIntoGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddZoneIntoGroup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddZoneIntoGroupArgs)
  var result MetaServiceAddZoneIntoGroupResult
  if retval, err := p.handler.AddZoneIntoGroup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addZoneIntoGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorDropZoneFromGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorDropZoneFromGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceDropZoneFromGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorDropZoneFromGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("dropZoneFromGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorDropZoneFromGroup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceDropZoneFromGroupArgs)
  var result MetaServiceDropZoneFromGroupResult
  if retval, err := p.handler.DropZoneFromGroup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropZoneFromGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetGroup struct {
  handler MetaService
}

func (p *metaServiceProcessorGetGroup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetGroupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetGroup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getGroup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetGroup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetGroupArgs)
  var result MetaServiceGetGroupResult
  if retval, err := p.handler.GetGroup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListGroups struct {
  handler MetaService
}

func (p *metaServiceProcessorListGroups) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListGroupsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListGroups) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listGroups", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListGroups) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListGroupsArgs)
  var result MetaServiceListGroupsResult
  if retval, err := p.handler.ListGroups(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listGroups: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateBackup struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateBackup) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateBackupArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateBackup) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createBackup", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateBackup) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateBackupArgs)
  var result MetaServiceCreateBackupResult
  if retval, err := p.handler.CreateBackup(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createBackup: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRestoreMeta struct {
  handler MetaService
}

func (p *metaServiceProcessorRestoreMeta) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRestoreMetaArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRestoreMeta) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("restoreMeta", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRestoreMeta) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRestoreMetaArgs)
  var result MetaServiceRestoreMetaResult
  if retval, err := p.handler.RestoreMeta(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing restoreMeta: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorAddListener struct {
  handler MetaService
}

func (p *metaServiceProcessorAddListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceAddListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorAddListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorAddListener) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceAddListenerArgs)
  var result MetaServiceAddListenerResult
  if retval, err := p.handler.AddListener(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveListener struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveListener) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveListenerArgs)
  var result MetaServiceRemoveListenerResult
  if retval, err := p.handler.RemoveListener(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListListener struct {
  handler MetaService
}

func (p *metaServiceProcessorListListener) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListListenerArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListListener) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listListener", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListListener) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListListenerArgs)
  var result MetaServiceListListenerResult
  if retval, err := p.handler.ListListener(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listListener: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetStatis struct {
  handler MetaService
}

func (p *metaServiceProcessorGetStatis) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetStatisArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetStatis) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getStatis", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetStatis) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetStatisArgs)
  var result MetaServiceGetStatisResult
  if retval, err := p.handler.GetStatis(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatis: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignInFTService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignInFTService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignInFTServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignInFTService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signInFTService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignInFTService) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignInFTServiceArgs)
  var result MetaServiceSignInFTServiceResult
  if retval, err := p.handler.SignInFTService(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signInFTService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorSignOutFTService struct {
  handler MetaService
}

func (p *metaServiceProcessorSignOutFTService) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceSignOutFTServiceArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorSignOutFTService) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("signOutFTService", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorSignOutFTService) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceSignOutFTServiceArgs)
  var result MetaServiceSignOutFTServiceResult
  if retval, err := p.handler.SignOutFTService(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing signOutFTService: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListFTClients struct {
  handler MetaService
}

func (p *metaServiceProcessorListFTClients) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListFTClientsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListFTClients) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listFTClients", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListFTClients) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListFTClientsArgs)
  var result MetaServiceListFTClientsResult
  if retval, err := p.handler.ListFTClients(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listFTClients: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorCreateSession struct {
  handler MetaService
}

func (p *metaServiceProcessorCreateSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceCreateSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorCreateSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("createSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorCreateSession) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceCreateSessionArgs)
  var result MetaServiceCreateSessionResult
  if retval, err := p.handler.CreateSession(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorUpdateSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorUpdateSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceUpdateSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorUpdateSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("updateSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorUpdateSessions) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceUpdateSessionsArgs)
  var result MetaServiceUpdateSessionsResult
  if retval, err := p.handler.UpdateSessions(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorListSessions struct {
  handler MetaService
}

func (p *metaServiceProcessorListSessions) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceListSessionsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorListSessions) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("listSessions", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorListSessions) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceListSessionsArgs)
  var result MetaServiceListSessionsResult
  if retval, err := p.handler.ListSessions(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSessions: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorGetSession struct {
  handler MetaService
}

func (p *metaServiceProcessorGetSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceGetSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorGetSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorGetSession) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceGetSessionArgs)
  var result MetaServiceGetSessionResult
  if retval, err := p.handler.GetSession(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorRemoveSession struct {
  handler MetaService
}

func (p *metaServiceProcessorRemoveSession) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceRemoveSessionArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorRemoveSession) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("removeSession", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorRemoveSession) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceRemoveSessionArgs)
  var result MetaServiceRemoveSessionResult
  if retval, err := p.handler.RemoveSession(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSession: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type metaServiceProcessorReportTaskFinish struct {
  handler MetaService
}

func (p *metaServiceProcessorReportTaskFinish) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := MetaServiceReportTaskFinishArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *metaServiceProcessorReportTaskFinish) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("reportTaskFinish", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *metaServiceProcessorReportTaskFinish) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*MetaServiceReportTaskFinishArgs)
  var result MetaServiceReportTaskFinishResult
  if retval, err := p.handler.ReportTaskFinish(args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskFinish: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type MetaServiceCreateSpaceArgs struct {
  Req *CreateSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSpaceArgs() *MetaServiceCreateSpaceArgs {
  return &MetaServiceCreateSpaceArgs{}
}

var MetaServiceCreateSpaceArgs_Req_DEFAULT *CreateSpaceReq
func (p *MetaServiceCreateSpaceArgs) GetReq() *CreateSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSpaceResult() *MetaServiceCreateSpaceResult {
  return &MetaServiceCreateSpaceResult{}
}

var MetaServiceCreateSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropSpaceArgs struct {
  Req *DropSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSpaceArgs() *MetaServiceDropSpaceArgs {
  return &MetaServiceDropSpaceArgs{}
}

var MetaServiceDropSpaceArgs_Req_DEFAULT *DropSpaceReq
func (p *MetaServiceDropSpaceArgs) GetReq() *DropSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceDropSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropSpaceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSpaceResult() *MetaServiceDropSpaceResult {
  return &MetaServiceDropSpaceResult{}
}

var MetaServiceDropSpaceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSpaceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSpaceArgs struct {
  Req *GetSpaceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSpaceArgs() *MetaServiceGetSpaceArgs {
  return &MetaServiceGetSpaceArgs{}
}

var MetaServiceGetSpaceArgs_Req_DEFAULT *GetSpaceReq
func (p *MetaServiceGetSpaceArgs) GetReq() *GetSpaceReq {
  if !p.IsSetReq() {
    return MetaServiceGetSpaceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSpaceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSpaceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSpaceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSpaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSpaceResult struct {
  Success *GetSpaceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSpaceResult() *MetaServiceGetSpaceResult {
  return &MetaServiceGetSpaceResult{}
}

var MetaServiceGetSpaceResult_Success_DEFAULT *GetSpaceResp
func (p *MetaServiceGetSpaceResult) GetSuccess() *GetSpaceResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSpaceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSpaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSpaceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSpaceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSpaceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSpace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSpaceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSpaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSpaceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSpacesArgs struct {
  Req *ListSpacesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSpacesArgs() *MetaServiceListSpacesArgs {
  return &MetaServiceListSpacesArgs{}
}

var MetaServiceListSpacesArgs_Req_DEFAULT *ListSpacesReq
func (p *MetaServiceListSpacesArgs) GetReq() *ListSpacesReq {
  if !p.IsSetReq() {
    return MetaServiceListSpacesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSpacesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSpacesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSpacesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSpacesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSpacesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSpacesResult struct {
  Success *ListSpacesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSpacesResult() *MetaServiceListSpacesResult {
  return &MetaServiceListSpacesResult{}
}

var MetaServiceListSpacesResult_Success_DEFAULT *ListSpacesResp
func (p *MetaServiceListSpacesResult) GetSuccess() *ListSpacesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSpacesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSpacesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSpacesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSpacesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSpacesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSpaces_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSpacesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSpacesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSpacesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateTagArgs struct {
  Req *CreateTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagArgs() *MetaServiceCreateTagArgs {
  return &MetaServiceCreateTagArgs{}
}

var MetaServiceCreateTagArgs_Req_DEFAULT *CreateTagReq
func (p *MetaServiceCreateTagArgs) GetReq() *CreateTagReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagResult() *MetaServiceCreateTagResult {
  return &MetaServiceCreateTagResult{}
}

var MetaServiceCreateTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterTagArgs struct {
  Req *AlterTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterTagArgs() *MetaServiceAlterTagArgs {
  return &MetaServiceAlterTagArgs{}
}

var MetaServiceAlterTagArgs_Req_DEFAULT *AlterTagReq
func (p *MetaServiceAlterTagArgs) GetReq() *AlterTagReq {
  if !p.IsSetReq() {
    return MetaServiceAlterTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterTagResult() *MetaServiceAlterTagResult {
  return &MetaServiceAlterTagResult{}
}

var MetaServiceAlterTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropTagArgs struct {
  Req *DropTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagArgs() *MetaServiceDropTagArgs {
  return &MetaServiceDropTagArgs{}
}

var MetaServiceDropTagArgs_Req_DEFAULT *DropTagReq
func (p *MetaServiceDropTagArgs) GetReq() *DropTagReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropTagResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagResult() *MetaServiceDropTagResult {
  return &MetaServiceDropTagResult{}
}

var MetaServiceDropTagResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetTagArgs struct {
  Req *GetTagReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagArgs() *MetaServiceGetTagArgs {
  return &MetaServiceGetTagArgs{}
}

var MetaServiceGetTagArgs_Req_DEFAULT *GetTagReq
func (p *MetaServiceGetTagArgs) GetReq() *GetTagReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetTagArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetTagResult struct {
  Success *GetTagResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagResult() *MetaServiceGetTagResult {
  return &MetaServiceGetTagResult{}
}

var MetaServiceGetTagResult_Success_DEFAULT *GetTagResp
func (p *MetaServiceGetTagResult) GetSuccess() *GetTagResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetTagResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagsArgs struct {
  Req *ListTagsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagsArgs() *MetaServiceListTagsArgs {
  return &MetaServiceListTagsArgs{}
}

var MetaServiceListTagsArgs_Req_DEFAULT *ListTagsReq
func (p *MetaServiceListTagsArgs) GetReq() *ListTagsReq {
  if !p.IsSetReq() {
    return MetaServiceListTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagsResult struct {
  Success *ListTagsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagsResult() *MetaServiceListTagsResult {
  return &MetaServiceListTagsResult{}
}

var MetaServiceListTagsResult_Success_DEFAULT *ListTagsResp
func (p *MetaServiceListTagsResult) GetSuccess() *ListTagsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeArgs struct {
  Req *CreateEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeArgs() *MetaServiceCreateEdgeArgs {
  return &MetaServiceCreateEdgeArgs{}
}

var MetaServiceCreateEdgeArgs_Req_DEFAULT *CreateEdgeReq
func (p *MetaServiceCreateEdgeArgs) GetReq() *CreateEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeResult() *MetaServiceCreateEdgeResult {
  return &MetaServiceCreateEdgeResult{}
}

var MetaServiceCreateEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterEdgeArgs struct {
  Req *AlterEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterEdgeArgs() *MetaServiceAlterEdgeArgs {
  return &MetaServiceAlterEdgeArgs{}
}

var MetaServiceAlterEdgeArgs_Req_DEFAULT *AlterEdgeReq
func (p *MetaServiceAlterEdgeArgs) GetReq() *AlterEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceAlterEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterEdgeResult() *MetaServiceAlterEdgeResult {
  return &MetaServiceAlterEdgeResult{}
}

var MetaServiceAlterEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeArgs struct {
  Req *DropEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeArgs() *MetaServiceDropEdgeArgs {
  return &MetaServiceDropEdgeArgs{}
}

var MetaServiceDropEdgeArgs_Req_DEFAULT *DropEdgeReq
func (p *MetaServiceDropEdgeArgs) GetReq() *DropEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeResult() *MetaServiceDropEdgeResult {
  return &MetaServiceDropEdgeResult{}
}

var MetaServiceDropEdgeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeArgs struct {
  Req *GetEdgeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeArgs() *MetaServiceGetEdgeArgs {
  return &MetaServiceGetEdgeArgs{}
}

var MetaServiceGetEdgeArgs_Req_DEFAULT *GetEdgeReq
func (p *MetaServiceGetEdgeArgs) GetReq() *GetEdgeReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeResult struct {
  Success *GetEdgeResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeResult() *MetaServiceGetEdgeResult {
  return &MetaServiceGetEdgeResult{}
}

var MetaServiceGetEdgeResult_Success_DEFAULT *GetEdgeResp
func (p *MetaServiceGetEdgeResult) GetSuccess() *GetEdgeResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgesArgs struct {
  Req *ListEdgesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgesArgs() *MetaServiceListEdgesArgs {
  return &MetaServiceListEdgesArgs{}
}

var MetaServiceListEdgesArgs_Req_DEFAULT *ListEdgesReq
func (p *MetaServiceListEdgesArgs) GetReq() *ListEdgesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgesResult struct {
  Success *ListEdgesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgesResult() *MetaServiceListEdgesResult {
  return &MetaServiceListEdgesResult{}
}

var MetaServiceListEdgesResult_Success_DEFAULT *ListEdgesResp
func (p *MetaServiceListEdgesResult) GetSuccess() *ListEdgesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListHostsArgs struct {
  Req *ListHostsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListHostsArgs() *MetaServiceListHostsArgs {
  return &MetaServiceListHostsArgs{}
}

var MetaServiceListHostsArgs_Req_DEFAULT *ListHostsReq
func (p *MetaServiceListHostsArgs) GetReq() *ListHostsReq {
  if !p.IsSetReq() {
    return MetaServiceListHostsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListHostsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListHostsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListHostsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListHostsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListHostsResult struct {
  Success *ListHostsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListHostsResult() *MetaServiceListHostsResult {
  return &MetaServiceListHostsResult{}
}

var MetaServiceListHostsResult_Success_DEFAULT *ListHostsResp
func (p *MetaServiceListHostsResult) GetSuccess() *ListHostsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListHostsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListHostsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListHostsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListHostsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListHostsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListHostsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetPartsAllocArgs struct {
  Req *GetPartsAllocReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetPartsAllocArgs() *MetaServiceGetPartsAllocArgs {
  return &MetaServiceGetPartsAllocArgs{}
}

var MetaServiceGetPartsAllocArgs_Req_DEFAULT *GetPartsAllocReq
func (p *MetaServiceGetPartsAllocArgs) GetReq() *GetPartsAllocReq {
  if !p.IsSetReq() {
    return MetaServiceGetPartsAllocArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetPartsAllocArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetPartsAllocArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetPartsAllocReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetPartsAllocArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetPartsAllocResult struct {
  Success *GetPartsAllocResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetPartsAllocResult() *MetaServiceGetPartsAllocResult {
  return &MetaServiceGetPartsAllocResult{}
}

var MetaServiceGetPartsAllocResult_Success_DEFAULT *GetPartsAllocResp
func (p *MetaServiceGetPartsAllocResult) GetSuccess() *GetPartsAllocResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetPartsAllocResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetPartsAllocResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetPartsAllocResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetPartsAllocResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getPartsAlloc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetPartsAllocResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetPartsAllocResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetPartsAllocResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListPartsArgs struct {
  Req *ListPartsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListPartsArgs() *MetaServiceListPartsArgs {
  return &MetaServiceListPartsArgs{}
}

var MetaServiceListPartsArgs_Req_DEFAULT *ListPartsReq
func (p *MetaServiceListPartsArgs) GetReq() *ListPartsReq {
  if !p.IsSetReq() {
    return MetaServiceListPartsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListPartsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListPartsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListPartsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListPartsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListPartsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListPartsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListPartsResult struct {
  Success *ListPartsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListPartsResult() *MetaServiceListPartsResult {
  return &MetaServiceListPartsResult{}
}

var MetaServiceListPartsResult_Success_DEFAULT *ListPartsResp
func (p *MetaServiceListPartsResult) GetSuccess() *ListPartsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListPartsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListPartsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListPartsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListPartsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListPartsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listParts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListPartsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListPartsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListPartsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceMultiPutArgs struct {
  Req *MultiPutReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiPutArgs() *MetaServiceMultiPutArgs {
  return &MetaServiceMultiPutArgs{}
}

var MetaServiceMultiPutArgs_Req_DEFAULT *MultiPutReq
func (p *MetaServiceMultiPutArgs) GetReq() *MultiPutReq {
  if !p.IsSetReq() {
    return MetaServiceMultiPutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiPutArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceMultiPutArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiPutReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiPutArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceMultiPutResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiPutResult() *MetaServiceMultiPutResult {
  return &MetaServiceMultiPutResult{}
}

var MetaServiceMultiPutResult_Success_DEFAULT *ExecResp
func (p *MetaServiceMultiPutResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceMultiPutResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiPutResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiPutResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetArgs struct {
  Req *GetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetArgs() *MetaServiceGetArgs {
  return &MetaServiceGetArgs{}
}

var MetaServiceGetArgs_Req_DEFAULT *GetReq
func (p *MetaServiceGetArgs) GetReq() *GetReq {
  if !p.IsSetReq() {
    return MetaServiceGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetResult struct {
  Success *GetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetResult() *MetaServiceGetResult {
  return &MetaServiceGetResult{}
}

var MetaServiceGetResult_Success_DEFAULT *GetResp
func (p *MetaServiceGetResult) GetSuccess() *GetResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceMultiGetArgs struct {
  Req *MultiGetReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceMultiGetArgs() *MetaServiceMultiGetArgs {
  return &MetaServiceMultiGetArgs{}
}

var MetaServiceMultiGetArgs_Req_DEFAULT *MultiGetReq
func (p *MetaServiceMultiGetArgs) GetReq() *MultiGetReq {
  if !p.IsSetReq() {
    return MetaServiceMultiGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceMultiGetArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceMultiGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewMultiGetReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceMultiGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceMultiGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceMultiGetResult struct {
  Success *MultiGetResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceMultiGetResult() *MetaServiceMultiGetResult {
  return &MetaServiceMultiGetResult{}
}

var MetaServiceMultiGetResult_Success_DEFAULT *MultiGetResp
func (p *MetaServiceMultiGetResult) GetSuccess() *MultiGetResp {
  if !p.IsSetSuccess() {
    return MetaServiceMultiGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceMultiGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceMultiGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewMultiGetResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceMultiGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceMultiGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceMultiGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceMultiGetResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveArgs struct {
  Req *RemoveReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveArgs() *MetaServiceRemoveArgs {
  return &MetaServiceRemoveArgs{}
}

var MetaServiceRemoveArgs_Req_DEFAULT *RemoveReq
func (p *MetaServiceRemoveArgs) GetReq() *RemoveReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveResult() *MetaServiceRemoveResult {
  return &MetaServiceRemoveResult{}
}

var MetaServiceRemoveResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveRangeArgs struct {
  Req *RemoveRangeReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveRangeArgs() *MetaServiceRemoveRangeArgs {
  return &MetaServiceRemoveRangeArgs{}
}

var MetaServiceRemoveRangeArgs_Req_DEFAULT *RemoveRangeReq
func (p *MetaServiceRemoveRangeArgs) GetReq() *RemoveRangeReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveRangeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveRangeArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveRangeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveRangeReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveRangeResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveRangeResult() *MetaServiceRemoveRangeResult {
  return &MetaServiceRemoveRangeResult{}
}

var MetaServiceRemoveRangeResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveRangeResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveRangeResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveRangeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveRangeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveRangeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveRangeResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceScanArgs struct {
  Req *ScanReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceScanArgs() *MetaServiceScanArgs {
  return &MetaServiceScanArgs{}
}

var MetaServiceScanArgs_Req_DEFAULT *ScanReq
func (p *MetaServiceScanArgs) GetReq() *ScanReq {
  if !p.IsSetReq() {
    return MetaServiceScanArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceScanArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceScanArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewScanReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceScanArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceScanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceScanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceScanResult struct {
  Success *ScanResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceScanResult() *MetaServiceScanResult {
  return &MetaServiceScanResult{}
}

var MetaServiceScanResult_Success_DEFAULT *ScanResp
func (p *MetaServiceScanResult) GetSuccess() *ScanResp {
  if !p.IsSetSuccess() {
    return MetaServiceScanResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceScanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceScanResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceScanResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewScanResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceScanResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceScanResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceScanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceScanResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateTagIndexArgs struct {
  Req *CreateTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateTagIndexArgs() *MetaServiceCreateTagIndexArgs {
  return &MetaServiceCreateTagIndexArgs{}
}

var MetaServiceCreateTagIndexArgs_Req_DEFAULT *CreateTagIndexReq
func (p *MetaServiceCreateTagIndexArgs) GetReq() *CreateTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateTagIndexResult() *MetaServiceCreateTagIndexResult {
  return &MetaServiceCreateTagIndexResult{}
}

var MetaServiceCreateTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropTagIndexArgs struct {
  Req *DropTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropTagIndexArgs() *MetaServiceDropTagIndexArgs {
  return &MetaServiceDropTagIndexArgs{}
}

var MetaServiceDropTagIndexArgs_Req_DEFAULT *DropTagIndexReq
func (p *MetaServiceDropTagIndexArgs) GetReq() *DropTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropTagIndexResult() *MetaServiceDropTagIndexResult {
  return &MetaServiceDropTagIndexResult{}
}

var MetaServiceDropTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetTagIndexArgs struct {
  Req *GetTagIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetTagIndexArgs() *MetaServiceGetTagIndexArgs {
  return &MetaServiceGetTagIndexArgs{}
}

var MetaServiceGetTagIndexArgs_Req_DEFAULT *GetTagIndexReq
func (p *MetaServiceGetTagIndexArgs) GetReq() *GetTagIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetTagIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetTagIndexResult struct {
  Success *GetTagIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetTagIndexResult() *MetaServiceGetTagIndexResult {
  return &MetaServiceGetTagIndexResult{}
}

var MetaServiceGetTagIndexResult_Success_DEFAULT *GetTagIndexResp
func (p *MetaServiceGetTagIndexResult) GetSuccess() *GetTagIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetTagIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexesArgs struct {
  Req *ListTagIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexesArgs() *MetaServiceListTagIndexesArgs {
  return &MetaServiceListTagIndexesArgs{}
}

var MetaServiceListTagIndexesArgs_Req_DEFAULT *ListTagIndexesReq
func (p *MetaServiceListTagIndexesArgs) GetReq() *ListTagIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListTagIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexesResult struct {
  Success *ListTagIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexesResult() *MetaServiceListTagIndexesResult {
  return &MetaServiceListTagIndexesResult{}
}

var MetaServiceListTagIndexesResult_Success_DEFAULT *ListTagIndexesResp
func (p *MetaServiceListTagIndexesResult) GetSuccess() *ListTagIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListTagIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRebuildTagIndexArgs struct {
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildTagIndexArgs() *MetaServiceRebuildTagIndexArgs {
  return &MetaServiceRebuildTagIndexArgs{}
}

var MetaServiceRebuildTagIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildTagIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildTagIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildTagIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRebuildTagIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildTagIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRebuildTagIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildTagIndexResult() *MetaServiceRebuildTagIndexResult {
  return &MetaServiceRebuildTagIndexResult{}
}

var MetaServiceRebuildTagIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildTagIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildTagIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildTagIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRebuildTagIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildTagIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildTagIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildTagIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildTagIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListTagIndexStatusArgs struct {
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListTagIndexStatusArgs() *MetaServiceListTagIndexStatusArgs {
  return &MetaServiceListTagIndexStatusArgs{}
}

var MetaServiceListTagIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListTagIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListTagIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListTagIndexStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListTagIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListTagIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListTagIndexStatusResult struct {
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListTagIndexStatusResult() *MetaServiceListTagIndexStatusResult {
  return &MetaServiceListTagIndexStatusResult{}
}

var MetaServiceListTagIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListTagIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListTagIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListTagIndexStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListTagIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listTagIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListTagIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListTagIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListTagIndexStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateEdgeIndexArgs struct {
  Req *CreateEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateEdgeIndexArgs() *MetaServiceCreateEdgeIndexArgs {
  return &MetaServiceCreateEdgeIndexArgs{}
}

var MetaServiceCreateEdgeIndexArgs_Req_DEFAULT *CreateEdgeIndexReq
func (p *MetaServiceCreateEdgeIndexArgs) GetReq() *CreateEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceCreateEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateEdgeIndexResult() *MetaServiceCreateEdgeIndexResult {
  return &MetaServiceCreateEdgeIndexResult{}
}

var MetaServiceCreateEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropEdgeIndexArgs struct {
  Req *DropEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropEdgeIndexArgs() *MetaServiceDropEdgeIndexArgs {
  return &MetaServiceDropEdgeIndexArgs{}
}

var MetaServiceDropEdgeIndexArgs_Req_DEFAULT *DropEdgeIndexReq
func (p *MetaServiceDropEdgeIndexArgs) GetReq() *DropEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceDropEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropEdgeIndexResult() *MetaServiceDropEdgeIndexResult {
  return &MetaServiceDropEdgeIndexResult{}
}

var MetaServiceDropEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetEdgeIndexArgs struct {
  Req *GetEdgeIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetEdgeIndexArgs() *MetaServiceGetEdgeIndexArgs {
  return &MetaServiceGetEdgeIndexArgs{}
}

var MetaServiceGetEdgeIndexArgs_Req_DEFAULT *GetEdgeIndexReq
func (p *MetaServiceGetEdgeIndexArgs) GetReq() *GetEdgeIndexReq {
  if !p.IsSetReq() {
    return MetaServiceGetEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetEdgeIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetEdgeIndexResult struct {
  Success *GetEdgeIndexResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetEdgeIndexResult() *MetaServiceGetEdgeIndexResult {
  return &MetaServiceGetEdgeIndexResult{}
}

var MetaServiceGetEdgeIndexResult_Success_DEFAULT *GetEdgeIndexResp
func (p *MetaServiceGetEdgeIndexResult) GetSuccess() *GetEdgeIndexResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetEdgeIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexesArgs struct {
  Req *ListEdgeIndexesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexesArgs() *MetaServiceListEdgeIndexesArgs {
  return &MetaServiceListEdgeIndexesArgs{}
}

var MetaServiceListEdgeIndexesArgs_Req_DEFAULT *ListEdgeIndexesReq
func (p *MetaServiceListEdgeIndexesArgs) GetReq() *ListEdgeIndexesReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgeIndexesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListEdgeIndexesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexesResult struct {
  Success *ListEdgeIndexesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexesResult() *MetaServiceListEdgeIndexesResult {
  return &MetaServiceListEdgeIndexesResult{}
}

var MetaServiceListEdgeIndexesResult_Success_DEFAULT *ListEdgeIndexesResp
func (p *MetaServiceListEdgeIndexesResult) GetSuccess() *ListEdgeIndexesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgeIndexesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListEdgeIndexesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRebuildEdgeIndexArgs struct {
  Req *RebuildIndexReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRebuildEdgeIndexArgs() *MetaServiceRebuildEdgeIndexArgs {
  return &MetaServiceRebuildEdgeIndexArgs{}
}

var MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT *RebuildIndexReq
func (p *MetaServiceRebuildEdgeIndexArgs) GetReq() *RebuildIndexReq {
  if !p.IsSetReq() {
    return MetaServiceRebuildEdgeIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRebuildEdgeIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRebuildIndexReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRebuildEdgeIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRebuildEdgeIndexResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRebuildEdgeIndexResult() *MetaServiceRebuildEdgeIndexResult {
  return &MetaServiceRebuildEdgeIndexResult{}
}

var MetaServiceRebuildEdgeIndexResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRebuildEdgeIndexResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRebuildEdgeIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRebuildEdgeIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("rebuildEdgeIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRebuildEdgeIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRebuildEdgeIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRebuildEdgeIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListEdgeIndexStatusArgs struct {
  Req *ListIndexStatusReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListEdgeIndexStatusArgs() *MetaServiceListEdgeIndexStatusArgs {
  return &MetaServiceListEdgeIndexStatusArgs{}
}

var MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT *ListIndexStatusReq
func (p *MetaServiceListEdgeIndexStatusArgs) GetReq() *ListIndexStatusReq {
  if !p.IsSetReq() {
    return MetaServiceListEdgeIndexStatusArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListEdgeIndexStatusArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListIndexStatusReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListEdgeIndexStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListEdgeIndexStatusResult struct {
  Success *ListIndexStatusResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListEdgeIndexStatusResult() *MetaServiceListEdgeIndexStatusResult {
  return &MetaServiceListEdgeIndexStatusResult{}
}

var MetaServiceListEdgeIndexStatusResult_Success_DEFAULT *ListIndexStatusResp
func (p *MetaServiceListEdgeIndexStatusResult) GetSuccess() *ListIndexStatusResp {
  if !p.IsSetSuccess() {
    return MetaServiceListEdgeIndexStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListEdgeIndexStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListIndexStatusResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listEdgeIndexStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListEdgeIndexStatusResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListEdgeIndexStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListEdgeIndexStatusResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateUserArgs struct {
  Req *CreateUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateUserArgs() *MetaServiceCreateUserArgs {
  return &MetaServiceCreateUserArgs{}
}

var MetaServiceCreateUserArgs_Req_DEFAULT *CreateUserReq
func (p *MetaServiceCreateUserArgs) GetReq() *CreateUserReq {
  if !p.IsSetReq() {
    return MetaServiceCreateUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateUserResult() *MetaServiceCreateUserResult {
  return &MetaServiceCreateUserResult{}
}

var MetaServiceCreateUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropUserArgs struct {
  Req *DropUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropUserArgs() *MetaServiceDropUserArgs {
  return &MetaServiceDropUserArgs{}
}

var MetaServiceDropUserArgs_Req_DEFAULT *DropUserReq
func (p *MetaServiceDropUserArgs) GetReq() *DropUserReq {
  if !p.IsSetReq() {
    return MetaServiceDropUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropUserResult() *MetaServiceDropUserResult {
  return &MetaServiceDropUserResult{}
}

var MetaServiceDropUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAlterUserArgs struct {
  Req *AlterUserReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAlterUserArgs() *MetaServiceAlterUserArgs {
  return &MetaServiceAlterUserArgs{}
}

var MetaServiceAlterUserArgs_Req_DEFAULT *AlterUserReq
func (p *MetaServiceAlterUserArgs) GetReq() *AlterUserReq {
  if !p.IsSetReq() {
    return MetaServiceAlterUserArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAlterUserArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAlterUserArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAlterUserReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAlterUserArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAlterUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAlterUserResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAlterUserResult() *MetaServiceAlterUserResult {
  return &MetaServiceAlterUserResult{}
}

var MetaServiceAlterUserResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAlterUserResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAlterUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAlterUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAlterUserResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAlterUserResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("alterUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAlterUserResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAlterUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAlterUserResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGrantRoleArgs struct {
  Req *GrantRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGrantRoleArgs() *MetaServiceGrantRoleArgs {
  return &MetaServiceGrantRoleArgs{}
}

var MetaServiceGrantRoleArgs_Req_DEFAULT *GrantRoleReq
func (p *MetaServiceGrantRoleArgs) GetReq() *GrantRoleReq {
  if !p.IsSetReq() {
    return MetaServiceGrantRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGrantRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGrantRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGrantRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGrantRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGrantRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGrantRoleResult() *MetaServiceGrantRoleResult {
  return &MetaServiceGrantRoleResult{}
}

var MetaServiceGrantRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceGrantRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceGrantRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGrantRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGrantRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGrantRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("grantRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGrantRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGrantRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGrantRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRevokeRoleArgs struct {
  Req *RevokeRoleReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRevokeRoleArgs() *MetaServiceRevokeRoleArgs {
  return &MetaServiceRevokeRoleArgs{}
}

var MetaServiceRevokeRoleArgs_Req_DEFAULT *RevokeRoleReq
func (p *MetaServiceRevokeRoleArgs) GetReq() *RevokeRoleReq {
  if !p.IsSetReq() {
    return MetaServiceRevokeRoleArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRevokeRoleArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRevokeRoleArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRevokeRoleReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRevokeRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRevokeRoleResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRevokeRoleResult() *MetaServiceRevokeRoleResult {
  return &MetaServiceRevokeRoleResult{}
}

var MetaServiceRevokeRoleResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRevokeRoleResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRevokeRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRevokeRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRevokeRoleResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRevokeRoleResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("revokeRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRevokeRoleResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRevokeRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRevokeRoleResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListUsersArgs struct {
  Req *ListUsersReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListUsersArgs() *MetaServiceListUsersArgs {
  return &MetaServiceListUsersArgs{}
}

var MetaServiceListUsersArgs_Req_DEFAULT *ListUsersReq
func (p *MetaServiceListUsersArgs) GetReq() *ListUsersReq {
  if !p.IsSetReq() {
    return MetaServiceListUsersArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListUsersArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListUsersArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListUsersReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListUsersArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListUsersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListUsersResult struct {
  Success *ListUsersResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListUsersResult() *MetaServiceListUsersResult {
  return &MetaServiceListUsersResult{}
}

var MetaServiceListUsersResult_Success_DEFAULT *ListUsersResp
func (p *MetaServiceListUsersResult) GetSuccess() *ListUsersResp {
  if !p.IsSetSuccess() {
    return MetaServiceListUsersResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListUsersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListUsersResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListUsersResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListUsersResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listUsers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListUsersResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListUsersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListUsersResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListRolesArgs struct {
  Req *ListRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListRolesArgs() *MetaServiceListRolesArgs {
  return &MetaServiceListRolesArgs{}
}

var MetaServiceListRolesArgs_Req_DEFAULT *ListRolesReq
func (p *MetaServiceListRolesArgs) GetReq() *ListRolesReq {
  if !p.IsSetReq() {
    return MetaServiceListRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListRolesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListRolesResult struct {
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListRolesResult() *MetaServiceListRolesResult {
  return &MetaServiceListRolesResult{}
}

var MetaServiceListRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceListRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListRolesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetUserRolesArgs struct {
  Req *GetUserRolesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetUserRolesArgs() *MetaServiceGetUserRolesArgs {
  return &MetaServiceGetUserRolesArgs{}
}

var MetaServiceGetUserRolesArgs_Req_DEFAULT *GetUserRolesReq
func (p *MetaServiceGetUserRolesArgs) GetReq() *GetUserRolesReq {
  if !p.IsSetReq() {
    return MetaServiceGetUserRolesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetUserRolesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetUserRolesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetUserRolesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetUserRolesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserRolesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetUserRolesResult struct {
  Success *ListRolesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetUserRolesResult() *MetaServiceGetUserRolesResult {
  return &MetaServiceGetUserRolesResult{}
}

var MetaServiceGetUserRolesResult_Success_DEFAULT *ListRolesResp
func (p *MetaServiceGetUserRolesResult) GetSuccess() *ListRolesResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetUserRolesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetUserRolesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetUserRolesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListRolesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetUserRolesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUserRoles_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetUserRolesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetUserRolesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetUserRolesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceChangePasswordArgs struct {
  Req *ChangePasswordReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceChangePasswordArgs() *MetaServiceChangePasswordArgs {
  return &MetaServiceChangePasswordArgs{}
}

var MetaServiceChangePasswordArgs_Req_DEFAULT *ChangePasswordReq
func (p *MetaServiceChangePasswordArgs) GetReq() *ChangePasswordReq {
  if !p.IsSetReq() {
    return MetaServiceChangePasswordArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceChangePasswordArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceChangePasswordArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewChangePasswordReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceChangePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceChangePasswordResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceChangePasswordResult() *MetaServiceChangePasswordResult {
  return &MetaServiceChangePasswordResult{}
}

var MetaServiceChangePasswordResult_Success_DEFAULT *ExecResp
func (p *MetaServiceChangePasswordResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceChangePasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceChangePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceChangePasswordResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceChangePasswordResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("changePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceChangePasswordResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceChangePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceChangePasswordResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceHeartBeatArgs struct {
  Req *HBReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceHeartBeatArgs() *MetaServiceHeartBeatArgs {
  return &MetaServiceHeartBeatArgs{}
}

var MetaServiceHeartBeatArgs_Req_DEFAULT *HBReq
func (p *MetaServiceHeartBeatArgs) GetReq() *HBReq {
  if !p.IsSetReq() {
    return MetaServiceHeartBeatArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceHeartBeatArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceHeartBeatArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewHBReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceHeartBeatResult struct {
  Success *HBResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceHeartBeatResult() *MetaServiceHeartBeatResult {
  return &MetaServiceHeartBeatResult{}
}

var MetaServiceHeartBeatResult_Success_DEFAULT *HBResp
func (p *MetaServiceHeartBeatResult) GetSuccess() *HBResp {
  if !p.IsSetSuccess() {
    return MetaServiceHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceHeartBeatResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewHBResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceHeartBeatResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceHeartBeatResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceBalanceArgs struct {
  Req *BalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceBalanceArgs() *MetaServiceBalanceArgs {
  return &MetaServiceBalanceArgs{}
}

var MetaServiceBalanceArgs_Req_DEFAULT *BalanceReq
func (p *MetaServiceBalanceArgs) GetReq() *BalanceReq {
  if !p.IsSetReq() {
    return MetaServiceBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceBalanceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceBalanceResult struct {
  Success *BalanceResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceBalanceResult() *MetaServiceBalanceResult {
  return &MetaServiceBalanceResult{}
}

var MetaServiceBalanceResult_Success_DEFAULT *BalanceResp
func (p *MetaServiceBalanceResult) GetSuccess() *BalanceResp {
  if !p.IsSetSuccess() {
    return MetaServiceBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewBalanceResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("balance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceBalanceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceLeaderBalanceArgs struct {
  Req *LeaderBalanceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceLeaderBalanceArgs() *MetaServiceLeaderBalanceArgs {
  return &MetaServiceLeaderBalanceArgs{}
}

var MetaServiceLeaderBalanceArgs_Req_DEFAULT *LeaderBalanceReq
func (p *MetaServiceLeaderBalanceArgs) GetReq() *LeaderBalanceReq {
  if !p.IsSetReq() {
    return MetaServiceLeaderBalanceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceLeaderBalanceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceLeaderBalanceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewLeaderBalanceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceLeaderBalanceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceLeaderBalanceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceLeaderBalanceResult() *MetaServiceLeaderBalanceResult {
  return &MetaServiceLeaderBalanceResult{}
}

var MetaServiceLeaderBalanceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceLeaderBalanceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceLeaderBalanceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceLeaderBalanceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceLeaderBalanceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("leaderBalance_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceLeaderBalanceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceLeaderBalanceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceLeaderBalanceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRegConfigArgs struct {
  Req *RegConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRegConfigArgs() *MetaServiceRegConfigArgs {
  return &MetaServiceRegConfigArgs{}
}

var MetaServiceRegConfigArgs_Req_DEFAULT *RegConfigReq
func (p *MetaServiceRegConfigArgs) GetReq() *RegConfigReq {
  if !p.IsSetReq() {
    return MetaServiceRegConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRegConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRegConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRegConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRegConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRegConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRegConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRegConfigResult() *MetaServiceRegConfigResult {
  return &MetaServiceRegConfigResult{}
}

var MetaServiceRegConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRegConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRegConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRegConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRegConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRegConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("regConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRegConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRegConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRegConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetConfigArgs struct {
  Req *GetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetConfigArgs() *MetaServiceGetConfigArgs {
  return &MetaServiceGetConfigArgs{}
}

var MetaServiceGetConfigArgs_Req_DEFAULT *GetConfigReq
func (p *MetaServiceGetConfigArgs) GetReq() *GetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceGetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetConfigResult struct {
  Success *GetConfigResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetConfigResult() *MetaServiceGetConfigResult {
  return &MetaServiceGetConfigResult{}
}

var MetaServiceGetConfigResult_Success_DEFAULT *GetConfigResp
func (p *MetaServiceGetConfigResult) GetSuccess() *GetConfigResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetConfigResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSetConfigArgs struct {
  Req *SetConfigReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSetConfigArgs() *MetaServiceSetConfigArgs {
  return &MetaServiceSetConfigArgs{}
}

var MetaServiceSetConfigArgs_Req_DEFAULT *SetConfigReq
func (p *MetaServiceSetConfigArgs) GetReq() *SetConfigReq {
  if !p.IsSetReq() {
    return MetaServiceSetConfigArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSetConfigArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSetConfigArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSetConfigReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSetConfigArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSetConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSetConfigResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSetConfigResult() *MetaServiceSetConfigResult {
  return &MetaServiceSetConfigResult{}
}

var MetaServiceSetConfigResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSetConfigResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSetConfigResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSetConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSetConfigResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSetConfigResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("setConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSetConfigResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSetConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSetConfigResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListConfigsArgs struct {
  Req *ListConfigsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListConfigsArgs() *MetaServiceListConfigsArgs {
  return &MetaServiceListConfigsArgs{}
}

var MetaServiceListConfigsArgs_Req_DEFAULT *ListConfigsReq
func (p *MetaServiceListConfigsArgs) GetReq() *ListConfigsReq {
  if !p.IsSetReq() {
    return MetaServiceListConfigsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListConfigsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListConfigsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListConfigsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListConfigsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListConfigsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListConfigsResult struct {
  Success *ListConfigsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListConfigsResult() *MetaServiceListConfigsResult {
  return &MetaServiceListConfigsResult{}
}

var MetaServiceListConfigsResult_Success_DEFAULT *ListConfigsResp
func (p *MetaServiceListConfigsResult) GetSuccess() *ListConfigsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListConfigsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListConfigsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListConfigsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListConfigsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListConfigsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listConfigs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListConfigsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListConfigsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListConfigsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateSnapshotArgs struct {
  Req *CreateSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSnapshotArgs() *MetaServiceCreateSnapshotArgs {
  return &MetaServiceCreateSnapshotArgs{}
}

var MetaServiceCreateSnapshotArgs_Req_DEFAULT *CreateSnapshotReq
func (p *MetaServiceCreateSnapshotArgs) GetReq() *CreateSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSnapshotArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSnapshotResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSnapshotResult() *MetaServiceCreateSnapshotResult {
  return &MetaServiceCreateSnapshotResult{}
}

var MetaServiceCreateSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceCreateSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropSnapshotArgs struct {
  Req *DropSnapshotReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropSnapshotArgs() *MetaServiceDropSnapshotArgs {
  return &MetaServiceDropSnapshotArgs{}
}

var MetaServiceDropSnapshotArgs_Req_DEFAULT *DropSnapshotReq
func (p *MetaServiceDropSnapshotArgs) GetReq() *DropSnapshotReq {
  if !p.IsSetReq() {
    return MetaServiceDropSnapshotArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropSnapshotArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropSnapshotArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropSnapshotReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropSnapshotResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropSnapshotResult() *MetaServiceDropSnapshotResult {
  return &MetaServiceDropSnapshotResult{}
}

var MetaServiceDropSnapshotResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropSnapshotResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropSnapshotResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropSnapshotResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropSnapshotResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSnapshotsArgs struct {
  Req *ListSnapshotsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSnapshotsArgs() *MetaServiceListSnapshotsArgs {
  return &MetaServiceListSnapshotsArgs{}
}

var MetaServiceListSnapshotsArgs_Req_DEFAULT *ListSnapshotsReq
func (p *MetaServiceListSnapshotsArgs) GetReq() *ListSnapshotsReq {
  if !p.IsSetReq() {
    return MetaServiceListSnapshotsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSnapshotsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSnapshotsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSnapshotsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSnapshotsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSnapshotsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSnapshotsResult struct {
  Success *ListSnapshotsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSnapshotsResult() *MetaServiceListSnapshotsResult {
  return &MetaServiceListSnapshotsResult{}
}

var MetaServiceListSnapshotsResult_Success_DEFAULT *ListSnapshotsResp
func (p *MetaServiceListSnapshotsResult) GetSuccess() *ListSnapshotsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSnapshotsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSnapshotsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSnapshotsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSnapshotsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSnapshotsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSnapshots_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSnapshotsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSnapshotsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSnapshotsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRunAdminJobArgs struct {
  Req *AdminJobReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRunAdminJobArgs() *MetaServiceRunAdminJobArgs {
  return &MetaServiceRunAdminJobArgs{}
}

var MetaServiceRunAdminJobArgs_Req_DEFAULT *AdminJobReq
func (p *MetaServiceRunAdminJobArgs) GetReq() *AdminJobReq {
  if !p.IsSetReq() {
    return MetaServiceRunAdminJobArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRunAdminJobArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRunAdminJobArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAdminJobReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRunAdminJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRunAdminJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRunAdminJobResult struct {
  Success *AdminJobResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRunAdminJobResult() *MetaServiceRunAdminJobResult {
  return &MetaServiceRunAdminJobResult{}
}

var MetaServiceRunAdminJobResult_Success_DEFAULT *AdminJobResp
func (p *MetaServiceRunAdminJobResult) GetSuccess() *AdminJobResp {
  if !p.IsSetSuccess() {
    return MetaServiceRunAdminJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRunAdminJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRunAdminJobResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewAdminJobResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRunAdminJobResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("runAdminJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRunAdminJobResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRunAdminJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRunAdminJobResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddZoneArgs struct {
  Req *AddZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddZoneArgs() *MetaServiceAddZoneArgs {
  return &MetaServiceAddZoneArgs{}
}

var MetaServiceAddZoneArgs_Req_DEFAULT *AddZoneReq
func (p *MetaServiceAddZoneArgs) GetReq() *AddZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddZoneResult() *MetaServiceAddZoneResult {
  return &MetaServiceAddZoneResult{}
}

var MetaServiceAddZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropZoneArgs struct {
  Req *DropZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneArgs() *MetaServiceDropZoneArgs {
  return &MetaServiceDropZoneArgs{}
}

var MetaServiceDropZoneArgs_Req_DEFAULT *DropZoneReq
func (p *MetaServiceDropZoneArgs) GetReq() *DropZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneResult() *MetaServiceDropZoneResult {
  return &MetaServiceDropZoneResult{}
}

var MetaServiceDropZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddHostIntoZoneArgs struct {
  Req *AddHostIntoZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddHostIntoZoneArgs() *MetaServiceAddHostIntoZoneArgs {
  return &MetaServiceAddHostIntoZoneArgs{}
}

var MetaServiceAddHostIntoZoneArgs_Req_DEFAULT *AddHostIntoZoneReq
func (p *MetaServiceAddHostIntoZoneArgs) GetReq() *AddHostIntoZoneReq {
  if !p.IsSetReq() {
    return MetaServiceAddHostIntoZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddHostIntoZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddHostIntoZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddHostIntoZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostIntoZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostIntoZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddHostIntoZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostIntoZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddHostIntoZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddHostIntoZoneResult() *MetaServiceAddHostIntoZoneResult {
  return &MetaServiceAddHostIntoZoneResult{}
}

var MetaServiceAddHostIntoZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddHostIntoZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddHostIntoZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddHostIntoZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddHostIntoZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addHostIntoZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddHostIntoZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddHostIntoZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddHostIntoZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropHostFromZoneArgs struct {
  Req *DropHostFromZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropHostFromZoneArgs() *MetaServiceDropHostFromZoneArgs {
  return &MetaServiceDropHostFromZoneArgs{}
}

var MetaServiceDropHostFromZoneArgs_Req_DEFAULT *DropHostFromZoneReq
func (p *MetaServiceDropHostFromZoneArgs) GetReq() *DropHostFromZoneReq {
  if !p.IsSetReq() {
    return MetaServiceDropHostFromZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropHostFromZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropHostFromZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropHostFromZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHostFromZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostFromZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropHostFromZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropHostFromZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropHostFromZoneResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropHostFromZoneResult() *MetaServiceDropHostFromZoneResult {
  return &MetaServiceDropHostFromZoneResult{}
}

var MetaServiceDropHostFromZoneResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropHostFromZoneResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropHostFromZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropHostFromZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropHostFromZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropHostFromZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropHostFromZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropHostFromZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropHostFromZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetZoneArgs struct {
  Req *GetZoneReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetZoneArgs() *MetaServiceGetZoneArgs {
  return &MetaServiceGetZoneArgs{}
}

var MetaServiceGetZoneArgs_Req_DEFAULT *GetZoneReq
func (p *MetaServiceGetZoneArgs) GetReq() *GetZoneReq {
  if !p.IsSetReq() {
    return MetaServiceGetZoneArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetZoneArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetZoneArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetZoneReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetZoneArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetZoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetZoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetZoneResult struct {
  Success *GetZoneResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetZoneResult() *MetaServiceGetZoneResult {
  return &MetaServiceGetZoneResult{}
}

var MetaServiceGetZoneResult_Success_DEFAULT *GetZoneResp
func (p *MetaServiceGetZoneResult) GetSuccess() *GetZoneResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetZoneResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetZoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetZoneResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetZoneResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetZoneResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getZone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetZoneResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetZoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetZoneResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListZonesArgs struct {
  Req *ListZonesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListZonesArgs() *MetaServiceListZonesArgs {
  return &MetaServiceListZonesArgs{}
}

var MetaServiceListZonesArgs_Req_DEFAULT *ListZonesReq
func (p *MetaServiceListZonesArgs) GetReq() *ListZonesReq {
  if !p.IsSetReq() {
    return MetaServiceListZonesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListZonesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListZonesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListZonesReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListZonesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListZonesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListZonesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListZonesResult struct {
  Success *ListZonesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListZonesResult() *MetaServiceListZonesResult {
  return &MetaServiceListZonesResult{}
}

var MetaServiceListZonesResult_Success_DEFAULT *ListZonesResp
func (p *MetaServiceListZonesResult) GetSuccess() *ListZonesResp {
  if !p.IsSetSuccess() {
    return MetaServiceListZonesResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListZonesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListZonesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListZonesResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListZonesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listZones_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListZonesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListZonesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListZonesResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddGroupArgs struct {
  Req *AddGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddGroupArgs() *MetaServiceAddGroupArgs {
  return &MetaServiceAddGroupArgs{}
}

var MetaServiceAddGroupArgs_Req_DEFAULT *AddGroupReq
func (p *MetaServiceAddGroupArgs) GetReq() *AddGroupReq {
  if !p.IsSetReq() {
    return MetaServiceAddGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddGroupResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddGroupResult() *MetaServiceAddGroupResult {
  return &MetaServiceAddGroupResult{}
}

var MetaServiceAddGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddGroupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropGroupArgs struct {
  Req *DropGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropGroupArgs() *MetaServiceDropGroupArgs {
  return &MetaServiceDropGroupArgs{}
}

var MetaServiceDropGroupArgs_Req_DEFAULT *DropGroupReq
func (p *MetaServiceDropGroupArgs) GetReq() *DropGroupReq {
  if !p.IsSetReq() {
    return MetaServiceDropGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropGroupResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropGroupResult() *MetaServiceDropGroupResult {
  return &MetaServiceDropGroupResult{}
}

var MetaServiceDropGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropGroupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddZoneIntoGroupArgs struct {
  Req *AddZoneIntoGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddZoneIntoGroupArgs() *MetaServiceAddZoneIntoGroupArgs {
  return &MetaServiceAddZoneIntoGroupArgs{}
}

var MetaServiceAddZoneIntoGroupArgs_Req_DEFAULT *AddZoneIntoGroupReq
func (p *MetaServiceAddZoneIntoGroupArgs) GetReq() *AddZoneIntoGroupReq {
  if !p.IsSetReq() {
    return MetaServiceAddZoneIntoGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddZoneIntoGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddZoneIntoGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZoneIntoGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddZoneIntoGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddZoneIntoGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddZoneIntoGroupResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddZoneIntoGroupResult() *MetaServiceAddZoneIntoGroupResult {
  return &MetaServiceAddZoneIntoGroupResult{}
}

var MetaServiceAddZoneIntoGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddZoneIntoGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddZoneIntoGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddZoneIntoGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddZoneIntoGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addZoneIntoGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddZoneIntoGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddZoneIntoGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddZoneIntoGroupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceDropZoneFromGroupArgs struct {
  Req *DropZoneFromGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceDropZoneFromGroupArgs() *MetaServiceDropZoneFromGroupArgs {
  return &MetaServiceDropZoneFromGroupArgs{}
}

var MetaServiceDropZoneFromGroupArgs_Req_DEFAULT *DropZoneFromGroupReq
func (p *MetaServiceDropZoneFromGroupArgs) GetReq() *DropZoneFromGroupReq {
  if !p.IsSetReq() {
    return MetaServiceDropZoneFromGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceDropZoneFromGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceDropZoneFromGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDropZoneFromGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZoneFromGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneFromGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceDropZoneFromGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneFromGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceDropZoneFromGroupResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceDropZoneFromGroupResult() *MetaServiceDropZoneFromGroupResult {
  return &MetaServiceDropZoneFromGroupResult{}
}

var MetaServiceDropZoneFromGroupResult_Success_DEFAULT *ExecResp
func (p *MetaServiceDropZoneFromGroupResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceDropZoneFromGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceDropZoneFromGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceDropZoneFromGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("dropZoneFromGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceDropZoneFromGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceDropZoneFromGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceDropZoneFromGroupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetGroupArgs struct {
  Req *GetGroupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetGroupArgs() *MetaServiceGetGroupArgs {
  return &MetaServiceGetGroupArgs{}
}

var MetaServiceGetGroupArgs_Req_DEFAULT *GetGroupReq
func (p *MetaServiceGetGroupArgs) GetReq() *GetGroupReq {
  if !p.IsSetReq() {
    return MetaServiceGetGroupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetGroupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetGroupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetGroupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetGroupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetGroupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetGroupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetGroupResult struct {
  Success *GetGroupResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetGroupResult() *MetaServiceGetGroupResult {
  return &MetaServiceGetGroupResult{}
}

var MetaServiceGetGroupResult_Success_DEFAULT *GetGroupResp
func (p *MetaServiceGetGroupResult) GetSuccess() *GetGroupResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetGroupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetGroupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetGroupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetGroupResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetGroupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetGroupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetGroupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListGroupsArgs struct {
  Req *ListGroupsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListGroupsArgs() *MetaServiceListGroupsArgs {
  return &MetaServiceListGroupsArgs{}
}

var MetaServiceListGroupsArgs_Req_DEFAULT *ListGroupsReq
func (p *MetaServiceListGroupsArgs) GetReq() *ListGroupsReq {
  if !p.IsSetReq() {
    return MetaServiceListGroupsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListGroupsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListGroupsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListGroupsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListGroupsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListGroupsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListGroupsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListGroupsResult struct {
  Success *ListGroupsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListGroupsResult() *MetaServiceListGroupsResult {
  return &MetaServiceListGroupsResult{}
}

var MetaServiceListGroupsResult_Success_DEFAULT *ListGroupsResp
func (p *MetaServiceListGroupsResult) GetSuccess() *ListGroupsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListGroupsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListGroupsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListGroupsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListGroupsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListGroupsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListGroupsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListGroupsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateBackupArgs struct {
  Req *CreateBackupReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateBackupArgs() *MetaServiceCreateBackupArgs {
  return &MetaServiceCreateBackupArgs{}
}

var MetaServiceCreateBackupArgs_Req_DEFAULT *CreateBackupReq
func (p *MetaServiceCreateBackupArgs) GetReq() *CreateBackupReq {
  if !p.IsSetReq() {
    return MetaServiceCreateBackupArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateBackupArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateBackupArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateBackupReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateBackupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateBackupArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateBackupResult struct {
  Success *CreateBackupResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateBackupResult() *MetaServiceCreateBackupResult {
  return &MetaServiceCreateBackupResult{}
}

var MetaServiceCreateBackupResult_Success_DEFAULT *CreateBackupResp
func (p *MetaServiceCreateBackupResult) GetSuccess() *CreateBackupResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateBackupResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateBackupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateBackupResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateBackupResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateBackupResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createBackup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateBackupResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateBackupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateBackupResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRestoreMetaArgs struct {
  Req *RestoreMetaReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRestoreMetaArgs() *MetaServiceRestoreMetaArgs {
  return &MetaServiceRestoreMetaArgs{}
}

var MetaServiceRestoreMetaArgs_Req_DEFAULT *RestoreMetaReq
func (p *MetaServiceRestoreMetaArgs) GetReq() *RestoreMetaReq {
  if !p.IsSetReq() {
    return MetaServiceRestoreMetaArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRestoreMetaArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRestoreMetaArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRestoreMetaReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRestoreMetaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRestoreMetaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRestoreMetaResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRestoreMetaResult() *MetaServiceRestoreMetaResult {
  return &MetaServiceRestoreMetaResult{}
}

var MetaServiceRestoreMetaResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRestoreMetaResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRestoreMetaResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRestoreMetaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRestoreMetaResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRestoreMetaResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("restoreMeta_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRestoreMetaResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRestoreMetaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRestoreMetaResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceAddListenerArgs struct {
  Req *AddListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceAddListenerArgs() *MetaServiceAddListenerArgs {
  return &MetaServiceAddListenerArgs{}
}

var MetaServiceAddListenerArgs_Req_DEFAULT *AddListenerReq
func (p *MetaServiceAddListenerArgs) GetReq() *AddListenerReq {
  if !p.IsSetReq() {
    return MetaServiceAddListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceAddListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceAddListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceAddListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceAddListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceAddListenerResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceAddListenerResult() *MetaServiceAddListenerResult {
  return &MetaServiceAddListenerResult{}
}

var MetaServiceAddListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceAddListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceAddListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceAddListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceAddListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceAddListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceAddListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceAddListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceAddListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveListenerArgs struct {
  Req *RemoveListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveListenerArgs() *MetaServiceRemoveListenerArgs {
  return &MetaServiceRemoveListenerArgs{}
}

var MetaServiceRemoveListenerArgs_Req_DEFAULT *RemoveListenerReq
func (p *MetaServiceRemoveListenerArgs) GetReq() *RemoveListenerReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveListenerResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveListenerResult() *MetaServiceRemoveListenerResult {
  return &MetaServiceRemoveListenerResult{}
}

var MetaServiceRemoveListenerResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveListenerResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListListenerArgs struct {
  Req *ListListenerReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListListenerArgs() *MetaServiceListListenerArgs {
  return &MetaServiceListListenerArgs{}
}

var MetaServiceListListenerArgs_Req_DEFAULT *ListListenerReq
func (p *MetaServiceListListenerArgs) GetReq() *ListListenerReq {
  if !p.IsSetReq() {
    return MetaServiceListListenerArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListListenerArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListListenerArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListListenerReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListListenerArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListListenerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListListenerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListListenerResult struct {
  Success *ListListenerResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListListenerResult() *MetaServiceListListenerResult {
  return &MetaServiceListListenerResult{}
}

var MetaServiceListListenerResult_Success_DEFAULT *ListListenerResp
func (p *MetaServiceListListenerResult) GetSuccess() *ListListenerResp {
  if !p.IsSetSuccess() {
    return MetaServiceListListenerResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListListenerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListListenerResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListListenerResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListListenerResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listListener_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListListenerResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListListenerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListListenerResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetStatisArgs struct {
  Req *GetStatisReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetStatisArgs() *MetaServiceGetStatisArgs {
  return &MetaServiceGetStatisArgs{}
}

var MetaServiceGetStatisArgs_Req_DEFAULT *GetStatisReq
func (p *MetaServiceGetStatisArgs) GetReq() *GetStatisReq {
  if !p.IsSetReq() {
    return MetaServiceGetStatisArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetStatisArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetStatisArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatisArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetStatisReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetStatisArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatis_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatisArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetStatisArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetStatisArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetStatisResult struct {
  Success *GetStatisResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetStatisResult() *MetaServiceGetStatisResult {
  return &MetaServiceGetStatisResult{}
}

var MetaServiceGetStatisResult_Success_DEFAULT *GetStatisResp
func (p *MetaServiceGetStatisResult) GetSuccess() *GetStatisResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetStatisResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetStatisResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetStatisResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetStatisResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetStatisResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetStatisResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getStatis_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetStatisResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetStatisResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetStatisResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSignInFTServiceArgs struct {
  Req *SignInFTServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignInFTServiceArgs() *MetaServiceSignInFTServiceArgs {
  return &MetaServiceSignInFTServiceArgs{}
}

var MetaServiceSignInFTServiceArgs_Req_DEFAULT *SignInFTServiceReq
func (p *MetaServiceSignInFTServiceArgs) GetReq() *SignInFTServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignInFTServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignInFTServiceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSignInFTServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignInFTServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInFTService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInFTServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignInFTServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignInFTServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSignInFTServiceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignInFTServiceResult() *MetaServiceSignInFTServiceResult {
  return &MetaServiceSignInFTServiceResult{}
}

var MetaServiceSignInFTServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignInFTServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignInFTServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignInFTServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSignInFTServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignInFTServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signInFTService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignInFTServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignInFTServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignInFTServiceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceSignOutFTServiceArgs struct {
  Req *SignOutFTServiceReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceSignOutFTServiceArgs() *MetaServiceSignOutFTServiceArgs {
  return &MetaServiceSignOutFTServiceArgs{}
}

var MetaServiceSignOutFTServiceArgs_Req_DEFAULT *SignOutFTServiceReq
func (p *MetaServiceSignOutFTServiceArgs) GetReq() *SignOutFTServiceReq {
  if !p.IsSetReq() {
    return MetaServiceSignOutFTServiceArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceSignOutFTServiceArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceSignOutFTServiceArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewSignOutFTServiceReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutFTService_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutFTServiceArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceSignOutFTServiceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignOutFTServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceSignOutFTServiceResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceSignOutFTServiceResult() *MetaServiceSignOutFTServiceResult {
  return &MetaServiceSignOutFTServiceResult{}
}

var MetaServiceSignOutFTServiceResult_Success_DEFAULT *ExecResp
func (p *MetaServiceSignOutFTServiceResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceSignOutFTServiceResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceSignOutFTServiceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceSignOutFTServiceResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("signOutFTService_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceSignOutFTServiceResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceSignOutFTServiceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceSignOutFTServiceResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListFTClientsArgs struct {
  Req *ListFTClientsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListFTClientsArgs() *MetaServiceListFTClientsArgs {
  return &MetaServiceListFTClientsArgs{}
}

var MetaServiceListFTClientsArgs_Req_DEFAULT *ListFTClientsReq
func (p *MetaServiceListFTClientsArgs) GetReq() *ListFTClientsReq {
  if !p.IsSetReq() {
    return MetaServiceListFTClientsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListFTClientsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListFTClientsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListFTClientsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTClients_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTClientsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListFTClientsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListFTClientsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListFTClientsResult struct {
  Success *ListFTClientsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListFTClientsResult() *MetaServiceListFTClientsResult {
  return &MetaServiceListFTClientsResult{}
}

var MetaServiceListFTClientsResult_Success_DEFAULT *ListFTClientsResp
func (p *MetaServiceListFTClientsResult) GetSuccess() *ListFTClientsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListFTClientsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListFTClientsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListFTClientsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListFTClientsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListFTClientsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listFTClients_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListFTClientsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListFTClientsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListFTClientsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceCreateSessionArgs struct {
  Req *CreateSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceCreateSessionArgs() *MetaServiceCreateSessionArgs {
  return &MetaServiceCreateSessionArgs{}
}

var MetaServiceCreateSessionArgs_Req_DEFAULT *CreateSessionReq
func (p *MetaServiceCreateSessionArgs) GetReq() *CreateSessionReq {
  if !p.IsSetReq() {
    return MetaServiceCreateSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceCreateSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceCreateSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewCreateSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceCreateSessionResult struct {
  Success *CreateSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceCreateSessionResult() *MetaServiceCreateSessionResult {
  return &MetaServiceCreateSessionResult{}
}

var MetaServiceCreateSessionResult_Success_DEFAULT *CreateSessionResp
func (p *MetaServiceCreateSessionResult) GetSuccess() *CreateSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceCreateSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceCreateSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCreateSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceCreateSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceCreateSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceCreateSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceUpdateSessionsArgs struct {
  Req *UpdateSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceUpdateSessionsArgs() *MetaServiceUpdateSessionsArgs {
  return &MetaServiceUpdateSessionsArgs{}
}

var MetaServiceUpdateSessionsArgs_Req_DEFAULT *UpdateSessionsReq
func (p *MetaServiceUpdateSessionsArgs) GetReq() *UpdateSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceUpdateSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceUpdateSessionsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceUpdateSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceUpdateSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceUpdateSessionsResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceUpdateSessionsResult() *MetaServiceUpdateSessionsResult {
  return &MetaServiceUpdateSessionsResult{}
}

var MetaServiceUpdateSessionsResult_Success_DEFAULT *ExecResp
func (p *MetaServiceUpdateSessionsResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceUpdateSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceUpdateSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceUpdateSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceUpdateSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceUpdateSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceUpdateSessionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceListSessionsArgs struct {
  Req *ListSessionsReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceListSessionsArgs() *MetaServiceListSessionsArgs {
  return &MetaServiceListSessionsArgs{}
}

var MetaServiceListSessionsArgs_Req_DEFAULT *ListSessionsReq
func (p *MetaServiceListSessionsArgs) GetReq() *ListSessionsReq {
  if !p.IsSetReq() {
    return MetaServiceListSessionsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceListSessionsArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceListSessionsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewListSessionsReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceListSessionsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceListSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceListSessionsResult struct {
  Success *ListSessionsResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceListSessionsResult() *MetaServiceListSessionsResult {
  return &MetaServiceListSessionsResult{}
}

var MetaServiceListSessionsResult_Success_DEFAULT *ListSessionsResp
func (p *MetaServiceListSessionsResult) GetSuccess() *ListSessionsResp {
  if !p.IsSetSuccess() {
    return MetaServiceListSessionsResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceListSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceListSessionsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewListSessionsResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceListSessionsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("listSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceListSessionsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceListSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceListSessionsResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceGetSessionArgs struct {
  Req *GetSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceGetSessionArgs() *MetaServiceGetSessionArgs {
  return &MetaServiceGetSessionArgs{}
}

var MetaServiceGetSessionArgs_Req_DEFAULT *GetSessionReq
func (p *MetaServiceGetSessionArgs) GetReq() *GetSessionReq {
  if !p.IsSetReq() {
    return MetaServiceGetSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceGetSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceGetSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceGetSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceGetSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceGetSessionResult struct {
  Success *GetSessionResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceGetSessionResult() *MetaServiceGetSessionResult {
  return &MetaServiceGetSessionResult{}
}

var MetaServiceGetSessionResult_Success_DEFAULT *GetSessionResp
func (p *MetaServiceGetSessionResult) GetSuccess() *GetSessionResp {
  if !p.IsSetSuccess() {
    return MetaServiceGetSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceGetSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceGetSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetSessionResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceGetSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceGetSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceGetSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceGetSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceRemoveSessionArgs struct {
  Req *RemoveSessionReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceRemoveSessionArgs() *MetaServiceRemoveSessionArgs {
  return &MetaServiceRemoveSessionArgs{}
}

var MetaServiceRemoveSessionArgs_Req_DEFAULT *RemoveSessionReq
func (p *MetaServiceRemoveSessionArgs) GetReq() *RemoveSessionReq {
  if !p.IsSetReq() {
    return MetaServiceRemoveSessionArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceRemoveSessionArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceRemoveSessionArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewRemoveSessionReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceRemoveSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceRemoveSessionResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceRemoveSessionResult() *MetaServiceRemoveSessionResult {
  return &MetaServiceRemoveSessionResult{}
}

var MetaServiceRemoveSessionResult_Success_DEFAULT *ExecResp
func (p *MetaServiceRemoveSessionResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceRemoveSessionResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceRemoveSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceRemoveSessionResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceRemoveSessionResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("removeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceRemoveSessionResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceRemoveSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceRemoveSessionResult(%+v)", *p)
}

// Attributes:
//  - Req
type MetaServiceReportTaskFinishArgs struct {
  Req *ReportTaskReq `thrift:"req,1" db:"req" json:"req"`
}

func NewMetaServiceReportTaskFinishArgs() *MetaServiceReportTaskFinishArgs {
  return &MetaServiceReportTaskFinishArgs{}
}

var MetaServiceReportTaskFinishArgs_Req_DEFAULT *ReportTaskReq
func (p *MetaServiceReportTaskFinishArgs) GetReq() *ReportTaskReq {
  if !p.IsSetReq() {
    return MetaServiceReportTaskFinishArgs_Req_DEFAULT
  }
return p.Req
}
func (p *MetaServiceReportTaskFinishArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *MetaServiceReportTaskFinishArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewReportTaskReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *MetaServiceReportTaskFinishArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MetaServiceReportTaskFinishResult struct {
  Success *ExecResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMetaServiceReportTaskFinishResult() *MetaServiceReportTaskFinishResult {
  return &MetaServiceReportTaskFinishResult{}
}

var MetaServiceReportTaskFinishResult_Success_DEFAULT *ExecResp
func (p *MetaServiceReportTaskFinishResult) GetSuccess() *ExecResp {
  if !p.IsSetSuccess() {
    return MetaServiceReportTaskFinishResult_Success_DEFAULT
  }
return p.Success
}
func (p *MetaServiceReportTaskFinishResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetaServiceReportTaskFinishResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("reportTaskFinish_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetaServiceReportTaskFinishResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetaServiceReportTaskFinishResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaServiceReportTaskFinishResult(%+v)", *p)
}


