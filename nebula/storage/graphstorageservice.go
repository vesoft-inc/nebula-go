// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package storage

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	nebula0 "github.com/vesoft-inc/nebula-go/v3/nebula"
	meta1 "github.com/vesoft-inc/nebula-go/v3/nebula/meta"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = nebula0.GoUnusedProtection__
var _ = meta1.GoUnusedProtection__
type GraphStorageService interface {
  // Parameters:
  //  - Req
  GetNeighbors(ctx context.Context, req *GetNeighborsRequest) (_r *GetNeighborsResponse, err error)
  // Parameters:
  //  - Req
  GetDstBySrc(ctx context.Context, req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, err error)
  // Parameters:
  //  - Req
  GetProps(ctx context.Context, req *GetPropRequest) (_r *GetPropResponse, err error)
  // Parameters:
  //  - Req
  AddVertices(ctx context.Context, req *AddVerticesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  AddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteVertices(ctx context.Context, req *DeleteVerticesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteTags(ctx context.Context, req *DeleteTagsRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  UpdateVertex(ctx context.Context, req *UpdateVertexRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  UpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  ScanVertex(ctx context.Context, req *ScanVertexRequest) (_r *ScanResponse, err error)
  // Parameters:
  //  - Req
  ScanEdge(ctx context.Context, req *ScanEdgeRequest) (_r *ScanResponse, err error)
  // Parameters:
  //  - Req
  GetUUID(ctx context.Context, req *GetUUIDReq) (_r *GetUUIDResp, err error)
  // Parameters:
  //  - Req
  LookupIndex(ctx context.Context, req *LookupIndexRequest) (_r *LookupIndexResp, err error)
  // Parameters:
  //  - Req
  LookupAndTraverse(ctx context.Context, req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, err error)
  // Parameters:
  //  - Req
  ChainUpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  ChainAddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  ChainDeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  Get(ctx context.Context, req *KVGetRequest) (_r *KVGetResponse, err error)
  // Parameters:
  //  - Req
  Put(ctx context.Context, req *KVPutRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  Remove(ctx context.Context, req *KVRemoveRequest) (_r *ExecResponse, err error)
}

type GraphStorageServiceClientInterface interface {
  thrift.ClientInterface
  // Parameters:
  //  - Req
  GetNeighbors(req *GetNeighborsRequest) (_r *GetNeighborsResponse, err error)
  // Parameters:
  //  - Req
  GetDstBySrc(req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, err error)
  // Parameters:
  //  - Req
  GetProps(req *GetPropRequest) (_r *GetPropResponse, err error)
  // Parameters:
  //  - Req
  AddVertices(req *AddVerticesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  AddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteVertices(req *DeleteVerticesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  DeleteTags(req *DeleteTagsRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  UpdateVertex(req *UpdateVertexRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  UpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  ScanVertex(req *ScanVertexRequest) (_r *ScanResponse, err error)
  // Parameters:
  //  - Req
  ScanEdge(req *ScanEdgeRequest) (_r *ScanResponse, err error)
  // Parameters:
  //  - Req
  GetUUID(req *GetUUIDReq) (_r *GetUUIDResp, err error)
  // Parameters:
  //  - Req
  LookupIndex(req *LookupIndexRequest) (_r *LookupIndexResp, err error)
  // Parameters:
  //  - Req
  LookupAndTraverse(req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, err error)
  // Parameters:
  //  - Req
  ChainUpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error)
  // Parameters:
  //  - Req
  ChainAddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  ChainDeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  Get(req *KVGetRequest) (_r *KVGetResponse, err error)
  // Parameters:
  //  - Req
  Put(req *KVPutRequest) (_r *ExecResponse, err error)
  // Parameters:
  //  - Req
  Remove(req *KVRemoveRequest) (_r *ExecResponse, err error)
}

type GraphStorageServiceClient struct {
  GraphStorageServiceClientInterface
  CC thrift.ClientConn
}

func(client *GraphStorageServiceClient) Open() error {
  return client.CC.Open()
}

func(client *GraphStorageServiceClient) Close() error {
  return client.CC.Close()
}

func(client *GraphStorageServiceClient) IsOpen() bool {
  return client.CC.IsOpen()
}

func NewGraphStorageServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GraphStorageServiceClient {
  return &GraphStorageServiceClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGraphStorageServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GraphStorageServiceClient {
  return &GraphStorageServiceClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGraphStorageServiceClientProtocol(prot thrift.Protocol) *GraphStorageServiceClient {
  return NewGraphStorageServiceClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetNeighbors(req *GetNeighborsRequest) (_r *GetNeighborsResponse, err error) {
  args := GraphStorageServiceGetNeighborsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getNeighbors", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetNeighbors()
}


func (p *GraphStorageServiceClient) recvGetNeighbors() (value *GetNeighborsResponse, err error) {
  var result GraphStorageServiceGetNeighborsResult
  err = p.CC.RecvMsg("getNeighbors", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetDstBySrc(req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, err error) {
  args := GraphStorageServiceGetDstBySrcArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getDstBySrc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDstBySrc()
}


func (p *GraphStorageServiceClient) recvGetDstBySrc() (value *GetDstBySrcResponse, err error) {
  var result GraphStorageServiceGetDstBySrcResult
  err = p.CC.RecvMsg("getDstBySrc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetProps(req *GetPropRequest) (_r *GetPropResponse, err error) {
  args := GraphStorageServiceGetPropsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getProps", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetProps()
}


func (p *GraphStorageServiceClient) recvGetProps() (value *GetPropResponse, err error) {
  var result GraphStorageServiceGetPropsResult
  err = p.CC.RecvMsg("getProps", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) AddVertices(req *AddVerticesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceAddVerticesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addVertices", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddVertices()
}


func (p *GraphStorageServiceClient) recvAddVertices() (value *ExecResponse, err error) {
  var result GraphStorageServiceAddVerticesResult
  err = p.CC.RecvMsg("addVertices", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) AddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceAddEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddEdges()
}


func (p *GraphStorageServiceClient) recvAddEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceAddEdgesResult
  err = p.CC.RecvMsg("addEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteEdges()
}


func (p *GraphStorageServiceClient) recvDeleteEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteEdgesResult
  err = p.CC.RecvMsg("deleteEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteVertices(req *DeleteVerticesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteVerticesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteVertices", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteVertices()
}


func (p *GraphStorageServiceClient) recvDeleteVertices() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteVerticesResult
  err = p.CC.RecvMsg("deleteVertices", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) DeleteTags(req *DeleteTagsRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteTags()
}


func (p *GraphStorageServiceClient) recvDeleteTags() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteTagsResult
  err = p.CC.RecvMsg("deleteTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) UpdateVertex(req *UpdateVertexRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceUpdateVertexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateVertex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateVertex()
}


func (p *GraphStorageServiceClient) recvUpdateVertex() (value *UpdateResponse, err error) {
  var result GraphStorageServiceUpdateVertexResult
  err = p.CC.RecvMsg("updateVertex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) UpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceUpdateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateEdge()
}


func (p *GraphStorageServiceClient) recvUpdateEdge() (value *UpdateResponse, err error) {
  var result GraphStorageServiceUpdateEdgeResult
  err = p.CC.RecvMsg("updateEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ScanVertex(req *ScanVertexRequest) (_r *ScanResponse, err error) {
  args := GraphStorageServiceScanVertexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scanVertex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScanVertex()
}


func (p *GraphStorageServiceClient) recvScanVertex() (value *ScanResponse, err error) {
  var result GraphStorageServiceScanVertexResult
  err = p.CC.RecvMsg("scanVertex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ScanEdge(req *ScanEdgeRequest) (_r *ScanResponse, err error) {
  args := GraphStorageServiceScanEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scanEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScanEdge()
}


func (p *GraphStorageServiceClient) recvScanEdge() (value *ScanResponse, err error) {
  var result GraphStorageServiceScanEdgeResult
  err = p.CC.RecvMsg("scanEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) GetUUID(req *GetUUIDReq) (_r *GetUUIDResp, err error) {
  args := GraphStorageServiceGetUUIDArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUUID", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUUID()
}


func (p *GraphStorageServiceClient) recvGetUUID() (value *GetUUIDResp, err error) {
  var result GraphStorageServiceGetUUIDResult
  err = p.CC.RecvMsg("getUUID", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) LookupIndex(req *LookupIndexRequest) (_r *LookupIndexResp, err error) {
  args := GraphStorageServiceLookupIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("lookupIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLookupIndex()
}


func (p *GraphStorageServiceClient) recvLookupIndex() (value *LookupIndexResp, err error) {
  var result GraphStorageServiceLookupIndexResult
  err = p.CC.RecvMsg("lookupIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) LookupAndTraverse(req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, err error) {
  args := GraphStorageServiceLookupAndTraverseArgs{
    Req : req,
  }
  err = p.CC.SendMsg("lookupAndTraverse", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLookupAndTraverse()
}


func (p *GraphStorageServiceClient) recvLookupAndTraverse() (value *GetNeighborsResponse, err error) {
  var result GraphStorageServiceLookupAndTraverseResult
  err = p.CC.RecvMsg("lookupAndTraverse", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainUpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceChainUpdateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainUpdateEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainUpdateEdge()
}


func (p *GraphStorageServiceClient) recvChainUpdateEdge() (value *UpdateResponse, err error) {
  var result GraphStorageServiceChainUpdateEdgeResult
  err = p.CC.RecvMsg("chainUpdateEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainAddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceChainAddEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainAddEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainAddEdges()
}


func (p *GraphStorageServiceClient) recvChainAddEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceChainAddEdgesResult
  err = p.CC.RecvMsg("chainAddEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) ChainDeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceChainDeleteEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainDeleteEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainDeleteEdges()
}


func (p *GraphStorageServiceClient) recvChainDeleteEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceChainDeleteEdgesResult
  err = p.CC.RecvMsg("chainDeleteEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Get(req *KVGetRequest) (_r *KVGetResponse, err error) {
  args := GraphStorageServiceGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("get", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGet()
}


func (p *GraphStorageServiceClient) recvGet() (value *KVGetResponse, err error) {
  var result GraphStorageServiceGetResult
  err = p.CC.RecvMsg("get", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Put(req *KVPutRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServicePutArgs{
    Req : req,
  }
  err = p.CC.SendMsg("put", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPut()
}


func (p *GraphStorageServiceClient) recvPut() (value *ExecResponse, err error) {
  var result GraphStorageServicePutResult
  err = p.CC.RecvMsg("put", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceClient) Remove(req *KVRemoveRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceRemoveArgs{
    Req : req,
  }
  err = p.CC.SendMsg("remove", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemove()
}


func (p *GraphStorageServiceClient) recvRemove() (value *ExecResponse, err error) {
  var result GraphStorageServiceRemoveResult
  err = p.CC.RecvMsg("remove", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphStorageServiceThreadsafeClient struct {
  GraphStorageServiceClientInterface
  CC thrift.ClientConn
  Mu sync.Mutex
}

func(client *GraphStorageServiceThreadsafeClient) Open() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Open()
}

func(client *GraphStorageServiceThreadsafeClient) Close() error {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.Close()
}

func(client *GraphStorageServiceThreadsafeClient) IsOpen() bool {
  client.Mu.Lock()
  defer client.Mu.Unlock()
  return client.CC.IsOpen()
}

func NewGraphStorageServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *GraphStorageServiceThreadsafeClient {
  return &GraphStorageServiceThreadsafeClient{ CC: thrift.NewClientConn(t, f) }
}

func NewGraphStorageServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GraphStorageServiceThreadsafeClient {
  return &GraphStorageServiceThreadsafeClient{ CC: thrift.NewClientConnWithProtocols(t, iprot, oprot) }
}

func NewGraphStorageServiceThreadsafeClientProtocol(prot thrift.Protocol) *GraphStorageServiceThreadsafeClient {
  return NewGraphStorageServiceThreadsafeClient(prot.Transport(), prot, prot)
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) GetNeighbors(req *GetNeighborsRequest) (_r *GetNeighborsResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceGetNeighborsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getNeighbors", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetNeighbors()
}


func (p *GraphStorageServiceThreadsafeClient) recvGetNeighbors() (value *GetNeighborsResponse, err error) {
  var result GraphStorageServiceGetNeighborsResult
  err = p.CC.RecvMsg("getNeighbors", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) GetDstBySrc(req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceGetDstBySrcArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getDstBySrc", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetDstBySrc()
}


func (p *GraphStorageServiceThreadsafeClient) recvGetDstBySrc() (value *GetDstBySrcResponse, err error) {
  var result GraphStorageServiceGetDstBySrcResult
  err = p.CC.RecvMsg("getDstBySrc", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) GetProps(req *GetPropRequest) (_r *GetPropResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceGetPropsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getProps", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetProps()
}


func (p *GraphStorageServiceThreadsafeClient) recvGetProps() (value *GetPropResponse, err error) {
  var result GraphStorageServiceGetPropsResult
  err = p.CC.RecvMsg("getProps", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) AddVertices(req *AddVerticesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceAddVerticesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addVertices", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddVertices()
}


func (p *GraphStorageServiceThreadsafeClient) recvAddVertices() (value *ExecResponse, err error) {
  var result GraphStorageServiceAddVerticesResult
  err = p.CC.RecvMsg("addVertices", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) AddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceAddEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("addEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvAddEdges()
}


func (p *GraphStorageServiceThreadsafeClient) recvAddEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceAddEdgesResult
  err = p.CC.RecvMsg("addEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) DeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceDeleteEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteEdges()
}


func (p *GraphStorageServiceThreadsafeClient) recvDeleteEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteEdgesResult
  err = p.CC.RecvMsg("deleteEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) DeleteVertices(req *DeleteVerticesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceDeleteVerticesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteVertices", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteVertices()
}


func (p *GraphStorageServiceThreadsafeClient) recvDeleteVertices() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteVerticesResult
  err = p.CC.RecvMsg("deleteVertices", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) DeleteTags(req *DeleteTagsRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceDeleteTagsArgs{
    Req : req,
  }
  err = p.CC.SendMsg("deleteTags", &args, thrift.CALL)
  if err != nil { return }
  return p.recvDeleteTags()
}


func (p *GraphStorageServiceThreadsafeClient) recvDeleteTags() (value *ExecResponse, err error) {
  var result GraphStorageServiceDeleteTagsResult
  err = p.CC.RecvMsg("deleteTags", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) UpdateVertex(req *UpdateVertexRequest) (_r *UpdateResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceUpdateVertexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateVertex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateVertex()
}


func (p *GraphStorageServiceThreadsafeClient) recvUpdateVertex() (value *UpdateResponse, err error) {
  var result GraphStorageServiceUpdateVertexResult
  err = p.CC.RecvMsg("updateVertex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) UpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceUpdateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("updateEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvUpdateEdge()
}


func (p *GraphStorageServiceThreadsafeClient) recvUpdateEdge() (value *UpdateResponse, err error) {
  var result GraphStorageServiceUpdateEdgeResult
  err = p.CC.RecvMsg("updateEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) ScanVertex(req *ScanVertexRequest) (_r *ScanResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceScanVertexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scanVertex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScanVertex()
}


func (p *GraphStorageServiceThreadsafeClient) recvScanVertex() (value *ScanResponse, err error) {
  var result GraphStorageServiceScanVertexResult
  err = p.CC.RecvMsg("scanVertex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) ScanEdge(req *ScanEdgeRequest) (_r *ScanResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceScanEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("scanEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvScanEdge()
}


func (p *GraphStorageServiceThreadsafeClient) recvScanEdge() (value *ScanResponse, err error) {
  var result GraphStorageServiceScanEdgeResult
  err = p.CC.RecvMsg("scanEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) GetUUID(req *GetUUIDReq) (_r *GetUUIDResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceGetUUIDArgs{
    Req : req,
  }
  err = p.CC.SendMsg("getUUID", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGetUUID()
}


func (p *GraphStorageServiceThreadsafeClient) recvGetUUID() (value *GetUUIDResp, err error) {
  var result GraphStorageServiceGetUUIDResult
  err = p.CC.RecvMsg("getUUID", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) LookupIndex(req *LookupIndexRequest) (_r *LookupIndexResp, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceLookupIndexArgs{
    Req : req,
  }
  err = p.CC.SendMsg("lookupIndex", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLookupIndex()
}


func (p *GraphStorageServiceThreadsafeClient) recvLookupIndex() (value *LookupIndexResp, err error) {
  var result GraphStorageServiceLookupIndexResult
  err = p.CC.RecvMsg("lookupIndex", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) LookupAndTraverse(req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceLookupAndTraverseArgs{
    Req : req,
  }
  err = p.CC.SendMsg("lookupAndTraverse", &args, thrift.CALL)
  if err != nil { return }
  return p.recvLookupAndTraverse()
}


func (p *GraphStorageServiceThreadsafeClient) recvLookupAndTraverse() (value *GetNeighborsResponse, err error) {
  var result GraphStorageServiceLookupAndTraverseResult
  err = p.CC.RecvMsg("lookupAndTraverse", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) ChainUpdateEdge(req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceChainUpdateEdgeArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainUpdateEdge", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainUpdateEdge()
}


func (p *GraphStorageServiceThreadsafeClient) recvChainUpdateEdge() (value *UpdateResponse, err error) {
  var result GraphStorageServiceChainUpdateEdgeResult
  err = p.CC.RecvMsg("chainUpdateEdge", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) ChainAddEdges(req *AddEdgesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceChainAddEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainAddEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainAddEdges()
}


func (p *GraphStorageServiceThreadsafeClient) recvChainAddEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceChainAddEdgesResult
  err = p.CC.RecvMsg("chainAddEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) ChainDeleteEdges(req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceChainDeleteEdgesArgs{
    Req : req,
  }
  err = p.CC.SendMsg("chainDeleteEdges", &args, thrift.CALL)
  if err != nil { return }
  return p.recvChainDeleteEdges()
}


func (p *GraphStorageServiceThreadsafeClient) recvChainDeleteEdges() (value *ExecResponse, err error) {
  var result GraphStorageServiceChainDeleteEdgesResult
  err = p.CC.RecvMsg("chainDeleteEdges", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) Get(req *KVGetRequest) (_r *KVGetResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceGetArgs{
    Req : req,
  }
  err = p.CC.SendMsg("get", &args, thrift.CALL)
  if err != nil { return }
  return p.recvGet()
}


func (p *GraphStorageServiceThreadsafeClient) recvGet() (value *KVGetResponse, err error) {
  var result GraphStorageServiceGetResult
  err = p.CC.RecvMsg("get", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) Put(req *KVPutRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServicePutArgs{
    Req : req,
  }
  err = p.CC.SendMsg("put", &args, thrift.CALL)
  if err != nil { return }
  return p.recvPut()
}


func (p *GraphStorageServiceThreadsafeClient) recvPut() (value *ExecResponse, err error) {
  var result GraphStorageServicePutResult
  err = p.CC.RecvMsg("put", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceThreadsafeClient) Remove(req *KVRemoveRequest) (_r *ExecResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  args := GraphStorageServiceRemoveArgs{
    Req : req,
  }
  err = p.CC.SendMsg("remove", &args, thrift.CALL)
  if err != nil { return }
  return p.recvRemove()
}


func (p *GraphStorageServiceThreadsafeClient) recvRemove() (value *ExecResponse, err error) {
  var result GraphStorageServiceRemoveResult
  err = p.CC.RecvMsg("remove", &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphStorageServiceChannelClient struct {
  RequestChannel thrift.RequestChannel
}

func (c *GraphStorageServiceChannelClient) Close() error {
  return c.RequestChannel.Close()
}

func (c *GraphStorageServiceChannelClient) IsOpen() bool {
  return c.RequestChannel.IsOpen()
}

func (c *GraphStorageServiceChannelClient) Open() error {
  return c.RequestChannel.Open()
}

func NewGraphStorageServiceChannelClient(channel thrift.RequestChannel) *GraphStorageServiceChannelClient {
  return &GraphStorageServiceChannelClient{RequestChannel: channel}
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) GetNeighbors(ctx context.Context, req *GetNeighborsRequest) (_r *GetNeighborsResponse, err error) {
  args := GraphStorageServiceGetNeighborsArgs{
    Req : req,
  }
  var result GraphStorageServiceGetNeighborsResult
  err = p.RequestChannel.Call(ctx, "getNeighbors", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) GetDstBySrc(ctx context.Context, req *GetDstBySrcRequest) (_r *GetDstBySrcResponse, err error) {
  args := GraphStorageServiceGetDstBySrcArgs{
    Req : req,
  }
  var result GraphStorageServiceGetDstBySrcResult
  err = p.RequestChannel.Call(ctx, "getDstBySrc", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) GetProps(ctx context.Context, req *GetPropRequest) (_r *GetPropResponse, err error) {
  args := GraphStorageServiceGetPropsArgs{
    Req : req,
  }
  var result GraphStorageServiceGetPropsResult
  err = p.RequestChannel.Call(ctx, "getProps", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) AddVertices(ctx context.Context, req *AddVerticesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceAddVerticesArgs{
    Req : req,
  }
  var result GraphStorageServiceAddVerticesResult
  err = p.RequestChannel.Call(ctx, "addVertices", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) AddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceAddEdgesArgs{
    Req : req,
  }
  var result GraphStorageServiceAddEdgesResult
  err = p.RequestChannel.Call(ctx, "addEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) DeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteEdgesArgs{
    Req : req,
  }
  var result GraphStorageServiceDeleteEdgesResult
  err = p.RequestChannel.Call(ctx, "deleteEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) DeleteVertices(ctx context.Context, req *DeleteVerticesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteVerticesArgs{
    Req : req,
  }
  var result GraphStorageServiceDeleteVerticesResult
  err = p.RequestChannel.Call(ctx, "deleteVertices", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) DeleteTags(ctx context.Context, req *DeleteTagsRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceDeleteTagsArgs{
    Req : req,
  }
  var result GraphStorageServiceDeleteTagsResult
  err = p.RequestChannel.Call(ctx, "deleteTags", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) UpdateVertex(ctx context.Context, req *UpdateVertexRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceUpdateVertexArgs{
    Req : req,
  }
  var result GraphStorageServiceUpdateVertexResult
  err = p.RequestChannel.Call(ctx, "updateVertex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) UpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceUpdateEdgeArgs{
    Req : req,
  }
  var result GraphStorageServiceUpdateEdgeResult
  err = p.RequestChannel.Call(ctx, "updateEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) ScanVertex(ctx context.Context, req *ScanVertexRequest) (_r *ScanResponse, err error) {
  args := GraphStorageServiceScanVertexArgs{
    Req : req,
  }
  var result GraphStorageServiceScanVertexResult
  err = p.RequestChannel.Call(ctx, "scanVertex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) ScanEdge(ctx context.Context, req *ScanEdgeRequest) (_r *ScanResponse, err error) {
  args := GraphStorageServiceScanEdgeArgs{
    Req : req,
  }
  var result GraphStorageServiceScanEdgeResult
  err = p.RequestChannel.Call(ctx, "scanEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) GetUUID(ctx context.Context, req *GetUUIDReq) (_r *GetUUIDResp, err error) {
  args := GraphStorageServiceGetUUIDArgs{
    Req : req,
  }
  var result GraphStorageServiceGetUUIDResult
  err = p.RequestChannel.Call(ctx, "getUUID", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) LookupIndex(ctx context.Context, req *LookupIndexRequest) (_r *LookupIndexResp, err error) {
  args := GraphStorageServiceLookupIndexArgs{
    Req : req,
  }
  var result GraphStorageServiceLookupIndexResult
  err = p.RequestChannel.Call(ctx, "lookupIndex", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) LookupAndTraverse(ctx context.Context, req *LookupAndTraverseRequest) (_r *GetNeighborsResponse, err error) {
  args := GraphStorageServiceLookupAndTraverseArgs{
    Req : req,
  }
  var result GraphStorageServiceLookupAndTraverseResult
  err = p.RequestChannel.Call(ctx, "lookupAndTraverse", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) ChainUpdateEdge(ctx context.Context, req *UpdateEdgeRequest) (_r *UpdateResponse, err error) {
  args := GraphStorageServiceChainUpdateEdgeArgs{
    Req : req,
  }
  var result GraphStorageServiceChainUpdateEdgeResult
  err = p.RequestChannel.Call(ctx, "chainUpdateEdge", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) ChainAddEdges(ctx context.Context, req *AddEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceChainAddEdgesArgs{
    Req : req,
  }
  var result GraphStorageServiceChainAddEdgesResult
  err = p.RequestChannel.Call(ctx, "chainAddEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) ChainDeleteEdges(ctx context.Context, req *DeleteEdgesRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceChainDeleteEdgesArgs{
    Req : req,
  }
  var result GraphStorageServiceChainDeleteEdgesResult
  err = p.RequestChannel.Call(ctx, "chainDeleteEdges", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) Get(ctx context.Context, req *KVGetRequest) (_r *KVGetResponse, err error) {
  args := GraphStorageServiceGetArgs{
    Req : req,
  }
  var result GraphStorageServiceGetResult
  err = p.RequestChannel.Call(ctx, "get", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) Put(ctx context.Context, req *KVPutRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServicePutArgs{
    Req : req,
  }
  var result GraphStorageServicePutResult
  err = p.RequestChannel.Call(ctx, "put", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *GraphStorageServiceChannelClient) Remove(ctx context.Context, req *KVRemoveRequest) (_r *ExecResponse, err error) {
  args := GraphStorageServiceRemoveArgs{
    Req : req,
  }
  var result GraphStorageServiceRemoveResult
  err = p.RequestChannel.Call(ctx, "remove", &args, &result)
  if err != nil { return }

  return result.GetSuccess(), nil
}


type GraphStorageServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunctionContext
  functionServiceMap map[string]string
  handler GraphStorageService
}

func (p *GraphStorageServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
  p.processorMap[key] = processor
}

func (p *GraphStorageServiceProcessor) AddToFunctionServiceMap(key, service string) {
  p.functionServiceMap[key] = service
}

func (p *GraphStorageServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *GraphStorageServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
  return p.processorMap
}

func (p *GraphStorageServiceProcessor) FunctionServiceMap() map[string]string {
  return p.functionServiceMap
}

func NewGraphStorageServiceProcessor(handler GraphStorageService) *GraphStorageServiceProcessor {
  self101 := &GraphStorageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunctionContext), functionServiceMap:make(map[string]string)}
  self101.processorMap["getNeighbors"] = &graphStorageServiceProcessorGetNeighbors{handler:handler}
  self101.processorMap["getDstBySrc"] = &graphStorageServiceProcessorGetDstBySrc{handler:handler}
  self101.processorMap["getProps"] = &graphStorageServiceProcessorGetProps{handler:handler}
  self101.processorMap["addVertices"] = &graphStorageServiceProcessorAddVertices{handler:handler}
  self101.processorMap["addEdges"] = &graphStorageServiceProcessorAddEdges{handler:handler}
  self101.processorMap["deleteEdges"] = &graphStorageServiceProcessorDeleteEdges{handler:handler}
  self101.processorMap["deleteVertices"] = &graphStorageServiceProcessorDeleteVertices{handler:handler}
  self101.processorMap["deleteTags"] = &graphStorageServiceProcessorDeleteTags{handler:handler}
  self101.processorMap["updateVertex"] = &graphStorageServiceProcessorUpdateVertex{handler:handler}
  self101.processorMap["updateEdge"] = &graphStorageServiceProcessorUpdateEdge{handler:handler}
  self101.processorMap["scanVertex"] = &graphStorageServiceProcessorScanVertex{handler:handler}
  self101.processorMap["scanEdge"] = &graphStorageServiceProcessorScanEdge{handler:handler}
  self101.processorMap["getUUID"] = &graphStorageServiceProcessorGetUUID{handler:handler}
  self101.processorMap["lookupIndex"] = &graphStorageServiceProcessorLookupIndex{handler:handler}
  self101.processorMap["lookupAndTraverse"] = &graphStorageServiceProcessorLookupAndTraverse{handler:handler}
  self101.processorMap["chainUpdateEdge"] = &graphStorageServiceProcessorChainUpdateEdge{handler:handler}
  self101.processorMap["chainAddEdges"] = &graphStorageServiceProcessorChainAddEdges{handler:handler}
  self101.processorMap["chainDeleteEdges"] = &graphStorageServiceProcessorChainDeleteEdges{handler:handler}
  self101.processorMap["get"] = &graphStorageServiceProcessorGet{handler:handler}
  self101.processorMap["put"] = &graphStorageServiceProcessorPut{handler:handler}
  self101.processorMap["remove"] = &graphStorageServiceProcessorRemove{handler:handler}
  self101.functionServiceMap["getNeighbors"] = "GraphStorageService"
  self101.functionServiceMap["getDstBySrc"] = "GraphStorageService"
  self101.functionServiceMap["getProps"] = "GraphStorageService"
  self101.functionServiceMap["addVertices"] = "GraphStorageService"
  self101.functionServiceMap["addEdges"] = "GraphStorageService"
  self101.functionServiceMap["deleteEdges"] = "GraphStorageService"
  self101.functionServiceMap["deleteVertices"] = "GraphStorageService"
  self101.functionServiceMap["deleteTags"] = "GraphStorageService"
  self101.functionServiceMap["updateVertex"] = "GraphStorageService"
  self101.functionServiceMap["updateEdge"] = "GraphStorageService"
  self101.functionServiceMap["scanVertex"] = "GraphStorageService"
  self101.functionServiceMap["scanEdge"] = "GraphStorageService"
  self101.functionServiceMap["getUUID"] = "GraphStorageService"
  self101.functionServiceMap["lookupIndex"] = "GraphStorageService"
  self101.functionServiceMap["lookupAndTraverse"] = "GraphStorageService"
  self101.functionServiceMap["chainUpdateEdge"] = "GraphStorageService"
  self101.functionServiceMap["chainAddEdges"] = "GraphStorageService"
  self101.functionServiceMap["chainDeleteEdges"] = "GraphStorageService"
  self101.functionServiceMap["get"] = "GraphStorageService"
  self101.functionServiceMap["put"] = "GraphStorageService"
  self101.functionServiceMap["remove"] = "GraphStorageService"
  return self101
}

type graphStorageServiceProcessorGetNeighbors struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceGetNeighborsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorGetNeighbors) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceGetNeighborsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorGetNeighbors) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getNeighbors", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorGetNeighbors) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceGetNeighborsArgs)
  var result GraphStorageServiceGetNeighborsResult
  if retval, err := p.handler.GetNeighbors(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNeighbors: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorGetDstBySrc struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceGetDstBySrcResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorGetDstBySrc) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceGetDstBySrcArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorGetDstBySrc) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getDstBySrc", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorGetDstBySrc) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceGetDstBySrcArgs)
  var result GraphStorageServiceGetDstBySrcResult
  if retval, err := p.handler.GetDstBySrc(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDstBySrc: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorGetProps struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceGetPropsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorGetProps) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceGetPropsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorGetProps) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getProps", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorGetProps) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceGetPropsArgs)
  var result GraphStorageServiceGetPropsResult
  if retval, err := p.handler.GetProps(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProps: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorAddVertices struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceAddVerticesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorAddVertices) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceAddVerticesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorAddVertices) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addVertices", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorAddVertices) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceAddVerticesArgs)
  var result GraphStorageServiceAddVerticesResult
  if retval, err := p.handler.AddVertices(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addVertices: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorAddEdges struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceAddEdgesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorAddEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceAddEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorAddEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("addEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorAddEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceAddEdgesArgs)
  var result GraphStorageServiceAddEdgesResult
  if retval, err := p.handler.AddEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorDeleteEdges struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceDeleteEdgesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorDeleteEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceDeleteEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorDeleteEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorDeleteEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceDeleteEdgesArgs)
  var result GraphStorageServiceDeleteEdgesResult
  if retval, err := p.handler.DeleteEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorDeleteVertices struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceDeleteVerticesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorDeleteVertices) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceDeleteVerticesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorDeleteVertices) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteVertices", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorDeleteVertices) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceDeleteVerticesArgs)
  var result GraphStorageServiceDeleteVerticesResult
  if retval, err := p.handler.DeleteVertices(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteVertices: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorDeleteTags struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceDeleteTagsResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorDeleteTags) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceDeleteTagsArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorDeleteTags) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("deleteTags", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorDeleteTags) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceDeleteTagsArgs)
  var result GraphStorageServiceDeleteTagsResult
  if retval, err := p.handler.DeleteTags(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTags: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorUpdateVertex struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceUpdateVertexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorUpdateVertex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceUpdateVertexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorUpdateVertex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("updateVertex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorUpdateVertex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceUpdateVertexArgs)
  var result GraphStorageServiceUpdateVertexResult
  if retval, err := p.handler.UpdateVertex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateVertex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorUpdateEdge struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceUpdateEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorUpdateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceUpdateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorUpdateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("updateEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorUpdateEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceUpdateEdgeArgs)
  var result GraphStorageServiceUpdateEdgeResult
  if retval, err := p.handler.UpdateEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorScanVertex struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceScanVertexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorScanVertex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceScanVertexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorScanVertex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("scanVertex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorScanVertex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceScanVertexArgs)
  var result GraphStorageServiceScanVertexResult
  if retval, err := p.handler.ScanVertex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scanVertex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorScanEdge struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceScanEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorScanEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceScanEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorScanEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("scanEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorScanEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceScanEdgeArgs)
  var result GraphStorageServiceScanEdgeResult
  if retval, err := p.handler.ScanEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scanEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorGetUUID struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceGetUUIDResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorGetUUID) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceGetUUIDArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorGetUUID) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("getUUID", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorGetUUID) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceGetUUIDArgs)
  var result GraphStorageServiceGetUUIDResult
  if retval, err := p.handler.GetUUID(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUUID: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorLookupIndex struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceLookupIndexResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorLookupIndex) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceLookupIndexArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorLookupIndex) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("lookupIndex", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorLookupIndex) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceLookupIndexArgs)
  var result GraphStorageServiceLookupIndexResult
  if retval, err := p.handler.LookupIndex(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupIndex: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorLookupAndTraverse struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceLookupAndTraverseResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorLookupAndTraverse) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceLookupAndTraverseArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorLookupAndTraverse) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("lookupAndTraverse", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorLookupAndTraverse) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceLookupAndTraverseArgs)
  var result GraphStorageServiceLookupAndTraverseResult
  if retval, err := p.handler.LookupAndTraverse(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lookupAndTraverse: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorChainUpdateEdge struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceChainUpdateEdgeResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorChainUpdateEdge) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceChainUpdateEdgeArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorChainUpdateEdge) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("chainUpdateEdge", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorChainUpdateEdge) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceChainUpdateEdgeArgs)
  var result GraphStorageServiceChainUpdateEdgeResult
  if retval, err := p.handler.ChainUpdateEdge(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainUpdateEdge: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorChainAddEdges struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceChainAddEdgesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorChainAddEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceChainAddEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorChainAddEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("chainAddEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorChainAddEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceChainAddEdgesArgs)
  var result GraphStorageServiceChainAddEdgesResult
  if retval, err := p.handler.ChainAddEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainAddEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorChainDeleteEdges struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceChainDeleteEdgesResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorChainDeleteEdges) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceChainDeleteEdgesArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorChainDeleteEdges) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("chainDeleteEdges", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorChainDeleteEdges) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceChainDeleteEdgesArgs)
  var result GraphStorageServiceChainDeleteEdgesResult
  if retval, err := p.handler.ChainDeleteEdges(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing chainDeleteEdges: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorGet struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceGetResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorGet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceGetArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorGet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("get", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorGet) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceGetArgs)
  var result GraphStorageServiceGetResult
  if retval, err := p.handler.Get(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorPut struct {
  handler GraphStorageService
}

func (p *GraphStorageServicePutResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorPut) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServicePutArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorPut) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("put", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorPut) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServicePutArgs)
  var result GraphStorageServicePutResult
  if retval, err := p.handler.Put(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type graphStorageServiceProcessorRemove struct {
  handler GraphStorageService
}

func (p *GraphStorageServiceRemoveResult) Exception() thrift.WritableException {
  if p == nil { return nil }
  return nil
}

func (p *graphStorageServiceProcessorRemove) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := GraphStorageServiceRemoveArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *graphStorageServiceProcessorRemove) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch result.(type) {
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("remove", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *graphStorageServiceProcessorRemove) RunContext(ctx context.Context, argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*GraphStorageServiceRemoveArgs)
  var result GraphStorageServiceRemoveResult
  if retval, err := p.handler.Remove(ctx, args.Req); err != nil {
    switch err.(type) {
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type GraphStorageServiceGetNeighborsArgs struct {
  thrift.IRequest
  Req *GetNeighborsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetNeighborsArgs() *GraphStorageServiceGetNeighborsArgs {
  return &GraphStorageServiceGetNeighborsArgs{
    Req: NewGetNeighborsRequest(),
  }
}

var GraphStorageServiceGetNeighborsArgs_Req_DEFAULT *GetNeighborsRequest
func (p *GraphStorageServiceGetNeighborsArgs) GetReq() *GetNeighborsRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetNeighborsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetNeighborsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceGetNeighborsArgsBuilder struct {
  obj *GraphStorageServiceGetNeighborsArgs
}

func NewGraphStorageServiceGetNeighborsArgsBuilder() *GraphStorageServiceGetNeighborsArgsBuilder{
  return &GraphStorageServiceGetNeighborsArgsBuilder{
    obj: NewGraphStorageServiceGetNeighborsArgs(),
  }
}

func (p GraphStorageServiceGetNeighborsArgsBuilder) Emit() *GraphStorageServiceGetNeighborsArgs{
  return &GraphStorageServiceGetNeighborsArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceGetNeighborsArgsBuilder) Req(req *GetNeighborsRequest) *GraphStorageServiceGetNeighborsArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceGetNeighborsArgs) SetReq(req *GetNeighborsRequest) *GraphStorageServiceGetNeighborsArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceGetNeighborsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetNeighborsRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getNeighbors_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetNeighborsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetNeighborsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceGetNeighborsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceGetNeighborsResult struct {
  thrift.IResponse
  Success *GetNeighborsResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetNeighborsResult() *GraphStorageServiceGetNeighborsResult {
  return &GraphStorageServiceGetNeighborsResult{}
}

var GraphStorageServiceGetNeighborsResult_Success_DEFAULT *GetNeighborsResponse
func (p *GraphStorageServiceGetNeighborsResult) GetSuccess() *GetNeighborsResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetNeighborsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetNeighborsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceGetNeighborsResultBuilder struct {
  obj *GraphStorageServiceGetNeighborsResult
}

func NewGraphStorageServiceGetNeighborsResultBuilder() *GraphStorageServiceGetNeighborsResultBuilder{
  return &GraphStorageServiceGetNeighborsResultBuilder{
    obj: NewGraphStorageServiceGetNeighborsResult(),
  }
}

func (p GraphStorageServiceGetNeighborsResultBuilder) Emit() *GraphStorageServiceGetNeighborsResult{
  return &GraphStorageServiceGetNeighborsResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceGetNeighborsResultBuilder) Success(success *GetNeighborsResponse) *GraphStorageServiceGetNeighborsResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceGetNeighborsResult) SetSuccess(success *GetNeighborsResponse) *GraphStorageServiceGetNeighborsResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceGetNeighborsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetNeighborsResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getNeighbors_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetNeighborsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetNeighborsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceGetNeighborsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceGetDstBySrcArgs struct {
  thrift.IRequest
  Req *GetDstBySrcRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetDstBySrcArgs() *GraphStorageServiceGetDstBySrcArgs {
  return &GraphStorageServiceGetDstBySrcArgs{
    Req: NewGetDstBySrcRequest(),
  }
}

var GraphStorageServiceGetDstBySrcArgs_Req_DEFAULT *GetDstBySrcRequest
func (p *GraphStorageServiceGetDstBySrcArgs) GetReq() *GetDstBySrcRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetDstBySrcArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetDstBySrcArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceGetDstBySrcArgsBuilder struct {
  obj *GraphStorageServiceGetDstBySrcArgs
}

func NewGraphStorageServiceGetDstBySrcArgsBuilder() *GraphStorageServiceGetDstBySrcArgsBuilder{
  return &GraphStorageServiceGetDstBySrcArgsBuilder{
    obj: NewGraphStorageServiceGetDstBySrcArgs(),
  }
}

func (p GraphStorageServiceGetDstBySrcArgsBuilder) Emit() *GraphStorageServiceGetDstBySrcArgs{
  return &GraphStorageServiceGetDstBySrcArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceGetDstBySrcArgsBuilder) Req(req *GetDstBySrcRequest) *GraphStorageServiceGetDstBySrcArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceGetDstBySrcArgs) SetReq(req *GetDstBySrcRequest) *GraphStorageServiceGetDstBySrcArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceGetDstBySrcArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetDstBySrcRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDstBySrc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetDstBySrcArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceGetDstBySrcArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceGetDstBySrcResult struct {
  thrift.IResponse
  Success *GetDstBySrcResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetDstBySrcResult() *GraphStorageServiceGetDstBySrcResult {
  return &GraphStorageServiceGetDstBySrcResult{}
}

var GraphStorageServiceGetDstBySrcResult_Success_DEFAULT *GetDstBySrcResponse
func (p *GraphStorageServiceGetDstBySrcResult) GetSuccess() *GetDstBySrcResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetDstBySrcResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetDstBySrcResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceGetDstBySrcResultBuilder struct {
  obj *GraphStorageServiceGetDstBySrcResult
}

func NewGraphStorageServiceGetDstBySrcResultBuilder() *GraphStorageServiceGetDstBySrcResultBuilder{
  return &GraphStorageServiceGetDstBySrcResultBuilder{
    obj: NewGraphStorageServiceGetDstBySrcResult(),
  }
}

func (p GraphStorageServiceGetDstBySrcResultBuilder) Emit() *GraphStorageServiceGetDstBySrcResult{
  return &GraphStorageServiceGetDstBySrcResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceGetDstBySrcResultBuilder) Success(success *GetDstBySrcResponse) *GraphStorageServiceGetDstBySrcResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceGetDstBySrcResult) SetSuccess(success *GetDstBySrcResponse) *GraphStorageServiceGetDstBySrcResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceGetDstBySrcResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetDstBySrcResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getDstBySrc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetDstBySrcResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetDstBySrcResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceGetDstBySrcResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceGetPropsArgs struct {
  thrift.IRequest
  Req *GetPropRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetPropsArgs() *GraphStorageServiceGetPropsArgs {
  return &GraphStorageServiceGetPropsArgs{
    Req: NewGetPropRequest(),
  }
}

var GraphStorageServiceGetPropsArgs_Req_DEFAULT *GetPropRequest
func (p *GraphStorageServiceGetPropsArgs) GetReq() *GetPropRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetPropsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetPropsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceGetPropsArgsBuilder struct {
  obj *GraphStorageServiceGetPropsArgs
}

func NewGraphStorageServiceGetPropsArgsBuilder() *GraphStorageServiceGetPropsArgsBuilder{
  return &GraphStorageServiceGetPropsArgsBuilder{
    obj: NewGraphStorageServiceGetPropsArgs(),
  }
}

func (p GraphStorageServiceGetPropsArgsBuilder) Emit() *GraphStorageServiceGetPropsArgs{
  return &GraphStorageServiceGetPropsArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceGetPropsArgsBuilder) Req(req *GetPropRequest) *GraphStorageServiceGetPropsArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceGetPropsArgs) SetReq(req *GetPropRequest) *GraphStorageServiceGetPropsArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceGetPropsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetPropRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getProps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetPropsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetPropsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceGetPropsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceGetPropsResult struct {
  thrift.IResponse
  Success *GetPropResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetPropsResult() *GraphStorageServiceGetPropsResult {
  return &GraphStorageServiceGetPropsResult{}
}

var GraphStorageServiceGetPropsResult_Success_DEFAULT *GetPropResponse
func (p *GraphStorageServiceGetPropsResult) GetSuccess() *GetPropResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetPropsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetPropsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceGetPropsResultBuilder struct {
  obj *GraphStorageServiceGetPropsResult
}

func NewGraphStorageServiceGetPropsResultBuilder() *GraphStorageServiceGetPropsResultBuilder{
  return &GraphStorageServiceGetPropsResultBuilder{
    obj: NewGraphStorageServiceGetPropsResult(),
  }
}

func (p GraphStorageServiceGetPropsResultBuilder) Emit() *GraphStorageServiceGetPropsResult{
  return &GraphStorageServiceGetPropsResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceGetPropsResultBuilder) Success(success *GetPropResponse) *GraphStorageServiceGetPropsResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceGetPropsResult) SetSuccess(success *GetPropResponse) *GraphStorageServiceGetPropsResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceGetPropsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetPropResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetPropsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getProps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetPropsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetPropsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceGetPropsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceAddVerticesArgs struct {
  thrift.IRequest
  Req *AddVerticesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceAddVerticesArgs() *GraphStorageServiceAddVerticesArgs {
  return &GraphStorageServiceAddVerticesArgs{
    Req: NewAddVerticesRequest(),
  }
}

var GraphStorageServiceAddVerticesArgs_Req_DEFAULT *AddVerticesRequest
func (p *GraphStorageServiceAddVerticesArgs) GetReq() *AddVerticesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceAddVerticesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceAddVerticesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceAddVerticesArgsBuilder struct {
  obj *GraphStorageServiceAddVerticesArgs
}

func NewGraphStorageServiceAddVerticesArgsBuilder() *GraphStorageServiceAddVerticesArgsBuilder{
  return &GraphStorageServiceAddVerticesArgsBuilder{
    obj: NewGraphStorageServiceAddVerticesArgs(),
  }
}

func (p GraphStorageServiceAddVerticesArgsBuilder) Emit() *GraphStorageServiceAddVerticesArgs{
  return &GraphStorageServiceAddVerticesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceAddVerticesArgsBuilder) Req(req *AddVerticesRequest) *GraphStorageServiceAddVerticesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceAddVerticesArgs) SetReq(req *AddVerticesRequest) *GraphStorageServiceAddVerticesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceAddVerticesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddVerticesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addVertices_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddVerticesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceAddVerticesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceAddVerticesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceAddVerticesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceAddVerticesResult() *GraphStorageServiceAddVerticesResult {
  return &GraphStorageServiceAddVerticesResult{}
}

var GraphStorageServiceAddVerticesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceAddVerticesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceAddVerticesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceAddVerticesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceAddVerticesResultBuilder struct {
  obj *GraphStorageServiceAddVerticesResult
}

func NewGraphStorageServiceAddVerticesResultBuilder() *GraphStorageServiceAddVerticesResultBuilder{
  return &GraphStorageServiceAddVerticesResultBuilder{
    obj: NewGraphStorageServiceAddVerticesResult(),
  }
}

func (p GraphStorageServiceAddVerticesResultBuilder) Emit() *GraphStorageServiceAddVerticesResult{
  return &GraphStorageServiceAddVerticesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceAddVerticesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceAddVerticesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceAddVerticesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceAddVerticesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceAddVerticesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addVertices_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddVerticesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceAddVerticesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceAddVerticesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceAddEdgesArgs struct {
  thrift.IRequest
  Req *AddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceAddEdgesArgs() *GraphStorageServiceAddEdgesArgs {
  return &GraphStorageServiceAddEdgesArgs{
    Req: NewAddEdgesRequest(),
  }
}

var GraphStorageServiceAddEdgesArgs_Req_DEFAULT *AddEdgesRequest
func (p *GraphStorageServiceAddEdgesArgs) GetReq() *AddEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceAddEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceAddEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceAddEdgesArgsBuilder struct {
  obj *GraphStorageServiceAddEdgesArgs
}

func NewGraphStorageServiceAddEdgesArgsBuilder() *GraphStorageServiceAddEdgesArgsBuilder{
  return &GraphStorageServiceAddEdgesArgsBuilder{
    obj: NewGraphStorageServiceAddEdgesArgs(),
  }
}

func (p GraphStorageServiceAddEdgesArgsBuilder) Emit() *GraphStorageServiceAddEdgesArgs{
  return &GraphStorageServiceAddEdgesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceAddEdgesArgsBuilder) Req(req *AddEdgesRequest) *GraphStorageServiceAddEdgesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceAddEdgesArgs) SetReq(req *AddEdgesRequest) *GraphStorageServiceAddEdgesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceAddEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddEdgesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceAddEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceAddEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceAddEdgesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceAddEdgesResult() *GraphStorageServiceAddEdgesResult {
  return &GraphStorageServiceAddEdgesResult{}
}

var GraphStorageServiceAddEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceAddEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceAddEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceAddEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceAddEdgesResultBuilder struct {
  obj *GraphStorageServiceAddEdgesResult
}

func NewGraphStorageServiceAddEdgesResultBuilder() *GraphStorageServiceAddEdgesResultBuilder{
  return &GraphStorageServiceAddEdgesResultBuilder{
    obj: NewGraphStorageServiceAddEdgesResult(),
  }
}

func (p GraphStorageServiceAddEdgesResultBuilder) Emit() *GraphStorageServiceAddEdgesResult{
  return &GraphStorageServiceAddEdgesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceAddEdgesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceAddEdgesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceAddEdgesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceAddEdgesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceAddEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("addEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceAddEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceAddEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceAddEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteEdgesArgs struct {
  thrift.IRequest
  Req *DeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteEdgesArgs() *GraphStorageServiceDeleteEdgesArgs {
  return &GraphStorageServiceDeleteEdgesArgs{
    Req: NewDeleteEdgesRequest(),
  }
}

var GraphStorageServiceDeleteEdgesArgs_Req_DEFAULT *DeleteEdgesRequest
func (p *GraphStorageServiceDeleteEdgesArgs) GetReq() *DeleteEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceDeleteEdgesArgsBuilder struct {
  obj *GraphStorageServiceDeleteEdgesArgs
}

func NewGraphStorageServiceDeleteEdgesArgsBuilder() *GraphStorageServiceDeleteEdgesArgsBuilder{
  return &GraphStorageServiceDeleteEdgesArgsBuilder{
    obj: NewGraphStorageServiceDeleteEdgesArgs(),
  }
}

func (p GraphStorageServiceDeleteEdgesArgsBuilder) Emit() *GraphStorageServiceDeleteEdgesArgs{
  return &GraphStorageServiceDeleteEdgesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceDeleteEdgesArgsBuilder) Req(req *DeleteEdgesRequest) *GraphStorageServiceDeleteEdgesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceDeleteEdgesArgs) SetReq(req *DeleteEdgesRequest) *GraphStorageServiceDeleteEdgesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceDeleteEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDeleteEdgesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteEdgesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteEdgesResult() *GraphStorageServiceDeleteEdgesResult {
  return &GraphStorageServiceDeleteEdgesResult{}
}

var GraphStorageServiceDeleteEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceDeleteEdgesResultBuilder struct {
  obj *GraphStorageServiceDeleteEdgesResult
}

func NewGraphStorageServiceDeleteEdgesResultBuilder() *GraphStorageServiceDeleteEdgesResultBuilder{
  return &GraphStorageServiceDeleteEdgesResultBuilder{
    obj: NewGraphStorageServiceDeleteEdgesResult(),
  }
}

func (p GraphStorageServiceDeleteEdgesResultBuilder) Emit() *GraphStorageServiceDeleteEdgesResult{
  return &GraphStorageServiceDeleteEdgesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceDeleteEdgesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceDeleteEdgesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceDeleteEdgesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceDeleteEdgesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceDeleteEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteVerticesArgs struct {
  thrift.IRequest
  Req *DeleteVerticesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteVerticesArgs() *GraphStorageServiceDeleteVerticesArgs {
  return &GraphStorageServiceDeleteVerticesArgs{
    Req: NewDeleteVerticesRequest(),
  }
}

var GraphStorageServiceDeleteVerticesArgs_Req_DEFAULT *DeleteVerticesRequest
func (p *GraphStorageServiceDeleteVerticesArgs) GetReq() *DeleteVerticesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteVerticesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteVerticesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceDeleteVerticesArgsBuilder struct {
  obj *GraphStorageServiceDeleteVerticesArgs
}

func NewGraphStorageServiceDeleteVerticesArgsBuilder() *GraphStorageServiceDeleteVerticesArgsBuilder{
  return &GraphStorageServiceDeleteVerticesArgsBuilder{
    obj: NewGraphStorageServiceDeleteVerticesArgs(),
  }
}

func (p GraphStorageServiceDeleteVerticesArgsBuilder) Emit() *GraphStorageServiceDeleteVerticesArgs{
  return &GraphStorageServiceDeleteVerticesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceDeleteVerticesArgsBuilder) Req(req *DeleteVerticesRequest) *GraphStorageServiceDeleteVerticesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceDeleteVerticesArgs) SetReq(req *DeleteVerticesRequest) *GraphStorageServiceDeleteVerticesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceDeleteVerticesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDeleteVerticesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteVertices_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteVerticesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteVerticesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteVerticesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteVerticesResult() *GraphStorageServiceDeleteVerticesResult {
  return &GraphStorageServiceDeleteVerticesResult{}
}

var GraphStorageServiceDeleteVerticesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteVerticesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteVerticesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteVerticesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceDeleteVerticesResultBuilder struct {
  obj *GraphStorageServiceDeleteVerticesResult
}

func NewGraphStorageServiceDeleteVerticesResultBuilder() *GraphStorageServiceDeleteVerticesResultBuilder{
  return &GraphStorageServiceDeleteVerticesResultBuilder{
    obj: NewGraphStorageServiceDeleteVerticesResult(),
  }
}

func (p GraphStorageServiceDeleteVerticesResultBuilder) Emit() *GraphStorageServiceDeleteVerticesResult{
  return &GraphStorageServiceDeleteVerticesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceDeleteVerticesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceDeleteVerticesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceDeleteVerticesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceDeleteVerticesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceDeleteVerticesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteVertices_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteVerticesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteVerticesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteVerticesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceDeleteTagsArgs struct {
  thrift.IRequest
  Req *DeleteTagsRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceDeleteTagsArgs() *GraphStorageServiceDeleteTagsArgs {
  return &GraphStorageServiceDeleteTagsArgs{
    Req: NewDeleteTagsRequest(),
  }
}

var GraphStorageServiceDeleteTagsArgs_Req_DEFAULT *DeleteTagsRequest
func (p *GraphStorageServiceDeleteTagsArgs) GetReq() *DeleteTagsRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceDeleteTagsArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceDeleteTagsArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceDeleteTagsArgsBuilder struct {
  obj *GraphStorageServiceDeleteTagsArgs
}

func NewGraphStorageServiceDeleteTagsArgsBuilder() *GraphStorageServiceDeleteTagsArgsBuilder{
  return &GraphStorageServiceDeleteTagsArgsBuilder{
    obj: NewGraphStorageServiceDeleteTagsArgs(),
  }
}

func (p GraphStorageServiceDeleteTagsArgsBuilder) Emit() *GraphStorageServiceDeleteTagsArgs{
  return &GraphStorageServiceDeleteTagsArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceDeleteTagsArgsBuilder) Req(req *DeleteTagsRequest) *GraphStorageServiceDeleteTagsArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceDeleteTagsArgs) SetReq(req *DeleteTagsRequest) *GraphStorageServiceDeleteTagsArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceDeleteTagsArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDeleteTagsRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteTags_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteTagsArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceDeleteTagsArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteTagsArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceDeleteTagsResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceDeleteTagsResult() *GraphStorageServiceDeleteTagsResult {
  return &GraphStorageServiceDeleteTagsResult{}
}

var GraphStorageServiceDeleteTagsResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceDeleteTagsResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceDeleteTagsResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceDeleteTagsResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceDeleteTagsResultBuilder struct {
  obj *GraphStorageServiceDeleteTagsResult
}

func NewGraphStorageServiceDeleteTagsResultBuilder() *GraphStorageServiceDeleteTagsResultBuilder{
  return &GraphStorageServiceDeleteTagsResultBuilder{
    obj: NewGraphStorageServiceDeleteTagsResult(),
  }
}

func (p GraphStorageServiceDeleteTagsResultBuilder) Emit() *GraphStorageServiceDeleteTagsResult{
  return &GraphStorageServiceDeleteTagsResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceDeleteTagsResultBuilder) Success(success *ExecResponse) *GraphStorageServiceDeleteTagsResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceDeleteTagsResult) SetSuccess(success *ExecResponse) *GraphStorageServiceDeleteTagsResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceDeleteTagsResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("deleteTags_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceDeleteTagsResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceDeleteTagsResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceDeleteTagsResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceUpdateVertexArgs struct {
  thrift.IRequest
  Req *UpdateVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceUpdateVertexArgs() *GraphStorageServiceUpdateVertexArgs {
  return &GraphStorageServiceUpdateVertexArgs{
    Req: NewUpdateVertexRequest(),
  }
}

var GraphStorageServiceUpdateVertexArgs_Req_DEFAULT *UpdateVertexRequest
func (p *GraphStorageServiceUpdateVertexArgs) GetReq() *UpdateVertexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceUpdateVertexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceUpdateVertexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceUpdateVertexArgsBuilder struct {
  obj *GraphStorageServiceUpdateVertexArgs
}

func NewGraphStorageServiceUpdateVertexArgsBuilder() *GraphStorageServiceUpdateVertexArgsBuilder{
  return &GraphStorageServiceUpdateVertexArgsBuilder{
    obj: NewGraphStorageServiceUpdateVertexArgs(),
  }
}

func (p GraphStorageServiceUpdateVertexArgsBuilder) Emit() *GraphStorageServiceUpdateVertexArgs{
  return &GraphStorageServiceUpdateVertexArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceUpdateVertexArgsBuilder) Req(req *UpdateVertexRequest) *GraphStorageServiceUpdateVertexArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceUpdateVertexArgs) SetReq(req *UpdateVertexRequest) *GraphStorageServiceUpdateVertexArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceUpdateVertexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateVertexRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateVertex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateVertexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceUpdateVertexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceUpdateVertexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceUpdateVertexResult struct {
  thrift.IResponse
  Success *UpdateResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceUpdateVertexResult() *GraphStorageServiceUpdateVertexResult {
  return &GraphStorageServiceUpdateVertexResult{}
}

var GraphStorageServiceUpdateVertexResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceUpdateVertexResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceUpdateVertexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceUpdateVertexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceUpdateVertexResultBuilder struct {
  obj *GraphStorageServiceUpdateVertexResult
}

func NewGraphStorageServiceUpdateVertexResultBuilder() *GraphStorageServiceUpdateVertexResultBuilder{
  return &GraphStorageServiceUpdateVertexResultBuilder{
    obj: NewGraphStorageServiceUpdateVertexResult(),
  }
}

func (p GraphStorageServiceUpdateVertexResultBuilder) Emit() *GraphStorageServiceUpdateVertexResult{
  return &GraphStorageServiceUpdateVertexResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceUpdateVertexResultBuilder) Success(success *UpdateResponse) *GraphStorageServiceUpdateVertexResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceUpdateVertexResult) SetSuccess(success *UpdateResponse) *GraphStorageServiceUpdateVertexResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceUpdateVertexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewUpdateResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateVertex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateVertexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceUpdateVertexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceUpdateVertexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceUpdateEdgeArgs struct {
  thrift.IRequest
  Req *UpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceUpdateEdgeArgs() *GraphStorageServiceUpdateEdgeArgs {
  return &GraphStorageServiceUpdateEdgeArgs{
    Req: NewUpdateEdgeRequest(),
  }
}

var GraphStorageServiceUpdateEdgeArgs_Req_DEFAULT *UpdateEdgeRequest
func (p *GraphStorageServiceUpdateEdgeArgs) GetReq() *UpdateEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceUpdateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceUpdateEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceUpdateEdgeArgsBuilder struct {
  obj *GraphStorageServiceUpdateEdgeArgs
}

func NewGraphStorageServiceUpdateEdgeArgsBuilder() *GraphStorageServiceUpdateEdgeArgsBuilder{
  return &GraphStorageServiceUpdateEdgeArgsBuilder{
    obj: NewGraphStorageServiceUpdateEdgeArgs(),
  }
}

func (p GraphStorageServiceUpdateEdgeArgsBuilder) Emit() *GraphStorageServiceUpdateEdgeArgs{
  return &GraphStorageServiceUpdateEdgeArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceUpdateEdgeArgsBuilder) Req(req *UpdateEdgeRequest) *GraphStorageServiceUpdateEdgeArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceUpdateEdgeArgs) SetReq(req *UpdateEdgeRequest) *GraphStorageServiceUpdateEdgeArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceUpdateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateEdgeRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceUpdateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceUpdateEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceUpdateEdgeResult struct {
  thrift.IResponse
  Success *UpdateResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceUpdateEdgeResult() *GraphStorageServiceUpdateEdgeResult {
  return &GraphStorageServiceUpdateEdgeResult{}
}

var GraphStorageServiceUpdateEdgeResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceUpdateEdgeResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceUpdateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceUpdateEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceUpdateEdgeResultBuilder struct {
  obj *GraphStorageServiceUpdateEdgeResult
}

func NewGraphStorageServiceUpdateEdgeResultBuilder() *GraphStorageServiceUpdateEdgeResultBuilder{
  return &GraphStorageServiceUpdateEdgeResultBuilder{
    obj: NewGraphStorageServiceUpdateEdgeResult(),
  }
}

func (p GraphStorageServiceUpdateEdgeResultBuilder) Emit() *GraphStorageServiceUpdateEdgeResult{
  return &GraphStorageServiceUpdateEdgeResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceUpdateEdgeResultBuilder) Success(success *UpdateResponse) *GraphStorageServiceUpdateEdgeResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceUpdateEdgeResult) SetSuccess(success *UpdateResponse) *GraphStorageServiceUpdateEdgeResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceUpdateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewUpdateResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("updateEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceUpdateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceUpdateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceUpdateEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceScanVertexArgs struct {
  thrift.IRequest
  Req *ScanVertexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceScanVertexArgs() *GraphStorageServiceScanVertexArgs {
  return &GraphStorageServiceScanVertexArgs{
    Req: NewScanVertexRequest(),
  }
}

var GraphStorageServiceScanVertexArgs_Req_DEFAULT *ScanVertexRequest
func (p *GraphStorageServiceScanVertexArgs) GetReq() *ScanVertexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceScanVertexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceScanVertexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceScanVertexArgsBuilder struct {
  obj *GraphStorageServiceScanVertexArgs
}

func NewGraphStorageServiceScanVertexArgsBuilder() *GraphStorageServiceScanVertexArgsBuilder{
  return &GraphStorageServiceScanVertexArgsBuilder{
    obj: NewGraphStorageServiceScanVertexArgs(),
  }
}

func (p GraphStorageServiceScanVertexArgsBuilder) Emit() *GraphStorageServiceScanVertexArgs{
  return &GraphStorageServiceScanVertexArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceScanVertexArgsBuilder) Req(req *ScanVertexRequest) *GraphStorageServiceScanVertexArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceScanVertexArgs) SetReq(req *ScanVertexRequest) *GraphStorageServiceScanVertexArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceScanVertexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewScanVertexRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scanVertex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanVertexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceScanVertexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceScanVertexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceScanVertexResult struct {
  thrift.IResponse
  Success *ScanResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceScanVertexResult() *GraphStorageServiceScanVertexResult {
  return &GraphStorageServiceScanVertexResult{}
}

var GraphStorageServiceScanVertexResult_Success_DEFAULT *ScanResponse
func (p *GraphStorageServiceScanVertexResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceScanVertexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceScanVertexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceScanVertexResultBuilder struct {
  obj *GraphStorageServiceScanVertexResult
}

func NewGraphStorageServiceScanVertexResultBuilder() *GraphStorageServiceScanVertexResultBuilder{
  return &GraphStorageServiceScanVertexResultBuilder{
    obj: NewGraphStorageServiceScanVertexResult(),
  }
}

func (p GraphStorageServiceScanVertexResultBuilder) Emit() *GraphStorageServiceScanVertexResult{
  return &GraphStorageServiceScanVertexResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceScanVertexResultBuilder) Success(success *ScanResponse) *GraphStorageServiceScanVertexResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceScanVertexResult) SetSuccess(success *ScanResponse) *GraphStorageServiceScanVertexResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceScanVertexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewScanResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceScanVertexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scanVertex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanVertexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceScanVertexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceScanVertexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceScanEdgeArgs struct {
  thrift.IRequest
  Req *ScanEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceScanEdgeArgs() *GraphStorageServiceScanEdgeArgs {
  return &GraphStorageServiceScanEdgeArgs{
    Req: NewScanEdgeRequest(),
  }
}

var GraphStorageServiceScanEdgeArgs_Req_DEFAULT *ScanEdgeRequest
func (p *GraphStorageServiceScanEdgeArgs) GetReq() *ScanEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceScanEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceScanEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceScanEdgeArgsBuilder struct {
  obj *GraphStorageServiceScanEdgeArgs
}

func NewGraphStorageServiceScanEdgeArgsBuilder() *GraphStorageServiceScanEdgeArgsBuilder{
  return &GraphStorageServiceScanEdgeArgsBuilder{
    obj: NewGraphStorageServiceScanEdgeArgs(),
  }
}

func (p GraphStorageServiceScanEdgeArgsBuilder) Emit() *GraphStorageServiceScanEdgeArgs{
  return &GraphStorageServiceScanEdgeArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceScanEdgeArgsBuilder) Req(req *ScanEdgeRequest) *GraphStorageServiceScanEdgeArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceScanEdgeArgs) SetReq(req *ScanEdgeRequest) *GraphStorageServiceScanEdgeArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceScanEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewScanEdgeRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scanEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceScanEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceScanEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceScanEdgeResult struct {
  thrift.IResponse
  Success *ScanResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceScanEdgeResult() *GraphStorageServiceScanEdgeResult {
  return &GraphStorageServiceScanEdgeResult{}
}

var GraphStorageServiceScanEdgeResult_Success_DEFAULT *ScanResponse
func (p *GraphStorageServiceScanEdgeResult) GetSuccess() *ScanResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceScanEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceScanEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceScanEdgeResultBuilder struct {
  obj *GraphStorageServiceScanEdgeResult
}

func NewGraphStorageServiceScanEdgeResultBuilder() *GraphStorageServiceScanEdgeResultBuilder{
  return &GraphStorageServiceScanEdgeResultBuilder{
    obj: NewGraphStorageServiceScanEdgeResult(),
  }
}

func (p GraphStorageServiceScanEdgeResultBuilder) Emit() *GraphStorageServiceScanEdgeResult{
  return &GraphStorageServiceScanEdgeResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceScanEdgeResultBuilder) Success(success *ScanResponse) *GraphStorageServiceScanEdgeResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceScanEdgeResult) SetSuccess(success *ScanResponse) *GraphStorageServiceScanEdgeResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceScanEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewScanResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("scanEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceScanEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceScanEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceScanEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceGetUUIDArgs struct {
  thrift.IRequest
  Req *GetUUIDReq `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetUUIDArgs() *GraphStorageServiceGetUUIDArgs {
  return &GraphStorageServiceGetUUIDArgs{
    Req: NewGetUUIDReq(),
  }
}

var GraphStorageServiceGetUUIDArgs_Req_DEFAULT *GetUUIDReq
func (p *GraphStorageServiceGetUUIDArgs) GetReq() *GetUUIDReq {
  if !p.IsSetReq() {
    return GraphStorageServiceGetUUIDArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetUUIDArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceGetUUIDArgsBuilder struct {
  obj *GraphStorageServiceGetUUIDArgs
}

func NewGraphStorageServiceGetUUIDArgsBuilder() *GraphStorageServiceGetUUIDArgsBuilder{
  return &GraphStorageServiceGetUUIDArgsBuilder{
    obj: NewGraphStorageServiceGetUUIDArgs(),
  }
}

func (p GraphStorageServiceGetUUIDArgsBuilder) Emit() *GraphStorageServiceGetUUIDArgs{
  return &GraphStorageServiceGetUUIDArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceGetUUIDArgsBuilder) Req(req *GetUUIDReq) *GraphStorageServiceGetUUIDArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceGetUUIDArgs) SetReq(req *GetUUIDReq) *GraphStorageServiceGetUUIDArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceGetUUIDArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewGetUUIDReq()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetUUIDArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceGetUUIDArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceGetUUIDResult struct {
  thrift.IResponse
  Success *GetUUIDResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetUUIDResult() *GraphStorageServiceGetUUIDResult {
  return &GraphStorageServiceGetUUIDResult{}
}

var GraphStorageServiceGetUUIDResult_Success_DEFAULT *GetUUIDResp
func (p *GraphStorageServiceGetUUIDResult) GetSuccess() *GetUUIDResp {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetUUIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetUUIDResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceGetUUIDResultBuilder struct {
  obj *GraphStorageServiceGetUUIDResult
}

func NewGraphStorageServiceGetUUIDResultBuilder() *GraphStorageServiceGetUUIDResultBuilder{
  return &GraphStorageServiceGetUUIDResultBuilder{
    obj: NewGraphStorageServiceGetUUIDResult(),
  }
}

func (p GraphStorageServiceGetUUIDResultBuilder) Emit() *GraphStorageServiceGetUUIDResult{
  return &GraphStorageServiceGetUUIDResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceGetUUIDResultBuilder) Success(success *GetUUIDResp) *GraphStorageServiceGetUUIDResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceGetUUIDResult) SetSuccess(success *GetUUIDResp) *GraphStorageServiceGetUUIDResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceGetUUIDResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetUUIDResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("getUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetUUIDResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceGetUUIDResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceLookupIndexArgs struct {
  thrift.IRequest
  Req *LookupIndexRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceLookupIndexArgs() *GraphStorageServiceLookupIndexArgs {
  return &GraphStorageServiceLookupIndexArgs{
    Req: NewLookupIndexRequest(),
  }
}

var GraphStorageServiceLookupIndexArgs_Req_DEFAULT *LookupIndexRequest
func (p *GraphStorageServiceLookupIndexArgs) GetReq() *LookupIndexRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceLookupIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceLookupIndexArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceLookupIndexArgsBuilder struct {
  obj *GraphStorageServiceLookupIndexArgs
}

func NewGraphStorageServiceLookupIndexArgsBuilder() *GraphStorageServiceLookupIndexArgsBuilder{
  return &GraphStorageServiceLookupIndexArgsBuilder{
    obj: NewGraphStorageServiceLookupIndexArgs(),
  }
}

func (p GraphStorageServiceLookupIndexArgsBuilder) Emit() *GraphStorageServiceLookupIndexArgs{
  return &GraphStorageServiceLookupIndexArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceLookupIndexArgsBuilder) Req(req *LookupIndexRequest) *GraphStorageServiceLookupIndexArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceLookupIndexArgs) SetReq(req *LookupIndexRequest) *GraphStorageServiceLookupIndexArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceLookupIndexArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewLookupIndexRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("lookupIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupIndexArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceLookupIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceLookupIndexArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceLookupIndexResult struct {
  thrift.IResponse
  Success *LookupIndexResp `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceLookupIndexResult() *GraphStorageServiceLookupIndexResult {
  return &GraphStorageServiceLookupIndexResult{}
}

var GraphStorageServiceLookupIndexResult_Success_DEFAULT *LookupIndexResp
func (p *GraphStorageServiceLookupIndexResult) GetSuccess() *LookupIndexResp {
  if !p.IsSetSuccess() {
    return GraphStorageServiceLookupIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceLookupIndexResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceLookupIndexResultBuilder struct {
  obj *GraphStorageServiceLookupIndexResult
}

func NewGraphStorageServiceLookupIndexResultBuilder() *GraphStorageServiceLookupIndexResultBuilder{
  return &GraphStorageServiceLookupIndexResultBuilder{
    obj: NewGraphStorageServiceLookupIndexResult(),
  }
}

func (p GraphStorageServiceLookupIndexResultBuilder) Emit() *GraphStorageServiceLookupIndexResult{
  return &GraphStorageServiceLookupIndexResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceLookupIndexResultBuilder) Success(success *LookupIndexResp) *GraphStorageServiceLookupIndexResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceLookupIndexResult) SetSuccess(success *LookupIndexResp) *GraphStorageServiceLookupIndexResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceLookupIndexResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewLookupIndexResp()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("lookupIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupIndexResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceLookupIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceLookupIndexResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceLookupAndTraverseArgs struct {
  thrift.IRequest
  Req *LookupAndTraverseRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceLookupAndTraverseArgs() *GraphStorageServiceLookupAndTraverseArgs {
  return &GraphStorageServiceLookupAndTraverseArgs{
    Req: NewLookupAndTraverseRequest(),
  }
}

var GraphStorageServiceLookupAndTraverseArgs_Req_DEFAULT *LookupAndTraverseRequest
func (p *GraphStorageServiceLookupAndTraverseArgs) GetReq() *LookupAndTraverseRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceLookupAndTraverseArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceLookupAndTraverseArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceLookupAndTraverseArgsBuilder struct {
  obj *GraphStorageServiceLookupAndTraverseArgs
}

func NewGraphStorageServiceLookupAndTraverseArgsBuilder() *GraphStorageServiceLookupAndTraverseArgsBuilder{
  return &GraphStorageServiceLookupAndTraverseArgsBuilder{
    obj: NewGraphStorageServiceLookupAndTraverseArgs(),
  }
}

func (p GraphStorageServiceLookupAndTraverseArgsBuilder) Emit() *GraphStorageServiceLookupAndTraverseArgs{
  return &GraphStorageServiceLookupAndTraverseArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceLookupAndTraverseArgsBuilder) Req(req *LookupAndTraverseRequest) *GraphStorageServiceLookupAndTraverseArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceLookupAndTraverseArgs) SetReq(req *LookupAndTraverseRequest) *GraphStorageServiceLookupAndTraverseArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceLookupAndTraverseArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewLookupAndTraverseRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("lookupAndTraverse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceLookupAndTraverseArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceLookupAndTraverseArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceLookupAndTraverseResult struct {
  thrift.IResponse
  Success *GetNeighborsResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceLookupAndTraverseResult() *GraphStorageServiceLookupAndTraverseResult {
  return &GraphStorageServiceLookupAndTraverseResult{}
}

var GraphStorageServiceLookupAndTraverseResult_Success_DEFAULT *GetNeighborsResponse
func (p *GraphStorageServiceLookupAndTraverseResult) GetSuccess() *GetNeighborsResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceLookupAndTraverseResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceLookupAndTraverseResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceLookupAndTraverseResultBuilder struct {
  obj *GraphStorageServiceLookupAndTraverseResult
}

func NewGraphStorageServiceLookupAndTraverseResultBuilder() *GraphStorageServiceLookupAndTraverseResultBuilder{
  return &GraphStorageServiceLookupAndTraverseResultBuilder{
    obj: NewGraphStorageServiceLookupAndTraverseResult(),
  }
}

func (p GraphStorageServiceLookupAndTraverseResultBuilder) Emit() *GraphStorageServiceLookupAndTraverseResult{
  return &GraphStorageServiceLookupAndTraverseResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceLookupAndTraverseResultBuilder) Success(success *GetNeighborsResponse) *GraphStorageServiceLookupAndTraverseResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceLookupAndTraverseResult) SetSuccess(success *GetNeighborsResponse) *GraphStorageServiceLookupAndTraverseResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceLookupAndTraverseResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewGetNeighborsResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("lookupAndTraverse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceLookupAndTraverseResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceLookupAndTraverseResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceLookupAndTraverseResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceChainUpdateEdgeArgs struct {
  thrift.IRequest
  Req *UpdateEdgeRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainUpdateEdgeArgs() *GraphStorageServiceChainUpdateEdgeArgs {
  return &GraphStorageServiceChainUpdateEdgeArgs{
    Req: NewUpdateEdgeRequest(),
  }
}

var GraphStorageServiceChainUpdateEdgeArgs_Req_DEFAULT *UpdateEdgeRequest
func (p *GraphStorageServiceChainUpdateEdgeArgs) GetReq() *UpdateEdgeRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainUpdateEdgeArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainUpdateEdgeArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceChainUpdateEdgeArgsBuilder struct {
  obj *GraphStorageServiceChainUpdateEdgeArgs
}

func NewGraphStorageServiceChainUpdateEdgeArgsBuilder() *GraphStorageServiceChainUpdateEdgeArgsBuilder{
  return &GraphStorageServiceChainUpdateEdgeArgsBuilder{
    obj: NewGraphStorageServiceChainUpdateEdgeArgs(),
  }
}

func (p GraphStorageServiceChainUpdateEdgeArgsBuilder) Emit() *GraphStorageServiceChainUpdateEdgeArgs{
  return &GraphStorageServiceChainUpdateEdgeArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceChainUpdateEdgeArgsBuilder) Req(req *UpdateEdgeRequest) *GraphStorageServiceChainUpdateEdgeArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceChainUpdateEdgeArgs) SetReq(req *UpdateEdgeRequest) *GraphStorageServiceChainUpdateEdgeArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewUpdateEdgeRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainUpdateEdge_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainUpdateEdgeArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceChainUpdateEdgeArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceChainUpdateEdgeResult struct {
  thrift.IResponse
  Success *UpdateResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainUpdateEdgeResult() *GraphStorageServiceChainUpdateEdgeResult {
  return &GraphStorageServiceChainUpdateEdgeResult{}
}

var GraphStorageServiceChainUpdateEdgeResult_Success_DEFAULT *UpdateResponse
func (p *GraphStorageServiceChainUpdateEdgeResult) GetSuccess() *UpdateResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainUpdateEdgeResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainUpdateEdgeResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceChainUpdateEdgeResultBuilder struct {
  obj *GraphStorageServiceChainUpdateEdgeResult
}

func NewGraphStorageServiceChainUpdateEdgeResultBuilder() *GraphStorageServiceChainUpdateEdgeResultBuilder{
  return &GraphStorageServiceChainUpdateEdgeResultBuilder{
    obj: NewGraphStorageServiceChainUpdateEdgeResult(),
  }
}

func (p GraphStorageServiceChainUpdateEdgeResultBuilder) Emit() *GraphStorageServiceChainUpdateEdgeResult{
  return &GraphStorageServiceChainUpdateEdgeResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceChainUpdateEdgeResultBuilder) Success(success *UpdateResponse) *GraphStorageServiceChainUpdateEdgeResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceChainUpdateEdgeResult) SetSuccess(success *UpdateResponse) *GraphStorageServiceChainUpdateEdgeResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceChainUpdateEdgeResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewUpdateResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainUpdateEdge_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainUpdateEdgeResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainUpdateEdgeResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceChainUpdateEdgeResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceChainAddEdgesArgs struct {
  thrift.IRequest
  Req *AddEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainAddEdgesArgs() *GraphStorageServiceChainAddEdgesArgs {
  return &GraphStorageServiceChainAddEdgesArgs{
    Req: NewAddEdgesRequest(),
  }
}

var GraphStorageServiceChainAddEdgesArgs_Req_DEFAULT *AddEdgesRequest
func (p *GraphStorageServiceChainAddEdgesArgs) GetReq() *AddEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainAddEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainAddEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceChainAddEdgesArgsBuilder struct {
  obj *GraphStorageServiceChainAddEdgesArgs
}

func NewGraphStorageServiceChainAddEdgesArgsBuilder() *GraphStorageServiceChainAddEdgesArgsBuilder{
  return &GraphStorageServiceChainAddEdgesArgsBuilder{
    obj: NewGraphStorageServiceChainAddEdgesArgs(),
  }
}

func (p GraphStorageServiceChainAddEdgesArgsBuilder) Emit() *GraphStorageServiceChainAddEdgesArgs{
  return &GraphStorageServiceChainAddEdgesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceChainAddEdgesArgsBuilder) Req(req *AddEdgesRequest) *GraphStorageServiceChainAddEdgesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceChainAddEdgesArgs) SetReq(req *AddEdgesRequest) *GraphStorageServiceChainAddEdgesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceChainAddEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewAddEdgesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainAddEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainAddEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceChainAddEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceChainAddEdgesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainAddEdgesResult() *GraphStorageServiceChainAddEdgesResult {
  return &GraphStorageServiceChainAddEdgesResult{}
}

var GraphStorageServiceChainAddEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceChainAddEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainAddEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainAddEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceChainAddEdgesResultBuilder struct {
  obj *GraphStorageServiceChainAddEdgesResult
}

func NewGraphStorageServiceChainAddEdgesResultBuilder() *GraphStorageServiceChainAddEdgesResultBuilder{
  return &GraphStorageServiceChainAddEdgesResultBuilder{
    obj: NewGraphStorageServiceChainAddEdgesResult(),
  }
}

func (p GraphStorageServiceChainAddEdgesResultBuilder) Emit() *GraphStorageServiceChainAddEdgesResult{
  return &GraphStorageServiceChainAddEdgesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceChainAddEdgesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceChainAddEdgesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceChainAddEdgesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceChainAddEdgesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceChainAddEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainAddEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainAddEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainAddEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceChainAddEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceChainDeleteEdgesArgs struct {
  thrift.IRequest
  Req *DeleteEdgesRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceChainDeleteEdgesArgs() *GraphStorageServiceChainDeleteEdgesArgs {
  return &GraphStorageServiceChainDeleteEdgesArgs{
    Req: NewDeleteEdgesRequest(),
  }
}

var GraphStorageServiceChainDeleteEdgesArgs_Req_DEFAULT *DeleteEdgesRequest
func (p *GraphStorageServiceChainDeleteEdgesArgs) GetReq() *DeleteEdgesRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceChainDeleteEdgesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceChainDeleteEdgesArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceChainDeleteEdgesArgsBuilder struct {
  obj *GraphStorageServiceChainDeleteEdgesArgs
}

func NewGraphStorageServiceChainDeleteEdgesArgsBuilder() *GraphStorageServiceChainDeleteEdgesArgsBuilder{
  return &GraphStorageServiceChainDeleteEdgesArgsBuilder{
    obj: NewGraphStorageServiceChainDeleteEdgesArgs(),
  }
}

func (p GraphStorageServiceChainDeleteEdgesArgsBuilder) Emit() *GraphStorageServiceChainDeleteEdgesArgs{
  return &GraphStorageServiceChainDeleteEdgesArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceChainDeleteEdgesArgsBuilder) Req(req *DeleteEdgesRequest) *GraphStorageServiceChainDeleteEdgesArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceChainDeleteEdgesArgs) SetReq(req *DeleteEdgesRequest) *GraphStorageServiceChainDeleteEdgesArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewDeleteEdgesRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainDeleteEdges_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceChainDeleteEdgesArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceChainDeleteEdgesArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceChainDeleteEdgesResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceChainDeleteEdgesResult() *GraphStorageServiceChainDeleteEdgesResult {
  return &GraphStorageServiceChainDeleteEdgesResult{}
}

var GraphStorageServiceChainDeleteEdgesResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceChainDeleteEdgesResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceChainDeleteEdgesResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceChainDeleteEdgesResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceChainDeleteEdgesResultBuilder struct {
  obj *GraphStorageServiceChainDeleteEdgesResult
}

func NewGraphStorageServiceChainDeleteEdgesResultBuilder() *GraphStorageServiceChainDeleteEdgesResultBuilder{
  return &GraphStorageServiceChainDeleteEdgesResultBuilder{
    obj: NewGraphStorageServiceChainDeleteEdgesResult(),
  }
}

func (p GraphStorageServiceChainDeleteEdgesResultBuilder) Emit() *GraphStorageServiceChainDeleteEdgesResult{
  return &GraphStorageServiceChainDeleteEdgesResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceChainDeleteEdgesResultBuilder) Success(success *ExecResponse) *GraphStorageServiceChainDeleteEdgesResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceChainDeleteEdgesResult) SetSuccess(success *ExecResponse) *GraphStorageServiceChainDeleteEdgesResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceChainDeleteEdgesResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("chainDeleteEdges_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceChainDeleteEdgesResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceChainDeleteEdgesResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceChainDeleteEdgesResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceGetArgs struct {
  thrift.IRequest
  Req *KVGetRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceGetArgs() *GraphStorageServiceGetArgs {
  return &GraphStorageServiceGetArgs{
    Req: NewKVGetRequest(),
  }
}

var GraphStorageServiceGetArgs_Req_DEFAULT *KVGetRequest
func (p *GraphStorageServiceGetArgs) GetReq() *KVGetRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceGetArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceGetArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceGetArgsBuilder struct {
  obj *GraphStorageServiceGetArgs
}

func NewGraphStorageServiceGetArgsBuilder() *GraphStorageServiceGetArgsBuilder{
  return &GraphStorageServiceGetArgsBuilder{
    obj: NewGraphStorageServiceGetArgs(),
  }
}

func (p GraphStorageServiceGetArgsBuilder) Emit() *GraphStorageServiceGetArgs{
  return &GraphStorageServiceGetArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceGetArgsBuilder) Req(req *KVGetRequest) *GraphStorageServiceGetArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceGetArgs) SetReq(req *KVGetRequest) *GraphStorageServiceGetArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceGetArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewKVGetRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceGetArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceGetArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceGetResult struct {
  thrift.IResponse
  Success *KVGetResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceGetResult() *GraphStorageServiceGetResult {
  return &GraphStorageServiceGetResult{}
}

var GraphStorageServiceGetResult_Success_DEFAULT *KVGetResponse
func (p *GraphStorageServiceGetResult) GetSuccess() *KVGetResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceGetResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceGetResultBuilder struct {
  obj *GraphStorageServiceGetResult
}

func NewGraphStorageServiceGetResultBuilder() *GraphStorageServiceGetResultBuilder{
  return &GraphStorageServiceGetResultBuilder{
    obj: NewGraphStorageServiceGetResult(),
  }
}

func (p GraphStorageServiceGetResultBuilder) Emit() *GraphStorageServiceGetResult{
  return &GraphStorageServiceGetResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceGetResultBuilder) Success(success *KVGetResponse) *GraphStorageServiceGetResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceGetResult) SetSuccess(success *KVGetResponse) *GraphStorageServiceGetResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceGetResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceGetResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewKVGetResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceGetResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceGetResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceGetResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServicePutArgs struct {
  thrift.IRequest
  Req *KVPutRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServicePutArgs() *GraphStorageServicePutArgs {
  return &GraphStorageServicePutArgs{
    Req: NewKVPutRequest(),
  }
}

var GraphStorageServicePutArgs_Req_DEFAULT *KVPutRequest
func (p *GraphStorageServicePutArgs) GetReq() *KVPutRequest {
  if !p.IsSetReq() {
    return GraphStorageServicePutArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServicePutArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServicePutArgsBuilder struct {
  obj *GraphStorageServicePutArgs
}

func NewGraphStorageServicePutArgsBuilder() *GraphStorageServicePutArgsBuilder{
  return &GraphStorageServicePutArgsBuilder{
    obj: NewGraphStorageServicePutArgs(),
  }
}

func (p GraphStorageServicePutArgsBuilder) Emit() *GraphStorageServicePutArgs{
  return &GraphStorageServicePutArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServicePutArgsBuilder) Req(req *KVPutRequest) *GraphStorageServicePutArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServicePutArgs) SetReq(req *KVPutRequest) *GraphStorageServicePutArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServicePutArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServicePutArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewKVPutRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServicePutArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServicePutArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServicePutArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServicePutResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServicePutResult() *GraphStorageServicePutResult {
  return &GraphStorageServicePutResult{}
}

var GraphStorageServicePutResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServicePutResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServicePutResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServicePutResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServicePutResultBuilder struct {
  obj *GraphStorageServicePutResult
}

func NewGraphStorageServicePutResultBuilder() *GraphStorageServicePutResultBuilder{
  return &GraphStorageServicePutResultBuilder{
    obj: NewGraphStorageServicePutResult(),
  }
}

func (p GraphStorageServicePutResultBuilder) Emit() *GraphStorageServicePutResult{
  return &GraphStorageServicePutResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServicePutResultBuilder) Success(success *ExecResponse) *GraphStorageServicePutResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServicePutResult) SetSuccess(success *ExecResponse) *GraphStorageServicePutResult {
  g.Success = success
  return g
}

func (p *GraphStorageServicePutResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServicePutResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServicePutResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServicePutResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServicePutResult({Success:%s})", successVal)
}

// Attributes:
//  - Req
type GraphStorageServiceRemoveArgs struct {
  thrift.IRequest
  Req *KVRemoveRequest `thrift:"req,1" db:"req" json:"req"`
}

func NewGraphStorageServiceRemoveArgs() *GraphStorageServiceRemoveArgs {
  return &GraphStorageServiceRemoveArgs{
    Req: NewKVRemoveRequest(),
  }
}

var GraphStorageServiceRemoveArgs_Req_DEFAULT *KVRemoveRequest
func (p *GraphStorageServiceRemoveArgs) GetReq() *KVRemoveRequest {
  if !p.IsSetReq() {
    return GraphStorageServiceRemoveArgs_Req_DEFAULT
  }
return p.Req
}
func (p *GraphStorageServiceRemoveArgs) IsSetReq() bool {
  return p != nil && p.Req != nil
}

type GraphStorageServiceRemoveArgsBuilder struct {
  obj *GraphStorageServiceRemoveArgs
}

func NewGraphStorageServiceRemoveArgsBuilder() *GraphStorageServiceRemoveArgsBuilder{
  return &GraphStorageServiceRemoveArgsBuilder{
    obj: NewGraphStorageServiceRemoveArgs(),
  }
}

func (p GraphStorageServiceRemoveArgsBuilder) Emit() *GraphStorageServiceRemoveArgs{
  return &GraphStorageServiceRemoveArgs{
    Req: p.obj.Req,
  }
}

func (g *GraphStorageServiceRemoveArgsBuilder) Req(req *KVRemoveRequest) *GraphStorageServiceRemoveArgsBuilder {
  g.obj.Req = req
  return g
}

func (g *GraphStorageServiceRemoveArgs) SetReq(req *KVRemoveRequest) *GraphStorageServiceRemoveArgs {
  g.Req = req
  return g
}

func (p *GraphStorageServiceRemoveArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Req = NewKVRemoveRequest()
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceRemoveArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *GraphStorageServiceRemoveArgs) String() string {
  if p == nil {
    return "<nil>"
  }

  var reqVal string
  if p.Req == nil {
    reqVal = "<nil>"
  } else {
    reqVal = fmt.Sprintf("%v", p.Req)
  }
  return fmt.Sprintf("GraphStorageServiceRemoveArgs({Req:%s})", reqVal)
}

// Attributes:
//  - Success
type GraphStorageServiceRemoveResult struct {
  thrift.IResponse
  Success *ExecResponse `thrift:"success,0,optional" db:"success" json:"success,omitempty"`
}

func NewGraphStorageServiceRemoveResult() *GraphStorageServiceRemoveResult {
  return &GraphStorageServiceRemoveResult{}
}

var GraphStorageServiceRemoveResult_Success_DEFAULT *ExecResponse
func (p *GraphStorageServiceRemoveResult) GetSuccess() *ExecResponse {
  if !p.IsSetSuccess() {
    return GraphStorageServiceRemoveResult_Success_DEFAULT
  }
return p.Success
}
func (p *GraphStorageServiceRemoveResult) IsSetSuccess() bool {
  return p != nil && p.Success != nil
}

type GraphStorageServiceRemoveResultBuilder struct {
  obj *GraphStorageServiceRemoveResult
}

func NewGraphStorageServiceRemoveResultBuilder() *GraphStorageServiceRemoveResultBuilder{
  return &GraphStorageServiceRemoveResultBuilder{
    obj: NewGraphStorageServiceRemoveResult(),
  }
}

func (p GraphStorageServiceRemoveResultBuilder) Emit() *GraphStorageServiceRemoveResult{
  return &GraphStorageServiceRemoveResult{
    Success: p.obj.Success,
  }
}

func (g *GraphStorageServiceRemoveResultBuilder) Success(success *ExecResponse) *GraphStorageServiceRemoveResultBuilder {
  g.obj.Success = success
  return g
}

func (g *GraphStorageServiceRemoveResult) SetSuccess(success *ExecResponse) *GraphStorageServiceRemoveResult {
  g.Success = success
  return g
}

func (p *GraphStorageServiceRemoveResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewExecResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GraphStorageServiceRemoveResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("remove_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GraphStorageServiceRemoveResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GraphStorageServiceRemoveResult) String() string {
  if p == nil {
    return "<nil>"
  }

  var successVal string
  if p.Success == nil {
    successVal = "<nil>"
  } else {
    successVal = fmt.Sprintf("%v", p.Success)
  }
  return fmt.Sprintf("GraphStorageServiceRemoveResult({Success:%s})", successVal)
}


